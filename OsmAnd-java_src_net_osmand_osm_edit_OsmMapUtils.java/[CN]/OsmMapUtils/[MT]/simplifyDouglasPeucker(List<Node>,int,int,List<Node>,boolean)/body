{
  if (zoom > 31) {
    zoom=31;
  }
  boolean[] kept=new boolean[n.size()];
  int first=0;
  int nsize=n.size();
  while (first < nsize) {
    if (n.get(first) != null) {
      break;
    }
    first++;
  }
  int last=nsize - 1;
  while (last >= 0) {
    if (n.get(last) != null) {
      break;
    }
    last--;
  }
  if (last - first < 1) {
    return kept;
  }
  boolean checkCycle=true;
  boolean cycle=false;
  while (checkCycle && last > first) {
    checkCycle=false;
    double x1=MapUtils.getTileNumberX(zoom,n.get(first).getLongitude());
    double y1=MapUtils.getTileNumberY(zoom,n.get(first).getLatitude());
    double x2=MapUtils.getTileNumberX(zoom,n.get(last).getLongitude());
    double y2=MapUtils.getTileNumberY(zoom,n.get(last).getLatitude());
    if (Math.abs(x1 - x2) + Math.abs(y1 - y2) < 0.001) {
      last--;
      cycle=true;
      checkCycle=true;
    }
  }
  if (last - first < 1) {
    return kept;
  }
  simplifyDouglasPeucker(n,zoom,epsilon,kept,first,last,avoidNooses);
  result.add(n.get(first));
  for (int i=0; i < kept.length; i++) {
    if (kept[i]) {
      result.add(n.get(i));
    }
  }
  if (cycle) {
    result.add(n.get(first));
    kept[first]=true;
  }
  return kept;
}
