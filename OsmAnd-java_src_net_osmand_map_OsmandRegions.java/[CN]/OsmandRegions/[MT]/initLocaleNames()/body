{
  final Map<String,String> parentRelations=new LinkedHashMap<String,String>();
  final ResultMatcher<BinaryMapDataObject> resultMatcher=new ResultMatcher<BinaryMapDataObject>(){
    @Override public boolean publish(    BinaryMapDataObject object){
      initTypes(object);
      int[] types=object.getTypes();
      for (int i=0; i < types.length; i++) {
        TagValuePair tp=object.getMapIndex().decodeType(types[i]);
        if ("boundary".equals(tp.value)) {
          return false;
        }
      }
      String parentFullName=getParentFullName(object);
      String fullName=getFullName(object);
      if (!Algorithms.isEmpty(parentFullName)) {
        fullNamesToParentFullNames.put(fullName,parentFullName);
        parentRelations.put(fullName,parentFullName);
      }
      String locName=getLocaleName(object);
      if (!Algorithms.isEmpty(locName)) {
        fullNamesToLocaleNames.put(fullName,locName);
        fullNamesNoParentToLocaleNames.put(fullName,locName);
      }
      MapIndex mi=object.getMapIndex();
      TIntObjectIterator<String> it=object.getObjectNames().iterator();
      StringBuilder ind=new StringBuilder();
      while (it.hasNext()) {
        it.advance();
        TagValuePair tp=mi.decodeType(it.key());
        if (tp.tag.equals("key_name") && Algorithms.isEmpty(locName)) {
          String str=Algorithms.capitalizeFirstLetterAndLowercase(it.value().replace('_','-'));
          fullNamesToLocaleNames.put(fullName,str);
          fullNamesNoParentToLocaleNames.put(fullName,str);
        }
        if (tp.tag.startsWith("name") || tp.tag.equals("key_name")) {
          final String vl=it.value().toLowerCase();
          if (ind.indexOf(vl) == -1) {
            ind.append(" ").append(vl);
          }
        }
      }
      fullNamesToLowercaseIndex.put(fullName,ind.toString());
      String downloadName=getDownloadName(object);
      if (downloadName != null) {
        fullNamesToDownloadNames.put(fullName,downloadName);
        downloadNamesToFullNames.put(downloadName,fullName);
        if (isDownloadOfType(object,MAP_TYPE)) {
          fullMapNamesToDownloadNames.put(fullName,downloadName);
        }
      }
      return false;
    }
    @Override public boolean isCancelled(){
      return false;
    }
  }
;
  iterateOverAllObjects(resultMatcher);
  for (  Map.Entry<String,String> e : parentRelations.entrySet()) {
    String fullName=e.getKey();
    String parentFullName=e.getValue();
    String parentParentFulName=parentRelations.get(parentFullName);
    if (!Algorithms.isEmpty(parentFullName) && !Algorithms.isEmpty(parentParentFulName)) {
      if (parentParentFulName.contains("russia") || parentParentFulName.contains("japan")) {
        parentFullName=parentParentFulName;
      }
      String locPrefix=fullNamesToLocaleNames.get(parentFullName);
      String locName=fullNamesToLocaleNames.get(fullName);
      if (locPrefix == null || locName == null) {
        throw new IllegalStateException("There is no prefix registered for " + fullName + " ("+ parentFullName+ ") ");
      }
      fullNamesToLocaleNames.put(fullName,locPrefix + " " + locName);
      fullNamesNoParentToLocaleNames.put(fullName,locName);
    }
  }
}
