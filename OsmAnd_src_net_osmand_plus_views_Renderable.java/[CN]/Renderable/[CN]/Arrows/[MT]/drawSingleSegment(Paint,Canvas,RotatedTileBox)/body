{
  if (culled != null && !culled.isEmpty() && zoom > 14 && QuadRect.trivialOverlap(tileBox.getLatLonBounds(),trackBounds)) {
    canvas.rotate(-tileBox.getRotate(),tileBox.getCenterPixelX(),tileBox.getCenterPixelY());
    float stroke=p.getStrokeWidth();
    p.setStrokeWidth(stroke * 1.5f);
    float sizer=(float)Math.pow(2.0,zoom - 18) * 128;
    int pCol=p.getColor();
    p.setColor(Color.RED);
    float lastx=Float.NEGATIVE_INFINITY;
    float lasty=Float.NEGATIVE_INFINITY;
    Path path=new Path();
    int h=tileBox.getPixHeight();
    int w=tileBox.getPixWidth();
    boolean broken=true;
    int intp=conveyor;
    float clipL=-sizer;
    float clipB=-sizer;
    float clipT=canvas.getHeight() + sizer;
    float clipR=canvas.getWidth() + sizer;
    for (    GPXUtilities.WptPt pt : culled) {
      intp--;
      float x=tileBox.getPixXFromLatLon(pt.lat,pt.lon);
      float y=tileBox.getPixYFromLatLon(pt.lat,pt.lon);
      boolean nextBroken=true;
      if (Math.min(x,lastx) < clipR && Math.max(x,lastx) > clipL && Math.min(y,lasty) < clipT && Math.max(y,lasty) > clipB) {
        if ((intp & 15) < 6) {
          p.setStrokeWidth(stroke * (0.75f + 1.f * (5 - (intp & 7)) / 2f));
          if (!broken) {
            canvas.drawLine(lastx,lasty,x,y,p);
          }
          nextBroken=false;
          if (zoom > 15 && (intp & 15) == 0) {
            double angle=Math.atan2(lasty - y,lastx - x);
            float newx1=x + (float)Math.sin(angle - 0.4 + Math.PI / 2) * sizer;
            float newy1=y - (float)Math.cos(angle - 0.4 + Math.PI / 2) * sizer;
            float newx2=x + (float)Math.sin(angle + 0.4 + Math.PI / 2) * sizer;
            float newy2=y - (float)Math.cos(angle + 0.4 + Math.PI / 2) * sizer;
            canvas.drawLine(newx1,newy1,x,y,p);
            canvas.drawLine(newx2,newy2,x,y,p);
          }
        }
      }
      broken=nextBroken;
      lastx=x;
      lasty=y;
    }
    canvas.rotate(tileBox.getRotate(),tileBox.getCenterPixelX(),tileBox.getCenterPixelY());
    p.setColor(pCol);
    p.setStrokeWidth(stroke);
  }
}
