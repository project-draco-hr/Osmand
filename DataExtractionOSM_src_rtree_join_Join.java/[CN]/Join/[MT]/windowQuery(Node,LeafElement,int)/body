{
  RTree nlTree=null;
  if (side == Join.LEFT)   nlTree=ltTree;
 else   nlTree=rtTree;
  List list=new ArrayList();
  Element[] elmts=nlNode.getAllElements();
  int totElements=nlNode.getTotalElements();
  for (int i=0; i < totElements; i++) {
    if (spLine.getPredicate().relateMismatch(elmts[i],lfElmt,side)) {
      if (elmts[i].getElementType() == Node.NONLEAF_NODE) {
        list.addAll(windowQuery(nlTree.getReadNode(elmts[i].getPtr()),lfElmt,side));
      }
 else {
        if (side == Join.LEFT)         list.add(p.paired(elmts[i],lfElmt));
 else         list.add(p.paired(lfElmt,elmts[i]));
      }
    }
  }
  return list;
}
