{
  double cBottomLatitude=dataBox.bottom;
  double cTopLatitude=dataBox.top;
  double cLeftLongitude=dataBox.left;
  double cRightLongitude=dataBox.right;
  log.info(String.format("BLat=%s, TLat=%s, LLong=%s, RLong=%s, zoom=%s",cBottomLatitude,cTopLatitude,cLeftLongitude,cRightLongitude,zoom));
  long now=System.currentTimeMillis();
  if (connections.isEmpty()) {
    cObjectsBox=dataBox;
    cObjects=new ArrayList<MapRenderObject>();
    return true;
  }
  try {
    int count=0;
    ArrayList<MapRenderObject> tempList=new ArrayList<MapRenderObject>();
    System.gc();
    TLongSet ids=new TLongHashSet();
    Map<Integer,List<MapRenderObject>> multiPolygons=new LinkedHashMap<Integer,List<MapRenderObject>>();
    for (    Connection c : connections.keySet()) {
      RectF r=connections.get(c);
      boolean intersects=r.top >= cBottomLatitude && r.left <= cRightLongitude && r.right >= cLeftLongitude && r.bottom <= cTopLatitude;
      if (!intersects) {
        continue;
      }
      PreparedStatement statement=null;
      if (zoom >= 15) {
        statement=pZoom0.get(c);
      }
 else       if (zoom >= 10) {
        statement=pZoom1.get(c);
      }
 else       if (zoom >= 6) {
        statement=pZoom2.get(c);
      }
 else {
        continue;
      }
      statement.setDouble(1,cBottomLatitude);
      statement.setDouble(2,cTopLatitude);
      statement.setDouble(3,cLeftLongitude);
      statement.setDouble(4,cRightLongitude);
      ResultSet result=statement.executeQuery();
      try {
        while (result.next()) {
          long id=result.getLong(1);
          if (PerformanceFlags.checkForDuplicateObjectIds) {
            if (ids.contains(id)) {
              continue;
            }
            ids.add(id);
          }
          int type=result.getInt(4);
          MapRenderObject obj=new MapRenderObject(id);
          obj.setType(type);
          obj.setData(result.getBytes(2));
          obj.setName(result.getString(3));
          count++;
          int mainType=obj.getMainType();
          registerMultipolygon(multiPolygons,mainType,obj);
          int sec=obj.getSecondType();
          if (sec != 0) {
            registerMultipolygon(multiPolygons,sec,obj);
          }
          for (int k=0; k < obj.getMultiTypes(); k++) {
            registerMultipolygon(multiPolygons,obj.getAdditionalType(k),obj);
          }
          if (checkWhetherInterrupted()) {
            return false;
          }
          tempList.add(obj);
        }
      }
  finally {
        result.close();
      }
    }
    int leftX=MapUtils.get31TileNumberX(cLeftLongitude);
    int rightX=MapUtils.get31TileNumberX(cRightLongitude);
    int bottomY=MapUtils.get31TileNumberY(cBottomLatitude);
    int topY=MapUtils.get31TileNumberY(cTopLatitude);
    List<MultyPolygon> pMulti=proccessMultiPolygons(multiPolygons,leftX,rightX,bottomY,topY);
    tempList.addAll(pMulti);
    log.info(String.format("Search has been done in %s ms. %s results were found.",System.currentTimeMillis() - now,count));
    cObjects=tempList;
    cObjectsBox=dataBox;
  }
 catch (  java.sql.SQLException e) {
    log.debug("Search failed",e);
    return false;
  }
  return true;
}
