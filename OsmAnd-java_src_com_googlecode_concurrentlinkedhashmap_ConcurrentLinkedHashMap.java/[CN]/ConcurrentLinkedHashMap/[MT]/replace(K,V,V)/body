{
  checkNotNull(key);
  checkNotNull(oldValue);
  checkNotNull(newValue);
  final int weight=weigher.weightOf(key,newValue);
  final WeightedValue<V> newWeightedValue=new WeightedValue<V>(newValue,weight);
  final Node<K,V> node=data.get(key);
  if (node == null) {
    return false;
  }
  for (; ; ) {
    final WeightedValue<V> weightedValue=node.get();
    if (!weightedValue.isAlive() || !weightedValue.contains(oldValue)) {
      return false;
    }
    if (node.compareAndSet(weightedValue,newWeightedValue)) {
      final int weightedDifference=weight - weightedValue.weight;
      if (weightedDifference == 0) {
        afterRead(node);
      }
 else {
        afterWrite(new UpdateTask(node,weightedDifference));
      }
      return true;
    }
  }
}
