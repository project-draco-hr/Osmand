{
  if (getView() == null) {
    return;
  }
  final TextView message=((TextView)getView().findViewById(R.id.message));
  final Button local=((Button)getView().findViewById(R.id.local_downloads));
  new AsyncTask<Void,Void,Void>(){
    int countMaps=0;
    long size=0;
    @Override protected Void doInBackground(    Void... params){
      updateCount(IndexConstants.MAPS_PATH);
      updateCount(IndexConstants.SRTM_INDEX_DIR);
      return null;
    }
    protected void updateCount(    String s){
      if (!DashDownloadMapsFragment.this.isAdded() || getMyApplication() == null) {
        return;
      }
      File ms=getMyApplication().getAppPath(s);
      if (ms.exists()) {
        File[] lf=ms.listFiles();
        if (lf != null) {
          for (          File f : ms.listFiles()) {
            if (f.getName().endsWith(IndexConstants.BINARY_MAP_INDEX_EXT)) {
              size+=f.length();
              countMaps++;
            }
          }
        }
      }
    }
    @Override protected void onPostExecute(    Void result){
      super.onPostExecute(result);
      if (!DashDownloadMapsFragment.this.isAdded() || getMyApplication() == null) {
        return;
      }
      if (countMaps > 0) {
        long mb=1 << 20;
        long gb=1 << 30;
        String sz=size > gb ? formatGb.format(new Object[]{(float)size / (gb)}) : formatMb.format(new Object[]{(float)size / mb});
        message.setText(getString(R.string.dash_download_msg,countMaps + "") + " (" + sz+ ")");
        local.setVisibility(View.VISIBLE);
      }
 else {
        message.setText(getString(R.string.dash_download_msg_none));
        local.setVisibility(View.GONE);
      }
    }
  }
.execute((Void)null);
}
