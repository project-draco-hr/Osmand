{
  MapData.Builder data=MapData.newBuilder();
  mapDataBuf.clear();
  int pcalcx=pleft;
  int pcalcy=ptop;
  for (int i=0; i < coordinates.length / 8; i++) {
    int x=Algoritms.parseIntFromBytes(coordinates,i * 8);
    int y=Algoritms.parseIntFromBytes(coordinates,i * 8 + 4);
    int tx=(x - pcalcx) >> SHIFT_COORDINATES;
    int ty=(y - pcalcy) >> SHIFT_COORDINATES;
    writeRawVarint32(mapDataBuf,tx);
    writeRawVarint32(mapDataBuf,ty);
    pcalcx=pcalcx + (tx << SHIFT_COORDINATES);
    pcalcy=pcalcy + (ty << SHIFT_COORDINATES);
  }
  COORDINATES_SIZE+=CodedOutputStream.computeRawVarint32Size(mapDataBuf.size()) + CodedOutputStream.computeTagSize(MapData.COORDINATES_FIELD_NUMBER) + mapDataBuf.size();
  if (area) {
    data.setAreaCoordinates(ByteString.copyFrom(mapDataBuf.toArray()));
  }
 else {
    data.setCoordinates(ByteString.copyFrom(mapDataBuf.toArray()));
  }
  if (innerPolygonTypes.length > 0) {
    mapDataBuf.clear();
    pcalcx=pleft;
    pcalcy=ptop;
    for (int i=0; i < innerPolygonTypes.length / 8; i++) {
      int x=Algoritms.parseIntFromBytes(coordinates,i * 8);
      int y=Algoritms.parseIntFromBytes(coordinates,i * 8 + 4);
      if (x == 0 && y == 0) {
        data.addPolygonInnerCoordinates(ByteString.copyFrom(mapDataBuf.toArray()));
        mapDataBuf.clear();
        pcalcx=pleft;
        pcalcy=ptop;
      }
 else {
        int tx=(x - pcalcx) >> SHIFT_COORDINATES;
        int ty=(y - pcalcy) >> SHIFT_COORDINATES;
        writeRawVarint32(mapDataBuf,tx);
        writeRawVarint32(mapDataBuf,ty);
        pcalcx=pcalcx + (tx << SHIFT_COORDINATES);
        pcalcy=pcalcy + (ty << SHIFT_COORDINATES);
      }
    }
  }
  data.setTypes(ByteString.copyFrom(types));
  TYPES_SIZE+=CodedOutputStream.computeTagSize(OsmandOdb.MapData.TYPES_FIELD_NUMBER) + CodedOutputStream.computeRawVarint32Size(types.length) + types.length;
  if (additionalTypes.length > 0) {
    data.setAdditionalTypes(ByteString.copyFrom(additionalTypes));
    TYPES_SIZE+=CodedOutputStream.computeTagSize(OsmandOdb.MapData.ADDITIONALTYPES_FIELD_NUMBER) + CodedOutputStream.computeRawVarint32Size(additionalTypes.length) + additionalTypes.length;
  }
  mapDataBuf.clear();
  for (  Entry<MapRulType,String> s : names.entrySet()) {
    writeRawVarint32(mapDataBuf,s.getKey().getTargetId());
    Integer ls=stringTable.get(s.getValue());
    if (ls == null) {
      ls=stringTable.size();
      stringTable.put(s.getValue(),ls);
    }
    writeRawVarint32(mapDataBuf,ls);
  }
  STRING_TABLE_SIZE+=mapDataBuf.size();
  data.setStringNames(ByteString.copyFrom(mapDataBuf.toArray()));
  data.setId(diffId);
  ID_SIZE+=CodedOutputStream.computeSInt64Size(OsmandOdb.MapData.ID_FIELD_NUMBER,diffId);
}
