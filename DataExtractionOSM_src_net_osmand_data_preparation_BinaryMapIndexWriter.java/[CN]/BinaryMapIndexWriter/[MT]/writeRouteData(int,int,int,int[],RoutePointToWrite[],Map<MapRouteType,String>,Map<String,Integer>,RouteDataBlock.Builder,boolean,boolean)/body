{
  RouteData.Builder builder=RouteData.newBuilder();
  builder.setRouteId(diffId);
  ROUTE_ID_SIZE+=CodedOutputStream.computeInt64Size(RouteData.ROUTEID_FIELD_NUMBER,diffId);
  mapDataBuf.clear();
  for (int i=0; i < types.length; i++) {
    writeRawVarint32(mapDataBuf,types[i]);
  }
  builder.setTypes(ByteString.copyFrom(mapDataBuf.toArray()));
  ROUTE_TYPES_SIZE+=CodedOutputStream.computeTagSize(RouteData.TYPES_FIELD_NUMBER) + CodedOutputStream.computeRawVarint32Size(mapDataBuf.size()) + mapDataBuf.size();
  int pcalcx=pleft >> SHIFT_COORDINATES;
  int pcalcy=ptop >> SHIFT_COORDINATES;
  mapDataBuf.clear();
  typesDataBuf.clear();
  for (int k=0; k < points.length; k++) {
    ROUTE_COORDINATES_COUNT++;
    int tx=(points[k].x >> SHIFT_COORDINATES) - pcalcx;
    int ty=(points[k].y >> SHIFT_COORDINATES) - pcalcy;
    writeRawVarint32(mapDataBuf,CodedOutputStream.encodeZigZag32(tx));
    writeRawVarint32(mapDataBuf,CodedOutputStream.encodeZigZag32(ty));
    pcalcx=pcalcx + tx;
    pcalcy=pcalcy + ty;
    if (points[k].types.size() > 0) {
      typesAddDataBuf.clear();
      for (int ij=0; ij < points[k].types.size(); ij++) {
        writeRawVarint32(typesAddDataBuf,points[k].types.get(ij));
      }
      writeRawVarint32(typesDataBuf,k);
      writeRawVarint32(typesDataBuf,typesAddDataBuf.size());
      typesDataBuf.add(typesAddDataBuf.toArray());
    }
  }
  builder.setPoints(ByteString.copyFrom(mapDataBuf.toArray()));
  ROUTE_COORDINATES_SIZE+=CodedOutputStream.computeTagSize(RouteData.POINTS_FIELD_NUMBER) + CodedOutputStream.computeRawVarint32Size(mapDataBuf.size()) + mapDataBuf.size();
  builder.setPointTypes(ByteString.copyFrom(typesDataBuf.toArray()));
  ROUTE_TYPES_SIZE+=CodedOutputStream.computeTagSize(RouteData.POINTTYPES_FIELD_NUMBER) + CodedOutputStream.computeRawVarint32Size(typesDataBuf.size()) + typesDataBuf.size();
  if (names.size() > 0) {
    mapDataBuf.clear();
    if (names != null) {
      for (      Entry<MapRouteType,String> s : names.entrySet()) {
        writeRawVarint32(mapDataBuf,s.getKey().getTargetId());
        Integer ls=stringTable.get(s.getValue());
        if (ls == null) {
          ls=stringTable.size();
          stringTable.put(s.getValue(),ls);
        }
        writeRawVarint32(mapDataBuf,ls);
      }
    }
    STRING_TABLE_SIZE+=mapDataBuf.size();
    builder.setStringNames(ByteString.copyFrom(mapDataBuf.toArray()));
  }
  return builder.build();
}
