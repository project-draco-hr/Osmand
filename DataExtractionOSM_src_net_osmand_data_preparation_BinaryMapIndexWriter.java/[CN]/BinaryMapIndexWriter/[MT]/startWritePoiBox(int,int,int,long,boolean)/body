{
  checkPeekState(POI_INDEX_INIT,POI_BOX);
  if (state.peek() == POI_INDEX_INIT) {
    codedOutStream.writeTag(OsmandOdb.OsmAndPoiIndex.BOXES_FIELD_NUMBER,WireFormat.WIRETYPE_FIXED32_LENGTH_DELIMITED);
  }
 else {
    codedOutStream.writeTag(OsmandOdb.OsmAndPoiBox.SUBBOXES_FIELD_NUMBER,WireFormat.WIRETYPE_FIXED32_LENGTH_DELIMITED);
  }
  state.push(POI_BOX);
  preserveInt32Size();
  Bounds bounds=stackBounds.peek();
  int parentZoom=bounds.rightX;
  int parentTileX=bounds.leftX;
  int parentTileY=bounds.topY;
  int pTileX=parentTileX << (zoom - parentZoom);
  int pTileY=parentTileY << (zoom - parentZoom);
  codedOutStream.writeUInt32(OsmandOdb.OsmAndPoiBox.ZOOM_FIELD_NUMBER,(zoom - parentZoom));
  codedOutStream.writeSInt32(OsmandOdb.OsmAndPoiBox.LEFT_FIELD_NUMBER,tileX - pTileX);
  codedOutStream.writeSInt32(OsmandOdb.OsmAndPoiBox.TOP_FIELD_NUMBER,tileY - pTileY);
  stackBounds.push(new Bounds(tileX,zoom,tileY,0));
  if (end) {
    codedOutStream.writeTag(OsmandOdb.OsmAndPoiBox.SHIFTTODATA_FIELD_NUMBER,WireFormat.WIRETYPE_FIXED32_LENGTH_DELIMITED);
    BinaryFileReference shift=BinaryFileReference.createShiftReference(getFilePointer(),startPoiIndex);
    codedOutStream.writeFixed32NoTag(0);
    return shift;
  }
  return null;
}
