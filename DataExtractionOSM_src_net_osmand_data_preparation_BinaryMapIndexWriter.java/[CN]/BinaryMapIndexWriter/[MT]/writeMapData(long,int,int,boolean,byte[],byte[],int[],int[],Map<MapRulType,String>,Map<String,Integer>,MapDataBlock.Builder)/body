{
  MapData.Builder data=MapData.newBuilder();
  mapDataBuf.clear();
  int pcalcx=(pleft >> SHIFT_COORDINATES);
  int pcalcy=(ptop >> SHIFT_COORDINATES);
  int len=coordinates.length / 8;
  int delta=1;
  for (int i=0; i < len; i+=delta) {
    int x=Algoritms.parseIntFromBytes(coordinates,i * 8);
    int y=Algoritms.parseIntFromBytes(coordinates,i * 8 + 4);
    int tx=(x >> SHIFT_COORDINATES) - pcalcx;
    int ty=(y >> SHIFT_COORDINATES) - pcalcy;
    writeRawVarint32(mapDataBuf,CodedOutputStream.encodeZigZag32(tx));
    writeRawVarint32(mapDataBuf,CodedOutputStream.encodeZigZag32(ty));
    pcalcx=pcalcx + tx;
    pcalcy=pcalcy + ty;
    delta=1;
    while (i + delta < len - 1) {
      int nx=Algoritms.parseIntFromBytes(coordinates,(i + delta) * 8);
      int ny=Algoritms.parseIntFromBytes(coordinates,(i + delta) * 8 + 4);
      if ((Math.abs(x - nx)) >> SHIFT_COORDINATES > 7 || (Math.abs(y - ny)) >> SHIFT_COORDINATES > 7) {
        break;
      }
      delta++;
    }
  }
  COORDINATES_SIZE+=CodedOutputStream.computeRawVarint32Size(mapDataBuf.size()) + CodedOutputStream.computeTagSize(MapData.COORDINATES_FIELD_NUMBER) + mapDataBuf.size();
  if (area) {
    data.setAreaCoordinates(ByteString.copyFrom(mapDataBuf.toArray()));
  }
 else {
    data.setCoordinates(ByteString.copyFrom(mapDataBuf.toArray()));
  }
  if (innerPolygonTypes != null && innerPolygonTypes.length > 0) {
    mapDataBuf.clear();
    pcalcx=(pleft >> SHIFT_COORDINATES);
    pcalcy=(ptop >> SHIFT_COORDINATES);
    len=innerPolygonTypes.length / 8;
    for (int i=0; i < len; i+=delta) {
      int x=Algoritms.parseIntFromBytes(innerPolygonTypes,i * 8);
      int y=Algoritms.parseIntFromBytes(innerPolygonTypes,i * 8 + 4);
      if (x == 0 && y == 0) {
        if (mapDataBuf.size() > 0) {
          data.addPolygonInnerCoordinates(ByteString.copyFrom(mapDataBuf.toArray()));
          mapDataBuf.clear();
        }
        pcalcx=(pleft >> SHIFT_COORDINATES);
        pcalcy=(ptop >> SHIFT_COORDINATES);
      }
 else {
        int tx=(x >> SHIFT_COORDINATES) - pcalcx;
        int ty=(y >> SHIFT_COORDINATES) - pcalcy;
        writeRawVarint32(mapDataBuf,CodedOutputStream.encodeZigZag32(tx));
        writeRawVarint32(mapDataBuf,CodedOutputStream.encodeZigZag32(ty));
        pcalcx=pcalcx + tx;
        pcalcy=pcalcy + ty;
        delta=1;
        while (i + delta < len - 1) {
          int nx=Algoritms.parseIntFromBytes(innerPolygonTypes,(i + delta) * 8);
          int ny=Algoritms.parseIntFromBytes(innerPolygonTypes,(i + delta) * 8 + 4);
          if (nx == 0 && ny == 0) {
            if (delta > 1) {
              delta--;
            }
            break;
          }
          if ((Math.abs(x - nx)) >> SHIFT_COORDINATES > 7 || (Math.abs(y - ny)) >> SHIFT_COORDINATES > 7) {
            break;
          }
          delta++;
        }
      }
    }
  }
  mapDataBuf.clear();
  for (int i=0; i < typeUse.length; i++) {
    writeRawVarint32(mapDataBuf,typeUse[i]);
  }
  data.setTypes(ByteString.copyFrom(mapDataBuf.toArray()));
  TYPES_SIZE+=CodedOutputStream.computeTagSize(OsmandOdb.MapData.TYPES_FIELD_NUMBER) + CodedOutputStream.computeRawVarint32Size(mapDataBuf.size()) + mapDataBuf.size();
  if (addtypeUse != null && addtypeUse.length > 0) {
    mapDataBuf.clear();
    for (int i=0; i < addtypeUse.length; i++) {
      writeRawVarint32(mapDataBuf,addtypeUse[i]);
    }
    data.setAdditionalTypes(ByteString.copyFrom(mapDataBuf.toArray()));
    TYPES_SIZE+=CodedOutputStream.computeTagSize(OsmandOdb.MapData.ADDITIONALTYPES_FIELD_NUMBER);
  }
  mapDataBuf.clear();
  if (names != null) {
    for (    Entry<MapRulType,String> s : names.entrySet()) {
      writeRawVarint32(mapDataBuf,s.getKey().getTargetId());
      Integer ls=stringTable.get(s.getValue());
      if (ls == null) {
        ls=stringTable.size();
        stringTable.put(s.getValue(),ls);
      }
      writeRawVarint32(mapDataBuf,ls);
    }
  }
  STRING_TABLE_SIZE+=mapDataBuf.size();
  data.setStringNames(ByteString.copyFrom(mapDataBuf.toArray()));
  data.setId(diffId);
  ID_SIZE+=CodedOutputStream.computeSInt64Size(OsmandOdb.MapData.ID_FIELD_NUMBER,diffId);
  return data.build();
}
