{
  @SuppressWarnings("unchecked") List<SingleVariableDeclaration> parameters=constructor.parameters();
  int parameterOffset=binding.getParameterTypes().length;
  for (int i=0; i < invocationArguments.size(); i++) {
    Expression arg=invocationArguments.get(i);
    ITypeBinding argType=Types.getTypeBinding(arg);
    SimpleName paramName=ast.newSimpleName("arg$" + i);
    GeneratedVariableBinding paramBinding=new GeneratedVariableBinding(paramName.getIdentifier(),0,argType,false,true,clazz,null);
    Types.addBinding(paramName,paramBinding);
    SingleVariableDeclaration param=ast.newSingleVariableDeclaration();
    param.setName(paramName);
    param.setType(Types.makeType(argType));
    Types.addBinding(param,paramBinding);
    parameters.add(param);
    binding.addParameter(i + parameterOffset,argType);
  }
  SuperConstructorInvocation superInvocation=ast.newSuperConstructorInvocation();
  @SuppressWarnings("unchecked") List<Expression> superArgs=superInvocation.arguments();
  for (  SingleVariableDeclaration param : parameters) {
    superArgs.add(NodeCopier.copySubtree(ast,param.getName()));
  }
  Types.addBinding(superInvocation,findSuperConstructorBinding(clazz.getSuperclass(),invocationArguments));
  @SuppressWarnings("unchecked") List<Statement> statements=constructor.getBody().statements();
  statements.add(superInvocation);
}
