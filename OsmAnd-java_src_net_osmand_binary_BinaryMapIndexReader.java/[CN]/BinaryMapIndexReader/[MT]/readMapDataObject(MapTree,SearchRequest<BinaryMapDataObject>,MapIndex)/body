{
  int tag=WireFormat.getTagFieldNumber(codedIS.readTag());
  boolean area=OsmandOdb.MapData.AREACOORDINATES_FIELD_NUMBER == tag;
  if (!area && OsmandOdb.MapData.COORDINATES_FIELD_NUMBER != tag) {
    throw new IllegalArgumentException();
  }
  req.cacheCoordinates.clear();
  int size=codedIS.readRawVarint32();
  if (READ_STATS) {
    req.stat.lastObjectCoordinates+=size;
    req.stat.addTagHeader(OsmandOdb.MapData.COORDINATES_FIELD_NUMBER,size);
  }
  int old=codedIS.pushLimit(size);
  int px=tree.left & MASK_TO_READ;
  int py=tree.top & MASK_TO_READ;
  boolean contains=false;
  int minX=Integer.MAX_VALUE;
  int maxX=0;
  int minY=Integer.MAX_VALUE;
  int maxY=0;
  req.numberOfVisitedObjects++;
  while (codedIS.getBytesUntilLimit() > 0) {
    int x=(codedIS.readSInt32() << SHIFT_COORDINATES) + px;
    int y=(codedIS.readSInt32() << SHIFT_COORDINATES) + py;
    req.cacheCoordinates.add(x);
    req.cacheCoordinates.add(y);
    px=x;
    py=y;
    if (!contains && req.left <= x && req.right >= x && req.top <= y && req.bottom >= y) {
      contains=true;
    }
    if (!contains) {
      minX=Math.min(minX,x);
      maxX=Math.max(maxX,x);
      minY=Math.min(minY,y);
      maxY=Math.max(maxY,y);
    }
  }
  if (!contains) {
    if (maxX >= req.left && minX <= req.right && minY <= req.bottom && maxY >= req.top) {
      contains=true;
    }
  }
  codedIS.popLimit(old);
  if (!contains) {
    codedIS.skipRawBytes(codedIS.getBytesUntilLimit());
    return null;
  }
  List<TIntArrayList> innercoordinates=null;
  TIntArrayList additionalTypes=null;
  TIntObjectHashMap<String> stringNames=null;
  TIntArrayList stringOrder=null;
  long id=0;
  boolean loop=true;
  while (loop) {
    int t=codedIS.readTag();
    tag=WireFormat.getTagFieldNumber(t);
switch (tag) {
case 0:
      loop=false;
    break;
case OsmandOdb.MapData.POLYGONINNERCOORDINATES_FIELD_NUMBER:
  if (innercoordinates == null) {
    innercoordinates=new ArrayList<TIntArrayList>();
  }
TIntArrayList polygon=new TIntArrayList();
innercoordinates.add(polygon);
px=tree.left & MASK_TO_READ;
py=tree.top & MASK_TO_READ;
size=codedIS.readRawVarint32();
if (READ_STATS) {
req.stat.lastObjectCoordinates+=size;
req.stat.addTagHeader(OsmandOdb.MapData.POLYGONINNERCOORDINATES_FIELD_NUMBER,size);
}
old=codedIS.pushLimit(size);
while (codedIS.getBytesUntilLimit() > 0) {
int x=(codedIS.readSInt32() << SHIFT_COORDINATES) + px;
int y=(codedIS.readSInt32() << SHIFT_COORDINATES) + py;
polygon.add(x);
polygon.add(y);
px=x;
py=y;
}
codedIS.popLimit(old);
break;
case OsmandOdb.MapData.ADDITIONALTYPES_FIELD_NUMBER:
additionalTypes=new TIntArrayList();
int sizeL=codedIS.readRawVarint32();
old=codedIS.pushLimit(sizeL);
if (READ_STATS) {
req.stat.lastObjectAdditionalTypes+=sizeL;
req.stat.addTagHeader(OsmandOdb.MapData.ADDITIONALTYPES_FIELD_NUMBER,sizeL);
}
while (codedIS.getBytesUntilLimit() > 0) {
additionalTypes.add(codedIS.readRawVarint32());
}
codedIS.popLimit(old);
break;
case OsmandOdb.MapData.TYPES_FIELD_NUMBER:
req.cacheTypes.clear();
sizeL=codedIS.readRawVarint32();
old=codedIS.pushLimit(sizeL);
if (READ_STATS) {
req.stat.addTagHeader(OsmandOdb.MapData.TYPES_FIELD_NUMBER,sizeL);
req.stat.lastObjectTypes+=sizeL;
}
while (codedIS.getBytesUntilLimit() > 0) {
req.cacheTypes.add(codedIS.readRawVarint32());
}
codedIS.popLimit(old);
boolean accept=true;
if (req.searchFilter != null) {
accept=req.searchFilter.accept(req.cacheTypes,root);
}
if (!accept) {
codedIS.skipRawBytes(codedIS.getBytesUntilLimit());
return null;
}
req.numberOfAcceptedObjects++;
break;
case OsmandOdb.MapData.ID_FIELD_NUMBER:
id=codedIS.readSInt64();
if (READ_STATS) {
req.stat.addTagHeader(OsmandOdb.MapData.ID_FIELD_NUMBER,0);
req.stat.lastObjectIdSize+=CodedOutputStream.computeSInt64SizeNoTag(id);
}
break;
case OsmandOdb.MapData.STRINGNAMES_FIELD_NUMBER:
stringNames=new TIntObjectHashMap<String>();
stringOrder=new TIntArrayList();
sizeL=codedIS.readRawVarint32();
old=codedIS.pushLimit(sizeL);
while (codedIS.getBytesUntilLimit() > 0) {
int stag=codedIS.readRawVarint32();
int pId=codedIS.readRawVarint32();
stringNames.put(stag,((char)pId) + "");
stringOrder.add(stag);
}
codedIS.popLimit(old);
if (READ_STATS) {
req.stat.addTagHeader(OsmandOdb.MapData.STRINGNAMES_FIELD_NUMBER,sizeL);
req.stat.lastStringNamesSize+=sizeL;
}
break;
default :
skipUnknownField(t);
break;
}
}
BinaryMapDataObject dataObject=new BinaryMapDataObject();
dataObject.area=area;
dataObject.coordinates=req.cacheCoordinates.toArray();
dataObject.objectNames=stringNames;
dataObject.namesOrder=stringOrder;
if (innercoordinates == null) {
dataObject.polygonInnerCoordinates=new int[0][0];
}
 else {
dataObject.polygonInnerCoordinates=new int[innercoordinates.size()][];
for (int i=0; i < innercoordinates.size(); i++) {
dataObject.polygonInnerCoordinates[i]=innercoordinates.get(i).toArray();
}
}
dataObject.types=req.cacheTypes.toArray();
if (additionalTypes != null) {
dataObject.additionalTypes=additionalTypes.toArray();
}
 else {
dataObject.additionalTypes=new int[0];
}
dataObject.id=id;
dataObject.area=area;
dataObject.mapIndex=root;
return dataObject;
}
