{
  SearchRequest<Amenity> request=new SearchRequest<Amenity>();
  float coeff=(float)(radius / MapUtils.getTileDistanceWidth(SearchRequest.ZOOM_TO_SEARCH_POI));
  TLongObjectHashMap<List<Location>> zooms=new TLongObjectHashMap<List<Location>>();
  for (int i=1; i < route.size(); i++) {
    Location cr=route.get(i);
    Location pr=route.get(i - 1);
    double tx=MapUtils.getTileNumberX(SearchRequest.ZOOM_TO_SEARCH_POI,cr.getLongitude());
    double ty=MapUtils.getTileNumberY(SearchRequest.ZOOM_TO_SEARCH_POI,cr.getLatitude());
    double px=MapUtils.getTileNumberX(SearchRequest.ZOOM_TO_SEARCH_POI,pr.getLongitude());
    double py=MapUtils.getTileNumberY(SearchRequest.ZOOM_TO_SEARCH_POI,pr.getLatitude());
    double topLeftX=Math.min(tx,px) - coeff;
    double topLeftY=Math.min(ty,py) - coeff;
    double bottomRightX=Math.max(tx,px) + coeff;
    double bottomRightY=Math.max(ty,py) + coeff;
    for (int x=(int)topLeftX; x <= bottomRightX; x++) {
      for (int y=(int)topLeftY; y <= bottomRightY; y++) {
        long hash=(((long)x) << SearchRequest.ZOOM_TO_SEARCH_POI) + y;
        if (!zooms.containsKey(hash)) {
          zooms.put(hash,new LinkedList<Location>());
        }
        List<Location> ll=zooms.get(hash);
        ll.add(pr);
        ll.add(cr);
      }
    }
  }
  int sleft=Integer.MAX_VALUE, sright=0, stop=Integer.MAX_VALUE, sbottom=0;
  for (  long vl : zooms.keys()) {
    long x=(vl >> SearchRequest.ZOOM_TO_SEARCH_POI) << (31 - SearchRequest.ZOOM_TO_SEARCH_POI);
    long y=(vl & ((1 << SearchRequest.ZOOM_TO_SEARCH_POI) - 1)) << (31 - SearchRequest.ZOOM_TO_SEARCH_POI);
    sleft=(int)Math.min(x,sleft);
    stop=(int)Math.min(y,stop);
    sbottom=(int)Math.max(y,sbottom);
    sright=(int)Math.max(x,sright);
  }
  request.radius=radius;
  request.left=sleft;
  request.zoom=-1;
  request.right=sright;
  request.top=stop;
  request.bottom=sbottom;
  request.tiles=zooms;
  request.poiTypeFilter=poiTypeFilter;
  request.resultMatcher=resultMatcher;
  return request;
}
