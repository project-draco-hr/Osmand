{
  super.onCreate(savedInstanceState);
  settings=((OsmandApplication)getApplication()).getSettings();
  if (downloadListIndexThread == null) {
    downloadListIndexThread=new DownloadIndexesThread(this);
  }
  setContentView(R.layout.download_index);
  indeterminateProgressBar=(ProgressBar)findViewById(R.id.IndeterminateProgressBar);
  determinateProgressBar=(ProgressBar)findViewById(R.id.DeterminateProgressBar);
  progressView=findViewById(R.id.ProgressView);
  progressMessage=(TextView)findViewById(R.id.ProgressMessage);
  progressPercent=(TextView)findViewById(R.id.ProgressPercent);
  getSupportActionBar().setNavigationMode(ActionBar.NAVIGATION_MODE_LIST);
  getSupportActionBar().setTitle(R.string.local_index_download);
  findViewById(R.id.DownloadButton).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      downloadFilesCheckFreeVersion(flattenDownloadEntries());
    }
  }
);
  filterText=(EditText)findViewById(R.id.search_box);
  textWatcher=new TextWatcher(){
    @Override public void afterTextChanged(    Editable s){
    }
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      DownloadIndexAdapter adapter=((DownloadIndexAdapter)getExpandableListAdapter());
      if (adapter != null) {
        adapter.getFilter().filter(s);
      }
    }
  }
;
  filterText.addTextChangedListener(textWatcher);
  final Intent intent=getIntent();
  if (intent != null && intent.getExtras() != null) {
    final String filter=intent.getExtras().getString(FILTER_KEY);
    if (filter != null) {
      filterText.setText(filter);
    }
  }
  List<IndexItem> list=new ArrayList<IndexItem>();
  downloadListIndexThread.setUiActivity(this);
  if (downloadListIndexThread.getCachedIndexFiles() != null && downloadListIndexThread.isDownloadedFromInternet()) {
    list=getFilteredByType();
  }
 else {
    downloadListIndexThread.runReloadIndexFiles();
  }
  DownloadIndexAdapter adapter=new DownloadIndexAdapter(this,list);
  setListAdapter(adapter);
  if (getMyApplication().getResourceManager().getIndexFileNames().isEmpty()) {
    boolean showedDialog=SuggestExternalDirectoryDialog.showDialog(this,null,null);
    if (!showedDialog) {
      showDialogOfFreeDownloadsIfNeeded();
    }
  }
 else {
    showDialogOfFreeDownloadsIfNeeded();
  }
  final DownloadActivityType[] downloadTypes=getDownloadTypes();
  spinnerAdapter=new ArrayAdapter<String>(getSupportActionBar().getThemedContext(),R.layout.sherlock_spinner_item,new ArrayList<String>(Arrays.asList(toString(downloadTypes))));
  spinnerAdapter.setDropDownViewResource(R.layout.sherlock_spinner_dropdown_item);
  getSupportActionBar().setListNavigationCallbacks(spinnerAdapter,new OnNavigationListener(){
    @Override public boolean onNavigationItemSelected(    int itemPosition,    long itemId){
      changeType(downloadTypes[itemPosition]);
      return true;
    }
  }
);
}
