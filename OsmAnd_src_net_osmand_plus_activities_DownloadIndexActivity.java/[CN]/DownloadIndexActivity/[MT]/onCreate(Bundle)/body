{
  super.onCreate(savedInstanceState);
  final List<DownloadActivityType> downloadTypes=getDownloadTypes();
  type=downloadTypes.get(0);
  settings=((OsmandApplication)getApplication()).getSettings();
  if (downloadListIndexThread == null) {
    downloadListIndexThread=new DownloadIndexesThread(this);
  }
  setContentView(R.layout.download_index);
  indeterminateProgressBar=(ProgressBar)findViewById(R.id.IndeterminateProgressBar);
  determinateProgressBar=(ProgressBar)findViewById(R.id.DeterminateProgressBar);
  progressView=findViewById(R.id.ProgressView);
  progressMessage=(TextView)findViewById(R.id.ProgressMessage);
  progressPercent=(TextView)findViewById(R.id.ProgressPercent);
  cancel=(ImageView)findViewById(R.id.Cancel);
  int d=settings.isLightContent() ? R.drawable.a_1_navigation_cancel_small_light : R.drawable.a_1_navigation_cancel_small_dark;
  cancel.setImageDrawable(getResources().getDrawable(d));
  cancel.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      makeSureUserCancelDownload();
    }
  }
);
  getSupportActionBar().setTitle(R.string.local_index_download);
  findViewById(R.id.DownloadButton).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      downloadFilesCheckFreeVersion();
    }
  }
);
  filterText=(EditText)findViewById(R.id.search_box);
  textWatcher=new TextWatcher(){
    @Override public void afterTextChanged(    Editable s){
    }
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      DownloadIndexAdapter adapter=((DownloadIndexAdapter)getExpandableListAdapter());
      if (adapter != null) {
        adapter.getFilter().filter(s);
      }
    }
  }
;
  filterText.addTextChangedListener(textWatcher);
  final Intent intent=getIntent();
  if (intent != null && intent.getExtras() != null) {
    final String filter=intent.getExtras().getString(FILTER_KEY);
    if (filter != null) {
      filterText.setText(filter);
    }
    final String filterCat=intent.getExtras().getString(FILTER_CAT);
    if (filterCat != null) {
      DownloadActivityType type=DownloadActivityType.getIndexType(filterCat.toLowerCase());
      if (type != null) {
        this.type=type;
        downloadTypes.remove(type);
        downloadTypes.add(0,type);
      }
    }
  }
  List<IndexItem> list=new ArrayList<IndexItem>();
  downloadListIndexThread.setUiActivity(this);
  if (downloadListIndexThread.getCachedIndexFiles() != null && downloadListIndexThread.isDownloadedFromInternet()) {
    downloadListIndexThread.runCategorization(type);
  }
 else {
    downloadListIndexThread.runReloadIndexFiles();
  }
  DownloadIndexAdapter adapter=new DownloadIndexAdapter(this,list);
  setListAdapter(adapter);
  if (getMyApplication().getResourceManager().getIndexFileNames().isEmpty()) {
    boolean showedDialog=false;
    if (Build.VERSION.SDK_INT < OsmandSettings.VERSION_DEFAULTLOCATION_CHANGED) {
      SuggestExternalDirectoryDialog.showDialog(this,null,null);
    }
    if (!showedDialog) {
      showDialogOfFreeDownloadsIfNeeded();
    }
  }
 else {
    showDialogOfFreeDownloadsIfNeeded();
  }
  getMyApplication().getAppCustomization().preDownloadActivity(this,downloadTypes,getSupportActionBar());
  if (Build.VERSION.SDK_INT >= OsmandSettings.VERSION_DEFAULTLOCATION_CHANGED) {
    final String currentStorage=settings.getExternalStorageDirectory().getAbsolutePath();
    String primaryStorage=settings.getDefaultExternalStorageLocation();
    if (!currentStorage.startsWith(primaryStorage)) {
      boolean currentDirectoryNotWritable=true;
      for (      String writeableDirectory : settings.getWritableSecondaryStorageDirectorys()) {
        if (currentStorage.startsWith(writeableDirectory)) {
          currentDirectoryNotWritable=false;
          break;
        }
      }
      if (currentDirectoryNotWritable) {
        currentDirectoryNotWritable=!OsmandSettings.isWritable(settings.getExternalStorageDirectory());
      }
      if (currentDirectoryNotWritable) {
        final String newLoc=settings.getMatchingExternalFilesDir(currentStorage);
        if (newLoc != null && newLoc.length() != 0) {
          AccessibleAlertBuilder ab=new AccessibleAlertBuilder(this);
          ab.setMessage(getString(R.string.android_19_location_disabled,settings.getExternalStorageDirectory()));
          ab.setPositiveButton(R.string.default_buttons_yes,new DialogInterface.OnClickListener(){
            @Override public void onClick(            DialogInterface dialog,            int which){
              copyFilesForAndroid19(newLoc);
            }
          }
);
          ab.setNegativeButton(R.string.default_buttons_cancel,null);
          ab.show();
        }
      }
    }
  }
}
