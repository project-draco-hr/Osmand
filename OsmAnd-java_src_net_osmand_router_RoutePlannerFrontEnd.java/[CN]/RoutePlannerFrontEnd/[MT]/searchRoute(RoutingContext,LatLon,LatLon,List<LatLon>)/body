{
  if (ctx.calculationProgress == null) {
    ctx.calculationProgress=new RouteCalculationProgress();
  }
  boolean intermediatesEmpty=intermediates == null || intermediates.isEmpty();
  PrecalculatedRouteDirection routeDirection=null;
  if (ctx.calculationMode == RouteCalculationMode.COMPLEX) {
    RoutingContext nctx=buildRoutingContext(ctx.config,ctx.nativeLib,ctx.getMaps(),RouteCalculationMode.BASE);
    nctx.calculationProgress=ctx.calculationProgress;
    List<RouteSegmentResult> ls=searchRoute(nctx,start,end,intermediates);
    routeDirection=PrecalculatedRouteDirection.build(ls,5000,ctx.getRouter().getMaxDefaultSpeed());
  }
  if (intermediatesEmpty && useOldVersion && ctx.nativeLib != null) {
    ctx.startX=MapUtils.get31TileNumberX(start.getLongitude());
    ctx.startY=MapUtils.get31TileNumberY(start.getLatitude());
    ctx.targetX=MapUtils.get31TileNumberX(end.getLongitude());
    ctx.targetY=MapUtils.get31TileNumberY(end.getLatitude());
    if (routeDirection != null) {
      ctx.precalculatedRouteDirection=routeDirection.adopt(ctx);
    }
    List<RouteSegmentResult> res=runNativeRouting(ctx);
    if (res != null) {
      new RouteResultPreparation().printResults(ctx,start,end,res);
    }
    return res;
  }
  int indexNotFound=0;
  List<RouteSegment> points=new ArrayList<BinaryRoutePlanner.RouteSegment>();
  if (!addSegment(start,ctx,indexNotFound++,points)) {
    return null;
  }
  if (intermediates != null) {
    for (    LatLon l : intermediates) {
      if (!addSegment(l,ctx,indexNotFound++,points)) {
        return null;
      }
    }
  }
  if (!addSegment(end,ctx,indexNotFound++,points)) {
    return null;
  }
  List<RouteSegmentResult> res=searchRoute(ctx,points,routeDirection);
  if (res != null) {
    new RouteResultPreparation().printResults(ctx,start,end,res);
  }
  return res;
}
