{
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  final LocalIndexInfo localIndexInfo=getArguments().getParcelable(LOCAL_INDEX);
  View view=LayoutInflater.from(getActivity()).inflate(R.layout.dialog_live_updates_item_settings,null);
  final TextView regionNameTextView=(TextView)view.findViewById(R.id.regionNameTextView);
  final TextView countryNameTextView=(TextView)view.findViewById(R.id.countryNameTextView);
  final SwitchCompat liveUpdatesSwitch=(SwitchCompat)view.findViewById(R.id.liveUpdatesSwitch);
  final SwitchCompat downloadOverWiFiSwitch=(SwitchCompat)view.findViewById(R.id.downloadOverWiFiSwitch);
  final Spinner updateFrequencySpinner=(Spinner)view.findViewById(R.id.updateFrequencySpinner);
  final Spinner updateTimesOfDaySpinner=(Spinner)view.findViewById(R.id.updateTimesOfDaySpinner);
  regionNameTextView.setText(localIndexInfo.getName());
  countryNameTextView.setVisibility(View.VISIBLE);
  final OsmandSettings.CommonPreference<Boolean> liveUpdatePreference=preferenceForLocalIndex(localIndexInfo,getSettings());
  final OsmandSettings.CommonPreference<Boolean> downloadViaWiFiPreference=preferenceDownloadViaWiFi(localIndexInfo,getSettings());
  final OsmandSettings.CommonPreference<Integer> updateFrequencePreference=preferenceUpdateFrequency(localIndexInfo,getSettings());
  final OsmandSettings.CommonPreference<Integer> timeOfDayPreference=preferenceTimeOfDayToUpdate(localIndexInfo,getSettings());
  liveUpdatesSwitch.setChecked(true);
  downloadOverWiFiSwitch.setChecked(downloadViaWiFiPreference.get());
  builder.setView(view).setPositiveButton(R.string.shared_string_save,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      final int updateFrequencyInt=updateFrequencySpinner.getSelectedItemPosition();
      updateFrequencePreference.set(updateFrequencyInt);
      UpdateFrequency updateFrequency=UpdateFrequency.values()[updateFrequencyInt];
      AlarmManager alarmMgr=(AlarmManager)getActivity().getSystemService(Context.ALARM_SERVICE);
      Intent intent=new Intent(getActivity(),LiveUpdatesAlarmReceiver.class);
      final File file=new File(localIndexInfo.getFileName());
      final String fileName=Algorithms.getFileNameWithoutExtension(file);
      intent.putExtra(LOCAL_INDEX_INFO,localIndexInfo);
      intent.setAction(fileName);
      PendingIntent alarmIntent=PendingIntent.getBroadcast(getActivity(),0,intent,0);
      final int timeOfDayInt=updateTimesOfDaySpinner.getSelectedItemPosition();
      timeOfDayPreference.set(timeOfDayInt);
      TimesOfDay timeOfDayToUpdate=TimesOfDay.values()[timeOfDayInt];
      long timeOfFirstUpdate;
      long updateInterval;
switch (updateFrequency) {
case HOURLY:
        timeOfFirstUpdate=System.currentTimeMillis() + SHIFT;
      updateInterval=AlarmManager.INTERVAL_HOUR;
    break;
case DAILY:
  timeOfFirstUpdate=getNextUpdateTime(timeOfDayToUpdate);
updateInterval=AlarmManager.INTERVAL_DAY;
break;
case WEEKLY:
timeOfFirstUpdate=getNextUpdateTime(timeOfDayToUpdate);
updateInterval=AlarmManager.INTERVAL_DAY * 7;
break;
default :
throw new IllegalStateException("Unexpected update frequency:" + updateFrequency);
}
liveUpdatePreference.set(liveUpdatesSwitch.isChecked());
downloadViaWiFiPreference.set(downloadOverWiFiSwitch.isChecked());
alarmMgr.cancel(alarmIntent);
if (liveUpdatesSwitch.isChecked()) {
alarmMgr.setInexactRepeating(AlarmManager.RTC,timeOfFirstUpdate,updateInterval,alarmIntent);
}
getLiveUpdatesFragment().notifyLiveUpdatesChanged();
}
}
).setNegativeButton(R.string.shared_string_cancel,null).setNeutralButton(R.string.update_now,new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
getLiveUpdatesFragment().runLiveUpdate(localIndexInfo);
}
}
);
updateFrequencySpinner.setSelection(updateFrequencePreference.get());
updateFrequencySpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
UpdateFrequency updateFrequency=UpdateFrequency.values()[position];
switch (updateFrequency) {
case HOURLY:
updateTimesOfDaySpinner.setVisibility(View.GONE);
break;
case DAILY:
case WEEKLY:
updateTimesOfDaySpinner.setVisibility(View.VISIBLE);
break;
}
}
@Override public void onNothingSelected(AdapterView<?> parent){
}
}
);
return builder.create();
}
