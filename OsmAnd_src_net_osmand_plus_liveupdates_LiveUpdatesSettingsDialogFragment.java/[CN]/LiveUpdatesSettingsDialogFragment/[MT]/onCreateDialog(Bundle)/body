{
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  final LocalIndexInfo localIndexInfo=getArguments().getParcelable(LOCAL_INDEX);
  View view=LayoutInflater.from(getActivity()).inflate(R.layout.dialog_live_updates_item_settings,null);
  final TextView regionNameTextView=(TextView)view.findViewById(R.id.regionNameTextView);
  final TextView lastMapChangeTextView=(TextView)view.findViewById(R.id.lastMapChangeTextView);
  final TextView lastUpdateTextView=(TextView)view.findViewById(R.id.lastUpdateTextView);
  final SwitchCompat liveUpdatesSwitch=(SwitchCompat)view.findViewById(R.id.liveUpdatesSwitch);
  final CheckBox downloadOverWiFiCheckBox=(CheckBox)view.findViewById(R.id.downloadOverWiFiSwitch);
  final Spinner updateFrequencySpinner=(Spinner)view.findViewById(R.id.updateFrequencySpinner);
  final Spinner updateTimesOfDaySpinner=(Spinner)view.findViewById(R.id.updateTimesOfDaySpinner);
  final View updateTimesOfDayList=view.findViewById(R.id.updateTimesOfDayList);
  final TextView sizeTextView=(TextView)view.findViewById(R.id.sizeTextView);
  regionNameTextView.setText(getNameToDisplay(localIndexInfo,getMyActivity()));
  final String fileNameWithoutExtension=Algorithms.getFileNameWithoutExtension(new File(localIndexInfo.getFileName()));
  final IncrementalChangesManager changesManager=getMyApplication().getResourceManager().getChangesManager();
  final long timestamp=changesManager.getTimestamp(fileNameWithoutExtension);
  String lastUpdateDate=formatDateTime(getActivity(),timestamp);
  final long lastCheck=preferenceLastCheck(localIndexInfo,getSettings()).get();
  String lastCheckString=formatDateTime(getActivity(),lastCheck != DEFAULT_LAST_CHECK ? lastCheck : timestamp);
  lastMapChangeTextView.setText(getString(R.string.last_map_change,lastUpdateDate));
  lastUpdateTextView.setText(getString(R.string.last_update,lastCheckString));
  final OsmandSettings.CommonPreference<Boolean> liveUpdatePreference=preferenceForLocalIndex(localIndexInfo,getSettings());
  final OsmandSettings.CommonPreference<Boolean> downloadViaWiFiPreference=preferenceDownloadViaWiFi(localIndexInfo,getSettings());
  final OsmandSettings.CommonPreference<Integer> updateFrequencyPreference=preferenceUpdateFrequency(localIndexInfo,getSettings());
  final OsmandSettings.CommonPreference<Integer> timeOfDayPreference=preferenceTimeOfDayToUpdate(localIndexInfo,getSettings());
  downloadOverWiFiCheckBox.setChecked(!liveUpdatePreference.get() || downloadViaWiFiPreference.get());
  updateSize(fileNameWithoutExtension,changesManager,sizeTextView);
  updateTimesOfDaySpinner.setAdapter(new ArrayAdapter<String>(getActivity(),R.layout.action_spinner_item,getResources().getStringArray(R.array.update_times_of_day)));
  updateFrequencySpinner.setAdapter(new ArrayAdapter<String>(getActivity(),R.layout.action_spinner_item,getResources().getStringArray(R.array.update_frequencies_array)));
  updateFrequencySpinner.setSelection(updateFrequencyPreference.get());
  updateFrequencySpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      UpdateFrequency updateFrequency=UpdateFrequency.values()[position];
switch (updateFrequency) {
case HOURLY:
        updateTimesOfDayList.setVisibility(View.GONE);
      break;
case DAILY:
case WEEKLY:
    updateTimesOfDayList.setVisibility(View.VISIBLE);
  break;
}
}
@Override public void onNothingSelected(AdapterView<?> parent){
}
}
);
builder.setView(view).setPositiveButton(R.string.shared_string_ok,new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
if (liveUpdatePreference.get() != liveUpdatesSwitch.isChecked()) {
liveUpdatePreference.set(liveUpdatesSwitch.isChecked());
if (liveUpdatesSwitch.isChecked()) {
  runLiveUpdate(localIndexInfo);
}
}
downloadViaWiFiPreference.set(downloadOverWiFiCheckBox.isChecked());
final int updateFrequencyInt=updateFrequencySpinner.getSelectedItemPosition();
updateFrequencyPreference.set(updateFrequencyInt);
AlarmManager alarmMgr=(AlarmManager)getActivity().getSystemService(Context.ALARM_SERVICE);
PendingIntent alarmIntent=getPendingIntent(getActivity(),localIndexInfo);
final int timeOfDayInt=updateTimesOfDaySpinner.getSelectedItemPosition();
timeOfDayPreference.set(timeOfDayInt);
if (liveUpdatesSwitch.isChecked() && getSettings().IS_LIVE_UPDATES_ON.get()) {
UpdateFrequency updateFrequency=UpdateFrequency.values()[updateFrequencyInt];
TimeOfDay timeOfDayToUpdate=TimeOfDay.values()[timeOfDayInt];
setAlarmForPendingIntent(alarmIntent,alarmMgr,updateFrequency,timeOfDayToUpdate);
}
 else {
alarmMgr.cancel(alarmIntent);
}
getLiveUpdatesFragment().notifyLiveUpdatesChanged();
}
}
).setNegativeButton(R.string.shared_string_cancel,null).setNeutralButton(R.string.update_now,new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
runLiveUpdate(localIndexInfo);
updateSize(fileNameWithoutExtension,changesManager,sizeTextView);
}
}
);
return builder.create();
}
