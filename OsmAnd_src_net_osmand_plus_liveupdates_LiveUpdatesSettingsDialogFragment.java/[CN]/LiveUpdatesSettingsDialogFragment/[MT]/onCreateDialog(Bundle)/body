{
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  final String localIndexInfo=getArguments().getString(LOCAL_INDEX);
  View view=LayoutInflater.from(getActivity()).inflate(R.layout.dialog_live_updates_item_settings,null);
  final TextView regionNameTextView=(TextView)view.findViewById(R.id.regionNameTextView);
  final TextView lastMapChangeTextView=(TextView)view.findViewById(R.id.lastMapChangeTextView);
  final TextView lastUpdateTextView=(TextView)view.findViewById(R.id.lastUpdateTextView);
  final SwitchCompat liveUpdatesSwitch=(SwitchCompat)view.findViewById(R.id.liveUpdatesSwitch);
  final CheckBox downloadOverWiFiCheckBox=(CheckBox)view.findViewById(R.id.downloadOverWiFiSwitch);
  final Spinner updateFrequencySpinner=(Spinner)view.findViewById(R.id.updateFrequencySpinner);
  final Spinner updateTimesOfDaySpinner=(Spinner)view.findViewById(R.id.updateTimesOfDaySpinner);
  final View updateTimesOfDayLayout=view.findViewById(R.id.updateTimesOfDayLayout);
  final TextView sizeTextView=(TextView)view.findViewById(R.id.sizeTextView);
  regionNameTextView.setText(getNameToDisplay(localIndexInfo,getMyActivity()));
  final String fileNameWithoutExtension=Algorithms.getFileNameWithoutExtension(new File(localIndexInfo));
  final IncrementalChangesManager changesManager=getMyApplication().getResourceManager().getChangesManager();
  final long timestamp=changesManager.getTimestamp(fileNameWithoutExtension);
  String lastUpdateDate=formatDateTime(getActivity(),timestamp);
  final long lastCheck=preferenceLastCheck(localIndexInfo,getSettings()).get();
  String lastCheckString=formatDateTime(getActivity(),lastCheck != DEFAULT_LAST_CHECK ? lastCheck : timestamp);
  lastMapChangeTextView.setText(getString(R.string.last_map_change,lastUpdateDate));
  lastUpdateTextView.setText(getString(R.string.last_update,lastCheckString));
  final OsmandSettings.CommonPreference<Boolean> liveUpdatePreference=preferenceForLocalIndex(localIndexInfo,getSettings());
  final OsmandSettings.CommonPreference<Boolean> downloadViaWiFiPreference=preferenceDownloadViaWiFi(localIndexInfo,getSettings());
  final OsmandSettings.CommonPreference<Integer> updateFrequencyPreference=preferenceUpdateFrequency(localIndexInfo,getSettings());
  final OsmandSettings.CommonPreference<Integer> timeOfDayPreference=preferenceTimeOfDayToUpdate(localIndexInfo,getSettings());
  downloadOverWiFiCheckBox.setChecked(!liveUpdatePreference.get() || downloadViaWiFiPreference.get());
  sizeTextView.setText(getUpdatesSize(fileNameWithoutExtension,changesManager));
  TimeOfDay[] timeOfDays=TimeOfDay.values();
  String[] timeOfDaysStrings=new String[timeOfDays.length];
  for (int i=0; i < timeOfDays.length; i++) {
    timeOfDaysStrings[i]=getString(timeOfDays[i].getLocalizedId());
  }
  updateTimesOfDaySpinner.setAdapter(new ArrayAdapter<String>(getActivity(),R.layout.action_spinner_item,timeOfDaysStrings));
  updateTimesOfDaySpinner.setSelection(timeOfDayPreference.get());
  UpdateFrequency[] updateFrequencies=UpdateFrequency.values();
  String[] updateFrequenciesStrings=new String[updateFrequencies.length];
  for (int i=0; i < updateFrequencies.length; i++) {
    updateFrequenciesStrings[i]=getString(updateFrequencies[i].getLocalizedId());
  }
  updateFrequencySpinner.setAdapter(new ArrayAdapter<String>(getActivity(),R.layout.action_spinner_item,updateFrequenciesStrings));
  updateFrequencySpinner.setSelection(updateFrequencyPreference.get());
  updateFrequencySpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      UpdateFrequency updateFrequency=UpdateFrequency.values()[position];
switch (updateFrequency) {
case HOURLY:
        updateTimesOfDayLayout.setVisibility(View.GONE);
      break;
case DAILY:
case WEEKLY:
    updateTimesOfDayLayout.setVisibility(View.VISIBLE);
  break;
}
}
@Override public void onNothingSelected(AdapterView<?> parent){
}
}
);
builder.setView(view).setPositiveButton(R.string.shared_string_ok,new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
if (liveUpdatePreference.get() != liveUpdatesSwitch.isChecked()) {
liveUpdatePreference.set(liveUpdatesSwitch.isChecked());
if (!liveUpdatesSwitch.isChecked()) {
  long updatesSize=changesManager.getUpdatesSize(fileNameWithoutExtension);
  if (updatesSize != 0) {
    ClearUpdatesDialogFragment.createInstance(localIndexInfo).show(getParentFragment().getChildFragmentManager(),null);
  }
}
}
downloadViaWiFiPreference.set(downloadOverWiFiCheckBox.isChecked());
final int updateFrequencyInt=updateFrequencySpinner.getSelectedItemPosition();
updateFrequencyPreference.set(updateFrequencyInt);
AlarmManager alarmMgr=(AlarmManager)getActivity().getSystemService(Context.ALARM_SERVICE);
PendingIntent alarmIntent=getPendingIntent(getActivity(),localIndexInfo);
final int timeOfDayInt=updateTimesOfDaySpinner.getSelectedItemPosition();
timeOfDayPreference.set(timeOfDayInt);
if (liveUpdatesSwitch.isChecked() && getSettings().IS_LIVE_UPDATES_ON.get()) {
runLiveUpdate(getActivity(),localIndexInfo,false);
UpdateFrequency updateFrequency=UpdateFrequency.values()[updateFrequencyInt];
TimeOfDay timeOfDayToUpdate=TimeOfDay.values()[timeOfDayInt];
setAlarmForPendingIntent(alarmIntent,alarmMgr,updateFrequency,timeOfDayToUpdate);
}
 else {
alarmMgr.cancel(alarmIntent);
}
getLiveUpdatesFragment().notifyLiveUpdatesChanged();
}
}
).setNegativeButton(R.string.shared_string_cancel,null).setNeutralButton(R.string.update_now,new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
runLiveUpdate(getActivity(),localIndexInfo,true);
sizeTextView.setText(getUpdatesSize(fileNameWithoutExtension,changesManager));
}
}
);
return builder.create();
}
