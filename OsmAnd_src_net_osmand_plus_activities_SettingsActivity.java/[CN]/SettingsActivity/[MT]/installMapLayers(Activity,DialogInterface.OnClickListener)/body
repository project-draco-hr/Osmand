{
  final OsmandSettings settings=((OsmandApplication)activity.getApplication()).getSettings();
  final Map<String,String> entriesMap=settings.getTileSourceEntries();
  if (!settings.isInternetConnectionAvailable(true)) {
    Toast.makeText(activity,R.string.internet_not_available,Toast.LENGTH_LONG).show();
    return;
  }
  final List<TileSourceTemplate> downloaded=TileSourceManager.downloadTileSourceTemplates();
  if (downloaded == null || downloaded.isEmpty()) {
    Toast.makeText(activity,R.string.error_io_error,Toast.LENGTH_SHORT).show();
    return;
  }
  Builder builder=new AlertDialog.Builder(activity);
  String[] names=new String[downloaded.size()];
  for (int i=0; i < names.length; i++) {
    names[i]=downloaded.get(i).getName();
  }
  final boolean[] selected=new boolean[downloaded.size()];
  builder.setMultiChoiceItems(names,selected,new DialogInterface.OnMultiChoiceClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which,    boolean isChecked){
      selected[which]=isChecked;
      if (entriesMap.containsKey(downloaded.get(which).getName()) && isChecked) {
        Toast.makeText(activity,R.string.tile_source_already_installed,Toast.LENGTH_SHORT).show();
      }
    }
  }
);
  builder.setNegativeButton(R.string.default_buttons_cancel,null);
  builder.setTitle(R.string.select_tile_source_to_install);
  builder.setPositiveButton(R.string.default_buttons_apply,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      List<TileSourceTemplate> toInstall=new ArrayList<TileSourceTemplate>();
      for (int i=0; i < selected.length; i++) {
        if (selected[i]) {
          toInstall.add(downloaded.get(i));
        }
      }
      for (      TileSourceTemplate ts : toInstall) {
        settings.installTileSource(ts);
      }
      if (onClickListener != null) {
        onClickListener.onClick(dialog,which);
      }
    }
  }
);
  builder.show();
}
