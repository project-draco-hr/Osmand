{
  OsmandPreference<Boolean> boolPref=booleanPreferences.get(preference.getKey());
  OsmandPreference<Object> listPref=(OsmandPreference<Object>)listPreferences.get(preference.getKey());
  if (boolPref != null) {
    boolPref.set((Boolean)newValue);
  }
 else   if (listPref != null) {
    CharSequence entry=((ListPreference)preference).getEntry();
    Map<String,?> map=listPrefValues.get(preference.getKey());
    Object obj=map.get(entry);
    listPref.set(obj);
    if (listPref.getId().equals(osmandSettings.DAYNIGHT_MODE.getId())) {
      getMyApplication().getDaynightHelper().setDayNightMode(osmandSettings.DAYNIGHT_MODE.get());
    }
 else     if (listPref.getId().equals(osmandSettings.VOICE_PROVIDER.getId())) {
      getMyApplication().initCommandPlayer();
    }
 else     if (listPref.getId().equals(osmandSettings.PREFERRED_LOCALE.getId())) {
      getMyApplication().checkPrefferedLocale();
      Intent intent=getIntent();
      finish();
      startActivity(intent);
    }
  }
 else   if (preference == applicationMode) {
    boolean changed=ApplicationMode.setAppMode(ApplicationMode.valueOf(newValue.toString()),getMyApplication());
    if (changed) {
      updateAllSettings();
    }
  }
 else   if (preference == saveTrackInterval) {
    editInt(OsmandSettings.SAVE_TRACK_INTERVAL,Integer.parseInt(newValue.toString()));
  }
 else   if (preference == routeServiceInterval) {
    editInt(OsmandSettings.SERVICE_OFF_INTERVAL,Integer.parseInt((String)newValue) * 1000);
  }
 else   if (preference == routeServiceWaitInterval) {
    editInt(OsmandSettings.SERVICE_OFF_WAIT_INTERVAL,Integer.parseInt((String)newValue) * 1000);
  }
 else   if (preference == userPassword) {
    editString(OsmandSettings.USER_PASSWORD,(String)newValue);
  }
 else   if (preference == userName) {
    editString(OsmandSettings.USER_NAME,(String)newValue);
  }
 else   if (preference == applicationDir) {
    warnAboutChangingStorage((String)newValue);
    return false;
  }
 else   if (preference == routeServiceEnabled) {
    Intent serviceIntent=new Intent(this,NavigationService.class);
    if ((Boolean)newValue) {
      ComponentName name=startService(serviceIntent);
      if (name == null) {
        routeServiceEnabled.setChecked(getMyApplication().getNavigationService() != null);
      }
    }
 else {
      if (!stopService(serviceIntent)) {
        routeServiceEnabled.setChecked(getMyApplication().getNavigationService() != null);
      }
    }
  }
 else   if (preference == rendererPreference) {
    BaseOsmandRender loaded=RendererRegistry.getRegistry().getRenderer((String)newValue);
    if (loaded == null) {
      Toast.makeText(this,R.string.renderer_load_exception,Toast.LENGTH_SHORT).show();
    }
 else {
      RendererRegistry.getRegistry().setCurrentSelectedRender(loaded);
      editString(OsmandSettings.RENDERER,(String)newValue);
      Toast.makeText(this,R.string.renderer_load_sucess,Toast.LENGTH_SHORT).show();
      getMyApplication().getResourceManager().getRenderer().clearCache();
    }
  }
 else   if (preference == tileSourcePreference) {
    if (VECTOR_MAP.equals((String)newValue)) {
      editBoolean(OsmandSettings.MAP_VECTOR_DATA,true);
    }
 else {
      editString(OsmandSettings.MAP_TILE_SOURCES,(String)newValue);
      editBoolean(OsmandSettings.MAP_VECTOR_DATA,false);
    }
    String summary=tileSourcePreference.getSummary().toString();
    if (summary.lastIndexOf(':') != -1) {
      summary=summary.substring(0,summary.lastIndexOf(':') + 1);
    }
    SharedPreferences prefs=OsmandSettings.getPrefs(this);
    summary+=" " + (OsmandSettings.isUsingMapVectorData(prefs) ? getString(R.string.vector_data) : OsmandSettings.getMapTileSourceName(prefs));
    tileSourcePreference.setSummary(summary);
  }
  return true;
}
