{
  BooleanPreference p=null;
  for (  BooleanPreference b : booleanPreferences) {
    if (b.getPref() == preference) {
      p=b;
      break;
    }
  }
  if (p != null) {
    editBoolean(p.getId(),(Boolean)newValue);
  }
 else   if (preference == applicationMode) {
    boolean changed=ApplicationMode.setAppMode(ApplicationMode.valueOf(newValue.toString()),getMyApplication());
    if (changed) {
      updateAllSettings();
    }
  }
 else   if (preference == daynightMode) {
    editString(OsmandSettings.DAYNIGHT_MODE,(String)newValue);
    getMyApplication().getDaynightHelper().setDayNightMode(DayNightMode.valueOf(newValue.toString()));
  }
 else   if (preference == mapScreenOrientation) {
    editInt(OsmandSettings.MAP_SCREEN_ORIENTATION,Integer.parseInt(newValue.toString()));
  }
 else   if (preference == saveTrackInterval) {
    editInt(OsmandSettings.SAVE_TRACK_INTERVAL,Integer.parseInt(newValue.toString()));
  }
 else   if (preference == userPassword) {
    editString(OsmandSettings.USER_PASSWORD,(String)newValue);
  }
 else   if (preference == useInternetToDownload) {
    OsmandSettings.setUseInternetToDownloadTiles((Boolean)newValue,OsmandSettings.getWriteableEditor(this));
  }
 else   if (preference == userName) {
    editString(OsmandSettings.USER_NAME,(String)newValue);
  }
 else   if (preference == applicationDir) {
    warnAboutChangingStorage((String)newValue);
    return false;
  }
 else   if (preference == positionOnMap) {
    editInt(OsmandSettings.POSITION_ON_MAP,positionOnMap.findIndexOfValue((String)newValue));
  }
 else   if (preference == maxLevelToDownload) {
    editInt(OsmandSettings.MAX_LEVEL_TO_DOWNLOAD_TILE,Integer.parseInt((String)newValue));
  }
 else   if (preference == routeServiceInterval) {
    editInt(OsmandSettings.SERVICE_OFF_INTERVAL,Integer.parseInt((String)newValue) * 1000);
  }
 else   if (preference == routeServiceWaitInterval) {
    editInt(OsmandSettings.SERVICE_OFF_WAIT_INTERVAL,Integer.parseInt((String)newValue) * 1000);
  }
 else   if (preference == rotateMap) {
    editInt(OsmandSettings.ROTATE_MAP,Integer.parseInt((String)newValue));
  }
 else   if (preference == routeServiceProvider) {
    editString(OsmandSettings.SERVICE_OFF_PROVIDER,(String)newValue);
  }
 else   if (preference == routeServiceEnabled) {
    Intent serviceIntent=new Intent(this,NavigationService.class);
    if ((Boolean)newValue) {
      ComponentName name=startService(serviceIntent);
      if (name == null) {
        routeServiceEnabled.setChecked(getMyApplication().getNavigationService() != null);
      }
    }
 else {
      if (!stopService(serviceIntent)) {
        routeServiceEnabled.setChecked(getMyApplication().getNavigationService() != null);
      }
    }
  }
 else   if (preference == routerPreference) {
    RouteService s=null;
    for (    RouteService r : RouteService.values()) {
      if (r.getName().equals(newValue)) {
        s=r;
        break;
      }
    }
    if (s != null) {
      editInt(OsmandSettings.ROUTER_SERVICE,s.ordinal());
    }
  }
 else   if (preference == rendererPreference) {
    BaseOsmandRender loaded=RendererRegistry.getRegistry().getRenderer((String)newValue);
    if (loaded == null) {
      Toast.makeText(this,R.string.renderer_load_exception,Toast.LENGTH_SHORT).show();
    }
 else {
      RendererRegistry.getRegistry().setCurrentSelectedRender(loaded);
      editString(OsmandSettings.RENDERER,(String)newValue);
      Toast.makeText(this,R.string.renderer_load_sucess,Toast.LENGTH_SHORT).show();
      getMyApplication().getResourceManager().getRenderer().clearCache();
    }
  }
 else   if (preference == voicePreference) {
    int i=voicePreference.findIndexOfValue((String)newValue);
    if (i == 0) {
      editString(OsmandSettings.VOICE_PROVIDER,null);
    }
 else {
      editString(OsmandSettings.VOICE_PROVIDER,(String)newValue);
    }
    getMyApplication().initCommandPlayer();
  }
 else   if (preference == metricPreference) {
    MetricsConstants mc=MetricsConstants.valueOf((String)newValue);
    OsmandSettings.setDefaultMetricConstants(mc,this);
  }
 else   if (preference == preferredLocale) {
    editString(OsmandSettings.PREFERRED_LOCALE,(String)newValue);
    getMyApplication().checkPrefferedLocale();
    Intent intent=getIntent();
    finish();
    startActivity(intent);
  }
 else   if (preference == tileSourcePreference) {
    if (VECTOR_MAP.equals((String)newValue)) {
      editBoolean(OsmandSettings.MAP_VECTOR_DATA,true);
    }
 else {
      editString(OsmandSettings.MAP_TILE_SOURCES,(String)newValue);
      editBoolean(OsmandSettings.MAP_VECTOR_DATA,false);
    }
    String summary=tileSourcePreference.getSummary().toString();
    if (summary.lastIndexOf(':') != -1) {
      summary=summary.substring(0,summary.lastIndexOf(':') + 1);
    }
    SharedPreferences prefs=OsmandSettings.getPrefs(this);
    summary+=" " + (OsmandSettings.isUsingMapVectorData(prefs) ? getString(R.string.vector_data) : OsmandSettings.getMapTileSourceName(prefs));
    tileSourcePreference.setSummary(summary);
  }
  return true;
}
