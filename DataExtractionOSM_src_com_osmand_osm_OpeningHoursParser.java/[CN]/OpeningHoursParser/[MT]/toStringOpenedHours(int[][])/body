{
  Map<Integer,List<Integer>> groups=new LinkedHashMap<Integer,List<Integer>>();
  for (int k=0; k < 7; k++) {
    if (hours[k][0] >= 0 && hours[k][1] >= 0) {
      int uniqueInt=hours[k][1] * 60 * 24 + hours[k][0];
      if (!groups.containsKey(uniqueInt)) {
        groups.put(uniqueInt,new ArrayList<Integer>());
      }
      groups.get(uniqueInt).add(k);
    }
  }
  StringBuilder b=new StringBuilder(100);
  boolean first=true;
  for (  Integer time : groups.keySet()) {
    if (first) {
      first=false;
    }
 else {
      b.append("; ");
    }
    int end=time / (60 * 24);
    int st=time - end * (60 * 24);
    int stHour=st / 60;
    int stTime=st - stHour * 60;
    int endHour=end / 60;
    int endTime=end - endHour * 60;
    List<Integer> list=groups.get(time);
    boolean dash=false;
    for (int k=0; k < list.size(); k++) {
      Integer val=list.get(k);
      if (k > 0) {
        if (k < list.size() - 1 && list.get(k + 1) == val + 1 && list.get(k - 1) == val - 1) {
          if (!dash) {
            b.append("-");
            dash=true;
          }
        }
 else         if (dash) {
          b.append(daysStr[val]);
          dash=false;
        }
 else {
          b.append(", ").append(daysStr[val]);
        }
      }
 else {
        b.append(daysStr[val]);
      }
    }
    b.append(" ");
    formatTime(stHour,stTime,b);
    b.append("-");
    formatTime(endHour,endTime,b);
  }
  return b.toString();
}
