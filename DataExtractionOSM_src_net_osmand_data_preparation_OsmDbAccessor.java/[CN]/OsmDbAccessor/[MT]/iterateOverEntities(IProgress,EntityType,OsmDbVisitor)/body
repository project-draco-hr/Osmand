{
  if (dialect == DBDialect.NOSQL) {
    return iterateOverEntitiesNoSQL(progress,type,visitor);
  }
  Statement statement=dbConn.createStatement();
  String select;
  int count=0;
  computeRealCounts(statement);
  if (type == EntityType.NODE) {
    select="select n.id, n.latitude, n.longitude, t.skeys, t.value from node n inner join tags t on n.id = t.id and t.type = 0 order by n.id";
    count=allNodes;
  }
 else   if (type == EntityType.WAY) {
    select="select w.id, w.node, w.ord, t.skeys, t.value, n.latitude, n.longitude " + "from ways w left join tags t on w.id = t.id and t.type = 1 and w.ord = 0 inner join node n on w.node = n.id " + "order by w.id, w.ord";
    count=allWays;
  }
 else {
    select="select r.id, t.skeys, t.value  from relations r inner join tags t on t.id = r.id and t.type = 2 and r.ord = 0";
    count=allRelations;
  }
  progress.startWork(count);
  BlockingQueue<Entity> toProcess=new ArrayBlockingQueue<Entity>(100000);
  EntityProducer entityProducer=new EntityProducer(toProcess,type,statement,select);
  entityProducer.start();
  count=0;
  while (true) {
    Entity entityToProcess=toProcess.take();
    if (entityToProcess == entityProducer.getEndingEntity()) {
      break;
    }
    if (progress != null) {
      progress.progress(1);
    }
    count++;
    visitor.iterateEntity(entityToProcess,this);
  }
  return count;
}
