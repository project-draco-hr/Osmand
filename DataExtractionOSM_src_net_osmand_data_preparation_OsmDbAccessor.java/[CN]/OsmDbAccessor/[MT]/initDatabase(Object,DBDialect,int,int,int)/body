{
  this.dialect=dialect;
  this.allNodes=allNodes;
  this.allWays=allWays;
  this.allRelations=allRelations;
  if (this.dialect == DBDialect.NOSQL) {
    accessor=(DBAccessor)dbConnection;
    randomAccessOptions=new ReadOptions();
  }
 else {
    this.dbConn=(Connection)dbConnection;
    pselectNode=dbConn.prepareStatement("select n.latitude, n.longitude, t.skeys, t.value from node n left join tags t on n.id = t.id and t.type = 0 where n.id = ?");
    pselectWay=dbConn.prepareStatement("select w.node, w.ord, t.skeys, t.value, n.latitude, n.longitude " + "from ways w left join tags t on w.id = t.id and t.type = 1 and w.ord = 0 inner join node n on w.node = n.id " + "where w.id = ? order by w.ord");
    pselectRelation=dbConn.prepareStatement("select r.member, r.type, r.role, r.ord, t.skeys, t.value " + "from relations r left join tags t on r.id = t.id and t.type = 2 and r.ord = 0 " + "where r.id = ? order by r.ord");
    pselectTags=dbConn.prepareStatement("select skeys, value from tags where id = ? and type = ?");
    iterateNodes=dbConn.prepareStatement("select n.id, n.latitude, n.longitude, t.skeys, t.value from node n inner join tags t on n.id = t.id and t.type = 0 order by n.id");
    iterateWays=dbConn.prepareStatement("select w.id, w.node, w.ord, t.skeys, t.value, n.latitude, n.longitude " + "from ways w left join tags t on w.id = t.id and t.type = 1 and w.ord = 0 inner join node n on w.node = n.id " + "order by w.id, w.ord");
    iterateRelations=dbConn.prepareStatement("select r.id, t.skeys, t.value  from relations r inner join tags t on t.id = r.id and t.type = 2 and r.ord = 0");
  }
}
