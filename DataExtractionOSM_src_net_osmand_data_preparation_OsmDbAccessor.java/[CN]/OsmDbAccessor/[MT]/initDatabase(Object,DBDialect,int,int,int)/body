{
  this.dialect=dialect;
  this.allNodes=allNodes;
  this.allWays=allWays;
  this.allRelations=allRelations;
  if (this.dialect == DBDialect.NOSQL) {
    throw new UnsupportedOperationException();
  }
 else {
    this.dbConn=(Connection)dbConnection;
    pselectNode=dbConn.prepareStatement("select n.latitude, n.longitude, n.tags from node n where n.id = ?");
    pselectWay=dbConn.prepareStatement("select w.node, w.ord, w.tags, n.latitude, n.longitude, n.tags " + "from ways w left join node n on w.node = n.id where w.id = ? order by w.ord");
    pselectRelation=dbConn.prepareStatement("select r.member, r.type, r.role, r.ord, r.tags " + "from relations r where r.id = ? order by r.ord");
    iterateNodes=dbConn.prepareStatement("select n.id, n.latitude, n.longitude, n.tags from node n where length(n.tags) > 0");
    iterateWays=dbConn.prepareStatement("select w.id, w.node, w.ord, w.tags, n.latitude, n.longitude, n.tags " + "from ways w left join node n on w.node = n.id order by w.id, w.ord");
    iterateWayBoundaries=dbConn.prepareStatement("select w.id, w.node, w.ord, w.tags, n.latitude, n.longitude, n.tags " + "from ways w left join node n on w.node = n.id  where w.boundary > 0 order by w.id, w.ord");
    iterateRelations=dbConn.prepareStatement("select r.id, r.tags from relations r where length(r.tags) > 0");
  }
}
