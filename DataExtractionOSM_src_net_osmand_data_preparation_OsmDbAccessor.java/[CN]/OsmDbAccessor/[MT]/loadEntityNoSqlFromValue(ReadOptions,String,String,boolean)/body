{
  if (value == null) {
    return null;
  }
  Entity e=null;
  long id=Long.parseLong(key.substring(1));
  ArraySerializer.EntityValueTokenizer tokenizer=new EntityValueTokenizer();
  tokenizer.tokenize(value);
  assertToken(ArraySerializer.START_ARRAY,tokenizer.next(),value);
  int next=tokenizer.next();
  if (next == ArraySerializer.ELEMENT && skipIfEmptyTags) {
    return null;
  }
  if (key.charAt(0) == '0') {
    e=new Node(0,0,id);
  }
 else   if (key.charAt(0) == '1') {
    e=new Way(id);
  }
 else   if (key.charAt(0) == '2') {
    e=new Relation(id);
  }
  if (next == ArraySerializer.START_ARRAY) {
    int n=tokenizer.next();
    while (n == ArraySerializer.ELEMENT) {
      String tagKey=tokenizer.value();
      assertToken(ArraySerializer.ELEMENT,tokenizer.next(),value);
      String tagValue=tokenizer.value();
      e.putTag(tagKey,tagValue);
      n=tokenizer.next();
    }
  }
  if (key.charAt(0) == '0') {
    try {
      assertToken(ArraySerializer.ELEMENT,tokenizer.next(),value);
      double lat=Double.parseDouble(tokenizer.value());
      assertToken(ArraySerializer.ELEMENT,tokenizer.next(),value);
      double lon=Double.parseDouble(tokenizer.value());
      ((Node)e).setLatitude(lat);
      ((Node)e).setLongitude(lon);
    }
 catch (    java.lang.NumberFormatException ex) {
      log.warn("Cannot parse lat/log for Node with key:" + key + " value:"+ value);
      e=null;
    }
  }
 else   if (key.charAt(0) == '1') {
    assertToken(ArraySerializer.START_ARRAY,tokenizer.next(),value);
    int n=tokenizer.next();
    while (n == ArraySerializer.ELEMENT) {
      String pointId="0" + tokenizer.value();
      String pointVal=this.accessor.get(opts,pointId);
      Node node=(Node)loadEntityNoSqlFromValue(opts,pointId,pointVal,false);
      if (node != null) {
        ((Way)e).addNode(node);
      }
      n=tokenizer.next();
    }
  }
 else   if (key.charAt(0) == '2') {
    assertToken(ArraySerializer.START_ARRAY,tokenizer.next(),value);
    int n=tokenizer.next();
    while (n == ArraySerializer.ELEMENT) {
      String mkey=tokenizer.value();
      EntityType t=null;
      long mid=Long.parseLong(mkey.substring(1));
      if (mkey.charAt(0) == '0') {
        t=EntityType.NODE;
      }
 else       if (mkey.charAt(0) == '1') {
        t=EntityType.WAY;
      }
 else       if (mkey.charAt(0) == '2') {
        t=EntityType.RELATION;
      }
      assertToken(ArraySerializer.ELEMENT,tokenizer.next(),value);
      String role=tokenizer.value();
      ((Relation)e).addMember(mid,t,role);
      n=tokenizer.next();
    }
  }
  return e;
}
