{
  IconsCache iconsCache=getMyApplication().getIconsCache();
  final PopupMenu optionsMenu=new PopupMenu(getActivity(),v);
  DirectionsDialogs.setupPopUpMenuIcon(optionsMenu);
  MenuItem item;
  boolean isPhoto=recording.isPhoto();
  Drawable playIcon;
  if (isPhoto) {
    playIcon=getMyApplication().getIconsCache().getThemedIcon(R.drawable.ic_action_view);
  }
 else {
    playIcon=getMyApplication().getIconsCache().getThemedIcon(R.drawable.ic_play_dark);
  }
  item=optionsMenu.getMenu().add(isPhoto ? R.string.watch : R.string.recording_context_menu_play).setIcon(playIcon);
  item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      plugin.playRecording(getActivity(),recording);
      return true;
    }
  }
);
  item=optionsMenu.getMenu().add(R.string.shared_string_show_on_map).setIcon(iconsCache.getThemedIcon(R.drawable.ic_show_on_map));
  item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      showOnMap(recording);
      return true;
    }
  }
);
  item=optionsMenu.getMenu().add(R.string.shared_string_share).setIcon(iconsCache.getThemedIcon(R.drawable.ic_action_gshare_dark));
  item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      Intent sharingIntent=new Intent(Intent.ACTION_SEND);
      if (recording.isPhoto()) {
        Uri screenshotUri=Uri.parse(recording.getFile().getAbsolutePath());
        sharingIntent.setType("image/*");
        sharingIntent.putExtra(Intent.EXTRA_STREAM,screenshotUri);
      }
 else       if (recording.isAudio()) {
        Uri audioUri=Uri.parse(recording.getFile().getAbsolutePath());
        sharingIntent.setType("audio/*");
        sharingIntent.putExtra(Intent.EXTRA_STREAM,audioUri);
      }
 else       if (recording.isVideo()) {
        Uri videoUri=Uri.parse(recording.getFile().getAbsolutePath());
        sharingIntent.setType("video/*");
        sharingIntent.putExtra(Intent.EXTRA_STREAM,videoUri);
      }
      startActivity(Intent.createChooser(sharingIntent,getString(R.string.share_note)));
      return true;
    }
  }
);
  item=optionsMenu.getMenu().add(R.string.shared_string_rename).setIcon(iconsCache.getThemedIcon(R.drawable.ic_action_edit_dark));
  item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      editNote(recording);
      return true;
    }
  }
);
  item=optionsMenu.getMenu().add(R.string.recording_context_menu_delete).setIcon(iconsCache.getThemedIcon(R.drawable.ic_action_delete_dark));
  item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
      builder.setMessage(R.string.recording_delete_confirm);
      builder.setPositiveButton(R.string.shared_string_yes,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          plugin.deleteRecording(recording,true);
          listAdapter.remove(recording);
        }
      }
);
      builder.setNegativeButton(R.string.shared_string_cancel,null);
      builder.show();
      return true;
    }
  }
);
  optionsMenu.show();
}
