{
  boolean light=getMyApplication().getSettings().isLightContent();
  final PopupMenu optionsMenu=new PopupMenu(getActivity(),v);
  DirectionsDialogs.setupPopUpMenuIcon(optionsMenu);
  MenuItem item;
  boolean isPhoto=recording.isPhoto();
  final int playIcon;
  if (isPhoto) {
    playIcon=light ? R.drawable.ic_action_eye_light : R.drawable.ic_action_eye_dark;
  }
 else {
    playIcon=light ? R.drawable.ic_play_light : R.drawable.ic_play_dark;
  }
  item=optionsMenu.getMenu().add(isPhoto ? R.string.watch : R.string.recording_context_menu_play).setIcon(playIcon);
  item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      plugin.playRecording(getActivity(),recording);
      return true;
    }
  }
);
  item=optionsMenu.getMenu().add(R.string.search_shown_on_map).setIcon(light ? R.drawable.ic_action_map_marker_light : R.drawable.ic_action_map_marker_dark);
  item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      getMyApplication().getSettings().setMapLocationToShow(recording.getLatitude(),recording.getLongitude(),15,null,recording.getName(),recording);
      MapActivity.launchMapActivityMoveToTop(getActivity());
      return true;
    }
  }
);
  item=optionsMenu.getMenu().add(R.string.share_fav).setIcon(light ? R.drawable.ic_action_gshare_light : R.drawable.ic_action_gshare_dark);
  item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      return true;
    }
  }
);
  item=optionsMenu.getMenu().add(R.string.local_index_mi_rename).setIcon(light ? R.drawable.ic_action_edit_light : R.drawable.ic_action_edit_dark);
  item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      editNote(recording);
      return true;
    }
  }
);
  item=optionsMenu.getMenu().add(R.string.recording_context_menu_delete).setIcon(light ? R.drawable.ic_action_delete_light : R.drawable.ic_action_delete_dark);
  item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
      builder.setMessage(R.string.recording_delete_confirm);
      builder.setPositiveButton(R.string.default_buttons_yes,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          plugin.deleteRecording(recording);
          listAdapter.remove(recording);
        }
      }
);
      builder.setNegativeButton(R.string.default_buttons_cancel,null);
      builder.show();
      return true;
    }
  }
);
  optionsMenu.show();
}
