{
  if (tb.getZoom() >= startZoom) {
    data.queryNewData(tb);
    if (route != null) {
      attrs.updatePaints(view,settings,tb);
      canvas.rotate(-tb.getRotate(),tb.getCenterPixelX(),tb.getCenterPixelY());
      try {
        path.reset();
        List<Way> ws=route.getAggregateForwardWays();
        for (        Way w : ws) {
          TIntArrayList tx=new TIntArrayList();
          TIntArrayList ty=new TIntArrayList();
          for (int i=0; i < w.getNodes().size(); i++) {
            Node o=w.getNodes().get(i);
            int x=(int)tb.getPixXFromLatLon(o.getLatitude(),o.getLongitude());
            int y=(int)tb.getPixYFromLatLon(o.getLatitude(),o.getLongitude());
            tx.add(x);
            ty.add(y);
          }
          calculatePath(tb,tx,ty,path);
        }
        attrs.drawPath(canvas,path);
      }
  finally {
        canvas.rotate(tb.getRotate(),tb.getCenterPixelX(),tb.getCenterPixelY());
      }
    }
    float iconSize=stopBus.getWidth() * 3 / 2.5f;
    QuadTree<QuadRect> boundIntersections=initBoundIntersections(tb);
    List<TransportStop> fullObjects=new ArrayList<>();
    for (    TransportStop o : data.getResults()) {
      float x=tb.getPixXFromLatLon(o.getLocation().getLatitude(),o.getLocation().getLongitude());
      float y=tb.getPixYFromLatLon(o.getLocation().getLatitude(),o.getLocation().getLongitude());
      if (intersects(boundIntersections,x,y,iconSize,iconSize)) {
        canvas.drawBitmap(stopSmall,x - stopSmall.getWidth() / 2,y - stopSmall.getHeight() / 2,paintIcon);
      }
 else {
        fullObjects.add(o);
      }
    }
    for (    TransportStop o : fullObjects) {
      float x=tb.getPixXFromLatLon(o.getLocation().getLatitude(),o.getLocation().getLongitude());
      float y=tb.getPixYFromLatLon(o.getLocation().getLatitude(),o.getLocation().getLongitude());
      Bitmap b=stopBus;
      canvas.drawBitmap(b,x - b.getWidth() / 2,y - b.getHeight() / 2,paintIcon);
    }
  }
}
