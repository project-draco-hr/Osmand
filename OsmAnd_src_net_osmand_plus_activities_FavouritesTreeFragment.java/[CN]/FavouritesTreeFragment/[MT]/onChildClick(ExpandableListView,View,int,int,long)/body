{
  if (selectionMode) {
    CheckBox ch=(CheckBox)v.findViewById(R.id.check_item);
    FavouritePoint model=favouritesAdapter.getChild(groupPosition,childPosition);
    ch.setChecked(!ch.isChecked());
    if (ch.isChecked()) {
      favoritesSelected.add(model);
    }
 else {
      favoritesSelected.remove(model);
    }
    updateSelectionMode(actionMode);
  }
 else {
    ContextMenuAdapter qa=new ContextMenuAdapter(v.getContext());
    qa.setAnchor(v);
    final OsmandSettings settings=getMyApplication().getSettings();
    final FavouritePoint point=(FavouritePoint)favouritesAdapter.getChild(groupPosition,childPosition);
    String name=getString(R.string.favorite) + ": " + point.getName();
    LatLon location=new LatLon(point.getLatitude(),point.getLongitude());
    OnClickListener onshow=new OnClickListener(){
      @Override public void onClick(      View v){
        settings.SHOW_FAVORITES.set(true);
      }
    }
;
    MapActivityActions.createDirectionsActions(qa,location,point,name,settings.getLastKnownMapZoom(),getActivity(),true,false);
    Item edit=qa.item(R.string.favourites_context_menu_edit).icons(R.drawable.ic_action_edit_light,R.drawable.ic_action_edit_dark);
    edit.listen(new OnContextMenuClick(){
      @Override public void onContextMenuClick(      int itemId,      int pos,      boolean isChecked,      DialogInterface dialog){
        editPoint(point);
      }
    }
).reg();
    Item delete=qa.item(R.string.favourites_context_menu_delete).icons(R.drawable.ic_action_delete_light,R.drawable.ic_action_delete_dark);
    delete.listen(new OnContextMenuClick(){
      @Override public void onContextMenuClick(      int itemId,      int pos,      boolean isChecked,      DialogInterface dialog){
        deletePoint(point);
      }
    }
).reg();
    MapActivityActions.showObjectContextMenu(qa,getActivity(),onshow);
  }
  return true;
}
