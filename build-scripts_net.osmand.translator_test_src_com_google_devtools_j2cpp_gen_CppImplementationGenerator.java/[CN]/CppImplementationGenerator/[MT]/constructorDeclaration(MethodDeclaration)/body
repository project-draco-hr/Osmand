{
  String methodBody;
  IMethodBinding binding=Types.getMethodBinding(m);
  @SuppressWarnings("unchecked") List<Statement> statements=m.getBody().statements();
  if (binding.getDeclaringClass().isEnum()) {
    return enumConstructorDeclaration(m,statements,binding);
  }
 else   if (statements.isEmpty()) {
    methodBody="{\nreturn (self = [super init]);\n}";
  }
 else   if (statements.size() == 1 && (statements.get(0) instanceof ConstructorInvocation || statements.get(0) instanceof SuperConstructorInvocation)) {
    methodBody="{\nreturn " + generateStatement(statements.get(0),false,true) + ";\n}";
  }
 else {
    StringBuffer sb=new StringBuffer();
    Statement first=statements.get(0);
    boolean firstPrinted=false;
    sb.append("{\nif ((self = ");
    if (first instanceof ConstructorInvocation || first instanceof SuperConstructorInvocation) {
      sb.append(generateStatement(first,false,true));
      firstPrinted=true;
    }
 else {
      sb.append("[super init]");
    }
    sb.append(")) {\n");
    for (int i=firstPrinted ? 1 : 0; i < statements.size(); i++) {
      sb.append(generateStatement(statements.get(i),false,true));
    }
    sb.append("}\nreturn self;\n}");
    methodBody=sb.toString();
  }
  return super.constructorDeclaration(m) + " " + reindent(methodBody)+ "\n\n";
}
