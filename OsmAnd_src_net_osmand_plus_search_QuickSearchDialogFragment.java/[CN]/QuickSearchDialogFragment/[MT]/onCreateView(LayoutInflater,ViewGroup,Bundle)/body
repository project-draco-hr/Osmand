{
  final MapActivity mapActivity=getMapActivity();
  final OsmandApplication app=getMyApplication();
  final View view=inflater.inflate(R.layout.search_dialog_fragment,container,false);
  if (savedInstanceState != null) {
    searchQuery=savedInstanceState.getString(QUICK_SEARCH_QUERY_KEY);
  }
  if (searchQuery == null) {
    searchQuery=getArguments().getString(QUICK_SEARCH_QUERY_KEY);
  }
  if (searchQuery == null)   searchQuery="";
  tabToolbarView=view.findViewById(R.id.tab_toolbar_layout);
  tabsView=view.findViewById(R.id.tabs_view);
  searchView=view.findViewById(R.id.search_view);
  buttonToolbarView=view.findViewById(R.id.button_toolbar_layout);
  buttonToolbarImage=(ImageView)view.findViewById(R.id.buttonToolbarImage);
  buttonToolbarImage.setImageDrawable(app.getIconsCache().getThemedIcon(R.drawable.ic_action_marker_dark));
  buttonToolbarText=(TextView)view.findViewById(R.id.buttonToolbarTitle);
  buttonToolbarText.setText(app.getString(R.string.show_on_map).toUpperCase());
  view.findViewById(R.id.buttonToolbar).setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      SearchPhrase searchPhrase=searchUICore.getPhrase();
      if (searchPhrase.isLastWord(ObjectType.POI_TYPE)) {
        OsmandSettings settings=app.getSettings();
        AbstractPoiType abstractPoiType=(AbstractPoiType)searchPhrase.getLastSelectedWord().getResult().object;
        PoiUIFilter filter=new PoiUIFilter(abstractPoiType,app,"");
        if (!Algorithms.isEmpty(searchPhrase.getLastWord())) {
          filter.setFilterByName(searchPhrase.getLastWord());
        }
        app.getPoiFilters().clearSelectedPoiFilters();
        app.getPoiFilters().addSelectedPoiFilter(filter);
        if (location != null) {
          settings.setMapLocationToShow(location.getLatitude(),location.getLongitude(),15);
        }
        MapActivity.launchMapActivityMoveToTop(getActivity());
        hide();
      }
    }
  }
);
  toolbar=(Toolbar)view.findViewById(R.id.toolbar);
  toolbar.setNavigationIcon(app.getIconsCache().getThemedIcon(R.drawable.abc_ic_ab_back_mtrl_am_alpha));
  toolbar.setNavigationContentDescription(R.string.access_shared_string_navigate_up);
  toolbar.setNavigationOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      dismiss();
    }
  }
);
  toolbarEdit=(Toolbar)view.findViewById(R.id.toolbar_edit);
  toolbarEdit.setNavigationIcon(app.getIconsCache().getIcon(R.drawable.ic_action_remove_dark));
  toolbarEdit.setNavigationContentDescription(R.string.shared_string_cancel);
  toolbarEdit.setNavigationOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      enableSelectionMode(false,-1);
    }
  }
);
  titleEdit=(TextView)view.findViewById(R.id.titleEdit);
  view.findViewById(R.id.shareButton).setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      List<HistoryEntry> historyEntries=new ArrayList<HistoryEntry>();
      List<QuickSearchListItem> selectedItems=historySearchFragment.getListAdapter().getSelectedItems();
      for (      QuickSearchListItem searchListItem : selectedItems) {
        HistoryEntry historyEntry=(HistoryEntry)searchListItem.getSearchResult().object;
        historyEntries.add(historyEntry);
      }
      if (historyEntries.size() > 0) {
        shareHistory(historyEntries);
        enableSelectionMode(false,-1);
      }
    }
  }
);
  view.findViewById(R.id.deleteButton).setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      SearchHistoryHelper helper=SearchHistoryHelper.getInstance(app);
      List<QuickSearchListItem> selectedItems=historySearchFragment.getListAdapter().getSelectedItems();
      for (      QuickSearchListItem searchListItem : selectedItems) {
        HistoryEntry historyEntry=(HistoryEntry)searchListItem.getSearchResult().object;
        helper.remove(historyEntry);
      }
      reloadHistory();
      enableSelectionMode(false,-1);
    }
  }
);
  setupSearch(mapActivity);
  viewPager=(LockableViewPager)view.findViewById(R.id.pager);
  pagerAdapter=new SearchFragmentPagerAdapter(getChildFragmentManager(),getResources());
  viewPager.setAdapter(pagerAdapter);
  tabLayout=(TabLayout)view.findViewById(R.id.tab_layout);
  tabLayout.setupWithViewPager(viewPager);
  searchEditText=(EditText)view.findViewById(R.id.searchEditText);
  searchEditText.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      String newQueryText=s.toString();
      updateClearButtonVisibility(newQueryText.length() > 0);
      updateTabbarVisibility(newQueryText.length() == 0);
      if (!searchQuery.equalsIgnoreCase(newQueryText)) {
        searchQuery=newQueryText;
        runSearch();
      }
    }
  }
);
  progressBar=(ProgressBar)view.findViewById(R.id.searchProgressBar);
  clearButton=(ImageButton)view.findViewById(R.id.clearButton);
  clearButton.setImageDrawable(app.getIconsCache().getThemedIcon(R.drawable.ic_action_remove_dark));
  clearButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (searchEditText.getText().length() > 0) {
        String newText=searchUICore.getPhrase().getTextWithoutLastWord();
        searchEditText.setText(newText);
        searchEditText.setSelection(newText.length());
      }
    }
  }
);
  addMainSearchFragment();
  searchEditText.requestFocus();
  AndroidUtils.softKeyboardDelayed(searchEditText);
  return view;
}
