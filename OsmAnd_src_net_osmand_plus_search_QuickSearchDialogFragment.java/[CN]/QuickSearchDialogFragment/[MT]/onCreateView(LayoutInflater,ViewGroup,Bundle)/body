{
  final MapActivity mapActivity=getMapActivity();
  final View view=inflater.inflate(R.layout.search_dialog_fragment,container,false);
  toolbarController=new QuickSearchToolbarController();
  toolbarController.setOnBackButtonClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      mapActivity.showQuickSearch(ShowQuickSearchMode.CURRENT,false);
    }
  }
);
  toolbarController.setOnTitleClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      mapActivity.showQuickSearch(ShowQuickSearchMode.CURRENT,false);
    }
  }
);
  toolbarController.setOnCloseButtonClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      mapActivity.closeQuickSearch();
    }
  }
);
  Bundle arguments=getArguments();
  if (savedInstanceState != null) {
    searchQuery=savedInstanceState.getString(QUICK_SEARCH_QUERY_KEY);
    double lat=savedInstanceState.getDouble(QUICK_SEARCH_LAT_KEY,Double.NaN);
    double lon=savedInstanceState.getDouble(QUICK_SEARCH_LON_KEY,Double.NaN);
    if (!Double.isNaN(lat) && !Double.isNaN(lon)) {
      centerLatLon=new LatLon(lat,lon);
    }
    interruptedSearch=savedInstanceState.getBoolean(QUICK_SEARCH_INTERRUPTED_SEARCH_KEY,false);
    hidden=savedInstanceState.getBoolean(QUICK_SEARCH_HIDDEN_KEY,false);
    toolbarTitle=savedInstanceState.getString(QUICK_SEARCH_TOOLBAR_TITLE_KEY);
    toolbarVisible=savedInstanceState.getBoolean(QUICK_SEARCH_TOOLBAR_VISIBLE_KEY,false);
  }
  if (searchQuery == null && arguments != null) {
    searchQuery=arguments.getString(QUICK_SEARCH_QUERY_KEY);
    double lat=arguments.getDouble(QUICK_SEARCH_LAT_KEY,Double.NaN);
    double lon=arguments.getDouble(QUICK_SEARCH_LON_KEY,Double.NaN);
    if (!Double.isNaN(lat) && !Double.isNaN(lon)) {
      centerLatLon=new LatLon(lat,lon);
    }
    newSearch=true;
  }
  if (searchQuery == null)   searchQuery="";
  boolean showCategories=false;
  if (arguments != null) {
    showCategories=arguments.getBoolean(QUICK_SEARCH_SHOW_CATEGORIES_KEY,false);
  }
  tabToolbarView=view.findViewById(R.id.tab_toolbar_layout);
  tabsView=view.findViewById(R.id.tabs_view);
  searchView=view.findViewById(R.id.search_view);
  buttonToolbarView=view.findViewById(R.id.button_toolbar_layout);
  buttonToolbarImage=(ImageView)view.findViewById(R.id.buttonToolbarImage);
  buttonToolbarImage.setImageDrawable(app.getIconsCache().getThemedIcon(R.drawable.ic_action_marker_dark));
  buttonToolbarText=(TextView)view.findViewById(R.id.buttonToolbarTitle);
  view.findViewById(R.id.buttonToolbar).setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      SearchPhrase searchPhrase=searchUICore.getPhrase();
      if (foundPartialLocation) {
        QuickSearchCoordinatesFragment.showDialog(QuickSearchDialogFragment.this,searchPhrase.getUnknownSearchWord());
      }
 else       if (searchPhrase.isNoSelectedType() || searchPhrase.isLastWord(ObjectType.POI_TYPE)) {
        PoiUIFilter filter;
        if (searchPhrase.isNoSelectedType()) {
          filter=new PoiUIFilter(null,app,"");
          if (!Algorithms.isEmpty(searchPhrase.getUnknownSearchWord())) {
            filter.setFilterByName(searchPhrase.getUnknownSearchWord());
          }
        }
 else         if (searchPhrase.getLastSelectedWord().getResult().object instanceof AbstractPoiType) {
          if (searchPhrase.isNoSelectedType()) {
            filter=new PoiUIFilter(null,app,"");
          }
 else {
            AbstractPoiType abstractPoiType=(AbstractPoiType)searchPhrase.getLastSelectedWord().getResult().object;
            filter=new PoiUIFilter(abstractPoiType,app,"");
          }
          if (!Algorithms.isEmpty(searchPhrase.getUnknownSearchWord())) {
            filter.setFilterByName(searchPhrase.getUnknownSearchWord());
          }
        }
 else {
          filter=(PoiUIFilter)searchPhrase.getLastSelectedWord().getResult().object;
        }
        app.getPoiFilters().clearSelectedPoiFilters();
        app.getPoiFilters().addSelectedPoiFilter(filter);
        showToolbar();
        getMapActivity().refreshMap();
        hide();
      }
 else {
        SearchWord word=searchPhrase.getLastSelectedWord();
        if (word != null && word.getLocation() != null) {
          SearchResult searchResult=word.getResult();
          String name=QuickSearchListItem.getName(app,searchResult);
          String typeName=QuickSearchListItem.getTypeName(app,searchResult);
          PointDescription pointDescription=new PointDescription(PointDescription.POINT_TYPE_ADDRESS,typeName,name);
          app.getSettings().setMapLocationToShow(searchResult.location.getLatitude(),searchResult.location.getLongitude(),searchResult.preferredZoom,pointDescription,true,searchResult.object);
          showToolbar();
          MapActivity.launchMapActivityMoveToTop(getActivity());
          reloadHistory();
          hide();
        }
      }
    }
  }
);
  toolbar=(Toolbar)view.findViewById(R.id.toolbar);
  toolbar.setNavigationIcon(app.getIconsCache().getThemedIcon(R.drawable.abc_ic_ab_back_mtrl_am_alpha));
  toolbar.setNavigationContentDescription(R.string.access_shared_string_navigate_up);
  toolbar.setNavigationOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      dismiss();
    }
  }
);
  toolbarEdit=(Toolbar)view.findViewById(R.id.toolbar_edit);
  toolbarEdit.setNavigationIcon(app.getIconsCache().getIcon(R.drawable.ic_action_remove_dark));
  toolbarEdit.setNavigationContentDescription(R.string.shared_string_cancel);
  toolbarEdit.setNavigationOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      enableSelectionMode(false,-1);
    }
  }
);
  titleEdit=(TextView)view.findViewById(R.id.titleEdit);
  view.findViewById(R.id.shareButton).setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      List<HistoryEntry> historyEntries=new ArrayList<HistoryEntry>();
      List<QuickSearchListItem> selectedItems=historySearchFragment.getListAdapter().getSelectedItems();
      for (      QuickSearchListItem searchListItem : selectedItems) {
        HistoryEntry historyEntry=(HistoryEntry)searchListItem.getSearchResult().object;
        historyEntries.add(historyEntry);
      }
      if (historyEntries.size() > 0) {
        shareHistory(historyEntries);
        enableSelectionMode(false,-1);
      }
    }
  }
);
  view.findViewById(R.id.deleteButton).setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      new DialogFragment(){
        @NonNull @Override public Dialog onCreateDialog(        Bundle savedInstanceState){
          AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
          builder.setTitle(R.string.confirmation_to_delete_history_items).setPositiveButton(R.string.shared_string_yes,new DialogInterface.OnClickListener(){
            @Override public void onClick(            DialogInterface dialog,            int which){
              SearchHistoryHelper helper=SearchHistoryHelper.getInstance(app);
              List<QuickSearchListItem> selectedItems=historySearchFragment.getListAdapter().getSelectedItems();
              for (              QuickSearchListItem searchListItem : selectedItems) {
                HistoryEntry historyEntry=(HistoryEntry)searchListItem.getSearchResult().object;
                helper.remove(historyEntry);
              }
              reloadHistory();
              enableSelectionMode(false,-1);
            }
          }
).setNegativeButton(R.string.shared_string_no,null);
          return builder.create();
        }
      }
.show(getChildFragmentManager(),"DeleteHistoryConfirmationFragment");
    }
  }
);
  viewPager=(LockableViewPager)view.findViewById(R.id.pager);
  pagerAdapter=new SearchFragmentPagerAdapter(getChildFragmentManager(),getResources());
  viewPager.setAdapter(pagerAdapter);
  if (centerLatLon != null || showCategories) {
    viewPager.setCurrentItem(1);
  }
  tabLayout=(TabLayout)view.findViewById(R.id.tab_layout);
  tabLayout.setupWithViewPager(viewPager);
  viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageScrolled(    int position,    float positionOffset,    int positionOffsetPixels){
    }
    @Override public void onPageSelected(    int position){
      hideKeyboard();
    }
    @Override public void onPageScrollStateChanged(    int state){
    }
  }
);
  searchEditText=(EditText)view.findViewById(R.id.searchEditText);
  searchEditText.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      String newQueryText=s.toString();
      updateClearButtonAndHint();
      updateClearButtonVisibility(true);
      updateTabbarVisibility(newQueryText.length() == 0);
      if (!searchQuery.equalsIgnoreCase(newQueryText)) {
        searchQuery=newQueryText;
        if (Algorithms.isEmpty(searchQuery)) {
          searchUICore.resetPhrase();
        }
 else {
          runSearch();
        }
      }
    }
  }
);
  progressBar=(ProgressBar)view.findViewById(R.id.searchProgressBar);
  clearButton=(ImageButton)view.findViewById(R.id.clearButton);
  clearButton.setImageDrawable(app.getIconsCache().getThemedIcon(R.drawable.ic_action_remove_dark));
  clearButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (searchEditText.getText().length() > 0) {
        String newText=searchUICore.getPhrase().getTextWithoutLastWord();
        searchEditText.setText(newText);
        searchEditText.setSelection(newText.length());
      }
 else       if (useMapCenter && location != null) {
        useMapCenter=false;
        centerLatLon=null;
        updateUseMapCenterUI();
        startLocationUpdate();
        LatLon centerLatLon=new LatLon(location.getLatitude(),location.getLongitude());
        SearchSettings ss=searchUICore.getSearchSettings().setOriginalLocation(new LatLon(centerLatLon.getLatitude(),centerLatLon.getLongitude()));
        searchUICore.updateSettings(ss);
        updateClearButtonAndHint();
        updateClearButtonVisibility(true);
      }
      updateToolbarButton();
    }
  }
);
  setupSearch(mapActivity);
  return view;
}
