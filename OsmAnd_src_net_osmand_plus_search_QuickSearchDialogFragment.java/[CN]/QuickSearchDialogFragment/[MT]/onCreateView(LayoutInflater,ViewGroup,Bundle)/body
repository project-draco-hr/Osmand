{
  final MapActivity mapActivity=getMapActivity();
  final View view=inflater.inflate(R.layout.search_dialog_fragment,container,false);
  if (savedInstanceState != null) {
    searchQuery=savedInstanceState.getString(QUICK_SEARCH_QUERY_KEY);
  }
  if (searchQuery == null) {
    searchQuery=getArguments().getString(QUICK_SEARCH_QUERY_KEY);
  }
  if (searchQuery == null)   searchQuery="";
  Toolbar toolbar=(Toolbar)view.findViewById(R.id.toolbar);
  toolbar.setNavigationIcon(R.drawable.abc_ic_ab_back_mtrl_am_alpha);
  toolbar.setNavigationContentDescription(R.string.access_shared_string_navigate_up);
  toolbar.setNavigationOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      dismiss();
    }
  }
);
  setupSearch(mapActivity);
  listView=(ListView)view.findViewById(android.R.id.list);
  listAdapter=new SearchListAdapter(getMyApplication());
  listView.setAdapter(listAdapter);
  listView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      SearchListItem item=listAdapter.getItem(position);
      if (item instanceof SearchMoreListItem) {
        ((SearchMoreListItem)item).getOnClickListener().onClick(view);
      }
 else {
        SearchResult sr=item.getSearchResult();
        boolean updateEditText=true;
        if (sr.objectType == ObjectType.POI || sr.objectType == ObjectType.LOCATION || sr.objectType == ObjectType.HOUSE || sr.objectType == ObjectType.FAVORITE || sr.objectType == ObjectType.RECENT_OBJ || sr.objectType == ObjectType.WPT || sr.objectType == ObjectType.STREET_INTERSECTION) {
          updateEditText=false;
          dismiss();
          if (sr.location != null) {
            showOnMap(sr);
          }
        }
        completeQueryWithObject(item.getSearchResult(),updateEditText);
      }
    }
  }
);
  searchEditText=(EditText)view.findViewById(R.id.searchEditText);
  searchEditText.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      String newQueryText=s.toString();
      if (!searchQuery.equalsIgnoreCase(newQueryText)) {
        searchQuery=newQueryText;
        runSearch();
      }
    }
  }
);
  progressBar=(ProgressBar)view.findViewById(R.id.searchProgressBar);
  clearButton=(ImageButton)view.findViewById(R.id.clearButton);
  clearButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (searchEditText.getText().length() == 0) {
        dismiss();
      }
 else {
        searchEditText.setText("");
      }
    }
  }
);
  searchEditText.requestFocus();
  AndroidUtils.softKeyboardDelayed(searchEditText);
  runSearch();
  return view;
}
