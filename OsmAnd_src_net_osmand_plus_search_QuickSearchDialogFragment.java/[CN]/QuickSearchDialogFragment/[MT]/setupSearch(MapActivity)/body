{
  final OsmandApplication app=mapActivity.getMyApplication();
  String locale=app.getSettings().MAP_PREFERRED_LOCALE.get();
  Collection<RegionAddressRepository> regionAddressRepositories=app.getResourceManager().getAddressRepositories();
  BinaryMapIndexReader[] binaryMapIndexReaderArray=new BinaryMapIndexReader[regionAddressRepositories.size()];
  int i=0;
  for (  RegionAddressRepository rep : regionAddressRepositories) {
    binaryMapIndexReaderArray[i++]=rep.getFile();
  }
  searchUICore=new SearchUICore(app.getPoiTypes(),locale,binaryMapIndexReaderArray);
  LatLon centerLatLon=mapActivity.getMapView().getCurrentRotatedTileBox().getCenterLatLon();
  SearchSettings settings=searchUICore.getPhrase().getSettings().setOriginalLocation(new LatLon(centerLatLon.getLatitude(),centerLatLon.getLongitude()));
  settings=settings.setLang(locale);
  searchUICore.updateSettings(settings);
  searchUICore.setOnResultsComplete(new Runnable(){
    @Override public void run(){
      app.runInUIThread(new Runnable(){
        @Override public void run(){
          hideProgressBar();
        }
      }
);
    }
  }
);
  searchUICore.registerAPI(new SearchCoreFactory.SearchBaseAPI(){
    @Override public boolean search(    SearchPhrase phrase,    SearchResultMatcher resultMatcher){
      List<FavouritePoint> favList=getMyApplication().getFavorites().getFavouritePoints();
      for (      FavouritePoint point : favList) {
        SearchResult sr=new SearchResult(phrase);
        sr.localeName=point.getName();
        sr.object=point;
        sr.priority=SEARCH_FAVORITE_OBJECT_PRIORITY;
        sr.objectType=ObjectType.FAVORITE;
        sr.location=new LatLon(point.getLatitude(),point.getLongitude());
        sr.preferredZoom=17;
        if (phrase.getLastWord().length() <= 1 && phrase.isNoSelectedType()) {
          resultMatcher.publish(sr);
        }
 else         if (phrase.getNameStringMatcher().matches(sr.localeName)) {
          resultMatcher.publish(sr);
        }
      }
      return true;
    }
    @Override public int getSearchPriority(    SearchPhrase p){
      if (!p.isNoSelectedType()) {
        return -1;
      }
      return SEARCH_FAVORITE_API_PRIORITY;
    }
  }
);
  searchUICore.registerAPI(new SearchCoreFactory.SearchBaseAPI(){
    @Override public boolean search(    SearchPhrase phrase,    SearchResultMatcher resultMatcher){
      SearchHistoryHelper helper=SearchHistoryHelper.getInstance((OsmandApplication)getActivity().getApplicationContext());
      List<HistoryEntry> points=helper.getHistoryEntries();
      for (      HistoryEntry point : points) {
        SearchResult sr=new SearchResult(phrase);
        sr.localeName=point.getName().getName();
        sr.object=point;
        sr.priority=SEARCH_HISTORY_OBJECT_PRIORITY;
        sr.objectType=ObjectType.RECENT_OBJ;
        sr.location=new LatLon(point.getLat(),point.getLon());
        sr.preferredZoom=17;
        if (phrase.getLastWord().length() <= 1 && phrase.isNoSelectedType()) {
          resultMatcher.publish(sr);
        }
 else         if (phrase.getNameStringMatcher().matches(sr.localeName)) {
          resultMatcher.publish(sr);
        }
      }
      return true;
    }
    @Override public int getSearchPriority(    SearchPhrase p){
      if (!p.isNoSelectedType()) {
        return -1;
      }
      return SEARCH_HISTORY_API_PRIORITY;
    }
  }
);
}
