{
  FieldDescriptor field;
  final Descriptor type=builder.getDescriptorForType();
  ExtensionRegistry.ExtensionInfo extension=null;
  if (tokenizer.tryConsume("[")) {
    final StringBuilder name=new StringBuilder(tokenizer.consumeIdentifier());
    while (tokenizer.tryConsume(".")) {
      name.append('.');
      name.append(tokenizer.consumeIdentifier());
    }
    extension=extensionRegistry.findExtensionByName(name.toString());
    if (extension == null) {
      throw tokenizer.parseExceptionPreviousToken("Extension \"" + name + "\" not found in the ExtensionRegistry.");
    }
 else     if (extension.descriptor.getContainingType() != type) {
      throw tokenizer.parseExceptionPreviousToken("Extension \"" + name + "\" does not extend message type \""+ type.getFullName()+ "\".");
    }
    tokenizer.consume("]");
    field=extension.descriptor;
  }
 else {
    final String name=tokenizer.consumeIdentifier();
    field=type.findFieldByName(name);
    if (field == null) {
      final String lowerName=name.toLowerCase(Locale.US);
      field=type.findFieldByName(lowerName);
      if (field != null && field.getType() != FieldDescriptor.Type.GROUP) {
        field=null;
      }
    }
    if (field != null && field.getType() == FieldDescriptor.Type.GROUP && !field.getMessageType().getName().equals(name)) {
      field=null;
    }
    if (field == null) {
      throw tokenizer.parseExceptionPreviousToken("Message type \"" + type.getFullName() + "\" has no field named \""+ name+ "\".");
    }
  }
  Object value=null;
  if (field.getJavaType() == FieldDescriptor.JavaType.MESSAGE) {
    tokenizer.tryConsume(":");
    final String endToken;
    if (tokenizer.tryConsume("<")) {
      endToken=">";
    }
 else {
      tokenizer.consume("{");
      endToken="}";
    }
    final Message.Builder subBuilder;
    if (extension == null) {
      subBuilder=builder.newBuilderForField(field);
    }
 else {
      subBuilder=extension.defaultInstance.newBuilderForType();
    }
    while (!tokenizer.tryConsume(endToken)) {
      if (tokenizer.atEnd()) {
        throw tokenizer.parseException("Expected \"" + endToken + "\".");
      }
      mergeField(tokenizer,extensionRegistry,subBuilder);
    }
    value=subBuilder.build();
  }
 else {
    tokenizer.consume(":");
switch (field.getType()) {
case INT32:
case SINT32:
case SFIXED32:
      value=tokenizer.consumeInt32();
    break;
case INT64:
case SINT64:
case SFIXED64:
  value=tokenizer.consumeInt64();
break;
case UINT32:
case FIXED32:
value=tokenizer.consumeUInt32();
break;
case UINT64:
case FIXED64:
value=tokenizer.consumeUInt64();
break;
case FLOAT:
value=tokenizer.consumeFloat();
break;
case DOUBLE:
value=tokenizer.consumeDouble();
break;
case BOOL:
value=tokenizer.consumeBoolean();
break;
case STRING:
value=tokenizer.consumeString();
break;
case BYTES:
value=tokenizer.consumeByteString();
break;
case ENUM:
final EnumDescriptor enumType=field.getEnumType();
if (tokenizer.lookingAtInteger()) {
final int number=tokenizer.consumeInt32();
value=enumType.findValueByNumber(number);
if (value == null) {
throw tokenizer.parseExceptionPreviousToken("Enum type \"" + enumType.getFullName() + "\" has no value with number "+ number+ '.');
}
}
 else {
final String id=tokenizer.consumeIdentifier();
value=enumType.findValueByName(id);
if (value == null) {
throw tokenizer.parseExceptionPreviousToken("Enum type \"" + enumType.getFullName() + "\" has no value named \""+ id+ "\".");
}
}
break;
case MESSAGE:
case GROUP:
throw new RuntimeException("Can't get here.");
}
}
if (field.isRepeated()) {
builder.addRepeatedField(field,value);
}
 else {
builder.setField(field,value);
}
}
