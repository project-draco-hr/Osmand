{
  final int deviceApiVersion=android.os.Build.VERSION.SDK_INT;
  String NOMINATIM_API;
  if (deviceApiVersion >= android.os.Build.VERSION_CODES.GINGERBREAD) {
    NOMINATIM_API="https://nominatim.openstreetmap.org/search/";
  }
 else {
    NOMINATIM_API="http://nominatim.openstreetmap.org/search/";
  }
  currentSearchResult=new ArrayList<Amenity>();
  String viewbox="viewboxlbrt=" + ((float)leftLongitude) + ","+ ((float)bottomLatitude)+ ","+ ((float)rightLongitude)+ ","+ ((float)topLatitude);
  try {
    lastError="";
    String urlq;
    if (addressQuery) {
      urlq=NOMINATIM_API + "?format=xml&addressdetails=0&accept-language=" + Locale.getDefault().getLanguage()+ "&q="+ URLEncoder.encode(getFilterByName());
    }
 else {
      urlq=NOMINATIM_API + URLEncoder.encode(getFilterByName()) + "?format=xml&addressdetails=1&limit="+ LIMIT+ "&bounded=1&"+ viewbox;
    }
    log.info(urlq);
    URLConnection connection=NetworkUtils.getHttpURLConnection(urlq);
    InputStream stream=connection.getInputStream();
    XmlPullParser parser=PlatformUtil.newXMLPullParser();
    parser.setInput(stream,"UTF-8");
    int eventType;
    int namedDepth=0;
    Amenity a=null;
    MapPoiTypes poiTypes=((OsmandApplication)getApplication()).getPoiTypes();
    while ((eventType=parser.next()) != XmlPullParser.END_DOCUMENT) {
      if (eventType == XmlPullParser.START_TAG) {
        if (parser.getName().equals("searchresults")) {
          String err=parser.getAttributeValue("","error");
          if (err != null && err.length() > 0) {
            lastError=err;
            stream.close();
            return currentSearchResult;
          }
        }
        if (parser.getName().equals("place")) {
          namedDepth++;
          if (namedDepth == 1) {
            try {
              a=new Amenity();
              a.setLocation(Double.parseDouble(parser.getAttributeValue("","lat")),Double.parseDouble(parser.getAttributeValue("","lon")));
              a.setId(Long.parseLong(parser.getAttributeValue("","place_id")));
              String name=parser.getAttributeValue("","display_name");
              a.setName(name);
              a.setEnName(Junidecode.unidecode(name));
              a.setType(poiTypes.getOtherPoiCategory());
              a.setSubType(parser.getAttributeValue("","type"));
              if (matcher == null || matcher.publish(a)) {
                currentSearchResult.add(a);
              }
            }
 catch (            NumberFormatException e) {
              log.info("Invalid attributes",e);
            }
          }
        }
 else         if (a != null && parser.getName().equals(a.getSubType())) {
          if (parser.next() == XmlPullParser.TEXT) {
            String name=parser.getText();
            if (name != null) {
              a.setName(name);
              a.setEnName(Junidecode.unidecode(name));
            }
          }
        }
      }
 else       if (eventType == XmlPullParser.END_TAG) {
        if (parser.getName().equals("place")) {
          namedDepth--;
          if (namedDepth == 0) {
            a=null;
          }
        }
      }
    }
    stream.close();
  }
 catch (  IOException e) {
    log.error("Error loading name finder poi",e);
    lastError=getApplication().getString(R.string.shared_string_io_error);
  }
catch (  XmlPullParserException e) {
    log.error("Error parsing name finder poi",e);
    lastError=getApplication().getString(R.string.shared_string_io_error);
  }
  MapUtils.sortListOfMapObject(currentSearchResult,lat,lon);
  return currentSearchResult;
}
