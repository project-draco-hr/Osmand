{
  View row=convertView;
  boolean checkBox=row != null && row.findViewById(R.id.check_item) instanceof CheckBox;
  boolean same=(selectionMode && checkBox) || (!selectionMode && !checkBox);
  if (row == null || !same) {
    LayoutInflater inflater=getActivity().getLayoutInflater();
    row=inflater.inflate(R.layout.expandable_list_item_category,parent,false);
    fixBackgroundRepeat(row);
  }
  adjustIndicator(groupPosition,isExpanded,row,getMyApplication().getSettings().isLightContent());
  TextView label=(TextView)row.findViewById(R.id.category_name);
  final FavoriteGroup model=getGroup(groupPosition);
  label.setText(model.name.length() == 0 ? getString(R.string.shared_string_favorites) : model.name);
  if (selectionMode) {
    final CheckBox ch=(CheckBox)row.findViewById(R.id.check_item);
    ch.setVisibility(View.VISIBLE);
    ch.setChecked(groupsToDelete.contains(model));
    ch.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        if (ch.isChecked()) {
          groupsToDelete.add(model);
          List<FavouritePoint> fvs=model.points;
          if (fvs != null) {
            favoritesSelected.addAll(fvs);
          }
          favouritesAdapter.notifyDataSetInvalidated();
        }
 else {
          groupsToDelete.remove(model);
        }
        updateSelectionMode(actionMode);
      }
    }
);
  }
 else {
    final CheckBox ch=(CheckBox)row.findViewById(R.id.check_item);
    ch.setVisibility(View.GONE);
  }
  final View ch=row.findViewById(R.id.options);
  if (!selectionMode) {
    ((ImageView)ch).setImageDrawable(getMyApplication().getIconsCache().getContentIcon(R.drawable.ic_overflow_menu_white));
    ch.setVisibility(View.VISIBLE);
    ch.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        openChangeGroupDialog(model);
      }
    }
);
  }
 else {
    ch.setVisibility(View.GONE);
  }
  return row;
}
