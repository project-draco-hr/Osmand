{
  Amenity am=null;
  int x=0;
  int y=0;
  StringBuilder retValue=new StringBuilder();
  PoiCategory amenityType=null;
  LinkedList<String> textTags=null;
  while (true) {
    int t=codedIS.readTag();
    int tag=WireFormat.getTagFieldNumber(t);
    if (amenityType == null && (tag > OsmandOdb.OsmAndPoiBoxDataAtom.CATEGORIES_FIELD_NUMBER || tag == 0)) {
      codedIS.skipRawBytes(codedIS.getBytesUntilLimit());
      return null;
    }
switch (tag) {
case 0:
      if (Algorithms.isEmpty(am.getEnName())) {
        am.setEnName(Junidecode.unidecode(am.getName()));
      }
    req.numberOfAcceptedObjects++;
  if (req.radius > 0) {
    LatLon loc=am.getLocation();
    List<Location> locs=req.tiles.get(req.getTileHashOnPath(loc.getLatitude(),loc.getLongitude()));
    if (locs == null) {
      return null;
    }
    AmenityRoutePoint arp=dist(am.getLocation(),locs,req.radius);
    if (arp == null) {
      return null;
    }
 else {
      am.setRoutePoint(arp);
    }
  }
return am;
case OsmandOdb.OsmAndPoiBoxDataAtom.DX_FIELD_NUMBER:
x=(codedIS.readSInt32() + (px << (24 - zoom))) << 7;
break;
case OsmandOdb.OsmAndPoiBoxDataAtom.DY_FIELD_NUMBER:
y=(codedIS.readSInt32() + (py << (24 - zoom))) << 7;
req.numberOfVisitedObjects++;
if (checkBounds) {
if (left31 > x || right31 < x || top31 > y || bottom31 < y) {
codedIS.skipRawBytes(codedIS.getBytesUntilLimit());
return null;
}
}
am=new Amenity();
am.setLocation(MapUtils.get31LatitudeY(y),MapUtils.get31LongitudeX(x));
break;
case OsmandOdb.OsmAndPoiBoxDataAtom.SUBCATEGORIES_FIELD_NUMBER:
int subtypev=codedIS.readUInt32();
retValue.setLength(0);
PoiSubType st=region.getSubtypeFromId(subtypev,retValue);
if (st != null) {
am.setAdditionalInfo(st.name,retValue.toString());
}
break;
case OsmandOdb.OsmAndPoiBoxDataAtom.TEXTCATEGORIES_FIELD_NUMBER:
int texttypev=codedIS.readUInt32();
retValue.setLength(0);
PoiSubType textt=region.getSubtypeFromId(texttypev,retValue);
if (textt != null && textt.text) {
if (textTags == null) {
textTags=new LinkedList<String>();
}
textTags.add(textt.name);
}
break;
case OsmandOdb.OsmAndPoiBoxDataAtom.TEXTVALUES_FIELD_NUMBER:
String str=codedIS.readString();
if (textTags != null && !textTags.isEmpty()) {
if (str.startsWith(" gz ")) {
int ind=4;
byte[] bytes=new byte[str.length() - ind];
for (int i=ind; i < str.length(); i++) {
char ch=str.charAt(i);
if (ch < 0 || ch >= 256) {
throw new IllegalStateException();
}
if (ch >= 128) {
bytes[i - ind]=(byte)(ch - 256);
}
 else if (ch >= 0) {
bytes[i - ind]=(byte)ch;
}
}
GZIPInputStream gzn=new GZIPInputStream(new ByteArrayInputStream(bytes));
BufferedReader br=new BufferedReader(new InputStreamReader(gzn,"UTF-8"));
StringBuilder bld=new StringBuilder();
String s;
while ((s=br.readLine()) != null) {
bld.append(s);
}
str=bld.toString();
}
am.setAdditionalInfo(textTags.poll(),str);
}
break;
case OsmandOdb.OsmAndPoiBoxDataAtom.CATEGORIES_FIELD_NUMBER:
int cat=codedIS.readUInt32();
int subcatId=cat >> SHIFT_BITS_CATEGORY;
int catId=cat & CATEGORY_MASK;
PoiCategory type=poiTypes.getOtherPoiCategory();
String subtype="";
if (catId < region.categoriesType.size()) {
type=region.categoriesType.get(catId);
List<String> subcats=region.subcategories.get(catId);
if (subcatId < subcats.size()) {
subtype=subcats.get(subcatId);
}
}
if (req.poiTypeFilter == null || req.poiTypeFilter.accept(type,subtype)) {
if (amenityType == null) {
amenityType=type;
am.setSubType(subtype);
am.setType(amenityType);
}
 else {
am.setSubType(am.getSubType() + ";" + subtype);
}
}
break;
case OsmandOdb.OsmAndPoiBoxDataAtom.ID_FIELD_NUMBER:
am.setId(codedIS.readUInt64());
break;
case OsmandOdb.OsmAndPoiBoxDataAtom.NAME_FIELD_NUMBER:
am.setName(codedIS.readString());
break;
case OsmandOdb.OsmAndPoiBoxDataAtom.NAMEEN_FIELD_NUMBER:
am.setEnName(codedIS.readString());
break;
case OsmandOdb.OsmAndPoiBoxDataAtom.OPENINGHOURS_FIELD_NUMBER:
am.setOpeningHours(codedIS.readString());
break;
case OsmandOdb.OsmAndPoiBoxDataAtom.SITE_FIELD_NUMBER:
am.setSite(codedIS.readString());
break;
case OsmandOdb.OsmAndPoiBoxDataAtom.PHONE_FIELD_NUMBER:
am.setPhone(codedIS.readString());
break;
case OsmandOdb.OsmAndPoiBoxDataAtom.NOTE_FIELD_NUMBER:
am.setDescription(codedIS.readString());
break;
default :
skipUnknownField(t);
break;
}
}
}
