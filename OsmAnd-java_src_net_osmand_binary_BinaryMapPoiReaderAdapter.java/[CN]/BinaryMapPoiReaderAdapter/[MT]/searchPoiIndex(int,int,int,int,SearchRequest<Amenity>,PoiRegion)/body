{
  int indexOffset=codedIS.getTotalBytesRead();
  long time=System.currentTimeMillis();
  TLongHashSet skipTiles=null;
  if (req.zoom >= 0 && req.zoom < 16) {
    skipTiles=new TLongHashSet();
  }
  int length;
  int oldLimit;
  TIntLongHashMap offsetsMap=new TIntLongHashMap();
  while (true) {
    if (req.isCancelled()) {
      return;
    }
    int t=codedIS.readTag();
    int tag=WireFormat.getTagFieldNumber(t);
switch (tag) {
case 0:
      return;
case OsmandOdb.OsmAndPoiIndex.BOXES_FIELD_NUMBER:
    length=readInt();
  oldLimit=codedIS.pushLimit(length);
readBoxField(left31,right31,top31,bottom31,0,0,0,offsetsMap,skipTiles,req,region);
codedIS.popLimit(oldLimit);
break;
case OsmandOdb.OsmAndPoiIndex.POIDATA_FIELD_NUMBER:
int[] offsets=offsetsMap.keys();
Arrays.sort(offsets);
if (skipTiles != null) {
skipTiles.clear();
}
LOG.info("Searched poi structure in " + (System.currentTimeMillis() - time) + " ms. Found "+ offsets.length+ " subtrees");
for (int j=0; j < offsets.length; j++) {
long skipVal=offsetsMap.get(offsets[j]);
if (skipTiles != null && skipVal != -1) {
int dzoom=ZOOM_TO_SKIP_FILTER_READ - ZOOM_TO_SKIP_FILTER;
long dx=(skipVal >> ZOOM_TO_SKIP_FILTER_READ);
long dy=skipVal - (dx << ZOOM_TO_SKIP_FILTER_READ);
skipVal=((dx >> dzoom) << ZOOM_TO_SKIP_FILTER) | (dy >> dzoom);
if (skipVal != -1 && skipTiles.contains(skipVal)) {
continue;
}
}
codedIS.seek(offsets[j] + indexOffset);
int len=readInt();
int oldLim=codedIS.pushLimit(len);
boolean read=readPoiData(left31,right31,top31,bottom31,req,region,skipTiles,req.zoom == -1 ? 31 : req.zoom + ZOOM_TO_SKIP_FILTER);
if (read && skipVal != -1 && skipTiles != null) {
skipTiles.add(skipVal);
}
codedIS.popLimit(oldLim);
if (req.isCancelled()) {
return;
}
}
codedIS.skipRawBytes(codedIS.getBytesUntilLimit());
return;
default :
skipUnknownField(t);
break;
}
}
}
