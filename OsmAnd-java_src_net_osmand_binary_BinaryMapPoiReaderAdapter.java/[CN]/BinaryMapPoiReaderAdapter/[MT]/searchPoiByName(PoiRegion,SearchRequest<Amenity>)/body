{
  TIntLongHashMap offsets=new TIntLongHashMap();
  CollatorStringMatcher matcher=new CollatorStringMatcher(req.nameQuery,StringMatcherMode.CHECK_STARTS_FROM_SPACE);
  long time=System.currentTimeMillis();
  int indexOffset=codedIS.getTotalBytesRead();
  while (true) {
    if (req.isCancelled()) {
      return;
    }
    int t=codedIS.readTag();
    int tag=WireFormat.getTagFieldNumber(t);
switch (tag) {
case 0:
      return;
case OsmandOdb.OsmAndPoiIndex.NAMEINDEX_FIELD_NUMBER:
    int length=readInt();
  int oldLimit=codedIS.pushLimit(length);
offsets=readPoiNameIndex(matcher.getCollator(),req.nameQuery,req);
codedIS.popLimit(oldLimit);
break;
case OsmandOdb.OsmAndPoiIndex.POIDATA_FIELD_NUMBER:
Integer[] offKeys=new Integer[offsets.size()];
if (offsets.size() > 0) {
int[] keys=offsets.keys();
for (int i=0; i < keys.length; i++) {
offKeys[i]=keys[i];
}
final TIntLongHashMap foffsets=offsets;
Arrays.sort(offKeys,new Comparator<Integer>(){
@Override public int compare(Integer object1,Integer object2){
return Double.compare(foffsets.get(object1),foffsets.get(object2));
}
}
);
int p=BUCKET_SEARCH_BY_NAME * 3;
if (p < offKeys.length) {
for (int i=p + BUCKET_SEARCH_BY_NAME; ; i+=BUCKET_SEARCH_BY_NAME) {
if (i > offKeys.length) {
Arrays.sort(offKeys,p,offKeys.length);
break;
}
 else {
Arrays.sort(offKeys,p,i);
}
p=i;
}
}
}
LOG.info("Searched poi structure in " + (System.currentTimeMillis() - time) + "ms. Found "+ offKeys.length+ " subtrees");
for (int j=0; j < offKeys.length; j++) {
codedIS.seek(offKeys[j] + indexOffset);
int len=readInt();
int oldLim=codedIS.pushLimit(len);
readPoiData(matcher,req,region);
codedIS.popLimit(oldLim);
if (req.isCancelled() || req.limitExceeded()) {
return;
}
}
LOG.info("Whole poi by name search is done in " + (System.currentTimeMillis() - time) + "ms. Found "+ req.getSearchResults().size());
codedIS.skipRawBytes(codedIS.getBytesUntilLimit());
return;
default :
skipUnknownField(t);
break;
}
}
}
