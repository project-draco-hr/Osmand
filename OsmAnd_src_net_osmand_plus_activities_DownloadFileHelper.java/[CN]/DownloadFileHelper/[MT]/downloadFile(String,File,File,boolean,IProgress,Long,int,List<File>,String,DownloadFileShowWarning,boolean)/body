{
  FileOutputStream out=null;
  try {
    out=new FileOutputStream(fileToDownload);
    try {
      if (parts == 1) {
        URL url=new URL("http://download.osmand.net/download?event=2&file=" + fileName + "&"+ Version.getVersionAsURLParam(ctx));
        downloadFile(fileName,out,url,null,indexOfAllFiles,progress,forceWifi);
      }
 else {
        for (int i=1; i <= parts; i++) {
          URL url=new URL("http://download.osmand.net/download?event=2&file=" + fileName + "-"+ i+ "&"+ Version.getVersionAsURLParam(ctx));
          downloadFile(fileName,out,url," [" + i + "/"+ parts+ "]",indexOfAllFiles,progress,forceWifi);
        }
      }
    }
  finally {
      out.close();
      out=null;
    }
    if (fileToDownload.getName().endsWith(".zip")) {
      if (unzipToDir) {
        fileToUnZip.mkdirs();
      }
      FileInputStream fin=new FileInputStream(fileToDownload);
      ZipInputStream zipIn=new ZipInputStream(fin);
      ZipEntry entry=null;
      boolean first=true;
      int len=(int)fileToDownload.length();
      progress.startTask(ctx.getString(R.string.unzipping_file),len);
      while ((entry=zipIn.getNextEntry()) != null) {
        if (entry.isDirectory() || entry.getName().endsWith(IndexConstants.GEN_LOG_EXT)) {
          continue;
        }
        File fs;
        if (!unzipToDir) {
          if (first) {
            fs=fileToUnZip;
            first=false;
          }
 else {
            String name=entry.getName();
            int ind=name.lastIndexOf('_');
            if (ind > 0) {
              int i=name.indexOf('.',ind);
              if (i > 0) {
                name=name.substring(0,ind) + name.substring(i,name.length());
              }
            }
            fs=new File(fileToUnZip.getParent(),name);
          }
        }
 else {
          fs=new File(fileToUnZip,entry.getName());
        }
        out=new FileOutputStream(fs);
        int read;
        byte[] buffer=new byte[BUFFER_SIZE];
        int count=0;
        while ((read=zipIn.read(buffer)) != -1) {
          out.write(buffer,0,read);
          if (count++ % 8 == 0) {
            progress.remaining(fin.available());
          }
        }
        out.close();
        if (dateModified != null) {
          fs.setLastModified(dateModified);
        }
        toReIndex.add(fs);
      }
      zipIn.close();
      fileToDownload.delete();
    }
    showWarningCallback.showWarning(ctx.getString(R.string.download_index_success));
    return true;
  }
 catch (  IOException e) {
    log.error("Exception ocurred",e);
    showWarningCallback.showWarning(ctx.getString(R.string.error_io_error));
    if (out != null) {
      try {
        out.close();
      }
 catch (      IOException e1) {
      }
    }
    fileToDownload.delete();
    return false;
  }
catch (  InterruptedException e) {
    fileToDownload.delete();
    throw e;
  }
}
