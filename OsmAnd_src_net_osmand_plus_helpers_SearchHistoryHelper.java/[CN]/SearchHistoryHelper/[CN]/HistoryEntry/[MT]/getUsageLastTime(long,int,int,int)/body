{
  long mins=(minutes + (hours + 24 * days) * 60);
  long timeInPast=time - mins * 60 * 1000;
  if (this.lastAccessedTime <= timeInPast) {
    return 0;
  }
  double res=0;
  for (int k=0; k < intervals.length; k++) {
    long intPast=intervals[k] * 60 * 1000;
    if (intPast > 0) {
      double r;
      if (lastAccessedTime - timeInPast >= intPast) {
        r=intervalValues[k];
      }
 else {
        r=intervalValues[k] * ((double)lastAccessedTime - timeInPast) / ((double)intPast);
      }
      res=Math.max(res,r);
    }
  }
  return res;
}
