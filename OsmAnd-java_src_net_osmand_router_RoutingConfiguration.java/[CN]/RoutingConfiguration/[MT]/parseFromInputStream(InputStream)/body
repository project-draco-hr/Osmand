{
  try {
    final SAXParser parser=SAXParserFactory.newInstance().newSAXParser();
    final RoutingConfiguration.Builder config=new RoutingConfiguration.Builder();
    DefaultHandler handler=new DefaultHandler(){
      String currentSelectedRouter=null;
      GeneralRouter currentRouter=null;
      String previousKey=null;
      String previousTag=null;
      @Override public void startElement(      String uri,      String localName,      String qName,      Attributes attributes) throws SAXException {
        String name=parser.isNamespaceAware() ? localName : qName;
        previousTag=name;
        if ("osmand_routing_config".equals(name)) {
          config.defaultRouter=attributes.getValue("defaultProfile");
        }
 else         if ("attribute".equals(name)) {
          if (currentRouter != null) {
            currentRouter.addAttribute(attributes.getValue("name"),attributes.getValue("value"));
          }
 else {
            config.attributes.put(attributes.getValue("name"),attributes.getValue("value"));
          }
        }
 else         if ("routingProfile".equals(name)) {
          currentSelectedRouter=attributes.getValue("name");
          Map<String,String> attrs=new LinkedHashMap<String,String>();
          for (int i=0; i < attributes.getLength(); i++) {
            attrs.put(parser.isNamespaceAware() ? attributes.getLocalName(i) : attributes.getQName(i),attributes.getValue(i));
          }
          currentRouter=new GeneralRouter(GeneralRouterProfile.valueOf(attributes.getValue("baseProfile").toUpperCase()),attrs);
          config.routers.put(currentSelectedRouter,currentRouter);
        }
 else         if ("specialization".equals(name)) {
          String in=attributes.getValue("input");
          if (previousKey != null) {
            String k=in + ":" + previousKey;
            if (attributes.getValue("penalty") != null) {
              float penalty=parseSilentFloat(attributes.getValue("penalty"),0);
              currentRouter.obstacles.put(k,penalty);
              float routingPenalty=parseSilentFloat(attributes.getValue("routingPenalty"),penalty);
              currentRouter.routingObstacles.put(k,routingPenalty);
            }
            if (attributes.getValue("priority") != null) {
              currentRouter.highwayPriorities.put(k,parseSilentFloat(attributes.getValue("priority"),0));
            }
            if (attributes.getValue("speed") != null) {
              currentRouter.highwaySpeed.put(k,parseSilentFloat(attributes.getValue("speed"),0));
            }
            if ("attribute".equals(previousTag)) {
              currentRouter.attributes.put(k,attributes.getValue("value"));
            }
            if ("avoid".equals(previousTag)) {
              float priority=parseSilentFloat(attributes.getValue("decreasedPriority"),0);
              if (priority == 0) {
                currentRouter.avoid.put(k,priority);
              }
 else {
                currentRouter.highwayPriorities.put(k,priority);
              }
            }
          }
        }
 else         if ("road".equals(name)) {
          previousKey=attributes.getValue("tag") + "$" + attributes.getValue("value");
          currentRouter.highwayPriorities.put(previousKey,parseSilentFloat(attributes.getValue("priority"),1));
          currentRouter.highwaySpeed.put(previousKey,parseSilentFloat(attributes.getValue("speed"),10));
        }
 else         if ("obstacle".equals(name)) {
          previousKey=attributes.getValue("tag") + "$" + attributes.getValue("value");
          float penalty=parseSilentFloat(attributes.getValue("penalty"),0);
          currentRouter.obstacles.put(previousKey,penalty);
          float routingPenalty=parseSilentFloat(attributes.getValue("routingPenalty"),penalty);
          currentRouter.routingObstacles.put(previousKey,routingPenalty);
        }
 else         if ("avoid".equals(name)) {
          previousKey=attributes.getValue("tag") + "$" + attributes.getValue("value");
          float priority=parseSilentFloat(attributes.getValue("decreasedPriority"),0);
          if (priority == 0) {
            currentRouter.avoid.put(previousKey,priority);
          }
 else {
            currentRouter.highwayPriorities.put(previousKey,priority);
          }
        }
      }
    }
;
    parser.parse(is,handler);
    return config;
  }
 catch (  ParserConfigurationException e) {
    throw new SAXException(e);
  }
}
