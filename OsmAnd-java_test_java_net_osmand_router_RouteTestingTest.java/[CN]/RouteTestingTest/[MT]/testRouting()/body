{
  String fl="../../resources/test-resources/Turn_lanes_test.obf";
  RandomAccessFile raf=new RandomAccessFile(fl,"r");
  RoutePlannerFrontEnd fe=new RoutePlannerFrontEnd(false);
  BinaryMapIndexReader[] binaryMapIndexReaders={new BinaryMapIndexReader(raf,new File(fl))};
  RoutingConfiguration.Builder builder=RoutingConfiguration.getDefault();
  RoutingConfiguration config=builder.build(params.containsKey("vehicle") ? params.get("vehicle") : "car",RoutingConfiguration.DEFAULT_MEMORY_LIMIT * 3,params);
  RoutingContext ctx=fe.buildRoutingContext(config,null,binaryMapIndexReaders,RoutePlannerFrontEnd.RouteCalculationMode.NORMAL);
  ctx.leftSideNavigation=false;
  List<RouteSegmentResult> routeSegments=fe.searchRoute(ctx,startPoint,endPoint,null);
  Set<Long> reachedSegments=new TreeSet<Long>();
  Assert.assertNotNull(routeSegments);
  int prevSegment=-1;
  for (int i=0; i <= routeSegments.size(); i++) {
    if (i == routeSegments.size() || routeSegments.get(i).getTurnType() != null) {
      if (prevSegment >= 0) {
        String name=routeSegments.get(prevSegment).getDescription();
        long segmentId=routeSegments.get(prevSegment).getObject().getId() >> (BinaryInspector.SHIFT_ID);
        System.out.println("segmentId: " + segmentId + " description: "+ name);
      }
      prevSegment=i;
    }
    if (i < routeSegments.size()) {
      reachedSegments.add(routeSegments.get(i).getObject().getId() >> (BinaryInspector.SHIFT_ID));
    }
  }
  Set<Long> expectedSegments=expectedResults.keySet();
  for (  Long expSegId : expectedSegments) {
    Assert.assertTrue("Expected segment " + (expSegId) + " weren't reached in route segments "+ reachedSegments.toString(),reachedSegments.contains(expSegId));
  }
}
