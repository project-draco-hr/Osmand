{
  System.out.println("Way chains " + coastlinesStartPoint.size());
  final List<CoastlineTile> processed=new ArrayList<CoastlineTile>();
  final List<List<Node>> islands=new ArrayList<List<Node>>();
  coastlinesStartPoint.forEachValue(new TObjectProcedure<WayChain>(){
    @Override public boolean execute(    WayChain object){
      boolean closed=object.getFistNode() == object.getLastNode();
      if (!closed) {
        List<Node> ns=object.getChainNodes();
        boolean update=true;
        CoastlineTile tile=new CoastlineTile(ns);
        while (update) {
          Iterator<CoastlineTile> it=processed.iterator();
          update=false;
          while (it.hasNext()) {
            CoastlineTile newTile=it.next();
            if (newTile.intersect(tile)) {
              it.remove();
              newTile.combineTiles(tile);
              tile=newTile;
              update=true;
              break;
            }
          }
        }
        processed.add(0,tile);
        System.out.println((closed ? "Closed " : "Not closed ") + "way sizes " + object.getWays().size()+ " ids "+ object.getWays());
      }
 else {
        List<Node> nodes=object.getChainNodes();
        Way w=new Way(-1,nodes);
        if (w.getFirstNodeId() != w.getLastNodeId()) {
          w.addNode(w.getNodes().get(0));
        }
        if (MapAlgorithms.isClockwiseWay(w)) {
          if (!object.isIncomplete()) {
            System.out.println("??? Lake " + object.getWays());
          }
        }
 else {
          islands.add(w.getNodes());
        }
      }
      return true;
    }
  }
);
  for (  List<Node> island : islands) {
    boolean log=true;
    for (    CoastlineTile ts : processed) {
      if (ts.contains(island)) {
        ts.addIsland(island);
        log=false;
        break;
      }
    }
    if (log) {
      System.out.println("Island missed");
    }
  }
  OsmBaseStorage st=new OsmBaseStorage();
  OsmStorageWriter writer=new OsmStorageWriter();
  Map<EntityId,Entity> entities=st.getRegisteredEntities();
  for (  CoastlineTile ts : processed) {
    System.out.println("Coastline Tile  left,top,right,bottom : " + ((float)ts.lleft) + ","+ ((float)ts.ltop)+ ","+ ((float)ts.lright)+ ","+ ((float)ts.lbottom));
    System.out.println(" Chains " + ts.chains.size() + " islands "+ ts.islands.size());
    for (    List<Node> ns : ts.chains) {
      registerWay(entities,st.getRegisteredEntityInfo(),ns);
    }
    for (    List<Node> ns : ts.islands) {
      registerWay(entities,st.getRegisteredEntityInfo(),ns);
    }
  }
  try {
    writer.saveStorage(new FileOutputStream("/home/victor/projects/OsmAnd/data/osm-maps/check_coastline.osm"),st,null,true);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  XMLStreamException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}
