{
  Iterator<Entry<SimplisticQuadTree,BinaryFileReference>> it=refs.entrySet().iterator();
  TIntArrayList type=new TIntArrayList();
  type.add(renderingTypes.getCoastlineRuleType().getTargetId());
  while (it.hasNext()) {
    Entry<SimplisticQuadTree,BinaryFileReference> e=it.next();
    MapDataBlock.Builder dataBlock=MapDataBlock.newBuilder();
    SimplisticQuadTree quad=e.getKey();
    for (    Way w : quad.coastlines) {
      dataBlock.setBaseId(w.getId());
      ByteArrayOutputStream bcoordinates=new ByteArrayOutputStream();
      for (      Node n : w.getNodes()) {
        if (n != null) {
          int y=MapUtils.get31TileNumberY(n.getLatitude());
          int x=MapUtils.get31TileNumberX(n.getLongitude());
          Algoritms.writeInt(bcoordinates,x);
          Algoritms.writeInt(bcoordinates,y);
        }
      }
      MapData mapData=writer.writeMapData(0,quad.x << (31 - quad.zoom),quad.y << (31 - quad.zoom),false,bcoordinates.toByteArray(),null,type,null,null,null,dataBlock);
      if (mapData != null) {
        dataBlock.addDataObjects(mapData);
      }
    }
    writer.writeMapDataBlock(dataBlock,null,e.getValue());
  }
}
