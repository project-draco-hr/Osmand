{
  final CollatorStringMatcher sm=nmFilter.length() > 0 ? new CollatorStringMatcher(nmFilter.toString().trim(),StringMatcherMode.CHECK_CONTAINS) : null;
  return new AmenityNameFilter(){
    @Override public boolean accept(    Amenity a){
      if (sm != null) {
        String lower=OsmAndFormatter.getPoiStringWithoutType(a,app.getSettings().MAP_PREFERRED_LOCALE.get(),app.getSettings().MAP_TRANSLITERATE_NAMES.get());
        if (!sm.matches(lower)) {
          return false;
        }
      }
      if (poiAdditionals != null) {
        Iterator<Entry<PoiType,String>> it=poiAdditionals.entrySet().iterator();
        while (it.hasNext()) {
          Entry<PoiType,String> e=it.next();
          String inf=a.getAdditionalInfo(e.getKey().getKeyName());
          if (inf == null) {
            return false;
          }
 else           if (e.getValue() != null && !e.getValue().equalsIgnoreCase(inf)) {
            return false;
          }
        }
      }
      if (allTime) {
        if (!"24/7".equalsIgnoreCase(a.getOpeningHours()) && !"Mo-Su 00:00-24:00".equalsIgnoreCase(a.getOpeningHours())) {
          return false;
        }
      }
      if (open) {
        OpeningHours rs=OpeningHoursParser.parseOpenedHours(a.getOpeningHours());
        if (rs != null) {
          Calendar inst=Calendar.getInstance();
          inst.setTimeInMillis(System.currentTimeMillis());
          boolean work=rs.isOpenedForTime(inst);
          if (!work) {
            return false;
          }
        }
 else {
          return false;
        }
      }
      return true;
    }
  }
;
}
