{
  getMyApplication().applyTheme(this);
  super.onCreate(savedInstanceState);
  setContentView(R.layout.map_markers);
  getSupportActionBar().setTitle(R.string.map_markers);
  ((DynamicListView)getListView()).setDynamicListViewCallbacks(this);
  swipeDismissListener=new SwipeDismissListViewTouchListener(getListView(),new SwipeDismissListViewTouchListener.DismissCallbacks(){
    private List<Object> deletedMarkers=new ArrayList<>();
    @Override public boolean canDismiss(    int position){
      List<Object> activeObjects=getListAdapter().getActiveObjects();
      Object obj=getListAdapter().getItem(position);
      return activeObjects.contains(obj);
    }
    @Override public SwipeDismissListViewTouchListener.Undoable onDismiss(    final int position){
      final StableArrayAdapter stableAdapter=getListAdapter();
      final int activeObjPos;
      final Object item=stableAdapter.getItem(position);
      if (item != null) {
        if (!((MapMarker)item).history) {
          deletedMarkers.add(item);
        }
        stableAdapter.setNotifyOnChange(false);
        stableAdapter.remove(item);
        stableAdapter.getObjects().remove(item);
        activeObjPos=stableAdapter.getActiveObjects().indexOf(item);
        stableAdapter.getActiveObjects().remove(item);
        stableAdapter.refreshData();
        stableAdapter.notifyDataSetChanged();
        return new SwipeDismissListViewTouchListener.Undoable(){
          @Override public void undo(){
            stableAdapter.setNotifyOnChange(false);
            stableAdapter.insert(item,position);
            stableAdapter.getObjects().add(position,item);
            stableAdapter.getActiveObjects().add(activeObjPos,item);
            stableAdapter.refreshData();
            deletedMarkers.remove(item);
            updateMapMarkers(stableAdapter.getActiveObjects());
            reloadListAdapter();
          }
        }
;
      }
 else {
        return null;
      }
    }
    @Override public void onHidePopup(){
      StableArrayAdapter stableAdapter=getListAdapter();
      stableAdapter.refreshData();
      updateMapMarkers(stableAdapter.getActiveObjects());
      if (stableAdapter.getActiveObjects().size() == 0) {
        finish();
      }
 else {
        reloadListAdapter();
      }
    }
    private void updateMapMarkers(    List<Object> objects){
      List<MapMarker> markers=new ArrayList<>();
      List<MapMarker> markersHistory=new ArrayList<>();
      for (      Object obj : objects) {
        MapMarker marker=(MapMarker)obj;
        if (!marker.history) {
          markers.add(marker);
        }
 else {
          markersHistory.add(marker);
        }
      }
      for (int i=deletedMarkers.size() - 1; i >= 0; i--) {
        markersHistory.add(0,(MapMarker)deletedMarkers.get(i));
      }
      deletedMarkers.clear();
      getMyApplication().getMapMarkersHelper().saveMapMarkers(markers,markersHistory);
    }
  }
);
  nightMode=!getMyApplication().getSettings().isLightContent();
  setListAdapter(getMapMarkersListAdapter());
}
