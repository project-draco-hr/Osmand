{
  long xloc=x31 >> (31 - config.ZOOM_TO_LOAD_TILES);
  long yloc=y31 >> (31 - config.ZOOM_TO_LOAD_TILES);
  long tileId=(xloc << config.ZOOM_TO_LOAD_TILES) + yloc;
  if (loadOptions != OPTION_NO_LOAD) {
    if (memoryLimit == 0) {
      memoryLimit=config.memoryLimitation;
    }
    if (getCurrentEstimatedSize() > 0.9 * memoryLimit) {
      int sz1=getCurrentEstimatedSize();
      long h1=0;
      if (SHOW_GC_SIZE && sz1 > 0.7 * memoryLimit) {
        runGCUsedMemory();
        h1=runGCUsedMemory();
      }
      int clt=getCurrentlyLoadedTiles();
      long us1=(Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory());
      unloadUnusedTiles(memoryLimit);
      if (h1 != 0 && getCurrentlyLoadedTiles() != clt) {
        int sz2=getCurrentEstimatedSize();
        runGCUsedMemory();
        long h2=runGCUsedMemory();
        float mb=(1 << 20);
        log.warn("Unload tiles :  estimated " + (sz1 - sz2) / mb + " ?= " + (h1 - h2) / mb + " actual");
        log.warn("Used after " + h2 / mb + " of " + Runtime.getRuntime().totalMemory() / mb + " max " + maxMemory() / mb);
      }
 else {
        float mb=(1 << 20);
        int sz2=getCurrentEstimatedSize();
        log.warn("Unload tiles :  occupied before " + sz1 / mb + " Mb - now  " + sz2 / mb + "MB " + memoryLimit / mb + " limit MB " + config.memoryLimitation / mb);
        long us2=(Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory());
        log.warn("Used memory before " + us1 / mb + "after " + us1 / mb + " of max " + maxMemory() / mb);
      }
    }
    if (!indexedSubregions.containsKey(tileId)) {
      List<RoutingSubregionTile> collection=loadTileHeaders(x31,y31);
      indexedSubregions.put(tileId,collection);
    }
    List<RoutingSubregionTile> subregions=indexedSubregions.get(tileId);
    if (subregions != null) {
      TLongHashSet duplicates=new TLongHashSet();
      for (      RoutingSubregionTile ts : subregions) {
        if (!ts.isLoaded()) {
          loadSubregionTile(ts,loadOptions == OPTION_IN_MEMORY_LOAD,null,duplicates);
        }
      }
    }
  }
  return tileId;
}
