{
  final LatLon endForRouting=getPointToNavigate();
  mapLayers.selectGPXFileLayer(new CallbackWithObject<GPXFileResult>(){
    @Override public boolean processResult(    final GPXFileResult result){
      Builder builder=new AlertDialog.Builder(MapActivity.this);
      final boolean[] props=new boolean[]{false,false,false};
      builder.setMultiChoiceItems(new String[]{getString(R.string.gpx_option_reverse_route),getString(R.string.gpx_option_destination_point),getString(R.string.gpx_option_from_start_point)},props,new OnMultiChoiceClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which,        boolean isChecked){
          props[which]=isChecked;
        }
      }
);
      builder.setPositiveButton(R.string.default_buttons_apply,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          boolean reverse=props[0];
          boolean passWholeWay=props[2];
          ArrayList<List<Location>> locations=result.locations;
          List<Location> l=new ArrayList<Location>();
          for (          List<Location> s : locations) {
            l.addAll(s);
          }
          if (reverse) {
            Collections.reverse(l);
          }
          Location loc=getLastKnownLocation();
          if (passWholeWay && loc != null) {
            l.add(0,loc);
          }
          Location startForRouting=getLastKnownLocation();
          if (startForRouting == null && !l.isEmpty()) {
            startForRouting=l.get(0);
          }
          LatLon endPoint=endForRouting;
          if ((endPoint == null || !props[1]) && !l.isEmpty()) {
            LatLon point=new LatLon(l.get(l.size() - 1).getLatitude(),l.get(l.size() - 1).getLongitude());
            settings.setPointToNavigate(point.getLatitude(),point.getLongitude(),null);
            endPoint=point;
            mapLayers.getNavigationLayer().setPointToNavigate(point);
          }
          mapView.refreshMap();
          if (endPoint != null) {
            settings.FOLLOW_TO_THE_ROUTE.set(true);
            routingHelper.setFollowingMode(true);
            routingHelper.setFinalAndCurrentLocation(endPoint,startForRouting,l);
            getMyApplication().showDialogInitializingCommandPlayer(MapActivity.this);
          }
        }
      }
);
      builder.setNegativeButton(R.string.default_buttons_cancel,null);
      builder.show();
      return true;
    }
  }
);
}
