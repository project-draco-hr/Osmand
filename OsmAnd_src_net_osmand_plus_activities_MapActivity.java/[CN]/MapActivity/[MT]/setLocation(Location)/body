{
  if (Log.isLoggable(LogUtil.TAG,Log.DEBUG)) {
    Log.d(LogUtil.TAG,"Location changed " + location.getProvider());
  }
  if (location != null) {
    long locationTime=System.currentTimeMillis();
    if (!location.hasAccuracy() || location.getAccuracy() < ACCURACY_FOR_GPX_AND_ROUTING) {
      if (settings.SAVE_TRACK_TO_GPX.get()) {
        savingTrackHelper.insertData(location.getLatitude(),location.getLongitude(),location.getAltitude(),location.getSpeed(),location.getAccuracy(),locationTime,settings);
      }
      if (settings.LIVE_MONITORING.get()) {
        liveMonitoringHelper.insertData(location.getLatitude(),location.getLongitude(),location.getAltitude(),location.getSpeed(),location.getAccuracy(),location.getTime(),settings);
      }
    }
    updateSpeedBearingEmulator(location);
  }
  boolean enableSensorNavigation=routingHelper.isFollowingMode() && settings.USE_COMPASS_IN_NAVIGATION.get() ? location == null || !location.hasBearing() : false;
  registerUnregisterSensor(location,enableSensorNavigation);
  if (routingHelper.isFollowingMode()) {
    if (location == null || !location.hasAccuracy() || location.getAccuracy() < ACCURACY_FOR_GPX_AND_ROUTING) {
      Location updatedLocation=routingHelper.setCurrentLocation(location);
      location=updatedLocation;
      if (location != null && routingHelper.getLeftDistance() > 0) {
        final long fixTime=location.getTime();
        Message msg=Message.obtain(uiHandler,new Runnable(){
          @Override public void run(){
            Location lastKnown=getLastKnownLocation();
            if (lastKnown != null && lastKnown.getTime() - fixTime < LOST_LOCATION_CHECK_DELAY) {
              return;
            }
            if (routingHelper.getLeftDistance() > 0 && settings.MAP_ACTIVITY_ENABLED.get()) {
              routingHelper.getVoiceRouter().gpsLocationLost();
            }
          }
        }
);
        msg.what=LOST_LOCATION_MSG_ID;
        uiHandler.removeMessages(LOST_LOCATION_MSG_ID);
        uiHandler.sendMessageDelayed(msg,LOST_LOCATION_CHECK_DELAY);
      }
    }
  }
  mapLayers.getLocationLayer().setLastKnownLocation(location);
  navigationInfo.setLocation(location);
  if (location != null) {
    long now=System.currentTimeMillis();
    if (isMapLinkedToLocation()) {
      if (settings.AUTO_ZOOM_MAP.get() && location.hasSpeed()) {
        float zdelta=defineZoomFromSpeed(location.getSpeed());
        if (Math.abs(zdelta) >= OsmandMapTileView.ZOOM_DELTA_1) {
          if (zdelta >= 2) {
            zdelta-=3 * OsmandMapTileView.ZOOM_DELTA_1;
          }
 else           if (zdelta <= -2) {
            zdelta+=3 * OsmandMapTileView.ZOOM_DELTA_1;
          }
          if (now - lastTimeAutoZooming > 4500) {
            lastTimeAutoZooming=now;
            mapView.setZoom(mapView.getFloatZoom() + zdelta);
          }
        }
      }
      int currentMapRotation=settings.ROTATE_MAP.get();
      if (location.hasBearing() && currentMapRotation == OsmandSettings.ROTATE_MAP_BEARING) {
        mapView.setRotate(-location.getBearing());
      }
 else       if (!location.hasBearing() && routingHelper.isFollowingMode() && currentMapRotation == OsmandSettings.ROTATE_MAP_BEARING) {
        if (Math.abs(MapUtils.degreesDiff(mapView.getRotate(),-previousSensorValue)) > 15 && now - lastTimeSensorRotation > 1500) {
          lastTimeSensorRotation=now;
          mapView.setRotate(-previousSensorValue);
        }
      }
      mapView.setLatLon(location.getLatitude(),location.getLongitude());
    }
 else {
      if (!mapLayers.getMapInfoLayer().getBackToLocation().isEnabled()) {
        mapLayers.getMapInfoLayer().getBackToLocation().setEnabled(true);
      }
      if (settings.AUTO_FOLLOW_ROUTE.get() > 0 && routingHelper.isFollowingMode() && !uiHandler.hasMessages(AUTO_FOLLOW_MSG_ID)) {
        backToLocationWithDelay(1);
      }
    }
  }
 else {
    if (mapLayers.getMapInfoLayer().getBackToLocation().isEnabled()) {
      mapLayers.getMapInfoLayer().getBackToLocation().setEnabled(false);
    }
  }
  mapView.refreshMap();
}
