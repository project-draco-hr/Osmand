{
  super.onResume();
  long tm=System.currentTimeMillis();
  if (app.isApplicationInitializing() || DashboardOnMap.staticVisible) {
    if (!dashboardOnMap.isVisible()) {
      if (settings.SHOW_DASHBOARD_ON_START.get()) {
        dashboardOnMap.setDashboardVisibility(true,DashboardOnMap.staticVisibleType);
      }
 else {
        if (ErrorBottomSheetDialog.shouldShow(settings,this)) {
          new ErrorBottomSheetDialog().show(getSupportFragmentManager(),"dialog");
        }
 else         if (RateUsBottomSheetDialog.shouldShow(app)) {
          new RateUsBottomSheetDialog().show(getSupportFragmentManager(),"dialog");
        }
      }
    }
 else {
      dashboardOnMap.updateDashboard();
    }
  }
  dashboardOnMap.updateLocation(true,true,false);
  cancelNotification();
  if (getSupportActionBar() != null) {
    getSupportActionBar().hide();
  }
  if (settings.MAP_SCREEN_ORIENTATION.get() != getRequestedOrientation()) {
    setRequestedOrientation(settings.MAP_SCREEN_ORIENTATION.get());
  }
  app.getLocationProvider().checkIfLastKnownLocationIsValid();
  if (settings.AUDIO_STREAM_GUIDANCE.get() != null) {
    setVolumeControlStream(settings.AUDIO_STREAM_GUIDANCE.get());
  }
 else {
    setVolumeControlStream(AudioManager.STREAM_MUSIC);
  }
  changeKeyguardFlags();
  applicationModeListener=new StateChangedListener<ApplicationMode>(){
    @Override public void stateChanged(    ApplicationMode change){
      updateApplicationModeSettings();
    }
  }
;
  settings.APPLICATION_MODE.addListener(applicationModeListener);
  updateApplicationModeSettings();
  TargetPointsHelper targets=app.getTargetPointsHelper();
  RoutingHelper routingHelper=app.getRoutingHelper();
  if (routingHelper.isFollowingMode() && (!Algorithms.objectEquals(targets.getPointToNavigate().point,routingHelper.getFinalLocation()) || !Algorithms.objectEquals(targets.getIntermediatePointsLatLonNavigation(),routingHelper.getIntermediatePoints()))) {
    targets.updateRouteAndRefresh(true);
  }
  app.getLocationProvider().resumeAllUpdates();
  if (settings != null && settings.isLastKnownMapLocation() && !intentLocation) {
    LatLon l=settings.getLastKnownMapLocation();
    mapView.setLatLon(l.getLatitude(),l.getLongitude());
    mapView.setIntZoom(settings.getLastKnownMapZoom());
  }
 else {
    intentLocation=false;
  }
  settings.MAP_ACTIVITY_ENABLED.set(true);
  checkExternalStorage();
  showAndHideMapPosition();
  readLocationToShow();
  OsmandPlugin.onMapActivityResume(this);
  final Intent intent=getIntent();
  if (intent != null) {
    if (Intent.ACTION_VIEW.equals(intent.getAction())) {
      if (intent.getData() != null) {
        final Uri data=intent.getData();
        final String scheme=data.getScheme();
        if ("file".equals(scheme)) {
          gpxImportHelper.handleFileImport(data,new File(data.getPath()).getName());
          setIntent(null);
        }
 else         if ("content".equals(scheme)) {
          gpxImportHelper.handleContentImport(data);
          setIntent(null);
        }
 else         if ("google.navigation".equals(scheme) || "osmand.navigation".equals(scheme)) {
          parseNavigationIntent(data);
        }
 else         if ("osmand.api".equals(scheme)) {
          ExternalApiHelper apiHelper=new ExternalApiHelper(this);
          Intent result=apiHelper.processApiRequest(intent);
          setResult(apiHelper.getResultCode(),result);
          if (apiHelper.needFinish()) {
            finish();
          }
        }
      }
    }
    if (intent.getStringExtra(ShowRouteInfoActivity.START_NAVIGATION) != null) {
      mapLayers.getMapControlsLayer().startNavigation();
    }
  }
  mapView.refreshMap(true);
  if (atlasMapRendererView != null) {
    atlasMapRendererView.handleOnResume();
  }
  app.getDownloadThread().setUiActivity(this);
  if (mapViewTrackingUtilities.getShowRouteFinishDialog()) {
    DestinationReachedMenu.show(this);
    mapViewTrackingUtilities.setShowRouteFinishDialog(false);
  }
  routingHelper.addListener(this);
  app.getMapMarkersHelper().addListener(this);
  DiscountHelper.checkAndDisplay(this);
  QuickSearchDialogFragment searchDialogFragment=getQuickSearchDialogFragment();
  if (searchDialogFragment != null) {
    if (searchDialogFragment.isSearchHidden()) {
      searchDialogFragment.hide();
      searchDialogFragment.restoreToolbar();
    }
  }
  getMyApplication().getAppCustomization().resumeActivity(MapActivity.class,this);
  if (System.currentTimeMillis() - tm > 50) {
    System.err.println("OnCreate for MapActivity took " + (System.currentTimeMillis() - tm) + " ms");
  }
  if (!permissionDone && !app.getAppInitializer().isFirstTime()) {
    if (!permissionAsked) {
      if (app.isExternalStorageDirectoryReadOnly() && getSupportFragmentManager().findFragmentByTag(DataStoragePlaceDialogFragment.TAG) == null) {
        if (DownloadActivity.hasPermissionToWriteExternalStorage(this)) {
          DataStoragePlaceDialogFragment.showInstance(getSupportFragmentManager(),true);
        }
 else {
          ActivityCompat.requestPermissions(this,new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},DownloadActivity.PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE);
        }
      }
    }
 else {
      if (permissionGranted) {
        restartApp();
      }
 else       if (getSupportFragmentManager().findFragmentByTag(DataStoragePlaceDialogFragment.TAG) == null) {
        DataStoragePlaceDialogFragment.showInstance(getSupportFragmentManager(),true);
      }
      permissionAsked=false;
      permissionGranted=false;
      permissionDone=true;
    }
  }
  enableDrawer();
}
