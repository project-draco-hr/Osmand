{
  Builder builder=new AlertDialog.Builder(this);
  final int sizeAdditional=additionalActions == null || additionalItems == null ? 0 : additionalItems.size();
  List<String> actions=new ArrayList<String>();
  if (sizeAdditional > 0) {
    actions.addAll(additionalItems);
  }
  final int[] contextMenuStandardActions=new int[]{R.string.context_menu_item_navigate_point,R.string.context_menu_item_search_poi,R.string.context_menu_item_show_route,R.string.context_menu_item_search_transport,R.string.context_menu_item_add_favorite,R.string.context_menu_item_share_location,R.string.context_menu_item_create_poi,R.string.context_menu_item_add_waypoint,R.string.context_menu_item_open_bug,R.string.context_menu_item_update_map,R.string.context_menu_item_download_map};
  for (int j=0; j < contextMenuStandardActions.length; j++) {
    actions.add(getResources().getString(contextMenuStandardActions[j]));
  }
  builder.setItems(actions.toArray(new String[actions.size()]),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      if (which < sizeAdditional) {
        additionalActions.onClick(dialog,which);
        return;
      }
      int standardId=contextMenuStandardActions[which - sizeAdditional];
      if (standardId == R.string.context_menu_item_navigate_point) {
        navigateToPoint(new LatLon(latitude,longitude));
      }
 else       if (standardId == R.string.context_menu_item_search_poi) {
        Intent intent=new Intent(MapActivity.this,SearchPoiFilterActivity.class);
        intent.putExtra(SearchPoiFilterActivity.SEARCH_LAT,latitude);
        intent.putExtra(SearchPoiFilterActivity.SEARCH_LON,longitude);
        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
        startActivity(intent);
      }
 else       if (standardId == R.string.context_menu_item_show_route) {
        getDirections(latitude,longitude,false);
      }
 else       if (standardId == R.string.context_menu_item_search_transport) {
        Intent intent=new Intent(MapActivity.this,SearchTransportActivity.class);
        intent.putExtra(SearchTransportActivity.LAT_KEY,latitude);
        intent.putExtra(SearchTransportActivity.LON_KEY,longitude);
        startActivity(intent);
      }
 else       if (standardId == R.string.context_menu_item_add_favorite) {
        mapActions.addFavouritePoint(latitude,longitude);
      }
 else       if (standardId == R.string.context_menu_item_share_location) {
        mapActions.shareLocation(latitude,longitude,mapView.getZoom());
      }
 else       if (standardId == R.string.context_menu_item_search_poi) {
        EditingPOIActivity activity=new EditingPOIActivity(MapActivity.this,(OsmandApplication)getApplication(),mapView);
        activity.showCreateDialog(latitude,longitude);
      }
 else       if (standardId == R.string.context_menu_item_add_waypoint) {
        mapActions.addWaypoint(latitude,longitude,savingTrackHelper);
      }
 else       if (standardId == R.string.context_menu_item_open_bug) {
        osmBugsLayer.openBug(MapActivity.this,getLayoutInflater(),mapView,latitude,longitude);
      }
 else       if (standardId == R.string.context_menu_item_update_map) {
        mapActions.reloadTile(mapView.getZoom(),latitude,longitude);
      }
 else       if (standardId == R.string.context_menu_item_download_map) {
        DownloadTilesDialog dlg=new DownloadTilesDialog(MapActivity.this,(OsmandApplication)getApplication(),mapView);
        dlg.openDialog();
      }
    }
  }
);
  builder.create().show();
}
