{
  if (locations != null && !locations.isEmpty()) {
    if (locations.get(0).distanceTo(start) > 200) {
      locations.add(0,start);
      if (directions != null) {
        for (        RouteDirectionInfo i : directions) {
          i.routePointOffset++;
        }
        RouteDirectionInfo info=new RouteDirectionInfo();
        info.turnType=TurnType.valueOf(TurnType.C);
        info.routePointOffset=0;
        info.descriptionRoute="";
        directions.add(0,info);
      }
    }
    for (int i=0; i < locations.size() - 1; ) {
      if (locations.get(i).distanceTo(locations.get(i + 1)) == 0) {
        locations.remove(i);
        if (directions != null) {
          for (          RouteDirectionInfo info : directions) {
            if (info.routePointOffset > i) {
              info.routePointOffset--;
            }
          }
        }
      }
 else {
        i++;
      }
    }
    if (directions != null) {
      for (int i=1; i < directions.size() - 1; ) {
        RouteDirectionInfo r=directions.get(i);
        if (r.turnType.getValue().equals(TurnType.C)) {
          RouteDirectionInfo prev=directions.get(i - 1);
          prev.expectedTime+=r.expectedTime;
          directions.remove(i);
        }
 else {
          i++;
        }
      }
    }
  }
  listDistance=new int[locations.size()];
  if (!locations.isEmpty()) {
    listDistance[locations.size() - 1]=0;
    for (int i=locations.size() - 1; i > 0; i--) {
      listDistance[i - 1]=(int)locations.get(i - 1).distanceTo(locations.get(i));
      listDistance[i - 1]+=listDistance[i];
    }
  }
  if (directions != null) {
    int sum=0;
    for (int i=directions.size() - 1; i >= 0; i--) {
      directions.get(i).afterLeftTime=sum;
      sum+=directions.get(i).expectedTime;
      directions.get(i).distance=listDistance[directions.get(i).routePointOffset];
      if (i < directions.size() - 1) {
        directions.get(i).distance-=listDistance[directions.get(i + 1).routePointOffset];
      }
    }
  }
}
