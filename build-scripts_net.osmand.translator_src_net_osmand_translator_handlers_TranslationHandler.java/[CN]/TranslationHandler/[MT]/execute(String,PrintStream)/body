{
  String source=Files.toString(new File(inFile),Charset.defaultCharset());
  CompilationUnit unit=parse(inFile,source);
  AST ast=unit.getAST();
  try {
    unit.recordModifications();
    NameTable.initialize(unit);
    Types.initialize(unit);
    Symbols.initialize(unit);
    String newSource=J2ObjC.translate(unit,source);
    if (unit.types().isEmpty()) {
      System.out.println("skipping dead file " + inFile);
    }
 else {
      if (Options.printConvertedSources()) {
        try {
          File outputFile=new File(Options.getOutputDirectory(),inFile);
          outputFile.getParentFile().mkdirs();
          Files.write(newSource,outputFile,Charset.defaultCharset());
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
      System.out.println("writing output file(s) to " + Options.getOutputDirectory().getAbsolutePath());
      CppHeaderGenerator.generate(inFile,source,unit);
    }
  }
 catch (  ASTNodeException e) {
    e.printStackTrace();
  }
 finally {
    NameTable.cleanup();
    Symbols.cleanup();
    Types.cleanup();
  }
}
