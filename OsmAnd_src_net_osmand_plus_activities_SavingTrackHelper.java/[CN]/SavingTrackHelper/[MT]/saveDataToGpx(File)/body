{
  List<String> warnings=new ArrayList<String>();
  dir.mkdirs();
  if (dir.getParentFile().canWrite()) {
    if (dir.exists()) {
      Map<String,GPXFile> data=collectRecordedData();
      for (      final String f : data.keySet()) {
        File fout=new File(dir,f + ".gpx");
        if (!data.get(f).isEmpty()) {
          WptPt pt=data.get(f).findPointToShow();
          String fileName=f + "_" + new SimpleDateFormat("HH-mm_EEE").format(new Date(pt.time));
          fout=new File(dir,fileName + ".gpx");
          int ind=1;
          while (fout.exists()) {
            fout=new File(dir,fileName + "_" + (++ind)+ ".gpx");
          }
        }
        String warn=GPXUtilities.writeGpxFile(fout,data.get(f),ctx);
        if (warn != null) {
          warnings.add(warn);
          return warnings;
        }
      }
    }
  }
  SQLiteDatabase db=getWritableDatabase();
  if (db != null && warnings.isEmpty() && db.isOpen()) {
    try {
      db.execSQL("DELETE FROM " + TRACK_NAME + " WHERE "+ TRACK_COL_DATE+ " <= ?",new Object[]{System.currentTimeMillis()});
      db.execSQL("DELETE FROM " + POINT_NAME + " WHERE "+ POINT_COL_DATE+ " <= ?",new Object[]{System.currentTimeMillis()});
    }
  finally {
      db.close();
    }
  }
  distance=0;
  return warnings;
}
