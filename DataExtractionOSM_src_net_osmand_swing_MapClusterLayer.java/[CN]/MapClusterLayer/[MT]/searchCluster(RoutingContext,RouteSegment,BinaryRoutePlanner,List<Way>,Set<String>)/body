{
  Queue<RouteSegment> queue=new LinkedList<RouteSegment>();
  TLongHashSet visitedIds=new TLongHashSet();
  queue.add(st);
  RouteDataObject startRoad=st.getRoad();
  long lstart=(((long)startRoad.getPoint31XTile(st.getSegmentStart())) << 31) + (long)startRoad.getPoint31YTile(st.getSegmentStart());
  RouteSegment next=ctx.getLoadedRoutes().get(lstart);
  while (next != null) {
    if (next.getRoad().getId() != st.getRoad().getId()) {
      queue.add(next);
    }
    next=next.getNext();
  }
  nextSegment:   while (!queue.isEmpty()) {
    RouteSegment segment=queue.poll();
    RouteDataObject road=segment.getRoad();
    ctx.getVisitor().visitSegment(segment,true);
    if (visitedIds.contains(calculateId(segment,segment.getSegmentStart()))) {
      continue;
    }
    visitedIds.add(calculateId(segment,segment.getSegmentStart()));
    Way w=new Way(-1);
    res.add(w);
    int xst=road.getPoint31XTile(segment.getSegmentStart());
    int yst=road.getPoint31YTile(segment.getSegmentStart());
    w.addNode(new Node(MapUtils.get31LatitudeY(yst),MapUtils.get31LongitudeX(xst),-1));
    boolean minusAllowed=true;
    boolean plusAllowed=true;
    int d=1;
    while (minusAllowed || plusAllowed) {
      int segmentEnd=segment.getSegmentStart() + d;
      int currentD=d;
      if (!minusAllowed && d > 0) {
        d++;
      }
 else       if (!plusAllowed && d < 0) {
        d--;
      }
 else {
        if (d <= 0) {
          d=-d + 1;
        }
 else {
          d=-d;
        }
      }
      if (segmentEnd < 0) {
        minusAllowed=false;
        continue;
      }
      if (segmentEnd >= road.getPointsLength()) {
        plusAllowed=false;
        continue;
      }
      if (visitedIds.contains(calculateId(segment,segmentEnd))) {
        if (currentD > 0) {
          plusAllowed=false;
        }
 else {
          minusAllowed=false;
        }
        continue;
      }
      visitedIds.add(calculateId(segment,segmentEnd));
      int x=road.getPoint31XTile(segmentEnd);
      int y=road.getPoint31YTile(segmentEnd);
      if (segmentEnd > segment.getSegmentStart()) {
        w.addNode(new Node(MapUtils.get31LatitudeY(y),MapUtils.get31LongitudeX(x),-1));
      }
 else {
        w.addNode(new Node(MapUtils.get31LatitudeY(y),MapUtils.get31LongitudeX(x),-1),0);
      }
      router.loadRoutes(ctx,x,y,null);
      long l=(((long)x) << 31) + (long)y;
      next=ctx.getLoadedRoutes().get(l);
      boolean addToQueue=true;
      ;
      while (next != null) {
        String h=getHighway(next.getRoad());
        if (roads.contains(h)) {
          if (currentD > 0) {
            plusAllowed=false;
          }
 else {
            minusAllowed=false;
          }
          addToQueue=false;
          break;
        }
        next=next.getNext();
      }
      if (addToQueue) {
        next=ctx.getLoadedRoutes().get(l);
        while (next != null) {
          if (!visitedIds.contains(calculateId(next,next.getSegmentStart()))) {
            queue.add(next);
          }
          next=next.getNext();
        }
      }
    }
  }
  return null;
}
