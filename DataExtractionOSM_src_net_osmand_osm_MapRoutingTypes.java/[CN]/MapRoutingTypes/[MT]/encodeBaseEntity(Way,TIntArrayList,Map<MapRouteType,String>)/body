{
  Way e=(Way)et;
  boolean init=false;
  for (  Entry<String,String> es : e.getTags().entrySet()) {
    String tag=es.getKey();
    String value=es.getValue();
    if (contains(TAGS_TO_ACCEPT,tag,value)) {
      if (value.startsWith("trunk") || value.startsWith("motorway") || value.startsWith("primary")|| value.startsWith("secondary")|| value.startsWith("tertiary")) {
        init=true;
        break;
      }
    }
  }
  if (!init) {
    return false;
  }
  outTypes.clear();
  names.clear();
  for (  Entry<String,String> es : e.getTags().entrySet()) {
    String tag=es.getKey();
    String value=converBooleanValue(es.getValue());
    if (BASE_TAGS_TEXT.contains(tag)) {
      names.put(registerRule(tag,null),value);
    }
    if (value.endsWith("_link")) {
      value=value.substring(0,value.length() - 5);
    }
    if (contains(TAGS_TO_ACCEPT,tag,value) || contains(BASE_TAGS_TO_SAVE,tag,value)) {
      outTypes.add(registerRule(tag,value).id);
    }
  }
  return true;
}
