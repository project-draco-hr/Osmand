{
  if (!(et instanceof Way)) {
    return false;
  }
  Way e=(Way)et;
  boolean init=false;
  for (  String tg : e.getTagKeySet()) {
    if (TAGS_TO_ACCEPT.contains(tg)) {
      init=true;
      break;
    }
  }
  if (!init) {
    return false;
  }
  outTypes.clear();
  pointTypes.clear();
  for (  Entry<String,String> es : e.getTags().entrySet()) {
    String tag=es.getKey();
    String value=es.getValue();
    if (TAGS_TO_ACCEPT.contains(tag) || TAGS_TO_SAVE.contains(tag) || tag.startsWith("access")) {
      outTypes.add(registerRule(tag,value).id);
    }
  }
  for (  Node nd : e.getNodes()) {
    for (    Entry<String,String> es : nd.getTags().entrySet()) {
      String tag=es.getKey();
      String value=es.getValue();
      if (TAGS_TO_ACCEPT.contains(tag) || TAGS_TO_SAVE.contains(tag) || tag.startsWith("access")) {
        if (!pointTypes.containsKey(nd.getId())) {
          pointTypes.put(nd.getId(),new TIntArrayList());
        }
        pointTypes.get(nd.getId()).add(registerRule(tag,value).id);
      }
    }
  }
  return true;
}
