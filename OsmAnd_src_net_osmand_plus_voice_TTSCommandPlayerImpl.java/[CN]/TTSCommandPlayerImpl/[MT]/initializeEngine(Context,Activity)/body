{
  if (mTts != null && mTtsContext != ctx) {
    internalClear();
  }
  if (mTts == null) {
    mTtsContext=ctx;
    mTts=new TextToSpeech(ctx,new OnInitListener(){
      @Override public void onInit(      int status){
        if (status != TextToSpeech.SUCCESS) {
          internalClear();
        }
 else         if (mTts != null) {
switch (mTts.isLanguageAvailable(new Locale(language))) {
case TextToSpeech.LANG_MISSING_DATA:
            if (isSettingsActivity(act)) {
              Builder builder=createAlertDialog(R.string.tts_missing_language_data_title,R.string.tts_missing_language_data,new IntentStarter(act,TextToSpeech.Engine.ACTION_INSTALL_TTS_DATA),act);
              builder.show();
            }
          break;
case TextToSpeech.LANG_AVAILABLE:
        mTts.setLanguage(new Locale(language));
      break;
case TextToSpeech.LANG_NOT_SUPPORTED:
    if (isSettingsActivity(act)) {
      Builder builder=createAlertDialog(R.string.tts_language_not_supported_title,R.string.tts_language_not_supported,new IntentStarter(act,Intent.ACTION_VIEW,Uri.parse("market://search?q=text to speech engine")),act);
      builder.show();
    }
  break;
}
}
}
private boolean isSettingsActivity(final Context ctx){
return ctx instanceof SettingsActivity;
}
}
);
}
}
