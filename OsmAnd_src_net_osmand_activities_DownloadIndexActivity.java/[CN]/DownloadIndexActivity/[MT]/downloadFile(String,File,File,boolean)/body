{
  progressDlg=ProgressDialog.show(this,getString(R.string.downloading),getString(R.string.downloading_file),true,true);
  progressDlg.show();
  final ProgressDialogImplementation impl=new ProgressDialogImplementation(progressDlg,true);
  impl.setRunnable("DownloadIndex",new Runnable(){
    @Override public void run(){
      try {
        FileOutputStream out=new FileOutputStream(fileToDownload);
        URL url=DownloaderIndexFromGoogleCode.getInputStreamToLoadIndex(key);
        URLConnection conn=url.openConnection();
        conn.setReadTimeout(30000);
        conn.setConnectTimeout(30000);
        InputStream is=conn.getInputStream();
        int length=conn.getContentLength();
        impl.startTask(getString(R.string.downloading_file),length);
        byte[] buffer=new byte[BUFFER_SIZE];
        int read=0;
        while ((read=is.read(buffer)) != -1) {
          out.write(buffer,0,read);
          impl.progress(read);
          length-=read;
        }
        if (length > 0) {
          throw new IOException("File was not fully read");
        }
        out.close();
        File toIndex=fileToDownload;
        if (fileToDownload.getName().endsWith(".zip")) {
          impl.startTask(getString(R.string.unzipping_file),-1);
          if (!unzipToDir) {
            toIndex=fileToUnZip;
          }
 else {
            fileToUnZip.mkdirs();
          }
          ZipInputStream zipIn=new ZipInputStream(new FileInputStream(fileToDownload));
          ZipEntry entry=null;
          while ((entry=zipIn.getNextEntry()) != null) {
            if (!unzipToDir) {
              String name=entry.getName();
              int ind=name.lastIndexOf('_');
              if (ind > 0) {
                int i=name.indexOf('.',ind);
                if (i > 0) {
                  name=name.substring(0,ind) + name.substring(i,name.length());
                }
              }
              out=new FileOutputStream(new File(fileToUnZip.getParent(),name));
            }
 else {
              out=new FileOutputStream(new File(fileToUnZip,entry.getName()));
            }
            while ((read=zipIn.read(buffer)) != -1) {
              out.write(buffer,0,read);
            }
            out.close();
          }
          zipIn.close();
          fileToDownload.delete();
        }
        ArrayList<String> warnings=new ArrayList<String>();
        ResourceManager manager=((OsmandApplication)getApplication()).getResourceManager();
        if (toIndex.getName().endsWith(IndexConstants.ADDRESS_INDEX_EXT)) {
          manager.indexingAddress(impl,warnings,toIndex);
        }
 else         if (toIndex.getName().endsWith(IndexConstants.POI_INDEX_EXT)) {
          manager.indexingPoi(impl,warnings,toIndex);
        }
 else         if (toIndex.getName().endsWith(IndexConstants.TRANSPORT_INDEX_EXT)) {
          manager.indexingTransport(impl,warnings,toIndex);
        }
 else         if (toIndex.getName().endsWith(IndexConstants.MAP_INDEX_EXT)) {
          manager.indexingMaps(impl);
        }
 else         if (toIndex.getName().endsWith(IndexConstants.VOICE_INDEX_EXT_ZIP)) {
        }
        if (warnings.isEmpty()) {
          showWarning(getString(R.string.download_index_success));
        }
 else {
          showWarning(warnings.get(0));
        }
      }
 catch (      IOException e) {
        log.error("Exception ocurred",e);
        showWarning(getString(R.string.error_io_error));
        fileToDownload.delete();
      }
 finally {
        if (progressDlg != null) {
          progressDlg.dismiss();
          progressDlg=null;
        }
      }
    }
  }
);
  impl.run();
}
