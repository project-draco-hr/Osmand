{
  FileOutputStream out=null;
  try {
    out=new FileOutputStream(fileToDownload);
    URL url=USE_DOWNLOAD_OSMAND_NET ? new URL("http://download.osmand.net/download?file=" + key) : DownloaderIndexFromGoogleCode.getInputStreamToLoadIndex(key);
    try {
      downloadFile(key,out,url,progress);
    }
  finally {
      out.close();
      out=null;
    }
    File toIndex=fileToDownload;
    if (fileToDownload.getName().endsWith(".zip")) {
      progress.startTask(getString(R.string.unzipping_file),-1);
      if (!unzipToDir) {
        toIndex=fileToUnZip;
      }
 else {
        fileToUnZip.mkdirs();
      }
      ZipInputStream zipIn=new ZipInputStream(new FileInputStream(fileToDownload));
      ZipEntry entry=null;
      boolean first=true;
      while ((entry=zipIn.getNextEntry()) != null) {
        File fs;
        if (!unzipToDir) {
          if (first) {
            fs=toIndex;
            first=false;
          }
 else {
            String name=entry.getName();
            int ind=name.lastIndexOf('_');
            if (ind > 0) {
              int i=name.indexOf('.',ind);
              if (i > 0) {
                name=name.substring(0,ind) + name.substring(i,name.length());
              }
            }
            fs=new File(fileToUnZip.getParent(),name);
            toIndex=fs;
          }
        }
 else {
          fs=new File(fileToUnZip,entry.getName());
        }
        out=new FileOutputStream(fs);
        int read;
        byte[] buffer=new byte[BUFFER_SIZE];
        while ((read=zipIn.read(buffer)) != -1) {
          out.write(buffer,0,read);
        }
        out.close();
      }
      zipIn.close();
      fileToDownload.delete();
    }
    ArrayList<String> warnings=new ArrayList<String>();
    ResourceManager manager=((OsmandApplication)getApplication()).getResourceManager();
    if (dateModified != null) {
      toIndex.setLastModified(dateModified);
    }
    if (toIndex.getName().endsWith(IndexConstants.ADDRESS_INDEX_EXT)) {
      manager.indexingAddress(progress,warnings,toIndex);
    }
 else     if (toIndex.getName().endsWith(IndexConstants.POI_INDEX_EXT)) {
      manager.indexingPoi(progress,warnings,toIndex);
    }
 else     if (toIndex.getName().endsWith(IndexConstants.TRANSPORT_INDEX_EXT)) {
      manager.indexingTransport(progress,warnings,toIndex);
    }
 else     if (toIndex.getName().endsWith(IndexConstants.BINARY_MAP_INDEX_EXT)) {
      warnings.addAll(manager.indexingMaps(progress));
    }
 else     if (toIndex.getName().endsWith(IndexConstants.VOICE_INDEX_EXT_ZIP)) {
    }
    if (dateModified != null) {
      toIndex.setLastModified(dateModified);
      manager.updateIndexLastDateModified(toIndex);
    }
    if (warnings.isEmpty()) {
      showWarning(getString(R.string.download_index_success));
    }
 else {
      showWarning(warnings.get(0));
    }
    return true;
  }
 catch (  IOException e) {
    log.error("Exception ocurred",e);
    showWarning(getString(R.string.error_io_error));
    if (out != null) {
      try {
        out.close();
      }
 catch (      IOException e1) {
      }
    }
    fileToDownload.delete();
    return false;
  }
catch (  InterruptedException e) {
    fileToDownload.delete();
    throw e;
  }
}
