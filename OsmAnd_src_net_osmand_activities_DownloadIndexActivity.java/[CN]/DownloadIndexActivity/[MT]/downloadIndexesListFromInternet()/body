{
  try {
    log.debug("Start loading list of index files");
    TreeMap<String,String> indexFiles=new TreeMap<String,String>(new Comparator<String>(){
      private static final long serialVersionUID=1L;
      @Override public int compare(      String object1,      String object2){
        if (object1.endsWith(IndexConstants.VOICE_INDEX_EXT_ZIP)) {
          if (object2.endsWith(IndexConstants.VOICE_INDEX_EXT_ZIP)) {
            return object1.compareTo(object2);
          }
 else {
            return -1;
          }
        }
 else         if (object2.endsWith(IndexConstants.VOICE_INDEX_EXT_ZIP)) {
          return 1;
        }
        return object1.compareTo(object2);
      }
    }
);
    String[] accepted=new String[]{POI_TABLE_VERSION + POI_INDEX_EXT,POI_TABLE_VERSION + POI_INDEX_EXT_ZIP,BINARY_MAP_VERSION + BINARY_MAP_INDEX_EXT,BINARY_MAP_VERSION + BINARY_MAP_INDEX_EXT_ZIP,VOICE_VERSION + VOICE_INDEX_EXT_ZIP};
    if (USE_DOWNLOAD_OSMAND_NET) {
      try {
        URL url=new URL("http://download.osmand.net/indexes.xml");
        XmlPullParser parser=XmlPullParserFactory.newInstance().newPullParser();
        parser.setInput(url.openStream(),"UTF-8");
        int next;
        while ((next=parser.next()) != XmlPullParser.END_DOCUMENT) {
          if (next == XmlPullParser.START_TAG && parser.getName().equals("region")) {
            String name=parser.getAttributeValue(null,"name");
            String size=parser.getAttributeValue(null,"size");
            String date=parser.getAttributeValue(null,"date");
            String description=parser.getAttributeValue(null,"description");
            indexFiles.put(name,description + " {" + date+ " : "+ size+ " MB }");
          }
        }
      }
 catch (      IOException e) {
        log.error("Error while loading indexes from repository",e);
        return null;
      }
catch (      XmlPullParserException e) {
        log.error("Error while loading indexes from repository",e);
        return null;
      }
    }
 else {
      DownloaderIndexFromGoogleCode.getIndexFiles(indexFiles,accepted);
    }
    if (indexFiles != null && !indexFiles.isEmpty()) {
      return indexFiles;
    }
 else {
      return null;
    }
  }
 catch (  RuntimeException e) {
    log.error("Error while loading indexes from repository",e);
    return null;
  }
}
