{
  try {
    dfmtYear=new SimpleDateFormat("yyyy");
    dfmtYear.setLenient(false);
    dfmtYear.setTimeZone(tz);
    dfmtMonth=new SimpleDateFormat("M");
    dfmtMonth.setLenient(false);
    dfmtMonth.setTimeZone(tz);
    dfmtDay=new SimpleDateFormat("d");
    dfmtDay.setLenient(false);
    dfmtDay.setTimeZone(tz);
    iYear=Integer.parseInt(dfmtYear.format(dateInput));
    iMonth=Integer.parseInt(dfmtMonth.format(dateInput));
    iDay=Integer.parseInt(dfmtDay.format(dateInput));
    dfTimeZone=dfTimeZone / 24.0;
    dfTimeZone=-dfTimeZone;
    dfLon=dfLon / 360.0;
    if (iYear >= 1583)     bGregorian=true;
    dfJ=-Math.floor(7.0 * (Math.floor((iMonth + 9.0) / 12.0) + iYear) / 4.0) + Math.floor(iMonth * 275.0 / 9.0) + iDay+ 1721027.0+ iYear * 367.0;
    if (bGregorian) {
      if ((iMonth - 9.0) < 0.0)       iSign=-1;
 else       iSign=1;
      dfA=Math.abs(iMonth - 9.0);
      dfJ3=-Math.floor((Math.floor(Math.floor(iYear + (double)iSign * Math.floor(dfA / 7.0)) / 100.0) + 1.0) * 0.75);
      dfJ=dfJ + dfJ3 + 2.0;
    }
    iJulian=(int)dfJ - 1;
    dfT=(double)iJulian - 2451545.0 + 0.5;
    dfTT=dfT / 36525.0 + 1.0;
    dfT0=(dfT * 8640184.813 / 36525.0 + 24110.5 + dfTimeZone * 86636.6 + dfLon * 86400.0) / 86400.0;
    dfT0=dfT0 - Math.floor(dfT0);
    dfT0=dfT0 * 2.0 * Math.PI;
    dfT=dfT + dfTimeZone;
    for (iCount=0; iCount <= 1; iCount++) {
      double dfGG;
      double dfLL;
      double dfSS;
      double dfUU;
      double dfVV;
      double dfWW;
      dfLL=0.779072 + 0.00273790931 * dfT;
      dfLL=dfLL - Math.floor(dfLL);
      dfLL=dfLL * 2.0 * Math.PI;
      dfGG=0.993126 + 0.0027377785 * dfT;
      dfGG=dfGG - Math.floor(dfGG);
      dfGG=dfGG * 2.0 * Math.PI;
      dfVV=0.39785 * Math.sin(dfLL) - 0.01000 * Math.sin(dfLL - dfGG) + 0.00333 * Math.sin(dfLL + dfGG) - 0.00021 * Math.sin(dfLL) * dfTT;
      dfUU=1 - 0.03349 * Math.cos(dfGG) - 0.00014 * Math.cos(dfLL * 2.0) + 0.00008 * Math.cos(dfLL);
      dfWW=-0.00010 - 0.04129 * Math.sin(dfLL * 2.0) + 0.03211 * Math.sin(dfGG) - 0.00104 * Math.sin(2.0 * dfLL - dfGG) - 0.00035 * Math.sin(2.0 * dfLL + dfGG) - 0.00008 * Math.sin(dfGG) * dfTT;
      dfSS=dfWW / Math.sqrt(dfUU - dfVV * dfVV);
      dfA5=dfLL + Math.atan(dfSS / Math.sqrt(1.0 - dfSS * dfSS));
      dfSS=dfVV / Math.sqrt(dfUU);
      dfD5=Math.atan(dfSS / Math.sqrt(1 - dfSS * dfSS));
      if (iCount == 0) {
        dfAA1=dfA5;
        dfDD1=dfD5;
      }
 else {
        dfAA2=dfA5;
        dfDD2=dfD5;
      }
      dfT=dfT + 1.0;
    }
    if (dfAA2 < dfAA1)     dfAA2=dfAA2 + 2.0 * Math.PI;
    dfZenith=Math.PI * 90.833 / 180.0;
    dfSinLat=Math.sin(dfLat * Math.PI / 180.0);
    dfCosLat=Math.cos(dfLat * Math.PI / 180.0);
    dfA0=dfAA1;
    dfD0=dfDD1;
    dfDA=dfAA2 - dfAA1;
    dfDD=dfDD2 - dfDD1;
    dfK1=15.0 * 1.0027379 * Math.PI / 180.0;
    dfHourRise=99.0;
    dfMinRise=99.0;
    dfHourSet=99.0;
    dfMinSet=99.0;
    dfV0=0.0;
    dfV2=0.0;
    for (iCount=0; iCount < 24; iCount++) {
      double tempA;
      double tempB;
      double tempD;
      double tempE;
      dfC0=(double)iCount;
      dfP=(dfC0 + 1.0) / 24.0;
      dfA2=dfAA1 + dfP * dfDA;
      dfD2=dfDD1 + dfP * dfDD;
      dfL0=dfT0 + dfC0 * dfK1;
      dfL2=dfL0 + dfK1;
      dfH0=dfL0 - dfA0;
      dfH2=dfL2 - dfA2;
      dfH1=(dfH2 + dfH0) / 2.0;
      dfD1=(dfD2 + dfD0) / 2.0;
      if (iCount == 0) {
        dfV0=dfSinLat * Math.sin(dfD0) + dfCosLat * Math.cos(dfD0) * Math.cos(dfH0) - Math.cos(dfZenith);
      }
 else       dfV0=dfV2;
      dfV2=dfSinLat * Math.sin(dfD2) + dfCosLat * Math.cos(dfD2) * Math.cos(dfH2) - Math.cos(dfZenith);
      if ((dfV0 >= 0.0 && dfV2 >= 0.0) || (dfV0 < 0.0 && dfV2 < 0.0)) {
        dfA0=dfA2;
        dfD0=dfD2;
        continue;
      }
      dfV1=dfSinLat * Math.sin(dfD1) + dfCosLat * Math.cos(dfD1) * Math.cos(dfH1) - Math.cos(dfZenith);
      tempA=2.0 * dfV2 - 4.0 * dfV1 + 2.0 * dfV0;
      tempB=4.0 * dfV1 - 3.0 * dfV0 - dfV2;
      tempD=tempB * tempB - 4.0 * tempA * dfV0;
      if (tempD < 0.0) {
        dfA0=dfA2;
        dfD0=dfD2;
        continue;
      }
      tempD=Math.sqrt(tempD);
      bSunrise=false;
      bSunset=false;
      if (dfV0 < 0.0 && dfV2 > 0.0) {
        bSunrise=true;
        bSunriseToday=true;
      }
      if (dfV0 > 0.0 && dfV2 < 0.0) {
        bSunset=true;
        bSunsetToday=true;
      }
      tempE=(tempD - tempB) / (2.0 * tempA);
      if (tempE > 1.0 || tempE < 0.0)       tempE=(-tempD - tempB) / (2.0 * tempA);
      if (bSunrise) {
        dfHourRise=Math.floor(dfC0 + tempE + 1.0 / 120.0);
        dfMinRise=Math.floor((dfC0 + tempE + 1.0 / 120.0 - dfHourRise) * 60.0);
      }
      if (bSunset) {
        dfHourSet=Math.floor(dfC0 + tempE + 1.0 / 120.0);
        dfMinSet=Math.floor((dfC0 + tempE + 1.0 / 120.0 - dfHourSet) * 60.0);
      }
      dfA0=dfA2;
      dfD0=dfD2;
    }
    if (!bSunriseToday && !bSunsetToday) {
      if (dfV2 < 0.0)       bSunDownAllDay=true;
 else       bSunUpAllDay=true;
    }
    dfmtDateTime=new SimpleDateFormat("d M yyyy HH:mm z");
    String tz_signal=origTimeZone <= 0 ? "-" : "+";
    double abs_tz=Math.abs(origTimeZone);
    NumberFormat formatter=new DecimalFormat("00");
    String tz_offset_hours=formatter.format((int)abs_tz);
    String tz_offset_minutes=formatter.format((int)(60 * (abs_tz - (int)abs_tz)));
    if (bSunriseToday) {
      dateSunrise=dfmtDateTime.parse(iDay + " " + iMonth+ " "+ iYear+ " "+ (int)dfHourRise+ ":"+ (int)dfMinRise+ " GMT"+ tz_signal+ tz_offset_hours+ ":"+ tz_offset_minutes);
    }
    if (bSunsetToday) {
      dateSunset=dfmtDateTime.parse(iDay + " " + iMonth+ " "+ iYear+ " "+ (int)dfHourSet+ ":"+ (int)dfMinSet+ " GMT"+ tz_signal+ tz_offset_hours+ ":"+ tz_offset_minutes);
    }
  }
 catch (  ParseException e) {
    System.out.println("\nCannot parse date");
    System.out.println(e);
    System.exit(1);
  }
}
