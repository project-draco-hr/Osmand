{
  int startDay=-1;
  int previousDay=-1;
  int k=0;
  BasicDayOpeningHourRule basic=new BasicDayOpeningHourRule();
  boolean[] days=basic.getDays();
  if ("24/7".equals(r)) {
    Arrays.fill(days,true);
    basic.setStartTime(0);
    basic.setEndTime(24 * 60);
    return basic;
  }
  for (; k < r.length(); k++) {
    char ch=r.charAt(k);
    if (Character.isDigit(ch)) {
      break;
    }
    if (Character.isWhitespace(ch) || ch == ',') {
      continue;
    }
 else     if (ch == '-') {
      if (previousDay != -1) {
        startDay=previousDay;
      }
 else {
        return null;
      }
    }
 else     if (k < r.length() - 1) {
      int i=0;
      for (      String s : daysStr) {
        if (s.charAt(0) == ch && s.charAt(1) == r.charAt(k + 1)) {
          break;
        }
        i++;
      }
      if (i < daysStr.length) {
        if (startDay != -1) {
          for (int j=startDay; j <= i; j++) {
            days[j]=true;
          }
          startDay=-1;
        }
 else {
          days[i]=true;
        }
        previousDay=i;
      }
    }
 else {
      return null;
    }
  }
  if (previousDay == -1) {
    return null;
  }
  String time=r.substring(k);
  String[] stEnd=time.split("-");
  if (stEnd.length != 2) {
    return null;
  }
  int st;
  int end;
  try {
    int i1=stEnd[0].indexOf(':');
    int i2=stEnd[1].indexOf(':');
    if (i1 == -1 || i2 == -1) {
      return null;
    }
    st=Integer.parseInt(stEnd[0].substring(0,i1).trim()) * 60 + Integer.parseInt(stEnd[0].substring(i1 + 1).trim());
    end=Integer.parseInt(stEnd[1].substring(0,i2).trim()) * 60 + Integer.parseInt(stEnd[1].substring(i2 + 1).trim());
  }
 catch (  NumberFormatException e) {
    return null;
  }
  basic.setStartTime(st);
  basic.setEndTime(end);
  return basic;
}
