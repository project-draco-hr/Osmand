{
  int startDay=-1;
  int previousDay=-1;
  int k=0;
  BasicDayOpeningHourRule basic=new BasicDayOpeningHourRule();
  boolean[] days=basic.getDays();
  if ("24/7".equals(r)) {
    Arrays.fill(days,true);
    basic.addTimeRange(0,24 * 60);
    rs.addRule(basic);
    return true;
  }
  for (; k < r.length(); k++) {
    char ch=r.charAt(k);
    if (Character.isDigit(ch)) {
      break;
    }
    if (ch == 'o' && r.charAt(k + 1) == 'f' && r.charAt(k + 1) == 'f') {
      break;
    }
    if (Character.isWhitespace(ch) || ch == ',') {
      continue;
    }
 else     if (ch == '-') {
      if (previousDay != -1) {
        startDay=previousDay;
      }
 else {
        return false;
      }
    }
 else     if (k < r.length() - 1) {
      int i=0;
      for (      String s : daysStr) {
        if (s.charAt(0) == ch && s.charAt(1) == r.charAt(k + 1)) {
          break;
        }
        i++;
      }
      if (i < daysStr.length) {
        if (startDay != -1) {
          for (int j=startDay; j <= i; j++) {
            days[j]=true;
          }
          startDay=-1;
        }
 else {
          days[i]=true;
        }
        previousDay=i;
      }
    }
 else {
      return false;
    }
  }
  if (previousDay == -1) {
    return false;
  }
  String timeSubstr=r.substring(k);
  String[] times=timeSubstr.split(",");
  boolean timesExist=true;
  for (  String time : times) {
    time=time.trim();
    if (time.length() == 0) {
      continue;
    }
    if (time.equals("off")) {
      break;
    }
    if (time.equals("24/7")) {
      basic.addTimeRange(0,24 * 60);
      break;
    }
    String[] stEnd=time.split("-");
    if (stEnd.length != 2) {
      continue;
    }
    timesExist=true;
    int st;
    int end;
    try {
      int i1=stEnd[0].indexOf(':');
      int i2=stEnd[1].indexOf(':');
      int startHour, startMin, endHour, endMin;
      if (i1 == -1) {
        startHour=Integer.parseInt(stEnd[0].trim());
        startMin=0;
      }
 else {
        startHour=Integer.parseInt(stEnd[0].substring(0,i1).trim());
        startMin=Integer.parseInt(stEnd[0].substring(i1 + 1).trim());
      }
      if (i2 == -1) {
        endHour=Integer.parseInt(stEnd[0].trim());
        endMin=0;
      }
 else {
        endHour=Integer.parseInt(stEnd[0].substring(0,i1).trim());
        endMin=Integer.parseInt(stEnd[0].substring(i1 + 1).trim());
      }
      st=startHour * 60 + startMin;
      end=endHour * 60 + endMin;
    }
 catch (    NumberFormatException e) {
      return false;
    }
    basic.addTimeRange(st,end);
  }
  rs.addRule(basic);
  if (!timesExist) {
    return false;
  }
  return true;
}
