{
  if (elements.isEmpty()) {
    return Collections.emptyList();
  }
  ResourceManager resourceManager=resourceManager();
  List<RegionAddressRepository> foundCountries=new ArrayList<RegionAddressRepository>();
  RegionAddressRepository country;
  for (  String maybeCountry : elements) {
    country=resourceManager.getRegionRepository(maybeCountry);
    if (country != null) {
      foundCountries.add(country);
    }
  }
  Collection<RegionAddressRepository> countriesToSearch=foundCountries;
  if (foundCountries.isEmpty()) {
    countriesToSearch=resourceManager.getAddressRepositories();
  }
  final List<MapObject> results=new ArrayList<MapObject>();
  final List<MapObject> connectedStreets=new ArrayList<MapObject>();
  for (  RegionAddressRepository rar : countriesToSearch) {
    final TLongObjectHashMap<City> cityIds=new TLongObjectHashMap<City>();
    for (    String element : elements) {
      if (element != null && element.length() > 0) {
        rar.searchMapObjectsByName(element,new ResultMatcher<MapObject>(){
          @Override public boolean publish(          MapObject object){
            if (object instanceof City && object.getId() != null) {
              cityIds.put(object.getId(),(City)object);
            }
 else             if (object instanceof Street) {
              City c=((Street)object).getCity();
              if (c != null && c.getId() != null && cityIds.containsKey(c.getId().longValue())) {
                connectedStreets.add((Street)object);
                return false;
              }
            }
            results.add(object);
            return false;
          }
          @Override public boolean isCancelled(){
            return false;
          }
        }
);
      }
    }
  }
  connectedStreets.addAll(results);
  return connectedStreets;
}
