{
  if (elements.isEmpty()) {
    return Collections.emptyList();
  }
  List<String> q=new ArrayList<String>(elements);
  MapObject geo=checkGeoPoint();
  if (geo != null) {
    return Collections.singleton(geo);
  }
  Collection<RegionAddressRepository> countriesToSearch=limitSearchToCountries(q);
  final List<Street> allStreets=new ArrayList<Street>();
  final TLongObjectHashMap<City> cityIds=new TLongObjectHashMap<City>();
  for (  RegionAddressRepository rar : countriesToSearch) {
    for (    String element : q) {
      if (element != null && element.length() > 2) {
        rar.searchMapObjectsByName(element,new ResultMatcher<MapObject>(){
          @Override public boolean publish(          MapObject object){
            if (object instanceof City && object.getId() != null) {
              cityIds.put(object.getId(),(City)object);
            }
 else             if (object instanceof Street) {
              allStreets.add((Street)object);
            }
            return false;
          }
          @Override public boolean isCancelled(){
            return false;
          }
        }
);
      }
    }
  }
  if (cityIds.isEmpty()) {
    return allStreets;
  }
  final List<MapObject> connectedStreets=new ArrayList<MapObject>();
  Iterator<Street> p=allStreets.iterator();
  while (p.hasNext()) {
    Street s=p.next();
    if (cityIds.contains(s.getCity().getId())) {
      connectedStreets.add(s);
    }
 else {
      boolean tooFar=true;
      for (      City c : cityIds.values()) {
        if (MapUtils.getDistance(c.getLocation(),s.getLocation()) < 50000) {
          tooFar=false;
          break;
        }
      }
      if (tooFar) {
        p.remove();
      }
    }
  }
  if (connectedStreets.isEmpty()) {
    List<MapObject> all=new ArrayList<MapObject>();
    all.addAll(cityIds.valueCollection());
    all.addAll(allStreets);
    return all;
  }
 else {
    connectedStreets.addAll(cityIds.valueCollection());
    return connectedStreets;
  }
}
