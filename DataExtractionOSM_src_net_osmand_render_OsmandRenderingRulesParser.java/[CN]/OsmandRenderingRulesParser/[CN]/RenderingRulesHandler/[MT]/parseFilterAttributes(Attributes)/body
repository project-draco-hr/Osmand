{
  FilterState state=new FilterState();
  if (this.state == TEXT_STATE) {
    state.text=new TextAttributes();
  }
  for (int i=0; i < attributes.getLength(); i++) {
    String name=attributes.getLocalName(i);
    String val=attributes.getValue(i);
    if (name.equals("tag")) {
      state.tag=val;
    }
 else     if (name.equals("value")) {
      state.val=val;
    }
 else     if (name.equals("minzoom")) {
      state.minzoom=Integer.parseInt(val);
    }
 else     if (name.equals("maxzoom")) {
      state.maxzoom=Integer.parseInt(val);
    }
 else     if (name.equals("maxzoom")) {
      state.maxzoom=Integer.parseInt(val);
    }
 else     if (name.equals("layer")) {
      state.layer=Integer.parseInt(val);
    }
 else     if (name.equals("orderType")) {
      int i1=val.equals("polygon") ? 3 : (val.equals("line") ? 2 : 1);
      state.orderType=i1;
    }
 else     if (name.equals("order")) {
      state.order=Float.parseFloat(val);
    }
 else     if (name.equals("nightMode")) {
      state.nightMode=Boolean.parseBoolean(val);
    }
 else     if (name.equals("moreDetail")) {
      state.moreDetail=Boolean.parseBoolean(val);
    }
 else     if (name.equals("icon")) {
      state.icon=val;
    }
 else     if (name.equals("color")) {
      state.main.color=parseColor(val);
    }
 else     if (name.startsWith("color_")) {
      EffectAttributes ef=state.getEffectAttributes(Integer.parseInt(name.substring(6)));
      ef.color=parseColor(val);
    }
 else     if (name.equals("shader")) {
      state.shader=val;
    }
 else     if (name.equals("strokeWidth")) {
      state.main.strokeWidth=Float.parseFloat(val);
    }
 else     if (name.startsWith("strokeWidth_")) {
      EffectAttributes ef=state.getEffectAttributes(Integer.parseInt(name.substring(12)));
      ef.strokeWidth=Float.parseFloat(val);
    }
 else     if (name.equals("pathEffect")) {
      state.main.pathEffect=val;
    }
 else     if (name.startsWith("pathEffect_")) {
      EffectAttributes ef=state.getEffectAttributes(Integer.parseInt(name.substring(11)));
      ef.pathEffect=val;
    }
 else     if (name.equals("shadowRadius")) {
      state.main.shadowRadius=Float.parseFloat(val);
    }
 else     if (name.startsWith("shadowRadius_")) {
      EffectAttributes ef=state.getEffectAttributes(Integer.parseInt(name.substring(14)));
      ef.shadowRadius=Float.parseFloat(val);
    }
 else     if (name.equals("shadowColor")) {
      state.main.shadowColor=parseColor(val);
    }
 else     if (name.startsWith("shadowColor_")) {
      EffectAttributes ef=state.getEffectAttributes(Integer.parseInt(name.substring(12)));
      ef.shadowColor=parseColor(val);
    }
 else     if (name.equals("cap")) {
      state.main.cap=val;
    }
 else     if (name.startsWith("cap_")) {
      EffectAttributes ef=state.getEffectAttributes(Integer.parseInt(name.substring(4)));
      ef.cap=val;
    }
 else     if (name.equals("ref")) {
      state.text.ref=val;
    }
 else     if (name.equals("textSize")) {
      state.text.textSize=Float.parseFloat(val);
    }
 else     if (name.equals("textBold")) {
      state.text.textBold=Boolean.parseBoolean(val);
    }
 else     if (name.equals("textColor")) {
      state.text.textColor=parseColor(val);
    }
 else     if (name.equals("textLength")) {
      state.textLength=Integer.parseInt(val);
    }
 else     if (name.equals("textShield")) {
      state.text.textShield=val;
    }
 else     if (name.equals("textMinDistance")) {
      state.text.textMinDistance=Integer.parseInt(val);
    }
 else     if (name.equals("textOnPath")) {
      state.text.textOnPath=Boolean.parseBoolean(val);
    }
 else     if (name.equals("textWrapWidth")) {
      state.text.textWrapWidth=Integer.parseInt(val);
    }
 else     if (name.equals("textDy")) {
      state.text.textDy=Integer.parseInt(val);
    }
 else     if (name.equals("textHaloRadius")) {
      state.text.textHaloRadius=Float.parseFloat(val);
    }
 else {
      log.warn("Unknown attribute " + name);
    }
  }
  return state;
}
