{
  File f=new File(path);
  InputStream stream=new FileInputStream(f);
  int i=f.getName().indexOf('.');
  if (regionName == null) {
    regionName=Algoritms.capitalizeFirstLetterAndLowercase(f.getName().substring(0,i));
  }
  InputStream streamFile=stream;
  long st=System.currentTimeMillis();
  if (path.endsWith(".bz2")) {
    if (stream.read() != 'B' || stream.read() != 'Z') {
      throw new RuntimeException("The source stream must start with the characters BZ if it is to be read as a BZip2 stream.");
    }
 else {
      stream=new CBZip2InputStream(stream);
    }
  }
  if (progress != null) {
    progress.startTask("Loading file " + path,-1);
  }
  OsmBaseStorage storage=new OsmBaseStorage();
  storage.setSupressWarnings(DataExtractionSettings.getSettings().isSupressWarningsForDuplicatedId());
  if (addFilter != null) {
    storage.getFilters().add(addFilter);
  }
  try {
    Class.forName("org.sqlite.JDBC");
  }
 catch (  ClassNotFoundException e) {
    log.error("Illegal configuration",e);
    throw new IllegalStateException(e);
  }
  if (indexMap) {
    dbFile=new File(workingDir,getMapFileName());
  }
 else {
    dbFile=new File(workingDir,TEMP_NODES_DB);
  }
  if (dbFile.exists()) {
    dbFile.delete();
  }
  dbConn=DriverManager.getConnection("jdbc:sqlite:" + dbFile.getAbsolutePath());
  NewDataExtractionOsmFilter filter=new NewDataExtractionOsmFilter();
  try {
    progress.setGeneralProgress("[40 of 100]");
    filter.initDatabase();
    storage.getFilters().add(filter);
    storage.parseOSM(stream,progress,streamFile,false);
    filter.finishLoading();
    if (log.isInfoEnabled()) {
      log.info("File parsed : " + (System.currentTimeMillis() - st));
    }
    progress.finishTask();
  }
  finally {
    if (log.isInfoEnabled()) {
      log.info("File indexed : " + (System.currentTimeMillis() - st));
    }
  }
  progress.setGeneralProgress("[90 of 100]");
  pselectNode=dbConn.prepareStatement("select * from node where id = ?");
  pselectWay=dbConn.prepareStatement("select * from ways where id = ?");
  pselectRelation=dbConn.prepareStatement("select * from relations where id = ?");
  pselectTags=dbConn.prepareStatement("select key, value from tags where id = ? and type = ?");
  if (indexPOI) {
    poiIndexFile=new File(workingDir,getPoiFileName());
    if (poiIndexFile.exists()) {
      poiIndexFile.delete();
    }
    poiIndexFile.getParentFile().mkdirs();
    poiConnection=DriverManager.getConnection("jdbc:sqlite:" + poiIndexFile.getAbsolutePath());
    poiConnection.setAutoCommit(false);
    DataIndexWriter.createPoiIndexStructure(poiConnection);
    poiPreparedStatement=DataIndexWriter.createStatementAmenityInsert(poiConnection);
    poiInBatch=0;
  }
  iterateOverAllEntities(progress,filter);
  try {
    if (pselectNode != null) {
      pselectNode.close();
    }
    if (pselectWay != null) {
      pselectWay.close();
    }
    if (pselectRelation != null) {
      pselectRelation.close();
    }
    if (pselectTags != null) {
      pselectTags.close();
    }
    if (poiConnection != null) {
      if (poiPreparedStatement != null) {
        if (poiInBatch > 0) {
          poiPreparedStatement.executeBatch();
        }
        poiPreparedStatement.close();
      }
      poiConnection.commit();
      poiConnection.close();
      if (lastModifiedDate != null) {
        poiIndexFile.setLastModified(lastModifiedDate);
      }
    }
    dbConn.close();
  }
 catch (  SQLException e) {
  }
}
