{
  DownloadResources root=ctx.getDownloadThread().getIndexes();
  FilterResults results=new FilterResults();
  if (constraint == null || constraint.length() < 2) {
    results.values=new ArrayList<>();
    results.count=0;
  }
 else {
    String[] ors=constraint.toString().split(",");
    List<List<String>> conds=new ArrayList<>();
    for (    String or : ors) {
      final ArrayList<String> cond=new ArrayList<>();
      for (      String term : or.split("\\s")) {
        final String t=term.trim().toLowerCase();
        if (t.length() > 0) {
          cond.add(t);
        }
      }
      if (cond.size() > 0) {
        conds.add(cond);
      }
    }
    List<Object> filter=new ArrayList<>();
    processGroup(root,filter,conds);
    final Collator collator=OsmAndCollator.primaryCollator();
    Collections.sort(filter,new Comparator<Object>(){
      @Override public int compare(      Object obj1,      Object obj2){
        String str1;
        String str2;
        if (obj1 instanceof DownloadResourceGroup) {
          str1=((DownloadResourceGroup)obj1).getName(ctx);
        }
 else {
          str1=((IndexItem)obj1).getVisibleName(getMyApplication(),osmandRegions,false);
        }
        if (obj2 instanceof DownloadResourceGroup) {
          str2=((DownloadResourceGroup)obj2).getName(ctx);
        }
 else {
          str2=((IndexItem)obj2).getVisibleName(getMyApplication(),osmandRegions,false);
        }
        return collator.compare(str1,str2);
      }
    }
);
    results.values=filter;
    results.count=filter.size();
  }
  return results;
}
