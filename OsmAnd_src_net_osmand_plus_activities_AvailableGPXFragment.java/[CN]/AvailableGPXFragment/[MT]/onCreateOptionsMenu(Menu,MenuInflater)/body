{
  MenuItem mi=createMenuItem(menu,SEARCH_ID,R.string.search_poi_filter,R.drawable.ic_action_search_dark,R.drawable.ic_action_search_dark,MenuItemCompat.SHOW_AS_ACTION_ALWAYS | MenuItemCompat.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW);
  searchView=new SearchView(getActivity());
  MenuItemCompat.setActionView(mi,searchView);
  searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener(){
    @Override public boolean onQueryTextSubmit(    String query){
      listAdapter.getFilter().filter(query);
      return true;
    }
    @Override public boolean onQueryTextChange(    String newText){
      listAdapter.getFilter().filter(newText);
      return true;
    }
  }
);
  if (isOrientationPortrait()) {
    menu=((FavouritesActivity)getActivity()).getClearToolbar(true).getMenu();
  }
 else {
    ((FavouritesActivity)getActivity()).getClearToolbar(false);
  }
  optionsMenuAdapter=new ContextMenuAdapter(getActivity());
  OnContextMenuClick listener=new OnContextMenuClick(){
    @Override public boolean onContextMenuClick(    ArrayAdapter<?> adapter,    final int itemId,    int pos,    boolean isChecked){
      if (itemId == R.string.local_index_mi_reload) {
        asyncLoader=new LoadGpxTask();
        asyncLoader.execute(getActivity());
      }
 else       if (itemId == R.string.show_gpx_route) {
        openShowOnMapMode();
      }
 else       if (itemId == R.string.local_index_mi_delete) {
        openSelectionMode(itemId,R.drawable.ic_action_delete_dark,R.drawable.ic_action_delete_light,new DialogInterface.OnClickListener(){
          @Override public void onClick(          DialogInterface dialog,          int which){
            doAction(itemId);
          }
        }
);
      }
      return true;
    }
  }
;
  optionsMenuAdapter.item(R.string.show_gpx_route).icons(R.drawable.ic_action_map_marker_dark,R.drawable.ic_action_map_marker_dark).listen(listener).reg();
  optionsMenuAdapter.item(R.string.local_index_mi_delete).icons(R.drawable.ic_action_delete_dark,R.drawable.ic_action_delete_dark).listen(listener).reg();
  optionsMenuAdapter.item(R.string.local_index_mi_reload).icons(R.drawable.ic_action_refresh_dark,R.drawable.ic_action_refresh_dark).listen(listener).reg();
  OsmandPlugin.onOptionsMenuActivity(getActivity(),this,optionsMenuAdapter);
  for (int j=0; j < optionsMenuAdapter.length(); j++) {
    final MenuItem item;
    item=menu.add(0,optionsMenuAdapter.getElementId(j),j + 1,optionsMenuAdapter.getItemName(j));
    MenuItemCompat.setShowAsAction(item,MenuItemCompat.SHOW_AS_ACTION_ALWAYS);
    if (isOrientationPortrait()) {
      item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
        @Override public boolean onMenuItemClick(        MenuItem menuItem){
          onOptionsItemSelected(item);
          return true;
        }
      }
);
    }
    if (optionsMenuAdapter.getImageId(j,isLightActionBar()) != 0) {
      item.setIcon(optionsMenuAdapter.getImageId(j,false));
    }
  }
}
