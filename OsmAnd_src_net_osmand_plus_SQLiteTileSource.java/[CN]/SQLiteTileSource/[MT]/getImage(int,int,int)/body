{
  SQLiteDatabase db=getDatabase();
  if (db == null) {
    return null;
  }
  if (zoom <= baseZoom) {
    Cursor cursor=db.rawQuery("SELECT image FROM tiles WHERE x = ? AND y = ? AND z = ?",new String[]{x + "",y + "",(17 - zoom) + ""});
    byte[] blob=null;
    if (cursor.moveToFirst()) {
      blob=cursor.getBlob(0);
    }
    cursor.close();
    if (blob != null) {
      try {
        return BitmapFactory.decodeByteArray(blob,0,blob.length);
      }
 catch (      OutOfMemoryError ome) {
        double free=Runtime.getRuntime().freeMemory();
        if (log.isDebugEnabled())         log.debug("Out of memory, skipping. Free mem = " + free);
      }
    }
    return null;
  }
 else {
    int n=zoom - baseZoom;
    int base_xtile=x >> n;
    int base_ytile=y >> n;
    int scaledSize=tileSize >> n;
    int offset_x=x - (base_xtile << n);
    int offset_y=y - (base_ytile << n);
    int flags=0x020;
    if (scaledSize < 8)     return null;
    if (offset_x == 0)     flags|=0x444;
 else     if (offset_x == (1 << n) - 1)     flags|=0x111;
    if (offset_y == 0)     flags|=0x700;
 else     if (offset_y == (1 << n) - 1)     flags|=0x007;
    Bitmap metaTile=getMetaTile(base_xtile,base_ytile,baseZoom,flags);
    if (metaTile != null) {
      int delta_px=scaledSize * offset_x;
      int delta_py=scaledSize * offset_y;
      try {
        Bitmap xn=Bitmap.createBitmap(metaTile,delta_px,delta_py,scaledSize + 2 * margin,scaledSize + 2 * margin);
        metaTile.recycle();
        int scaleto=tileSize + ((2 * margin) << n);
        Bitmap scaled=Bitmap.createScaledBitmap(xn,scaleto,scaleto,true);
        xn.recycle();
        return Bitmap.createBitmap(scaled,(margin << n),(margin << n),tileSize,tileSize);
      }
 catch (      OutOfMemoryError ome) {
        double free=Runtime.getRuntime().freeMemory();
        if (log.isDebugEnabled())         log.debug("Out of memory, skipping. Free mem = " + free);
      }
    }
    return null;
  }
}
