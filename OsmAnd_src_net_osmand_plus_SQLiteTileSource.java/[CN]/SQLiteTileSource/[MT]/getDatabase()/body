{
  if ((db == null || db.isClosed()) && file.exists()) {
    db=ctx.getSQLiteAPI().openByAbsolutePath(file.getAbsolutePath(),false);
    try {
      SQLiteCursor cursor=db.rawQuery("SELECT * FROM info",null);
      if (cursor.moveToFirst()) {
        String[] columnNames=cursor.getColumnNames();
        List<String> list=Arrays.asList(columnNames);
        int url=list.indexOf("url");
        if (url != -1) {
          String template=cursor.getString(url);
          if (!Algorithms.isEmpty(template)) {
            urlTemplate=template;
          }
        }
        int tnumbering=list.indexOf("tilenumbering");
        boolean inversiveInfoZoom=tnumbering != -1 && "BigPlanet".equals(list.get(tnumbering));
        if (tnumbering != -1) {
          inversiveZoom="BigPlanet".equals(list.get(tnumbering));
        }
        int mnz=list.indexOf("minzoom");
        if (mnz != -1) {
          minZoom=(int)cursor.getInt(mnz);
        }
        int mxz=list.indexOf("maxzoom");
        if (mxz != -1) {
          baseZoom=(int)cursor.getInt(mxz);
        }
        if (inversiveInfoZoom) {
          mnz=minZoom;
          minZoom=17 - baseZoom;
          baseZoom=17 - mnz;
        }
      }
      maxZoom=24;
      while ((tileSize >> (maxZoom - baseZoom)) < minScaledSize)       maxZoom--;
    }
 catch (    RuntimeException e) {
      e.printStackTrace();
    }
  }
  return db;
}
