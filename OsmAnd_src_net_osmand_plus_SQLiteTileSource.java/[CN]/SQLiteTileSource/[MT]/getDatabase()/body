{
  if ((db == null || db.isClosed()) && file.exists()) {
    LOG.debug("Open " + file.getAbsolutePath());
    try {
      onlyReadonlyAvailable=false;
      db=ctx.getSQLiteAPI().openByAbsolutePath(file.getAbsolutePath(),false);
    }
 catch (    RuntimeException e) {
      onlyReadonlyAvailable=true;
      db=ctx.getSQLiteAPI().openByAbsolutePath(file.getAbsolutePath(),true);
    }
    try {
      SQLiteCursor cursor=db.rawQuery("SELECT * FROM info",null);
      if (cursor.moveToFirst()) {
        String[] columnNames=cursor.getColumnNames();
        List<String> list=Arrays.asList(columnNames);
        int url=list.indexOf("url");
        if (url != -1) {
          String template=cursor.getString(url);
          if (!Algorithms.isEmpty(template)) {
            urlTemplate=TileSourceTemplate.normalizeUrl(template);
          }
        }
        int ruleId=list.indexOf("rule");
        if (ruleId != -1) {
          rule=cursor.getString(ruleId);
        }
        int refererId=list.indexOf("referer");
        if (refererId != -1) {
          referer=cursor.getString(refererId);
        }
        int tnumbering=list.indexOf("tilenumbering");
        if (tnumbering != -1) {
          inversiveZoom="BigPlanet".equalsIgnoreCase(cursor.getString(tnumbering));
        }
 else {
          inversiveZoom=true;
          addInfoColumn("tilenumbering","BigPlanet");
        }
        int timecolumn=list.indexOf("timecolumn");
        if (timecolumn != -1) {
          timeSupported="yes".equalsIgnoreCase(cursor.getString(timecolumn));
        }
 else {
          timeSupported=hasTimeColumn();
          addInfoColumn("timecolumn",timeSupported ? "yes" : "no");
        }
        int expireminutes=list.indexOf("expireminutes");
        this.expirationTimeMillis=-1;
        if (expireminutes != -1) {
          int minutes=(int)cursor.getInt(expireminutes);
          if (minutes > 0) {
            this.expirationTimeMillis=minutes * 60 * 1000;
          }
        }
 else {
          addInfoColumn("expireminutes","0");
        }
        int ellipsoid=list.indexOf("ellipsoid");
        if (ellipsoid != -1) {
          int set=(int)cursor.getInt(ellipsoid);
          if (set == 1) {
            this.isEllipsoid=true;
          }
        }
        boolean inversiveInfoZoom=inversiveZoom;
        int mnz=list.indexOf("minzoom");
        if (mnz != -1) {
          minZoom=(int)cursor.getInt(mnz);
        }
        int mxz=list.indexOf("maxzoom");
        if (mxz != -1) {
          maxZoom=(int)cursor.getInt(mxz);
        }
        if (inversiveInfoZoom) {
          mnz=minZoom;
          minZoom=17 - maxZoom;
          maxZoom=17 - mnz;
        }
      }
      cursor.close();
    }
 catch (    RuntimeException e) {
      e.printStackTrace();
    }
  }
  return db;
}
