{
  preloadCities();
  int ind=0;
  if (name.length() >= 2 && Character.isDigit(name.charAt(0)) && Character.isDigit(name.charAt(1))) {
    preloadPostcodes();
    String uName=name.toUpperCase();
    for (    String code : postCodes.keySet()) {
      if (code.startsWith(uName)) {
        citiesToFill.add(ind++,postCodes.get(code));
      }
 else       if (code.contains(uName)) {
        citiesToFill.add(postCodes.get(code));
      }
    }
  }
  if (name.length() < 3) {
    EnumSet<CityType> set=EnumSet.of(CityType.CITY,CityType.TOWN);
    for (    CityType t : set) {
      List<City> list=cityTypes.get(t);
      if (list == null) {
        continue;
      }
      if (name.length() == 0) {
        citiesToFill.addAll(list);
      }
 else {
        name=name.toLowerCase();
        for (        City c : list) {
          String cName=useEnglishNames ? c.getEnName() : c.getName();
          String lowerCase=cName.toLowerCase();
          if (lowerCase.startsWith(name)) {
            citiesToFill.add(c);
          }
        }
      }
    }
  }
 else {
    name=name.toLowerCase();
    Collection<City> src=cities.values();
    for (    City c : src) {
      String cName=useEnglishNames ? c.getEnName() : c.getName();
      String lowerCase=cName.toLowerCase();
      if (lowerCase.startsWith(name)) {
        citiesToFill.add(ind,c);
        ind++;
      }
 else       if (lowerCase.contains(name)) {
        citiesToFill.add(c);
      }
    }
    int initialsize=citiesToFill.size();
    log.debug("Start loading cities for " + getName() + " filter "+ name);
    name=Algoritms.capitalizeFirstLetterAndLowercase(name);
    StringBuilder where=new StringBuilder(80);
    where.append(IndexCityTable.CITY_TYPE.toString()).append(" not in (").append('\'').append(CityType.valueToString(CityType.CITY)).append('\'').append(", ").append('\'').append(CityType.valueToString(CityType.TOWN)).append('\'').append(") and ").append(useEnglishNames ? IndexCityTable.NAME_EN.toString() : IndexCityTable.NAME.toString()).append(" LIKE '" + name + "%'");
    Cursor query=db.query(IndexCityTable.getTable(),IndexConstants.generateColumnNames(IndexCityTable.values()),where.toString(),null,null,null,null);
    if (query.moveToFirst()) {
      List<City> hamlets=new ArrayList<City>();
      do {
        hamlets.add(parseCityFromCursor(query));
      }
 while (query.moveToNext());
      Collections.sort(hamlets,new MapObjectNameDistanceComparator(useEnglishNames,currentLocation));
      citiesToFill.addAll(hamlets);
    }
    query.close();
    log.debug("Loaded citites " + (citiesToFill.size() - initialsize));
  }
}
