{
  InfixExpression newRhs=ast.newInfixExpression();
  newRhs.setLeftOperand(unbox(lhs));
  newRhs.setRightOperand(unbox(rhs));
  InfixExpression.Operator infixOp;
  if (op == Assignment.Operator.PLUS_ASSIGN) {
    infixOp=InfixExpression.Operator.PLUS;
  }
 else   if (op == Assignment.Operator.MINUS_ASSIGN) {
    infixOp=InfixExpression.Operator.MINUS;
  }
 else   if (op == Assignment.Operator.TIMES_ASSIGN) {
    infixOp=InfixExpression.Operator.TIMES;
  }
 else   if (op == Assignment.Operator.DIVIDE_ASSIGN) {
    infixOp=InfixExpression.Operator.DIVIDE;
  }
 else   if (op == Assignment.Operator.BIT_AND_ASSIGN) {
    infixOp=InfixExpression.Operator.AND;
  }
 else   if (op == Assignment.Operator.BIT_OR_ASSIGN) {
    infixOp=InfixExpression.Operator.OR;
  }
 else   if (op == Assignment.Operator.BIT_XOR_ASSIGN) {
    infixOp=InfixExpression.Operator.XOR;
  }
 else   if (op == Assignment.Operator.REMAINDER_ASSIGN) {
    infixOp=InfixExpression.Operator.REMAINDER;
  }
 else   if (op == Assignment.Operator.LEFT_SHIFT_ASSIGN) {
    infixOp=InfixExpression.Operator.LEFT_SHIFT;
  }
 else   if (op == Assignment.Operator.RIGHT_SHIFT_SIGNED_ASSIGN) {
    infixOp=InfixExpression.Operator.RIGHT_SHIFT_SIGNED;
  }
 else   if (op == Assignment.Operator.RIGHT_SHIFT_UNSIGNED_ASSIGN) {
    infixOp=InfixExpression.Operator.RIGHT_SHIFT_UNSIGNED;
  }
 else {
    throw new IllegalArgumentException();
  }
  newRhs.setOperator(infixOp);
  Types.addBinding(newRhs,Types.getPrimitiveType(lhType));
  return newRhs;
}
