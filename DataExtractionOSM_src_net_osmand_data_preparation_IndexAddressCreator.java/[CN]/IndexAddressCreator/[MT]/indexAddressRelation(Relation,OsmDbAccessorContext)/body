{
  if (i instanceof Relation && "address".equals(i.getTag(OSMTagKey.TYPE))) {
    String type=i.getTag(OSMTagKey.ADDRESS_TYPE);
    boolean house="house".equals(type);
    boolean street="a6".equals(type);
    if (house || street) {
      City c=null;
      ctx.loadEntityData(i,true);
      Collection<Entity> members=i.getMembers("is_in");
      Relation a3=null;
      Relation a6=null;
      if (!members.isEmpty()) {
        if (street) {
          a6=i;
        }
        Entity in=members.iterator().next();
        ctx.loadEntityData(in,true);
        if (in instanceof Relation) {
          if (house) {
            a6=(Relation)in;
            members=((Relation)in).getMembers("is_in");
            if (!members.isEmpty()) {
              in=members.iterator().next();
              ctx.loadEntityData(in,true);
              if (in instanceof Relation) {
                a3=(Relation)in;
              }
            }
          }
 else {
            a3=(Relation)in;
          }
        }
      }
      if (a3 != null) {
        Collection<EntityId> memberIds=a3.getMemberIds("label");
        if (!memberIds.isEmpty()) {
          c=cities.get(memberIds.iterator().next());
        }
      }
      if (c != null && a6 != null) {
        String name=a6.getTag(OSMTagKey.NAME);
        if (name != null) {
          LatLon location=c.getLocation();
          for (          Entity e : i.getMembers(null)) {
            if (e instanceof Way) {
              LatLon l=((Way)e).getLatLon();
              if (l != null) {
                location=l;
                break;
              }
            }
          }
          Long streetId=getStreetInCity(c,name,location,(a6.getId() << 2) | 2);
          if (streetId == null) {
            return;
          }
          if (street) {
            for (            Map.Entry<Entity,String> r : i.getMemberEntities().entrySet()) {
              if ("street".equals(r.getValue())) {
                if (r.getKey() instanceof Way && saveAddressWays) {
                  writeStreetWayNodes(addressStreetNodeStat,pStatements,streetId,(Way)r.getKey());
                  if (loadInMemory) {
                    addressStreetNodeLocalSet.add(r.getKey().getId());
                  }
                }
              }
 else               if ("house".equals(r.getValue())) {
                if (!(r.getKey() instanceof Relation)) {
                  String hno=r.getKey().getTag(OSMTagKey.ADDR_HOUSE_NUMBER);
                  if (hno != null) {
                    Building building=new Building(r.getKey());
                    building.setName(hno);
                    writeBuilding(addressBuildingStat,pStatements,streetId,building);
                    if (loadInMemory) {
                      addressBuildingLocalSet.add(r.getKey().getId());
                    }
                  }
                }
              }
            }
          }
 else {
            String hno=i.getTag(OSMTagKey.ADDRESS_HOUSE);
            if (hno == null) {
              hno=i.getTag(OSMTagKey.ADDR_HOUSE_NUMBER);
            }
            if (hno == null) {
              hno=i.getTag(OSMTagKey.NAME);
            }
            members=i.getMembers("border");
            if (!members.isEmpty()) {
              Entity border=members.iterator().next();
              if (border != null) {
                EntityId id=EntityId.valueOf(border);
                if (!a6.getMemberIds().contains(id)) {
                  Building building=new Building(border);
                  if (building.getLocation() != null) {
                    building.setName(hno);
                    writeBuilding(addressBuildingStat,pStatements,streetId,building);
                    if (loadInMemory) {
                      addressBuildingLocalSet.add(id.getId());
                    }
                  }
 else {
                    log.error("Strange border " + id + " location couldn't be found");
                  }
                }
              }
            }
 else {
              log.info("For relation " + i.getId() + " border not found");
            }
          }
        }
      }
    }
  }
}
