{
  final float time=1.5f;
  routeAnimation=new Thread(){
    @Override public void run(){
      Location current=directions.isEmpty() ? null : new Location(directions.remove(0));
      Location prev=current;
      long prevTime=current == null ? 0 : current.getTime();
      float meters=metersToGoInFiveSteps(directions,current);
      while (!directions.isEmpty() && routeAnimation != null) {
        int timeout=(int)(time * 1000);
        float intervalTime=time;
        if (useLocationTime) {
          current=directions.remove(0);
          meters=current.distanceTo(prev);
          if (!directions.isEmpty()) {
            timeout=(int)(directions.get(0).getTime() - current.getTime());
            intervalTime=(current.getTime() - prevTime) / 1000f;
            prevTime=current.getTime();
          }
        }
 else {
          if (current.distanceTo(directions.get(0)) > meters) {
            current=middleLocation(current,directions.get(0),meters);
          }
 else {
            current=new Location(directions.remove(0));
            meters=metersToGoInFiveSteps(directions,current);
          }
        }
        if (intervalTime != 0) {
          current.setSpeed(meters / intervalTime * coeff);
        }
        current.setTime(System.currentTimeMillis());
        if (!current.hasAccuracy()) {
          current.setAccuracy(5);
        }
        if (prev != null && prev.distanceTo(current) > 3) {
          current.setBearing(prev.bearingTo(current));
        }
        final Location toset=current;
        ma.runOnUiThread(new Runnable(){
          @Override public void run(){
            ma.setLocation(toset);
          }
        }
);
        try {
          Thread.sleep((long)(timeout / coeff));
        }
 catch (        InterruptedException e) {
        }
        prev=current;
      }
      RouteAnimation.this.stop();
    }
  }
;
  routeAnimation.start();
}
