{
  int size=memoizedSerializedSize;
  if (size != -1)   return size;
  size=0;
  if (hasName()) {
    size+=com.google.protobuf.CodedOutputStream.computeStringSize(1,getName());
  }
  if (hasNameEn()) {
    size+=com.google.protobuf.CodedOutputStream.computeStringSize(2,getNameEn());
  }
  if (hasX()) {
    size+=com.google.protobuf.CodedOutputStream.computeSInt32Size(3,getX());
  }
  if (hasY()) {
    size+=com.google.protobuf.CodedOutputStream.computeSInt32Size(4,getY());
  }
  for (  net.osmand.binary.OsmandOdb.StreetIntersection element : getIntersectionsList()) {
    size+=com.google.protobuf.CodedOutputStream.computeMessageSize(5,element);
  }
  if (hasId()) {
    size+=com.google.protobuf.CodedOutputStream.computeUInt64Size(6,getId());
  }
{
    int dataSize=0;
    for (    int element : getAttributeTagIdsList()) {
      dataSize+=com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(element);
    }
    size+=dataSize;
    size+=1 * getAttributeTagIdsList().size();
  }
{
    int dataSize=0;
    for (    java.lang.String element : getAttributeValuesList()) {
      dataSize+=com.google.protobuf.CodedOutputStream.computeStringSizeNoTag(element);
    }
    size+=dataSize;
    size+=1 * getAttributeValuesList().size();
  }
  for (  net.osmand.binary.OsmandOdb.BuildingIndex element : getBuildingsList()) {
    size+=com.google.protobuf.CodedOutputStream.computeMessageSize(12,element);
  }
  size+=getUnknownFields().getSerializedSize();
  memoizedSerializedSize=size;
  return size;
}
