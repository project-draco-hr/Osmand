{
  float prevDirectionTime=0;
  float prevDirectionDistance=0;
  List<RouteSegmentResult> segmentsToPopulate=new ArrayList<RouteSegmentResult>();
  for (int routeInd=0; routeInd < list.size(); routeInd++) {
    RouteSegmentResult s=list.get(routeInd);
    boolean plus=s.getStartPointIndex() < s.getEndPointIndex();
    int i=s.getStartPointIndex();
    int prevLocationSize=locations.size();
    while (true) {
      Location n=new Location("");
      LatLon point=s.getPoint(i);
      n.setLatitude(point.getLatitude());
      n.setLongitude(point.getLongitude());
      if (i == s.getEndPointIndex() && routeInd != list.size() - 1) {
        break;
      }
      locations.add(n);
      attachAlarmInfo(alarms,s,i,locations.size());
      segmentsToPopulate.add(s);
      if (i == s.getEndPointIndex()) {
        break;
      }
      if (plus) {
        i++;
      }
 else {
        i--;
      }
    }
    TurnType turn=s.getTurnType();
    if (turn != null) {
      RouteDirectionInfo info=new RouteDirectionInfo(s.getSegmentSpeed(),turn);
      if (routeInd < list.size()) {
        int lind=routeInd;
        if (turn.isRoundAbout()) {
          int roundAboutEnd=prevLocationSize - 1;
          while (lind < list.size() - 1 && list.get(lind).getObject().roundabout()) {
            roundAboutEnd+=Math.abs(list.get(lind).getEndPointIndex() - list.get(lind).getStartPointIndex());
            lind++;
          }
          info.routeEndPointOffset=roundAboutEnd;
        }
        RouteSegmentResult next=list.get(lind);
        info.setRef(next.getObject().getRef());
        info.setStreetName(next.getObject().getName());
        info.setDestinationName(next.getObject().getDestinationName());
      }
      String description=toString(turn,ctx) + " " + RoutingHelper.formatStreetName(info.getStreetName(),info.getRef(),info.getDestinationName());
      info.setDescriptionRoute(description);
      info.routePointOffset=prevLocationSize;
      if (directions.size() > 0 && prevDirectionTime > 0 && prevDirectionDistance > 0) {
        RouteDirectionInfo prev=directions.get(directions.size() - 1);
        prev.setAverageSpeed(prevDirectionDistance / prevDirectionTime);
        prevDirectionDistance=0;
        prevDirectionTime=0;
      }
      directions.add(info);
    }
    prevDirectionDistance+=s.getDistance();
    prevDirectionTime+=s.getSegmentTime();
  }
  if (directions.size() > 0 && prevDirectionTime > 0 && prevDirectionDistance > 0) {
    RouteDirectionInfo prev=directions.get(directions.size() - 1);
    prev.setAverageSpeed(prevDirectionDistance / prevDirectionTime);
  }
  return segmentsToPopulate;
}
