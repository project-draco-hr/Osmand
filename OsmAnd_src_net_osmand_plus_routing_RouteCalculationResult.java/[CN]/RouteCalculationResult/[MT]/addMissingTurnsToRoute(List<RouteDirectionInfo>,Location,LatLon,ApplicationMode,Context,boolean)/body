{
  if (!isCalculated()) {
    return;
  }
  float speed=1.5f;
  int minDistanceForTurn=5;
  if (mode == ApplicationMode.CAR) {
    speed=15.3f;
    minDistanceForTurn=35;
  }
 else   if (mode == ApplicationMode.BICYCLE) {
    speed=5.5f;
    minDistanceForTurn=12;
  }
  List<RouteDirectionInfo> computeDirections=new ArrayList<RouteDirectionInfo>();
  int[] listDistance=getListDistance();
  int previousLocation=0;
  int prevBearingLocation=0;
  RouteDirectionInfo previousInfo=new RouteDirectionInfo(speed,TurnType.valueOf(TurnType.C,leftSide));
  previousInfo.routePointOffset=0;
  previousInfo.setDescriptionRoute(ctx.getString(R.string.route_head));
  computeDirections.add(previousInfo);
  int distForTurn=0;
  float previousBearing=0;
  int startTurnPoint=0;
  for (int i=1; i < locations.size() - 1; i++) {
    Location next=locations.get(i + 1);
    Location current=locations.get(i);
    float bearing=current.bearingTo(next);
    while (prevBearingLocation < i - 1) {
      if (locations.get(prevBearingLocation + 1).distanceTo(current) > 70) {
        prevBearingLocation++;
      }
 else {
        break;
      }
    }
    if (distForTurn == 0) {
      previousBearing=locations.get(prevBearingLocation).bearingTo(current);
      startTurnPoint=i;
    }
    TurnType type=null;
    String description=null;
    float delta=previousBearing - bearing;
    while (delta < 0) {
      delta+=360;
    }
    while (delta > 360) {
      delta-=360;
    }
    distForTurn+=locations.get(i).distanceTo(locations.get(i + 1));
    if (i < locations.size() - 1 && distForTurn < minDistanceForTurn) {
      continue;
    }
    if (delta > 45 && delta < 315) {
      if (delta < 60) {
        type=TurnType.valueOf(TurnType.TSLL,leftSide);
        description=ctx.getString(R.string.route_tsll);
      }
 else       if (delta < 120) {
        type=TurnType.valueOf(TurnType.TL,leftSide);
        description=ctx.getString(R.string.route_tl);
      }
 else       if (delta < 150) {
        type=TurnType.valueOf(TurnType.TSHL,leftSide);
        description=ctx.getString(R.string.route_tshl);
      }
 else       if (delta < 210) {
        type=TurnType.valueOf(TurnType.TU,leftSide);
        description=ctx.getString(R.string.route_tu);
      }
 else       if (delta < 240) {
        description=ctx.getString(R.string.route_tshr);
        type=TurnType.valueOf(TurnType.TSHR,leftSide);
      }
 else       if (delta < 300) {
        description=ctx.getString(R.string.route_tr);
        type=TurnType.valueOf(TurnType.TR,leftSide);
      }
 else {
        description=ctx.getString(R.string.route_tslr);
        type=TurnType.valueOf(TurnType.TSLR,leftSide);
      }
      previousInfo.distance=listDistance[previousLocation] - listDistance[i];
      previousInfo.setDescriptionRoute(previousInfo.getDescriptionRoute() + " " + OsmAndFormatter.getFormattedDistance(previousInfo.distance,ctx));
      type.setTurnAngle(360 - delta);
      previousInfo=new RouteDirectionInfo(speed,type);
      previousInfo.setDescriptionRoute(description);
      previousInfo.routePointOffset=startTurnPoint;
      computeDirections.add(previousInfo);
      previousLocation=startTurnPoint;
      prevBearingLocation=i;
    }
    distForTurn=0;
  }
  previousInfo.distance=listDistance[previousLocation];
  previousInfo.setDescriptionRoute(previousInfo.getDescriptionRoute() + " " + OsmAndFormatter.getFormattedDistance(previousInfo.distance,ctx));
  if (previousInfo.distance > 80) {
    RouteDirectionInfo info=new RouteDirectionInfo(speed,TurnType.valueOf(TurnType.C,leftSide));
    info.distance=0;
    info.routePointOffset=locations.size() - 1;
    computeDirections.add(info);
  }
  if (originalDirections.isEmpty()) {
    originalDirections.addAll(computeDirections);
  }
 else {
    int currentDirection=0;
    for (int i=0; i <= originalDirections.size() && currentDirection < computeDirections.size(); i++) {
      while (currentDirection < computeDirections.size()) {
        int distanceAfter=0;
        if (i < originalDirections.size()) {
          RouteDirectionInfo resInfo=originalDirections.get(i);
          int r1=computeDirections.get(currentDirection).routePointOffset;
          int r2=resInfo.routePointOffset;
          distanceAfter=listDistance[resInfo.routePointOffset];
          float dist=locations.get(r1).distanceTo(locations.get(r2));
          if (dist < 100) {
            currentDirection++;
            continue;
          }
 else           if (computeDirections.get(currentDirection).routePointOffset > resInfo.routePointOffset) {
            break;
          }
        }
        RouteDirectionInfo toAdd=computeDirections.get(currentDirection);
        if (i > 0) {
          RouteDirectionInfo previous=originalDirections.get(i - 1);
          toAdd.setAverageSpeed(previous.getAverageSpeed());
        }
        toAdd.distance=listDistance[toAdd.routePointOffset] - distanceAfter;
        if (i < originalDirections.size()) {
          originalDirections.add(i,toAdd);
        }
 else {
          originalDirections.add(toAdd);
        }
        i++;
        currentDirection++;
      }
    }
  }
  int sum=0;
  for (int i=originalDirections.size() - 1; i >= 0; i--) {
    originalDirections.get(i).afterLeftTime=sum;
    sum+=originalDirections.get(i).getExpectedTime();
  }
}
