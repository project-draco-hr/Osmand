{
  if (intermediates != null && localDirections != null) {
    int[] interLocations=new int[intermediates.size()];
    int currentIntermediate=0;
    int currentLocation=0;
    while (currentIntermediate < intermediates.size() && currentLocation < this.locations.size()) {
      if (MapUtils.getDistance(intermediates.get(currentIntermediate),this.locations.get(currentLocation).getLatitude(),this.locations.get(currentLocation).getLongitude()) < 15) {
        interLocations[currentIntermediate]=currentLocation;
        currentIntermediate++;
      }
      currentLocation++;
    }
    int currentDirection=0;
    currentIntermediate=0;
    while (currentIntermediate < intermediates.size() && currentDirection < localDirections.size()) {
      int locationIndex=localDirections.get(currentDirection).routePointOffset;
      if (locationIndex >= interLocations[currentIntermediate]) {
        if (locationIndex > interLocations[currentIntermediate] && MapUtils.getDistance(intermediates.get(currentIntermediate),this.locations.get(locationIndex).getLatitude(),this.locations.get(locationIndex).getLongitude()) > 50) {
          RouteDirectionInfo toSplit=localDirections.get(currentDirection);
          RouteDirectionInfo info=new RouteDirectionInfo(localDirections.get(currentDirection).getAverageSpeed(),TurnType.valueOf(TurnType.C,false));
          info.setRef(toSplit.getRef());
          info.setStreetName(toSplit.getStreetName());
          info.routePointOffset=interLocations[currentIntermediate];
          info.setDescriptionRoute(ctx.getString(R.string.route_head));
          localDirections.add(currentDirection,info);
        }
        intermediatePoints[currentIntermediate]=currentDirection;
        currentIntermediate++;
      }
      currentDirection++;
    }
  }
}
