{
  float[] calculations=new float[1];
  float totalElevation=0;
  int elevationPoints=0;
  int speedCount=0;
  double totalSpeedSum=0;
  points=0;
  double channelThresMin=5;
  double channelThres=channelThresMin;
  double channelBase;
  double channelTop;
  double channelBottom;
  boolean climb=false;
  for (  SplitSegment s : splitSegments) {
    final int numberOfPoints=s.getNumberOfPoints();
    channelBase=99999;
    channelTop=channelBase;
    channelBottom=channelBase;
    channelThres=channelThresMin;
    metricEnd+=s.metricEnd;
    points+=numberOfPoints;
    for (int j=0; j < numberOfPoints; j++) {
      WptPt point=s.get(j);
      if (j == 0 && locationStart == null) {
        locationStart=point;
      }
      if (j == numberOfPoints - 1) {
        locationEnd=point;
      }
      long time=point.time;
      if (time != 0) {
        startTime=Math.min(startTime,time);
        endTime=Math.max(endTime,time);
      }
      double elevation=point.ele;
      if (!Double.isNaN(elevation)) {
        totalElevation+=elevation;
        elevationPoints++;
        minElevation=Math.min(elevation,minElevation);
        maxElevation=Math.max(elevation,maxElevation);
      }
      float speed=(float)point.speed;
      if (speed > 0) {
        totalSpeedSum+=speed;
        maxSpeed=Math.max(speed,maxSpeed);
        speedCount++;
      }
      if (!Double.isNaN(point.ele)) {
        if (channelBase == 99999) {
          channelBase=point.ele;
          channelTop=channelBase;
          channelBottom=channelBase;
          channelThres=channelThresMin;
        }
        if (point.ele > channelTop) {
          channelTop=point.ele;
          if (!Double.isNaN(point.hdop)) {
            channelThres=Math.max(channelThres,2.0 * point.hdop);
          }
        }
 else         if (point.ele < channelBottom) {
          channelBottom=point.ele;
          if (!Double.isNaN(point.hdop)) {
            channelThres=Math.max(channelThres,2.0 * point.hdop);
          }
        }
        if ((point.ele <= (channelTop - channelThres)) && (climb == true)) {
          if ((channelTop - channelBase) >= channelThres) {
            diffElevationUp+=channelTop - channelBase;
          }
          channelBase=channelTop;
          channelBottom=point.ele;
          climb=false;
          channelThres=channelThresMin;
        }
 else         if ((point.ele >= (channelBottom + channelThres)) && (climb == false)) {
          if ((channelBase - channelBottom) >= channelThres) {
            diffElevationDown+=channelBase - channelBottom;
          }
          channelBase=channelBottom;
          channelTop=point.ele;
          climb=true;
          channelThres=channelThresMin;
        }
        if (j == (numberOfPoints - 1)) {
          if ((channelTop - channelBase) >= channelThres) {
            diffElevationUp+=channelTop - channelBase;
          }
          if ((channelBase - channelBottom) >= channelThres) {
            diffElevationDown+=channelBase - channelBottom;
          }
        }
      }
      if (j > 0) {
        WptPt prev=s.get(j - 1);
        net.osmand.Location.distanceBetween(prev.lat,prev.lon,point.lat,point.lon,calculations);
        totalDistance+=calculations[0];
        if (speed > 0 && point.time != 0 && prev.time != 0) {
          timeMoving=timeMoving + (point.time - prev.time);
          totalDistanceMoving+=calculations[0];
        }
      }
    }
  }
  if (!isTimeSpecified()) {
    startTime=filestamp;
    endTime=filestamp;
  }
  timeSpan=endTime - startTime;
  if (elevationPoints > 0) {
    avgElevation=totalElevation / elevationPoints;
  }
  if (speedCount > 0) {
    if (timeMoving > 0) {
      avgSpeed=(float)totalDistanceMoving / (float)timeMoving * 1000f;
    }
 else {
      avgSpeed=(float)totalSpeedSum / (float)speedCount;
    }
  }
 else {
    avgSpeed=-1;
  }
  return this;
}
