{
  int currentMetricEnd=metricLimit;
  SplitSegment sp=new SplitSegment(segment,0,0);
  int total=0;
  WptPt prev=null;
  for (int k=0; k < segment.points.size(); k++) {
    WptPt point=segment.points.get(k);
    if (k > 0) {
      int currentSegment=metric.metric(prev,point);
      while (total + currentSegment > currentMetricEnd) {
        int p=currentMetricEnd - total;
        float cf=p / ((float)currentSegment);
        sp.setLastPoint(k - 1,cf);
        sp.metricEnd=currentMetricEnd;
        splitSegments.add(sp);
        sp=new SplitSegment(segment,k - 1,cf);
        currentMetricEnd+=metricLimit;
        prev=sp.get(0);
      }
      total+=currentSegment;
    }
    prev=point;
  }
  if (segment.points.size() > 0 && !(sp.endPointInd == segment.points.size() - 1 && sp.startCoeff == 1)) {
    sp.metricEnd=total;
    sp.setLastPoint(segment.points.size() - 2,1);
    splitSegments.add(sp);
  }
}
