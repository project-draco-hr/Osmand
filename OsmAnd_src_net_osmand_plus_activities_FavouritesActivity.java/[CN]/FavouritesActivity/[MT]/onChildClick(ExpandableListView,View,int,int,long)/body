{
  if (selectionMode) {
    CheckBox ch=(CheckBox)v.findViewById(R.id.check_item);
    FavouritePoint model=favouritesAdapter.getChild(groupPosition,childPosition);
    ch.setChecked(!ch.isChecked());
    if (ch.isChecked()) {
      favoritesToDelete.add(model);
    }
 else {
      favoritesToDelete.remove(model);
    }
  }
 else {
    final QuickAction qa=new QuickAction(v);
    final OsmandSettings settings=getMyApplication().getSettings();
    final FavouritePoint point=(FavouritePoint)favouritesAdapter.getChild(groupPosition,childPosition);
    String name=getString(R.string.favorite) + ": " + point.getName();
    LatLon location=new LatLon(point.getLatitude(),point.getLongitude());
    OnClickListener onshow=new OnClickListener(){
      @Override public void onClick(      View v){
        settings.SHOW_FAVORITES.set(true);
      }
    }
;
    MapActivityActions.createDirectionsActions(qa,location,point,name,settings.getLastKnownMapZoom(),this,true,onshow);
    if (point.isStored()) {
      ActionItem edit=new ActionItem();
      edit.setTitle(getString(R.string.favourites_context_menu_edit));
      edit.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View v){
          editPoint(point);
          qa.dismiss();
        }
      }
);
      qa.addActionItem(edit);
      ActionItem delete=new ActionItem();
      delete.setTitle(getString(R.string.favourites_context_menu_delete));
      delete.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View v){
          deletePoint(point);
          qa.dismiss();
        }
      }
);
      qa.addActionItem(delete);
    }
    qa.show();
  }
  return true;
}
