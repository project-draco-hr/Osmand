{
  ContextMenuInfo menuInfo=aItem.getMenuInfo();
  int child=ExpandableListView.getPackedPositionChild(((ExpandableListContextMenuInfo)menuInfo).packedPosition);
  int group=ExpandableListView.getPackedPositionGroup(((ExpandableListContextMenuInfo)menuInfo).packedPosition);
  final FavouritePoint point=(FavouritePoint)favouritesAdapter.getChild(group,child);
  if (aItem.getItemId() == SHOW_ON_MAP) {
    OsmandSettings settings=OsmandSettings.getOsmandSettings(this);
    settings.SHOW_FAVORITES.set(true);
    settings.setMapLocationToShow(point.getLatitude(),point.getLongitude(),Math.max(12,settings.getLastKnownMapZoom()),null,getString(R.string.favorite) + " : " + point.getName());
    MapActivity.launchMapActivityMoveToTop(this);
  }
 else   if (aItem.getItemId() == NAVIGATE_TO) {
    OsmandSettings.getOsmandSettings(this).setPointToNavigate(point.getLatitude(),point.getLongitude(),getString(R.string.favorite) + " : " + point.getName());
    MapActivity.launchMapActivityMoveToTop(this);
  }
 else   if (aItem.getItemId() == EDIT_ITEM) {
    Builder builder=new AlertDialog.Builder(this);
    builder.setTitle(R.string.favourites_context_menu_edit);
    final View v=getLayoutInflater().inflate(R.layout.favourite_edit_dialog,getExpandableListView(),false);
    final AutoCompleteTextView cat=(AutoCompleteTextView)v.findViewById(R.id.Category);
    final EditText editText=(EditText)v.findViewById(R.id.Name);
    builder.setView(v);
    editText.setText(point.getName());
    cat.setText(point.getCategory());
    cat.setThreshold(1);
    cat.setAdapter(new ArrayAdapter(this,R.layout.list_textview,helper.getFavoriteGroups().keySet().toArray()));
    builder.setNegativeButton(R.string.default_buttons_cancel,null);
    builder.setPositiveButton(R.string.default_buttons_apply,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        boolean editied=helper.editFavouriteName(point,editText.getText().toString(),cat.getText().toString());
        if (editied) {
          favouritesAdapter.synchronizeGroups();
        }
      }
    }
);
    builder.create().show();
    return true;
  }
  if (aItem.getItemId() == DELETE_ITEM) {
    final Resources resources=this.getResources();
    Builder builder=new AlertDialog.Builder(this);
    builder.setMessage(R.string.favourites_remove_dialog_msg);
    builder.setNegativeButton(R.string.default_buttons_no,null);
    builder.setPositiveButton(R.string.default_buttons_yes,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        boolean deleted=helper.deleteFavourite(point);
        if (deleted) {
          Toast.makeText(FavouritesActivity.this,MessageFormat.format(resources.getString(R.string.favourites_remove_dialog_success),point.getName()),Toast.LENGTH_SHORT).show();
          favouritesAdapter.synchronizeGroups();
        }
      }
    }
);
    builder.create().show();
    return true;
  }
  return false;
}
