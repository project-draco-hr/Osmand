{
  final File appDir=getMyApplication().getSettings().extendOsmandPath(ResourceManager.APP_DIR);
  final File tosave=new File(appDir,FavouritesDbHelper.FILE_TO_SAVE);
  if (item.getItemId() == EXPORT_ID) {
    if (favouritesAdapter.isEmpty()) {
      AccessibleToast.makeText(this,R.string.no_fav_to_save,Toast.LENGTH_LONG).show();
    }
 else     if (!appDir.exists()) {
      AccessibleToast.makeText(this,R.string.sd_dir_not_accessible,Toast.LENGTH_LONG).show();
    }
 else {
      final AsyncTask<Void,Void,String> exportTask=new AsyncTask<Void,Void,String>(){
        @Override protected String doInBackground(        Void... params){
          return helper.exportFavorites();
        }
        @Override protected void onPreExecute(){
          showProgressBar();
        }
        @Override protected void onPostExecute(        String warning){
          hideProgressBar();
          if (warning == null) {
            AccessibleToast.makeText(FavouritesActivity.this,MessageFormat.format(getString(R.string.fav_saved_sucessfully),tosave.getAbsolutePath()),Toast.LENGTH_LONG).show();
          }
 else {
            AccessibleToast.makeText(FavouritesActivity.this,warning,Toast.LENGTH_LONG).show();
          }
        }
      }
;
      if (tosave.exists()) {
        Builder bld=new AlertDialog.Builder(this);
        bld.setPositiveButton(R.string.default_buttons_yes,new DialogInterface.OnClickListener(){
          @Override public void onClick(          DialogInterface dialog,          int which){
            exportTask.execute();
          }
        }
);
        bld.setNegativeButton(R.string.default_buttons_no,null);
        bld.setMessage(R.string.fav_export_confirmation);
        bld.show();
      }
 else {
        exportTask.execute();
      }
    }
  }
 else   if (item.getItemId() == IMPORT_ID) {
    if (!tosave.exists()) {
      AccessibleToast.makeText(this,MessageFormat.format(getString(R.string.fav_file_to_load_not_found),tosave.getAbsolutePath()),Toast.LENGTH_LONG).show();
    }
 else {
      new AsyncTask<Void,FavouritePoint,String>(){
        @Override protected String doInBackground(        Void... params){
          Set<String> existedPoints=new LinkedHashSet<String>();
          if (!favouritesAdapter.isEmpty()) {
            for (            FavouritePoint fp : helper.getFavouritePoints()) {
              existedPoints.add(fp.getName() + "_" + fp.getCategory());
            }
          }
          GPXFile res=GPXUtilities.loadGPXFile(FavouritesActivity.this,tosave,false);
          if (res.warning != null) {
            return res.warning;
          }
          for (          WptPt p : res.points) {
            if (existedPoints.contains(p.name) || existedPoints.contains(p.name + "_" + p.category)) {
              continue;
            }
            int c;
            String name=p.name;
            String categoryName=p.category != null ? p.category : "";
            if (name == null) {
              name="";
            }
            if ("".equals(categoryName.trim()) && (c=p.name.lastIndexOf('_')) != -1) {
              categoryName=p.name.substring(c + 1);
              name=p.name.substring(0,c);
            }
            FavouritePoint fp=new FavouritePoint(p.lat,p.lon,name,categoryName);
            if (helper.addFavourite(fp)) {
              publishProgress(fp);
            }
          }
          return null;
        }
        @Override protected void onProgressUpdate(        FavouritePoint... values){
          for (          FavouritePoint p : values) {
            favouritesAdapter.addFavoritePoint(p);
          }
        }
        @Override protected void onPreExecute(){
          showProgressBar();
        }
        @Override protected void onPostExecute(        String warning){
          hideProgressBar();
          if (warning == null) {
            AccessibleToast.makeText(FavouritesActivity.this,R.string.fav_imported_sucessfully,Toast.LENGTH_SHORT).show();
          }
 else {
            AccessibleToast.makeText(FavouritesActivity.this,warning,Toast.LENGTH_LONG).show();
          }
          favouritesAdapter.synchronizeGroups();
          favouritesAdapter.sort(new Comparator<FavouritePoint>(){
            @Override public int compare(            FavouritePoint object1,            FavouritePoint object2){
              return object1.getName().compareTo(object2.getName());
            }
          }
);
        }
      }
.execute();
    }
  }
 else   if (item.getItemId() == DELETE_ID) {
    selectionMode=true;
    findViewById(R.id.ActionButton).setVisibility(View.VISIBLE);
    findViewById(R.id.CancelButton).setVisibility(View.VISIBLE);
    findViewById(R.id.LoadingPanel).setVisibility(View.VISIBLE);
    favoritesToDelete.clear();
    groupsToDelete.clear();
    favouritesAdapter.notifyDataSetInvalidated();
  }
 else {
    return false;
  }
  return true;
}
