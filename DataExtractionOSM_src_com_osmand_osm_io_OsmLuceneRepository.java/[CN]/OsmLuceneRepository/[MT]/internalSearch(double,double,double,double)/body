{
  queryFormat.setLength(0);
  queryFormat.append("latitude:[").append(formatLatitude(bottomLatitude)).append(" TO ").append(formatLatitude(topLatitude)).append("]").append(" AND longitude:[").append(formatLongitude(leftLongitude)).append(" TO ").append(formatLongitude(rightLongitude)).append("]");
  TopScoreDocCollector collector=TopScoreDocCollector.create(MAX_POI_HITS,true);
  try {
    Query q=new QueryParser(Version.LUCENE_30,"id",new StandardAnalyzer(Version.LUCENE_30)).parse(queryFormat.toString());
    long now=System.currentTimeMillis();
    amenityIndexSearcher.search(q,collector);
    ScoreDoc[] hits=collector.topDocs().scoreDocs;
    List<Amenity> result=new ArrayList<Amenity>(hits.length);
    for (int i=0; i < hits.length; i++) {
      result.add(convertAmenity(amenityIndexSearcher.doc(hits[i].doc)));
    }
    if (log.isDebugEnabled()) {
      log.debug(String.format("Search for %s done in %s ms found %s.",q,System.currentTimeMillis() - now,hits.length));
    }
    return result;
  }
 catch (  IOException e) {
    log.error("Failed to search.",e);
    throw new RuntimeException(e);
  }
catch (  ParseException e) {
    log.error("Invalid query.",e);
    return new ArrayList<Amenity>();
  }
}
