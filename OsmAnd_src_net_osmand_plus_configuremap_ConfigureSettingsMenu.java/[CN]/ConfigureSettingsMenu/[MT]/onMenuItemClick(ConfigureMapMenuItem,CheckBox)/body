{
  if (item.type == BACK_HEADER) {
    app.getMapActivity().getMapActions().createOptionsMenuAsDrawer(false);
  }
 else   if (item.type == LAYER) {
    if (ch != null) {
      ch.setChecked(!ch.isChecked());
    }
    if (item.nameId == R.string.layer_poi) {
      final OsmandSettings.OsmandPreference<Boolean> pref=(OsmandSettings.OsmandPreference<Boolean>)item.preference;
      boolean value=!pref.get();
      if (value) {
        selectPOIFilterLayer(null);
      }
      pref.set(!pref.get());
    }
 else     if (item.nameId == R.string.layer_gpx_layer) {
      if (app.getSelectedGpxHelper().isShowingAnyGpxFiles()) {
        app.getSelectedGpxHelper().clearAllGpxFileToShow();
      }
 else {
        showGPXFileDialog(null);
      }
    }
 else {
      final OsmandSettings.OsmandPreference<Boolean> pref=(OsmandSettings.OsmandPreference<Boolean>)item.preference;
      pref.set(!pref.get());
    }
  }
 else   if (item.type == MAP_REDNDER) {
    if (item.nameId == R.string.map_widget_renderer) {
      AlertDialog.Builder bld=new AlertDialog.Builder(app.getMapActivity());
      bld.setTitle(R.string.renderers);
      Collection<String> rendererNames=app.getRendererRegistry().getRendererNames();
      final String[] items=rendererNames.toArray(new String[rendererNames.size()]);
      final String[] visibleNames=new String[items.length];
      int selected=-1;
      final String selectedName=app.getRendererRegistry().getCurrentSelectedRenderer().getName();
      for (int j=0; j < items.length; j++) {
        if (items[j].equals(selectedName)) {
          selected=j;
        }
        visibleNames[j]=items[j].replace('_',' ').replace('-',' ');
      }
      bld.setSingleChoiceItems(visibleNames,selected,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          String renderer=items[which];
          RenderingRulesStorage loaded=app.getRendererRegistry().getRenderer(renderer);
          if (loaded != null) {
            app.getSettings().RENDERER.set(renderer);
            app.getRendererRegistry().setCurrentSelectedRender(loaded);
            app.getResourceManager().getRenderer().clearCache();
            listView.setAdapter(createSettingsAdapter());
          }
 else {
            AccessibleToast.makeText(app,R.string.renderer_load_exception,Toast.LENGTH_SHORT).show();
          }
          dialog.dismiss();
          createSettingsAdapter();
        }
      }
);
      bld.show();
    }
 else     if (item.nameId == R.string.map_widget_day_night) {
      AlertDialog.Builder bld=new AlertDialog.Builder(app.getMapActivity());
      bld.setTitle(R.string.daynight);
      final String[] items=new String[OsmandSettings.DayNightMode.values().length];
      for (int i=0; i < items.length; i++) {
        items[i]=OsmandSettings.DayNightMode.values()[i].toHumanString(app);
      }
      int i=app.getSettings().DAYNIGHT_MODE.get().ordinal();
      bld.setSingleChoiceItems(items,i,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          app.getSettings().DAYNIGHT_MODE.set(OsmandSettings.DayNightMode.values()[which]);
          app.getResourceManager().getRenderer().clearCache();
          dialog.dismiss();
        }
      }
);
      bld.show();
    }
  }
 else   if (item.type == RENDERING_PROPERTY) {
    if (ch != null) {
      ch.setChecked(!ch.isChecked());
    }
    final RenderingRuleProperty p=(RenderingRuleProperty)item.preference;
    final String propertyDescription=SettingsActivity.getStringPropertyDescription(app,p.getAttrName(),p.getName());
    if (p.isBoolean()) {
      final OsmandSettings.CommonPreference<Boolean> pref=app.getSettings().getCustomRenderBooleanProperty(p.getAttrName());
      pref.set(!pref.get());
      app.getResourceManager().getRenderer().clearCache();
    }
 else {
      final OsmandSettings.CommonPreference<String> pref=app.getSettings().getCustomRenderProperty(p.getAttrName());
      AlertDialog.Builder b=new AlertDialog.Builder(app.getMapActivity());
      b.setTitle(propertyDescription);
      int i=Arrays.asList(p.getPossibleValues()).indexOf(pref.get());
      String[] possibleValuesString=new String[p.getPossibleValues().length];
      for (int j=0; j < p.getPossibleValues().length; j++) {
        possibleValuesString[j]=SettingsActivity.getStringPropertyValue(app,p.getPossibleValues()[j]);
      }
      b.setSingleChoiceItems(possibleValuesString,i,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          pref.set(p.getPossibleValues()[which]);
          app.getResourceManager().getRenderer().clearCache();
          dialog.dismiss();
        }
      }
);
      b.show();
    }
  }
  app.getMapActivity().getMapLayers().updateLayers(app.getMapActivity().getMapView());
  app.getMapActivity().getMapView().refreshMap();
}
