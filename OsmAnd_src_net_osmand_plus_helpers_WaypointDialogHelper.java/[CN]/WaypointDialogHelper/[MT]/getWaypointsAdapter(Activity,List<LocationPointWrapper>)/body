{
  final List<Object> points=getPoints();
  final int[] running=new int[]{-1};
  return new ArrayAdapter<Object>(ctx,R.layout.waypoint_reached,R.id.title,points){
    @Override public View getView(    final int position,    View convertView,    ViewGroup parent){
      View v=convertView;
      final ArrayAdapter<Object> thisAdapter=this;
      boolean labelView=(getItem(position) instanceof Integer);
      boolean viewText=v != null && v.findViewById(R.id.info_close) == null;
      if (v == null || viewText != labelView) {
        v=ctx.getLayoutInflater().inflate(labelView ? R.layout.waypoint_header : R.layout.waypoint_reached,null);
      }
      if (getItem(position) instanceof String && getItem(position).equals(POI_RADIUS)) {
        v=ctx.getLayoutInflater().inflate(R.layout.radius_search_list_element,null);
        v.findViewById(R.id.ProgressBar).setVisibility(position == running[0] ? View.VISIBLE : View.GONE);
        final TextView radius=(TextView)v.findViewById(R.id.radius);
        radius.setText(OsmAndFormatter.getFormattedDistance(waypointHelper.getPoiSearchDeviationRadius(),app));
        radius.setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View view){
            int length=WaypointHelper.SEARCH_RADIUS_VALUES.length;
            String[] names=new String[length];
            int selected=0;
            for (int i=0; i < length; i++) {
              names[i]=OsmAndFormatter.getFormattedDistance(WaypointHelper.SEARCH_RADIUS_VALUES[i],app);
              if (WaypointHelper.SEARCH_RADIUS_VALUES[i] == waypointHelper.getPoiSearchDeviationRadius()) {
                selected=i;
              }
            }
            new AlertDialog.Builder(ctx).setSingleChoiceItems(names,selected,new OnClickListener(){
              @Override public void onClick(              DialogInterface dialogInterface,              int i){
                int value=WaypointHelper.SEARCH_RADIUS_VALUES[i];
                if (waypointHelper.getPoiSearchDeviationRadius() != value) {
                  running[0]=position;
                  thisAdapter.notifyDataSetInvalidated();
                  waypointHelper.setPoiSearchDeviationRadius(value);
                  radius.setText(OsmAndFormatter.getFormattedDistance(value,app));
                  recalculatePoints(running,thisAdapter,WaypointHelper.POI);
                  dialogInterface.dismiss();
                }
              }
            }
).setTitle(app.getString(R.string.search_radius_proximity) + " " + app.getString(R.string.poi)).setNegativeButton(R.string.default_buttons_cancel,null).show();
          }
        }
);
      }
 else       if (getItem(position) instanceof String && getItem(position).equals(SEARCH_RADIUS)) {
        v=ctx.getLayoutInflater().inflate(R.layout.radius_search_list_element,null);
        v.findViewById(R.id.ProgressBar).setVisibility(position == running[0] ? View.VISIBLE : View.GONE);
        final TextView radius=(TextView)v.findViewById(R.id.radius);
        radius.setText(OsmAndFormatter.getFormattedDistance(waypointHelper.getSearchDeviationRadius(),app));
        radius.setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View view){
            int length=WaypointHelper.SEARCH_RADIUS_VALUES.length;
            String[] names=new String[length];
            int selected=0;
            for (int i=0; i < length; i++) {
              names[i]=OsmAndFormatter.getFormattedDistance(WaypointHelper.SEARCH_RADIUS_VALUES[i],app);
              if (WaypointHelper.SEARCH_RADIUS_VALUES[i] == waypointHelper.getSearchDeviationRadius()) {
                selected=i;
              }
            }
            new AlertDialog.Builder(ctx).setSingleChoiceItems(names,selected,new OnClickListener(){
              @Override public void onClick(              DialogInterface dialogInterface,              int i){
                int value=WaypointHelper.SEARCH_RADIUS_VALUES[i];
                if (waypointHelper.getSearchDeviationRadius() != value) {
                  running[0]=position;
                  thisAdapter.notifyDataSetInvalidated();
                  waypointHelper.setSearchDeviationRadius(value);
                  radius.setText(OsmAndFormatter.getFormattedDistance(value,app));
                  recalculatePoints(running,thisAdapter,-1);
                  dialogInterface.dismiss();
                }
              }
            }
).setTitle(app.getString(R.string.search_radius_proximity)).setNegativeButton(R.string.default_buttons_cancel,null).show();
          }
        }
);
      }
 else       if (labelView) {
        v=ctx.getLayoutInflater().inflate(R.layout.waypoint_header,null);
        final int type=(Integer)getItem(position);
        ImageView sort=(ImageView)v.findViewById(R.id.sort);
        if (type == 0 && sort != null) {
          sort.setVisibility(View.VISIBLE);
          if (app.getSettings().isLightContent()) {
            sort.setImageResource(R.drawable.ic_sort_waypoint_white);
          }
 else {
            sort.setImageResource(R.drawable.ic_sort_waypoint_dark);
          }
          sort.setOnClickListener(new View.OnClickListener(){
            @Override public void onClick(            View view){
              IntermediatePointsDialog.openIntermediatePointsDialog(ctx,app,true);
            }
          }
);
        }
        final CompoundButton btn=(CompoundButton)v.findViewById(R.id.check_item);
        btn.setVisibility(waypointHelper.isTypeConfigurable(type) ? View.VISIBLE : View.GONE);
        btn.setOnCheckedChangeListener(null);
        final boolean checked=waypointHelper.isTypeEnabled(type);
        btn.setChecked(checked);
        btn.setEnabled(running[0] == -1);
        v.findViewById(R.id.ProgressBar).setVisibility(position == running[0] ? View.VISIBLE : View.GONE);
        btn.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
          @Override public void onCheckedChanged(          CompoundButton buttonView,          boolean isChecked){
            running[0]=position;
            thisAdapter.notifyDataSetInvalidated();
            if (type == WaypointHelper.POI && isChecked) {
              selectPoi(running,thisAdapter,type,isChecked,mapActivity);
            }
 else {
              enableType(running,thisAdapter,type,isChecked);
            }
          }
        }
);
        TextView tv=(TextView)v.findViewById(R.id.header_text);
        tv.setText(getHeader(ctx,type,checked));
      }
 else {
        v=ctx.getLayoutInflater().inflate(R.layout.waypoint_reached,null);
        updatePointInfoView(app,ctx,v,(LocationPointWrapper)getItem(position),null);
        View remove=v.findViewById(R.id.info_close);
        ((ImageButton)remove).setImageDrawable(ctx.getResources().getDrawable(app.getSettings().isLightContent() ? R.drawable.ic_action_gremove_light : R.drawable.ic_action_gremove_dark));
        remove.setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View view){
            LocationPointWrapper point=(LocationPointWrapper)points.get(position);
            remove(point);
            deletedPoints.add(point);
            notifyDataSetChanged();
          }
        }
);
      }
      return v;
    }
  }
;
}
