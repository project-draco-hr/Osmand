{
  if (v == null || v.findViewById(R.id.info_close) == null) {
    v=ctx.getLayoutInflater().inflate(R.layout.waypoint_reached,null);
  }
  updatePointInfoView(app,ctx,v,point,true,nightMode,edit,false);
  final View more=v.findViewById(R.id.all_points);
  final View move=v.findViewById(R.id.info_move);
  final View remove=v.findViewById(R.id.info_close);
  if (!edit) {
    remove.setVisibility(View.GONE);
    move.setVisibility(View.GONE);
    more.setVisibility(View.GONE);
  }
 else   if (point.type == WaypointHelper.TARGETS && !flat) {
    if (((TargetPoint)point.point).start) {
      remove.setVisibility(View.GONE);
      move.setVisibility(View.GONE);
      more.setVisibility(View.VISIBLE);
      ((ImageButton)more).setImageDrawable(app.getIconsCache().getIcon(R.drawable.map_overflow_menu_white,!nightMode));
      more.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          boolean hasActivePoints=false;
          if (adapter instanceof StableArrayAdapter) {
            hasActivePoints=((StableArrayAdapter)adapter).getActiveObjects().size() > 0;
          }
          final PopupMenu optionsMenu=new PopupMenu(ctx,more);
          DirectionsDialogs.setupPopUpMenuIcon(optionsMenu);
          final TargetPointsHelper targetPointsHelper=app.getTargetPointsHelper();
          final TargetPoint start=targetPointsHelper.getPointToStart();
          final TargetPoint finish=targetPointsHelper.getPointToNavigate();
          MenuItem item;
          if (hasActivePoints) {
            item=optionsMenu.getMenu().add(R.string.intermediate_items_sort_by_distance).setIcon(app.getIconsCache().getThemedIcon(R.drawable.ic_sort_waypoint_dark));
            item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
              @Override public boolean onMenuItemClick(              MenuItem item){
                sortAllTargets(app,ctx,helper);
                return true;
              }
            }
);
            item=optionsMenu.getMenu().add(R.string.switch_start_finish).setIcon(app.getIconsCache().getThemedIcon(R.drawable.ic_action_undo_dark));
            item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
              @Override public boolean onMenuItemClick(              MenuItem item){
                switchStartAndFinish(targetPointsHelper,finish,ctx,start,app,helper);
                return true;
              }
            }
);
            if (start != null) {
              if (targetPointsHelper.getIntermediatePoints().size() > 0) {
                item=optionsMenu.getMenu().add(R.string.shared_string_move_down).setIcon(app.getIconsCache().getThemedIcon(R.drawable.ic_action_arrow_drop_down));
                item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
                  @Override public boolean onMenuItemClick(                  MenuItem item){
                    switchStartAndFirstIntermediate(targetPointsHelper,ctx,start,helper);
                    return true;
                  }
                }
);
              }
              item=optionsMenu.getMenu().add(R.string.shared_string_remove).setIcon(app.getIconsCache().getThemedIcon(R.drawable.ic_action_remove_dark));
              item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
                @Override public boolean onMenuItemClick(                MenuItem item){
                  targetPointsHelper.setStartPoint(null,true,null);
                  updateControls(ctx,helper);
                  return true;
                }
              }
);
            }
          }
          if (optionsMenu.getMenu().size() > 0) {
            optionsMenu.show();
          }
        }
      }
);
    }
 else {
      remove.setVisibility(View.GONE);
      move.setVisibility(View.VISIBLE);
      more.setVisibility(View.GONE);
      ((ImageView)move).setImageDrawable(app.getIconsCache().getIcon(R.drawable.ic_action_reorder,!nightMode));
      if (app.accessibilityEnabled()) {
        move.setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View view){
            ((DragIcon)view.getTag()).onClick();
          }
        }
);
      }
      move.setTag(new DragIcon(){
        @Override public void onClick(){
          final PopupMenu optionsMenu=new PopupMenu(ctx,move);
          DirectionsDialogs.setupPopUpMenuIcon(optionsMenu);
          List<Object> activeObjects=((StableArrayAdapter)adapter).getActiveObjects();
          int count=activeObjects.size();
          int t=-1;
          for (int i=0; i < activeObjects.size(); i++) {
            Object o=activeObjects.get(i);
            if (point == o) {
              t=i;
              break;
            }
          }
          final int index=t;
          MenuItem item;
          final TargetPointsHelper targetPointsHelper=app.getTargetPointsHelper();
          final TargetPoint start=targetPointsHelper.getPointToStart();
          if (count > 1 && (index > 0 || start != null)) {
            item=optionsMenu.getMenu().add(R.string.shared_string_move_up).setIcon(app.getIconsCache().getThemedIcon(R.drawable.ic_action_arrow_drop_up));
            item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
              @Override public boolean onMenuItemClick(              MenuItem item){
                if (index == 0) {
                  switchStartAndFirstIntermediate(targetPointsHelper,ctx,start,helper);
                }
 else                 if (helper != null && helper.helperCallbacks != null) {
                  helper.helperCallbacks.exchangeWaypoints(index,index - 1);
                }
                updateRouteInfoMenu(ctx);
                return true;
              }
            }
);
          }
          if (index < count - 1 && count > 1) {
            item=optionsMenu.getMenu().add(R.string.shared_string_move_down).setIcon(app.getIconsCache().getThemedIcon(R.drawable.ic_action_arrow_drop_down));
            item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
              @Override public boolean onMenuItemClick(              MenuItem item){
                if (helper != null && helper.helperCallbacks != null) {
                  helper.helperCallbacks.exchangeWaypoints(index,index + 1);
                }
                updateRouteInfoMenu(ctx);
                return true;
              }
            }
);
          }
          item=optionsMenu.getMenu().add(R.string.shared_string_remove).setIcon(app.getIconsCache().getThemedIcon(R.drawable.ic_action_remove_dark));
          item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
            @Override public boolean onMenuItemClick(            MenuItem item){
              deletePoint(app,ctx,adapter,helper,point,deletedPoints,true);
              return true;
            }
          }
);
          optionsMenu.show();
        }
      }
);
    }
  }
 else {
    remove.setVisibility(View.VISIBLE);
    move.setVisibility(View.GONE);
    more.setVisibility(View.GONE);
    ((ImageButton)remove).setImageDrawable(app.getIconsCache().getIcon(R.drawable.ic_action_remove_dark,!nightMode));
    remove.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        deletePoint(app,ctx,adapter,helper,point,deletedPoints,true);
      }
    }
);
  }
  return v;
}
