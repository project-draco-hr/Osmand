{
  SharedPreferences prefs=getSharedPreferences(OsmandSettings.SHARED_PREFERENCES_NAME,Context.MODE_WORLD_READABLE);
  for (  BooleanPreference b : booleanPreferences) {
    b.getPref().setChecked(prefs.getBoolean(b.getId(),b.getDefValue()));
  }
  userName.setText(OsmandSettings.getUserName(this));
  userPassword.setText(OsmandSettings.getUserPassword(this));
  Resources resources=this.getResources();
  String[] e=new String[]{resources.getString(R.string.position_on_map_center),resources.getString(R.string.position_on_map_bottom)};
  positionOnMap.setEntryValues(e);
  positionOnMap.setEntries(e);
  positionOnMap.setValueIndex(OsmandSettings.getPositionOnMap(this));
  saveTrackInterval.setEntries(new String[]{resources.getString(R.string.interval_1_second),resources.getString(R.string.interval_2_seconds),resources.getString(R.string.interval_5_seconds),resources.getString(R.string.interval_15_seconds),resources.getString(R.string.interval_30_seconds),resources.getString(R.string.interval_1_minute),resources.getString(R.string.interval_5_minutes)});
  saveTrackInterval.setEntryValues(new String[]{"1","2","5","15","30","60","300"});
  saveTrackInterval.setValue(OsmandSettings.getSavingTrackInterval(this) + "");
  mapScreenOrientation.setEntries(new String[]{resources.getString(R.string.map_orientation_portrait),resources.getString(R.string.map_orientation_landscape),resources.getString(R.string.map_orientation_default)});
  mapScreenOrientation.setEntryValues(new String[]{ActivityInfo.SCREEN_ORIENTATION_PORTRAIT + "",ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE + "",ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED + ""});
  mapScreenOrientation.setValue(OsmandSettings.getMapOrientation(this) + "");
  ApplicationMode[] presets=ApplicationMode.values();
  String[] values=new String[presets.length];
  String[] valueEntries=new String[presets.length];
  for (int i=0; i < presets.length; i++) {
    values[i]=ApplicationMode.toHumanString(presets[i],this);
    valueEntries[i]=presets[i].name();
  }
  applicationMode.setEntries(values);
  applicationMode.setEntryValues(valueEntries);
  applicationMode.setValue(OsmandSettings.getApplicationMode(this).name());
  String[] entries=new String[RouteService.values().length];
  String entry=OsmandSettings.getRouterService(this).getName();
  for (int i=0; i < entries.length; i++) {
    entries[i]=RouteService.values()[i].getName();
  }
  routerPreference.setEntries(entries);
  routerPreference.setEntryValues(entries);
  routerPreference.setValue(entry);
  int startZoom=12;
  int endZoom=19;
  entries=new String[endZoom - startZoom + 1];
  for (int i=startZoom; i <= endZoom; i++) {
    entries[i - startZoom]=i + "";
  }
  maxLevelToDownload.setEntries(entries);
  maxLevelToDownload.setEntryValues(entries);
  maxLevelToDownload.setValue(OsmandSettings.getMaximumLevelToDownloadTile(this) + "");
  List<TileSourceTemplate> list=TileSourceManager.getKnownSourceTemplates();
  entries=new String[list.size()];
  for (int i=0; i < list.size(); i++) {
    entries[i]=list.get(i).getName();
  }
  tileSourcePreference.setEntries(entries);
  tileSourcePreference.setEntryValues(entries);
  tileSourcePreference.setValue(OsmandSettings.getMapTileSourceName(this));
  String mapName=" " + OsmandSettings.getMapTileSourceName(this);
  String summary=tileSourcePreference.getSummary().toString();
  if (summary.lastIndexOf(':') != -1) {
    summary=summary.substring(0,summary.lastIndexOf(':') + 1);
  }
  tileSourcePreference.setSummary(summary + mapName);
}
