{
  try {
    int size=finish - start + 1;
    if (size <= 2) {
      if (size < 2)       return;
      int midValI=getMid(elmts[start],on);
      int midValJ=getMid(elmts[finish],on);
      Element temp;
      if (midValI > midValJ) {
        temp=elmts[start];
        elmts[start]=elmts[finish];
        elmts[finish]=temp;
      }
      return;
    }
    Double middle=new Double(start + finish);
    middle=new Double(Math.ceil(middle.doubleValue() / 2));
    twoWayMerge(elmts,start,middle.intValue(),on);
    twoWayMerge(elmts,middle.intValue(),finish,on);
    simpleMerge(elmts,start,middle.intValue(),finish,on);
  }
 catch (  Exception e) {
    System.out.println("rtree.Element.twoWayMerge: probably index out of bound");
  }
}
