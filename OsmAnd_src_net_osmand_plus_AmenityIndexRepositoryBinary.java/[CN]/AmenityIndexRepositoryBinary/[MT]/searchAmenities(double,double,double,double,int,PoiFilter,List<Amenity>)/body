{
  long now=System.currentTimeMillis();
  int sleft=MapUtils.get31TileNumberX(leftLongitude);
  int sright=MapUtils.get31TileNumberX(rightLongitude);
  int sbottom=MapUtils.get31TileNumberY(bottomLatitude);
  int stop=MapUtils.get31TileNumberY(topLatitude);
  SearchRequest<BinaryMapDataObject> req=BinaryMapIndexReader.buildSearchRequest(sleft,sright,stop,sbottom,16);
  req.setSearchFilter(new SearchFilter(){
    @Override public boolean accept(    TIntArrayList types,    MapIndex root){
      for (int j=0; j < types.size(); j++) {
        int wholeType=types.get(j);
        TagValuePair pair=root.decodeType(wholeType);
        if (pair != null) {
          AmenityType type=MapRenderingTypes.getAmenityType(pair.tag,pair.value);
          if (type != null) {
            if (filter.acceptTypeSubtype(type,MapRenderingTypes.getAmenitySubtype(pair.tag,pair.value))) {
              return true;
            }
          }
        }
      }
      return false;
    }
  }
);
  try {
    index.searchMapIndex(req);
    for (    BinaryMapDataObject o : req.getSearchResults()) {
      if (o.getPointsLength() == 0) {
        continue;
      }
      int xTile=0;
      int yTile=0;
      for (int i=0; i < o.getPointsLength(); i++) {
        xTile+=o.getPoint31XTile(i);
        yTile+=o.getPoint31YTile(i);
      }
      double lat=MapUtils.get31LatitudeY(yTile / o.getPointsLength());
      double lon=MapUtils.get31LongitudeX(xTile / o.getPointsLength());
      for (int j=0; j < o.getTypes().length; j++) {
        TagValuePair pair=o.getMapIndex().decodeType(o.getTypes()[j]);
        if (pair != null) {
          Amenity am=new Amenity();
          am.setId(o.getId());
          am.setLocation(lat,lon);
          am.setName(o.getName());
          am.setEnName(Junidecode.unidecode(am.getName()));
          AmenityType type=MapRenderingTypes.getAmenityType(pair.tag,pair.value);
          String subtype=MapRenderingTypes.getAmenitySubtype(pair.tag,pair.value);
          am.setType(type);
          am.setSubType(subtype);
          am.setOpeningHours(null);
          am.setPhone(null);
          am.setSite(null);
          amenities.add(am);
          break;
        }
      }
    }
  }
 catch (  IOException e) {
    log.error("Error searching amenities",e);
    return amenities;
  }
  if (log.isDebugEnabled()) {
    log.debug(String.format("Search for %s done in %s ms found %s.",topLatitude + " " + leftLongitude,System.currentTimeMillis() - now,amenities.size()));
  }
  return amenities;
}
