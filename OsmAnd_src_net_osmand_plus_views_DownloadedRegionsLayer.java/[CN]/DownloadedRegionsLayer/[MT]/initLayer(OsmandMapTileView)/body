{
  this.view=view;
  app=view.getApplication();
  rm=app.getResourceManager();
  osmandRegions=rm.getOsmandRegions();
  paintDownloaded=getPaint(Color.argb(100,50,200,50));
  paintSelected=getPaint(Color.argb(100,255,143,0));
  paintDownloading=getPaint(Color.argb(40,50,200,50));
  paintOutdated=getPaint(Color.argb(100,0,128,255));
  textPaint=new TextPaint();
  final WindowManager wmgr=(WindowManager)view.getApplication().getSystemService(Context.WINDOW_SERVICE);
  DisplayMetrics dm=new DisplayMetrics();
  wmgr.getDefaultDisplay().getMetrics(dm);
  textPaint.setStrokeWidth(21 * dm.scaledDensity);
  textPaint.setAntiAlias(true);
  textPaint.setTextAlign(Paint.Align.CENTER);
  pathDownloaded=new Path();
  pathSelected=new Path();
  pathDownloading=new Path();
  pathOutdated=new Path();
  data=new MapLayerData<List<BinaryMapDataObject>>(){
    @Override public void layerOnPostExecute(){
      view.refreshMap();
    }
    public boolean queriedBoxContains(    final RotatedTileBox queriedData,    final RotatedTileBox newBox){
      if (newBox.getZoom() < ZOOM_TO_SHOW_SELECTION) {
        if (queriedData != null && queriedData.getZoom() < ZOOM_TO_SHOW_SELECTION) {
          return queriedData.containsTileBox(newBox);
        }
 else {
          return false;
        }
      }
      List<BinaryMapDataObject> queriedResults=getResults();
      if (queriedData != null && queriedData.containsTileBox(newBox) && queriedData.getZoom() >= ZOOM_TO_SHOW_MAP_NAMES) {
        if (queriedResults != null && (queriedResults.isEmpty() || Math.abs(queriedData.getZoom() - newBox.getZoom()) <= 1)) {
          return true;
        }
      }
      return false;
    }
    @Override protected List<BinaryMapDataObject> calculateResult(    RotatedTileBox tileBox){
      return queryData(tileBox);
    }
  }
;
}
