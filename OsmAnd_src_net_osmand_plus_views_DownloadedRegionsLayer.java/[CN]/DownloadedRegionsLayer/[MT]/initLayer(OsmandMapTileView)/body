{
  this.view=view;
  rm=view.getApplication().getResourceManager();
  osmandRegions=rm.getOsmandRegions();
  paint=new Paint();
  paint.setStyle(Style.FILL_AND_STROKE);
  paint.setStrokeWidth(1);
  paint.setColor(Color.argb(100,50,200,50));
  paint.setAntiAlias(true);
  paint.setStrokeCap(Cap.ROUND);
  paint.setStrokeJoin(Join.ROUND);
  textPaint=new TextPaint();
  final WindowManager wmgr=(WindowManager)view.getApplication().getSystemService(Context.WINDOW_SERVICE);
  DisplayMetrics dm=new DisplayMetrics();
  wmgr.getDefaultDisplay().getMetrics(dm);
  textPaint.setStrokeWidth(21 * dm.scaledDensity);
  textPaint.setAntiAlias(true);
  textPaint.setTextAlign(Paint.Align.CENTER);
  FrameLayout fl=(FrameLayout)view.getParent();
  downloadBtn=new Button(view.getContext());
  downloadBtn.setVisibility(View.GONE);
  downloadBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      final Intent intent=new Intent(view.getContext(),view.getApplication().getAppCustomization().getDownloadIndexActivity());
      intent.putExtra(DownloadActivity.FILTER_KEY,filter.toString());
      view.getContext().startActivity(intent);
    }
  }
);
  final FrameLayout.LayoutParams lp=new FrameLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT);
  lp.gravity=Gravity.CENTER;
  fl.addView(downloadBtn,lp);
  path=new Path();
  data=new MapLayerData<List<BinaryMapDataObject>>(){
{
      ZOOM_THRESHOLD=2;
    }
    @Override public void layerOnPostExecute(){
      view.refreshMap();
    }
    public boolean queriedBoxContains(    final RotatedTileBox queriedData,    final RotatedTileBox newBox){
      if (newBox.getZoom() < ZOOM_TO_SHOW_MAP_NAMES) {
        if (queriedData != null && queriedData.getZoom() < ZOOM_TO_SHOW_MAP_NAMES) {
          if (newBox.getZoom() >= ZOOM_TO_SHOW_BORDERS_ST && newBox.getZoom() < ZOOM_TO_SHOW_BORDERS) {
            return queriedData != null && queriedData.containsTileBox(newBox);
          }
          return true;
        }
 else {
          return false;
        }
      }
      List<BinaryMapDataObject> queriedResults=getResults();
      if (queriedData != null && queriedData.containsTileBox(newBox) && queriedData.getZoom() >= ZOOM_TO_SHOW_MAP_NAMES) {
        if (queriedResults != null && (queriedResults.isEmpty() || Math.abs(queriedData.getZoom() - newBox.getZoom()) <= 1)) {
          return true;
        }
      }
      return false;
    }
    @Override protected List<BinaryMapDataObject> calculateResult(    RotatedTileBox tileBox){
      return queryData(tileBox);
    }
  }
;
}
