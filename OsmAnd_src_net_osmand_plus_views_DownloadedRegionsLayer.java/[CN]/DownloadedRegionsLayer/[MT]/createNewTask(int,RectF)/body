{
  return new AsyncTask<Object,Object,List<BinaryMapDataObject>>(){
    @Override protected List<BinaryMapDataObject> doInBackground(    Object... params){
      if (queriedBBox.contains(rf)) {
        return null;
      }
      if (zoom < ZOOM_TO_SHOW_MAP_NAMES) {
        basemapExists=rm.getRenderer().basemapExists();
      }
      List<BinaryMapDataObject> result=null;
      int left=MapUtils.get31TileNumberX(rf.left);
      int right=MapUtils.get31TileNumberX(rf.right);
      int top=MapUtils.get31TileNumberY(rf.top);
      int bottom=MapUtils.get31TileNumberY(rf.bottom);
      final boolean empty=rm.getRenderer().checkIfMapIsEmpty(left,right,top,bottom,zoom);
      noMapsPresent=empty;
      if (!empty && zoom >= ZOOM_TO_SHOW_MAP_NAMES) {
        return Collections.emptyList();
      }
      try {
        result=osmandRegions.queryBbox(left,right,top,bottom);
      }
 catch (      IOException e) {
        return result;
      }
      Iterator<BinaryMapDataObject> it=result.iterator();
      while (it.hasNext()) {
        BinaryMapDataObject o=it.next();
        if (zoom < ZOOM_TO_SHOW_BORDERS) {
        }
 else {
          if (!osmandRegions.contain(o,left / 2 + right / 2,top / 2 + bottom / 2)) {
            it.remove();
          }
        }
      }
      return result;
    }
    @Override protected void onPreExecute(){
      currentTask=this;
    }
    @Override protected void onPostExecute(    List<BinaryMapDataObject> result){
      if (result != null) {
        queriedBBox=rf;
        objectsToDraw=result;
        queriedZoom=zoom;
      }
      currentTask=null;
      if (pendingTask != null) {
        pendingTask.execute();
        pendingTask=null;
      }
    }
  }
;
}
