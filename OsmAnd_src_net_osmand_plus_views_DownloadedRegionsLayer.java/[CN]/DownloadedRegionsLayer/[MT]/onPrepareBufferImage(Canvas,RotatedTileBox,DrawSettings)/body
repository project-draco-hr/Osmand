{
  final int zoom=tileBox.getZoom();
  if (zoom < ZOOM_TO_SHOW_SELECTION_ST) {
    return;
  }
  if (osmandRegions.isInitialized() && zoom >= ZOOM_TO_SHOW_SELECTION_ST && zoom < ZOOM_TO_SHOW_SELECTION) {
    final List<BinaryMapDataObject> currentObjects=new LinkedList<>();
    if (data.results != null) {
      currentObjects.addAll(data.results);
    }
    final List<BinaryMapDataObject> downloadingObjects=new LinkedList<>(this.downloadingObjects);
    final List<BinaryMapDataObject> outdatedObjects=new LinkedList<>(this.outdatedObjects);
    final List<BinaryMapDataObject> selectedObjects=new LinkedList<>(this.selectedObjects);
    if (selectedObjects.size() > 0) {
      removeObjectsFromList(currentObjects,selectedObjects);
      drawBorders(canvas,tileBox,selectedObjects,pathSelected,paintSelected);
    }
    if (zoom >= ZOOM_TO_SHOW_BORDERS_ST && zoom < ZOOM_TO_SHOW_BORDERS) {
      removeObjectsFromList(downloadingObjects,selectedObjects);
      if (downloadingObjects.size() > 0) {
        removeObjectsFromList(currentObjects,downloadingObjects);
        drawBorders(canvas,tileBox,downloadingObjects,pathDownloading,paintDownloading);
      }
      removeObjectsFromList(outdatedObjects,selectedObjects);
      if (outdatedObjects.size() > 0) {
        removeObjectsFromList(currentObjects,outdatedObjects);
        drawBorders(canvas,tileBox,outdatedObjects,pathOutdated,paintOutdated);
      }
      if (currentObjects.size() > 0) {
        Iterator<BinaryMapDataObject> it=currentObjects.iterator();
        while (it.hasNext()) {
          BinaryMapDataObject o=it.next();
          boolean downloaded=checkIfObjectDownloaded(osmandRegions.getDownloadName(o));
          if (!downloaded) {
            it.remove();
          }
        }
        if (currentObjects.size() > 0) {
          drawBorders(canvas,tileBox,currentObjects,pathDownloaded,paintDownloaded);
        }
      }
    }
  }
}
