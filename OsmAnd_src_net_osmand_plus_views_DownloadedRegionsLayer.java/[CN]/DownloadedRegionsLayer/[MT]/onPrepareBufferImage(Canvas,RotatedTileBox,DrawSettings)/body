{
  final int zoom=tileBox.getZoom();
  if (zoom < ZOOM_TO_SHOW_BORDERS_ST) {
    return;
  }
  final List<BinaryMapDataObject> currentObjects=data.results;
  if (zoom >= ZOOM_TO_SHOW_BORDERS_ST && zoom < ZOOM_TO_SHOW_BORDERS && osmandRegions.isInitialized() && currentObjects != null) {
    path.reset();
    for (    BinaryMapDataObject o : currentObjects) {
      final String regionName=Algorithms.capitalizeFirstLetterAndLowercase(osmandRegions.getDownloadName(o)) + IndexConstants.BINARY_MAP_INDEX_EXT;
      final String roadsRegionName=Algorithms.capitalizeFirstLetterAndLowercase(osmandRegions.getDownloadName(o)) + "-roads" + IndexConstants.BINARY_MAP_INDEX_EXT;
      if (!rm.getIndexFileNames().containsKey(regionName) && !rm.getIndexFileNames().containsKey(roadsRegionName)) {
        continue;
      }
      double lat=MapUtils.get31LatitudeY(o.getPoint31YTile(0));
      double lon=MapUtils.get31LongitudeX(o.getPoint31XTile(0));
      path.moveTo(tileBox.getPixXFromLonNoRot(lon),tileBox.getPixYFromLatNoRot(lat));
      for (int j=1; j < o.getPointsLength(); j++) {
        lat=MapUtils.get31LatitudeY(o.getPoint31YTile(j));
        lon=MapUtils.get31LongitudeX(o.getPoint31XTile(j));
        path.lineTo(tileBox.getPixXFromLonNoRot(lon),tileBox.getPixYFromLatNoRot(lat));
      }
    }
    canvas.drawPath(path,paint);
  }
}
