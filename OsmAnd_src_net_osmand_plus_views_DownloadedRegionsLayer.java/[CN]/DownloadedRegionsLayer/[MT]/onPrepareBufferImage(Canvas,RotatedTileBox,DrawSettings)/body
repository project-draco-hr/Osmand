{
  final int zoom=tileBox.getZoom();
  if (zoom < ZOOM_TO_SHOW_SELECTION_ST) {
    return;
  }
  if (osmandRegions.isInitialized() && zoom >= ZOOM_TO_SHOW_SELECTION_ST && zoom < ZOOM_TO_SHOW_SELECTION) {
    final List<BinaryMapDataObject> currentObjects=new LinkedList<>();
    if (data.results != null) {
      currentObjects.addAll(data.results);
    }
    final List<BinaryMapDataObject> selectedObjects=new LinkedList<>(this.selectedObjects);
    if (selectedObjects.size() > 0) {
      removeObjectsFromList(currentObjects,selectedObjects);
      drawBorders(canvas,tileBox,selectedObjects,pathSelected,paintSelected);
    }
    if (zoom >= ZOOM_TO_SHOW_BORDERS_ST && zoom < ZOOM_TO_SHOW_BORDERS) {
      if (currentObjects.size() > 0) {
        List<BinaryMapDataObject> downloadedObjects=new ArrayList<>();
        List<BinaryMapDataObject> backupedObjects=new ArrayList<>();
        for (        BinaryMapDataObject o : currentObjects) {
          boolean downloaded=checkIfObjectDownloaded(osmandRegions.getDownloadName(o));
          boolean backuped=checkIfObjectBackuped(osmandRegions.getDownloadName(o));
          if (downloaded) {
            downloadedObjects.add(o);
          }
 else           if (backuped) {
            backupedObjects.add(o);
          }
        }
        if (backupedObjects.size() > 0) {
          drawBorders(canvas,tileBox,backupedObjects,pathBackuped,paintBackuped);
        }
        if (downloadedObjects.size() > 0) {
          drawBorders(canvas,tileBox,downloadedObjects,pathDownloaded,paintDownloaded);
        }
      }
    }
  }
}
