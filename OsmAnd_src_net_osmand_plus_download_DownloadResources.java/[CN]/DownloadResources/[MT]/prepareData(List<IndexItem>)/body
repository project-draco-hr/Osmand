{
  this.rawResources=resources;
  DownloadResourceGroup otherMapsGroup=new DownloadResourceGroup(this,DownloadResourceGroupType.OTHER_MAPS_GROUP);
  DownloadResourceGroup otherMapsScreen=new DownloadResourceGroup(otherMapsGroup,DownloadResourceGroupType.OTHER_MAPS);
  DownloadResourceGroup otherMaps=new DownloadResourceGroup(otherMapsGroup,DownloadResourceGroupType.OTHER_MAPS_HEADER);
  otherMapsScreen.addGroup(otherMaps);
  otherMapsGroup.addGroup(otherMapsScreen);
  DownloadResourceGroup voiceGroup=new DownloadResourceGroup(this,DownloadResourceGroupType.VOICE_GROUP);
  DownloadResourceGroup voiceScreenTTS=new DownloadResourceGroup(voiceGroup,DownloadResourceGroupType.VOICE_TTS);
  DownloadResourceGroup voiceScreenRec=new DownloadResourceGroup(voiceGroup,DownloadResourceGroupType.VOICE_REC);
  DownloadResourceGroup voiceTTS=new DownloadResourceGroup(voiceGroup,DownloadResourceGroupType.VOICE_HEADER_TTS);
  DownloadResourceGroup voiceRec=new DownloadResourceGroup(voiceGroup,DownloadResourceGroupType.VOICE_HEADER_REC);
  DownloadResourceGroup worldMaps=new DownloadResourceGroup(this,DownloadResourceGroupType.WORLD_MAPS);
  Map<WorldRegion,List<IndexItem>> groupByRegion=new LinkedHashMap<WorldRegion,List<IndexItem>>();
  OsmandRegions regs=app.getRegions();
  for (  IndexItem ii : resources) {
    if (ii.getType() == DownloadActivityType.VOICE_FILE) {
      if (ii.getFileName().endsWith(IndexConstants.TTSVOICE_INDEX_EXT_ZIP)) {
        voiceTTS.addItem(ii);
      }
 else {
        voiceRec.addItem(ii);
      }
      continue;
    }
    String basename=ii.getBasename().toLowerCase();
    WorldRegion wg=regs.getRegionDataByDownloadName(basename);
    if (wg != null) {
      if (!groupByRegion.containsKey(wg)) {
        groupByRegion.put(wg,new ArrayList<IndexItem>());
      }
      groupByRegion.get(wg).add(ii);
    }
 else {
      if (ii.getFileName().startsWith("World_")) {
        worldMaps.addItem(ii);
      }
 else {
        otherMaps.addItem(ii);
      }
    }
  }
  LinkedList<WorldRegion> queue=new LinkedList<WorldRegion>();
  LinkedList<DownloadResourceGroup> parent=new LinkedList<DownloadResourceGroup>();
  DownloadResourceGroup worldSubregions=new DownloadResourceGroup(this,DownloadResourceGroupType.SUBREGIONS);
  addGroup(worldSubregions);
  for (  WorldRegion rg : region.getSubregions()) {
    queue.add(rg);
    parent.add(worldSubregions);
  }
  while (!queue.isEmpty()) {
    WorldRegion reg=queue.pollFirst();
    DownloadResourceGroup parentGroup=parent.pollFirst();
    List<WorldRegion> subregions=reg.getSubregions();
    DownloadResourceGroup mainGrp=new DownloadResourceGroup(parentGroup,DownloadResourceGroupType.REGION,reg.getRegionId());
    mainGrp.region=reg;
    parentGroup.addGroup(mainGrp);
    List<IndexItem> list=groupByRegion.get(reg);
    if (list != null) {
      DownloadResourceGroup flatFiles=new DownloadResourceGroup(mainGrp,DownloadResourceGroupType.REGION_MAPS);
      for (      IndexItem ii : list) {
        flatFiles.addItem(ii);
      }
      mainGrp.addGroup(flatFiles);
    }
    DownloadResourceGroup subRegions=new DownloadResourceGroup(mainGrp,DownloadResourceGroupType.SUBREGIONS);
    mainGrp.addGroup(subRegions);
    for (    WorldRegion rg : subregions) {
      queue.add(rg);
      parent.add(subRegions);
    }
  }
  addGroup(worldMaps);
  if (otherMaps.size() > 0) {
    addGroup(otherMapsGroup);
  }
  voiceScreenTTS.addGroup(voiceTTS);
  voiceScreenRec.addGroup(voiceRec);
  voiceGroup.addGroup(voiceScreenTTS);
  voiceGroup.addGroup(voiceScreenRec);
  addGroup(voiceGroup);
  createHillshadeSRTMGroups();
  trimEmptyGroups();
  updateLoadedFiles();
  return true;
}
