{
  path.reset();
  if (helper.getFinalLocation() != null && helper.getRoute().isCalculated()) {
    if (false && view.getSettings().FLUORESCENT_OVERLAYS.get()) {
      paint.setColor(view.getResources().getColor(R.color.nav_track_fluorescent));
    }
 else {
      paint.setColor(view.getResources().getColor(R.color.nav_track));
    }
    int w=view.getWidth();
    int h=view.getHeight();
    Location lastProjection=helper.getLastProjection();
    if (lastProjection != null && view.isPointOnTheRotatedMap(lastProjection.getLatitude(),lastProjection.getLongitude())) {
      boundsRect=new Rect(-w / 2,-h,3 * w / 2,h);
    }
 else {
      boundsRect=new Rect(0,0,w,h);
    }
    view.calculateLatLonRectangle(boundsRect,latlonRect);
    double topLatitude=latlonRect.top;
    double leftLongitude=latlonRect.left;
    double bottomLatitude=latlonRect.bottom;
    double rightLongitude=latlonRect.right;
    double lat=topLatitude - bottomLatitude + 0.1;
    double lon=rightLongitude - leftLongitude + 0.1;
    fillLocationsToShow(topLatitude + lat,leftLongitude - lon,bottomLatitude - lat,rightLongitude + lon);
    if (points.size() > 0) {
      int px=view.getMapXForPoint(points.get(0).getLongitude());
      int py=view.getMapYForPoint(points.get(0).getLatitude());
      path.moveTo(px,py);
      for (int i=1; i < points.size(); i++) {
        Location o=points.get(i);
        int x=view.getMapXForPoint(o.getLongitude());
        int y=view.getMapYForPoint(o.getLatitude());
        path.lineTo(x,y);
      }
      canvas.drawPath(path,paint);
    }
  }
}
