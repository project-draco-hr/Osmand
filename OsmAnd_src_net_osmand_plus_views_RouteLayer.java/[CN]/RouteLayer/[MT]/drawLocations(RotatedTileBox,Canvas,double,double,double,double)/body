{
  points.clear();
  actionPoints.clear();
  boolean previousVisible=false;
  Location lastProjection=helper.getLastProjection();
  if (lastProjection != null) {
    if (leftLongitude <= lastProjection.getLongitude() && lastProjection.getLongitude() <= rightLongitude && bottomLatitude <= lastProjection.getLatitude() && lastProjection.getLatitude() <= topLatitude) {
      points.add(lastProjection);
      previousVisible=true;
    }
  }
  List<Location> routeNodes=helper.getRoute().getRouteLocations();
  int cd=helper.getRoute().getCurrentRoute();
  List<RouteDirectionInfo> rd=helper.getRouteDirections();
  Iterator<RouteDirectionInfo> it=rd.iterator();
  for (int i=0; i < routeNodes.size(); i++) {
    Location ls=routeNodes.get(i);
    if (leftLongitude <= ls.getLongitude() && ls.getLongitude() <= rightLongitude && bottomLatitude <= ls.getLatitude() && ls.getLatitude() <= topLatitude) {
      points.add(ls);
      if (!previousVisible) {
        if (i > 0) {
          points.add(0,routeNodes.get(i - 1));
        }
 else         if (lastProjection != null) {
          points.add(0,lastProjection);
        }
      }
      previousVisible=true;
    }
 else     if (previousVisible) {
      points.add(ls);
      drawSegment(tb,canvas);
      previousVisible=false;
      points.clear();
    }
  }
  drawSegment(tb,canvas);
  if (tb.getZoom() >= 14) {
    calculateActionPoints(topLatitude,leftLongitude,bottomLatitude,rightLongitude,lastProjection,routeNodes,cd,it);
    drawAction(tb,canvas);
  }
}
