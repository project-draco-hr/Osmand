{
  float pxStep=arrow.getHeight() * 4f;
  Matrix matrix=new Matrix();
  float dist=0;
  for (int i=0; i < lst.size(); i+=4) {
    int px=lst.get(i);
    int py=lst.get(i + 1);
    int x=lst.get(i + 2);
    int y=lst.get(i + 3);
    float angleRad=(float)Math.atan2(y - py,x - px);
    float angle=(float)(angleRad * 180 / Math.PI) + 90f;
    float distSegment=(float)Math.sqrt((y - py) * (y - py) + (x - px) * (x - px));
    if (distSegment == 0) {
      continue;
    }
    int len=(int)(distSegment / pxStep);
    if (len > 0) {
      float pdx=((x - px) / len);
      float pdy=((y - py) / len);
      for (int k=1; k <= len; k++) {
        matrix.reset();
        matrix.postTranslate(0,-arrow.getHeight() / 2);
        matrix.postRotate(angle,arrow.getWidth() / 2,0);
        matrix.postTranslate(px + k * pdx - arrow.getWidth() / 2,py + pdy * k);
        canvas.drawBitmap(arrow,matrix,paintIcon);
        dist=0;
      }
    }
 else {
      if (dist > pxStep) {
        matrix.reset();
        matrix.postTranslate(0,-arrow.getHeight() / 2);
        matrix.postRotate(angle,arrow.getWidth() / 2,0);
        matrix.postTranslate(px + (x - px) / 2 - arrow.getWidth() / 2,py + (y - py) / 2);
        canvas.drawBitmap(arrow,matrix,paintIcon);
        dist=0;
      }
 else {
        dist+=distSegment;
      }
    }
  }
}
