{
  RenderingRulesStorage rrs=view.getApplication().getRendererRegistry().getCurrentSelectedRenderer();
  boolean n=nightMode != null && nightMode.isNightMode();
  if (coloredArrowUp == null) {
    Bitmap originalArrowUp=BitmapFactory.decodeResource(view.getResources(),R.drawable.h_arrow,null);
    coloredArrowUp=originalArrowUp;
  }
  if (rrs != cachedRrs || cachedNightMode != n) {
    cachedRrs=rrs;
    cachedNightMode=n;
    cachedColor=view.getResources().getColor(cachedNightMode ? R.color.nav_track_fluorescent : R.color.nav_track);
    if (cachedRrs != null) {
      RenderingRuleSearchRequest req=new RenderingRuleSearchRequest(rrs);
      req.setBooleanFilter(rrs.PROPS.R_NIGHT_MODE,cachedNightMode);
      if (req.searchRenderingAttribute("routeColor")) {
        cachedColor=req.getIntPropertyValue(rrs.PROPS.R_ATTR_COLOR_VALUE);
      }
    }
    paint.setColor(cachedColor);
    int r=Color.red(cachedColor);
    int g=Color.green(cachedColor);
    int b=Color.blue(cachedColor);
    ColorMatrix f=new ColorMatrix(new float[]{0,0,0,0,r,0,0,0,0,g,0,0,0,0,b,0,0,0,1,0});
    ColorMatrix sat=new ColorMatrix();
    sat.setSaturation(0.3f);
    f.postConcat(sat);
    paintIcon.setColorFilter(new ColorMatrixColorFilter(f));
  }
  return cachedColor;
}
