{
  return new AsyncTask<Object,City,List<City>>(){
    @Override protected void onPostExecute(    List<City> result){
      ((TextView)findViewById(R.id.Label)).setText(R.string.incremental_search_city);
      progress.setVisibility(View.INVISIBLE);
      final Collator cs=Collator.getInstance();
      final boolean en=region.useEnglishNames();
      final String part=getFilter().toString();
      final StringMatcherMode startsWith=CollatorStringMatcher.StringMatcherMode.CHECK_ONLY_STARTS_WITH;
      Collections.sort(result,new Comparator<City>(){
        @Override public int compare(        City lhs,        City rhs){
          int compare=compareCityType(lhs,rhs);
          if (compare != 0) {
            return compare;
          }
          boolean st1=CollatorStringMatcher.cmatches(cs,lhs.getName(en),part,startsWith);
          boolean st2=CollatorStringMatcher.cmatches(cs,rhs.getName(en),part,startsWith);
          if (st1 != st2) {
            return st1 ? 1 : -1;
          }
          compare=cs.compare(lhs.getName(en),rhs.getName(en));
          if (compare != 0) {
            return compare;
          }
          if (locationToSearch != null) {
            double d1=MapUtils.getDistance(locationToSearch,lhs.getLocation());
            double d2=MapUtils.getDistance(locationToSearch,rhs.getLocation());
            return -Double.compare(d1,d2);
          }
          return 0;
        }
        private int compareCityType(        City lhs,        City rhs){
          boolean c1=lhs.getType() == CityType.CITY || lhs.getType() == CityType.TOWN;
          boolean c2=rhs.getType() == CityType.CITY || rhs.getType() == CityType.TOWN;
          if (c1 == c2) {
            return 0;
          }
          return c1 ? 1 : -1;
        }
      }
);
      finishInitializing(result);
    }
    @Override protected void onPreExecute(){
      ((TextView)findViewById(R.id.Label)).setText(R.string.loading_cities);
      progress.setVisibility(View.VISIBLE);
    }
    @Override protected List<City> doInBackground(    Object... params){
      region=((OsmandApplication)getApplication()).getResourceManager().getRegionRepository(settings.getLastSearchedRegion());
      if (region != null) {
        region.preloadCities(new ResultMatcher<City>(){
          @Override public boolean publish(          City object){
            addObjectToInitialList(object);
            return true;
          }
          @Override public boolean isCancelled(){
            return false;
          }
        }
);
        return region.getLoadedCities();
      }
      return null;
    }
  }
;
}
