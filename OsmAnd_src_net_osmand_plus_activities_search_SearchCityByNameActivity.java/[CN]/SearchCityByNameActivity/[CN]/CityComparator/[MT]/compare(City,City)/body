{
  final String part=getFilter().toString();
  int compare=compareCityType(lhs,rhs);
  if (compare != 0) {
    return compare;
  }
  boolean st1=CollatorStringMatcher.cmatches(cs,lhs.getName(en),part,startsWith);
  boolean st2=CollatorStringMatcher.cmatches(cs,rhs.getName(en),part,startsWith);
  if (st1 != st2) {
    return st1 ? 1 : -1;
  }
  compare=cs.compare(getText(lhs),getText(rhs));
  if (compare != 0) {
    return compare;
  }
  if (locationToSearch != null) {
    double d1=MapUtils.getDistance(locationToSearch,lhs.getLocation());
    double d2=MapUtils.getDistance(locationToSearch,rhs.getLocation());
    return -Double.compare(d1,d2);
  }
  return 0;
}
