{
  final OsmandMapTileView view=map.getMapView();
  if (EXTRA_SETTINGS) {
    final MapWidgetRegistry.MapWidgetRegInfo showRuler=mapInfoControls.registerAppearanceWidget(R.drawable.widget_ruler,R.string.map_widget_show_ruler,"showRuler",view.getSettings().SHOW_RULER);
    showRuler.setStateChangeListener(new Runnable(){
      @Override public void run(){
        view.getSettings().SHOW_RULER.set(!view.getSettings().SHOW_RULER.get());
        view.refreshMap();
      }
    }
);
    final MapWidgetRegistry.MapWidgetRegInfo transparent=mapInfoControls.registerAppearanceWidget(R.drawable.widget_transparent_skin,R.string.map_widget_transparent,"transparent",view.getSettings().TRANSPARENT_MAP_THEME);
    transparent.setStateChangeListener(new Runnable(){
      @Override public void run(){
        view.getSettings().TRANSPARENT_MAP_THEME.set(!view.getSettings().TRANSPARENT_MAP_THEME.get());
        mapInfoLayer.recreateControls();
      }
    }
);
    final MapWidgetRegistry.MapWidgetRegInfo centerPosition=mapInfoControls.registerAppearanceWidget(R.drawable.widget_position_marker,R.string.always_center_position_on_map,"centerPosition",view.getSettings().CENTER_POSITION_ON_MAP);
    centerPosition.setStateChangeListener(new Runnable(){
      @Override public void run(){
        view.getSettings().CENTER_POSITION_ON_MAP.set(!view.getSettings().CENTER_POSITION_ON_MAP.get());
        map.updateApplicationModeSettings();
        view.refreshMap(true);
        mapInfoLayer.recreateControls();
      }
    }
);
  }
  final MapWidgetRegistry.MapWidgetRegInfo vectorRenderer=mapInfoControls.registerAppearanceWidget(R.drawable.widget_rendering_style,map.getString(R.string.map_widget_renderer),"renderer",view.getSettings().RENDERER,map.getString(R.string.map_widget_map_rendering));
  final OsmandApplication app=view.getApplication();
  vectorRenderer.setStateChangeListener(new Runnable(){
    @Override public void run(){
      AlertDialog.Builder bld=new AlertDialog.Builder(view.getContext());
      bld.setTitle(R.string.renderers);
      Collection<String> rendererNames=app.getRendererRegistry().getRendererNames();
      final String[] items=rendererNames.toArray(new String[rendererNames.size()]);
      final String[] visibleNames=new String[items.length];
      int selected=-1;
      final String selectedName=app.getRendererRegistry().getCurrentSelectedRenderer().getName();
      for (int j=0; j < items.length; j++) {
        if (items[j].equals(selectedName)) {
          selected=j;
        }
        visibleNames[j]=items[j].replace('_',' ').replace('-',' ');
      }
      bld.setSingleChoiceItems(visibleNames,selected,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          String renderer=items[which];
          RenderingRulesStorage loaded=app.getRendererRegistry().getRenderer(renderer);
          if (loaded != null) {
            view.getSettings().RENDERER.set(renderer);
            app.getRendererRegistry().setCurrentSelectedRender(loaded);
            app.getResourceManager().getRenderer().clearCache();
            view.refreshMap(true);
          }
 else {
            AccessibleToast.makeText(app,R.string.renderer_load_exception,Toast.LENGTH_SHORT).show();
          }
          if (EXTRA_SETTINGS) {
            createCustomRenderingProperties(loaded,map,mapInfoLayer,mapInfoControls);
          }
          dialog.dismiss();
        }
      }
);
      bld.show();
    }
  }
);
  final MapWidgetRegistry.MapWidgetRegInfo dayNight=mapInfoControls.registerAppearanceWidget(R.drawable.widget_day_night_mode,map.getString(R.string.map_widget_day_night),"dayNight",view.getSettings().DAYNIGHT_MODE,map.getString(R.string.map_widget_map_rendering));
  dayNight.setStateChangeListener(new Runnable(){
    @Override public void run(){
      AlertDialog.Builder bld=new AlertDialog.Builder(view.getContext());
      bld.setTitle(R.string.daynight);
      final String[] items=new String[OsmandSettings.DayNightMode.values().length];
      for (int i=0; i < items.length; i++) {
        items[i]=OsmandSettings.DayNightMode.values()[i].toHumanString(map.getMyApplication());
      }
      int i=view.getSettings().DAYNIGHT_MODE.get().ordinal();
      bld.setSingleChoiceItems(items,i,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          view.getSettings().DAYNIGHT_MODE.set(OsmandSettings.DayNightMode.values()[which]);
          app.getResourceManager().getRenderer().clearCache();
          view.refreshMap(true);
          dialog.dismiss();
        }
      }
);
      bld.show();
    }
  }
);
  RenderingRulesStorage renderer=app.getRendererRegistry().getCurrentSelectedRenderer();
  if (renderer != null && EXTRA_SETTINGS) {
    createCustomRenderingProperties(renderer,map,mapInfoLayer,mapInfoControls);
  }
}
