{
  final OsmandMapTileView view=map.getMapView();
  final MapWidgetRegistry.MapWidgetRegInfo showRuler=mapInfoControls.registerAppearanceWidget(R.drawable.widget_ruler,R.string.map_widget_show_ruler,"showRuler",view.getSettings().SHOW_RULER);
  showRuler.setStateChangeListener(new Runnable(){
    @Override public void run(){
      view.getSettings().SHOW_RULER.set(!view.getSettings().SHOW_RULER.get());
      view.refreshMap();
    }
  }
);
  final MapWidgetRegistry.MapWidgetRegInfo showDestinationArrow=mapInfoControls.registerAppearanceWidget(R.drawable.widget_show_destination_arrow,R.string.map_widget_show_destination_arrow,"show_destination_arrow",view.getSettings().SHOW_DESTINATION_ARROW);
  showDestinationArrow.setStateChangeListener(new Runnable(){
    @Override public void run(){
      view.getSettings().SHOW_DESTINATION_ARROW.set(!view.getSettings().SHOW_DESTINATION_ARROW.get());
      mapInfoLayer.recreateControls();
    }
  }
);
  final MapWidgetRegistry.MapWidgetRegInfo transparent=mapInfoControls.registerAppearanceWidget(R.drawable.widget_transparent_skin,R.string.map_widget_transparent,"transparent",view.getSettings().TRANSPARENT_MAP_THEME);
  transparent.setStateChangeListener(new Runnable(){
    @Override public void run(){
      view.getSettings().TRANSPARENT_MAP_THEME.set(!view.getSettings().TRANSPARENT_MAP_THEME.get());
      mapInfoLayer.recreateControls();
    }
  }
);
  final MapWidgetRegistry.MapWidgetRegInfo centerPosition=mapInfoControls.registerAppearanceWidget(R.drawable.widget_position_marker,R.string.always_center_position_on_map,"centerPosition",view.getSettings().CENTER_POSITION_ON_MAP);
  centerPosition.setStateChangeListener(new Runnable(){
    @Override public void run(){
      view.getSettings().CENTER_POSITION_ON_MAP.set(!view.getSettings().CENTER_POSITION_ON_MAP.get());
      map.updateApplicationModeSettings();
      view.refreshMap(true);
      mapInfoLayer.recreateControls();
    }
  }
);
}
