{
  double cBottomLatitude=dataBox.bottom;
  double cTopLatitude=dataBox.top;
  double cLeftLongitude=dataBox.left;
  double cRightLongitude=dataBox.right;
  long now=System.currentTimeMillis();
  if (files.isEmpty()) {
    cObjectsBox=dataBox;
    cObjects=new ArrayList<BinaryMapDataObject>();
    return true;
  }
  try {
    int count=0;
    ArrayList<BinaryMapDataObject> tempList=new ArrayList<BinaryMapDataObject>();
    System.gc();
    TLongSet ids=new TLongHashSet();
    Map<TagValuePair,List<BinaryMapDataObject>> multiPolygons=new LinkedHashMap<TagValuePair,List<BinaryMapDataObject>>();
    int leftX=MapUtils.get31TileNumberX(cLeftLongitude);
    int rightX=MapUtils.get31TileNumberX(cRightLongitude);
    int bottomY=MapUtils.get31TileNumberY(cBottomLatitude);
    int topY=MapUtils.get31TileNumberY(cTopLatitude);
    BinaryMapIndexReader.SearchFilter searchFilter=new BinaryMapIndexReader.SearchFilter(){
      @Override public boolean accept(      TIntArrayList types,      BinaryMapIndexReader.MapIndex root){
        for (int j=0; j < types.size(); j++) {
          int type=types.get(j);
          TagValuePair pair=root.decodeType(type);
          if (pair != null) {
            for (int i=1; i <= 3; i++) {
              renderingReq.setIntFilter(renderingReq.ALL.R_MINZOOM,zoom);
              renderingReq.setStringFilter(renderingReq.ALL.R_TAG,pair.tag);
              renderingReq.setStringFilter(renderingReq.ALL.R_VALUE,pair.value);
              if (renderingReq.search(i,false)) {
                return true;
              }
            }
            renderingReq.setStringFilter(renderingReq.ALL.R_TAG,pair.tag);
            renderingReq.setStringFilter(renderingReq.ALL.R_VALUE,pair.value);
            if (renderingReq.search(RenderingRulesStorage.TEXT_RULES,false)) {
              return true;
            }
          }
        }
        return false;
      }
    }
;
    if (zoom > 16) {
      searchFilter=null;
    }
    boolean basemapSearch=false;
    if (zoom <= 7) {
      for (      String f : files.keySet()) {
        if (f.toLowerCase().contains(BASEMAP_NAME)) {
          basemapSearch=true;
          break;
        }
      }
    }
    for (    String mapName : files.keySet()) {
      if (basemapSearch && !mapName.toLowerCase().contains(BASEMAP_NAME)) {
        continue;
      }
      BinaryMapIndexReader c=files.get(mapName);
      searchRequest=BinaryMapIndexReader.buildSearchRequest(leftX,rightX,topY,bottomY,zoom,searchFilter);
      List<BinaryMapDataObject> res=c.searchMapIndex(searchRequest);
      for (      BinaryMapDataObject r : res) {
        if (PerformanceFlags.checkForDuplicateObjectIds) {
          if (ids.contains(r.getId()) && r.getId() > 0) {
            continue;
          }
          ids.add(r.getId());
        }
        count++;
        if (r.containsType(r.getMapIndex().coastlineEncodingType)) {
          TagValuePair pair=r.getMapIndex().decodeType(r.getMapIndex().coastlineEncodingType);
          pair=new TagValuePair(pair.tag,pair.value,0);
          if (!multiPolygons.containsKey(pair)) {
            multiPolygons.put(pair,new ArrayList<BinaryMapDataObject>());
          }
          multiPolygons.get(pair).add(r);
        }
        if (checkWhetherInterrupted()) {
          return false;
        }
        tempList.add(r);
      }
    }
    List<MultyPolygon> pMulti=proccessMultiPolygons(multiPolygons,leftX,rightX,bottomY,topY,zoom);
    tempList.addAll(pMulti);
    if (count > 0) {
      log.info(String.format("BLat=%s, TLat=%s, LLong=%s, RLong=%s, zoom=%s",cBottomLatitude,cTopLatitude,cLeftLongitude,cRightLongitude,zoom));
      log.info(String.format("Searching: %s ms  (%s results found)",System.currentTimeMillis() - now,count));
    }
    cObjects=tempList;
    cObjectsBox=dataBox;
  }
 catch (  IOException e) {
    log.debug("Search failed",e);
    return false;
  }
  return true;
}
