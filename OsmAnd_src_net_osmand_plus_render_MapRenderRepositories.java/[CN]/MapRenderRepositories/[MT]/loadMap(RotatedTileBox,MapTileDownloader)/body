{
  boolean prevInterrupted=interrupted;
  interrupted=false;
  tileRect.setZoomAndAnimation(tileRect.getZoom(),0);
  requestedBox=new RotatedTileBox(tileRect);
  log.info("RENDER MAP: new request " + tileRect);
  if (currentRenderingContext != null) {
    currentRenderingContext=null;
  }
  try {
    OsmandApplication app=((OsmandApplication)context.getApplicationContext());
    boolean nightMode=app.getDaynightHelper().isNightMode();
    RenderingRulesStorage storage=app.getRendererRegistry().getCurrentSelectedRenderer();
    RenderingRuleSearchRequest renderingReq=new RenderingRuleSearchRequest(storage);
    renderingReq.setBooleanFilter(renderingReq.ALL.R_NIGHT_MODE,nightMode);
    for (    RenderingRuleProperty customProp : storage.PROPS.getCustomRules()) {
      if (customProp.isBoolean()) {
        if (customProp.getAttrName().equals(RenderingRuleStorageProperties.A_ENGINE_V1)) {
          renderingReq.setBooleanFilter(customProp,true);
        }
 else         if (RenderingRuleStorageProperties.UI_CATEGORY_HIDDEN.equals(customProp.getCategory())) {
          renderingReq.setBooleanFilter(customProp,false);
        }
 else {
          CommonPreference<Boolean> pref=prefs.getCustomRenderBooleanProperty(customProp.getAttrName());
          renderingReq.setBooleanFilter(customProp,pref.get());
        }
      }
 else       if (RenderingRuleStorageProperties.UI_CATEGORY_HIDDEN.equals(customProp.getCategory())) {
        if (customProp.isString()) {
          renderingReq.setStringFilter(customProp,"");
        }
 else {
          renderingReq.setIntFilter(customProp,0);
        }
      }
 else {
        CommonPreference<String> settings=prefs.getCustomRenderProperty(customProp.getAttrName());
        String res=settings.get();
        if (!Algorithms.isEmpty(res)) {
          if (customProp.isString()) {
            renderingReq.setStringFilter(customProp,res);
          }
 else {
            try {
              renderingReq.setIntFilter(customProp,Integer.parseInt(res));
            }
 catch (            NumberFormatException e) {
              e.printStackTrace();
            }
          }
        }
 else {
          if (customProp.isString()) {
            renderingReq.setStringFilter(customProp,"");
          }
        }
      }
    }
    renderingReq.saveState();
    NativeOsmandLibrary nativeLib=!prefs.SAFE_MODE.get() ? NativeOsmandLibrary.getLibrary(storage,context) : null;
    QuadRect dataBox=requestedBox.getLatLonBounds();
    int dataBoxZoom=requestedBox.getZoom();
    long now=System.currentTimeMillis();
    if (cObjectsBox.left > dataBox.left || cObjectsBox.top < dataBox.top || cObjectsBox.right < dataBox.right || cObjectsBox.bottom > dataBox.bottom || (nativeLib != null) == (cNativeObjects == null) || dataBoxZoom != cObjectsZoom || prevInterrupted) {
      if ((dataBox.right - dataBox.left) > (dataBox.top - dataBox.bottom)) {
        double wi=(dataBox.right - dataBox.left) * .05;
        dataBox.left-=wi;
        dataBox.right+=wi;
      }
 else {
        double hi=(dataBox.top - dataBox.bottom) * .05;
        dataBox.top+=hi;
        dataBox.bottom-=hi;
      }
      validateLatLonBox(dataBox);
      renderedState=0;
      boolean loaded;
      if (nativeLib != null) {
        cObjects=new LinkedList<BinaryMapDataObject>();
        loaded=loadVectorDataNative(dataBox,requestedBox.getZoom(),renderingReq,nativeLib);
      }
 else {
        cNativeObjects=null;
        loaded=loadVectorData(dataBox,requestedBox.getZoom(),renderingReq);
      }
      if (!loaded || checkWhetherInterrupted()) {
        return;
      }
    }
    final long searchTime=System.currentTimeMillis() - now;
    currentRenderingContext=new OsmandRenderer.RenderingContext(context);
    renderingReq.clearState();
    renderingReq.setIntFilter(renderingReq.ALL.R_MINZOOM,requestedBox.getZoom());
    if (renderingReq.searchRenderingAttribute(RenderingRuleStorageProperties.A_DEFAULT_COLOR)) {
      currentRenderingContext.defaultColor=renderingReq.getIntPropertyValue(renderingReq.ALL.R_ATTR_COLOR_VALUE);
    }
    renderingReq.clearState();
    renderingReq.setIntFilter(renderingReq.ALL.R_MINZOOM,requestedBox.getZoom());
    if (renderingReq.searchRenderingAttribute(RenderingRuleStorageProperties.A_SHADOW_RENDERING)) {
      currentRenderingContext.shadowRenderingMode=renderingReq.getIntPropertyValue(renderingReq.ALL.R_ATTR_INT_VALUE);
      currentRenderingContext.shadowRenderingColor=renderingReq.getIntPropertyValue(renderingReq.ALL.R_SHADOW_COLOR);
    }
    if (renderingReq.searchRenderingAttribute("polygonMinSizeToDisplay")) {
      currentRenderingContext.polygonMinSizeToDisplay=renderingReq.getIntPropertyValue(renderingReq.ALL.R_ATTR_INT_VALUE);
    }
    final QuadPointDouble lt=requestedBox.getLeftTopTile(requestedBox.getZoom());
    double cfd=MapUtils.getPowZoom(requestedBox.getZoomFloatPart()) * requestedBox.getMapDensity();
    lt.x*=cfd;
    lt.y*=cfd;
    final double tileDivisor=MapUtils.getPowZoom(31 - requestedBox.getZoom()) / cfd;
    currentRenderingContext.leftX=lt.x;
    currentRenderingContext.topY=lt.y;
    currentRenderingContext.zoom=requestedBox.getZoom();
    currentRenderingContext.rotate=requestedBox.getRotate();
    currentRenderingContext.width=requestedBox.getPixWidth();
    currentRenderingContext.height=requestedBox.getPixHeight();
    currentRenderingContext.nightMode=nightMode;
    if (requestedBox.getZoom() <= zoomOnlyForBasemaps && "".equals(prefs.MAP_PREFERRED_LOCALE.get())) {
      currentRenderingContext.preferredLocale=app.getLanguage();
    }
 else {
      currentRenderingContext.preferredLocale=prefs.MAP_PREFERRED_LOCALE.get();
    }
    final float mapDensity=(float)requestedBox.getMapDensity();
    currentRenderingContext.setDensityValue(mapDensity);
    currentRenderingContext.textScale=(requestedBox.getDensity() * app.getSettings().TEXT_SCALE.get()) / mapDensity;
    currentRenderingContext.screenDensityRatio=1 / Math.max(1,requestedBox.getDensity());
    currentRenderingContext.tileDivisor=tileDivisor;
    if (checkWhetherInterrupted()) {
      return;
    }
    now=System.currentTimeMillis();
    Bitmap bmp;
    boolean transparent=false;
    RenderingRuleProperty rr=storage.PROPS.get("noPolygons");
    if (rr != null) {
      transparent=renderingReq.getIntPropertyValue(rr) > 0;
    }
    Bitmap reuse=prevBmp;
    this.prevBmp=this.bmp;
    this.prevBmpLocation=this.bmpLocation;
    Config cfg=transparent ? Config.ARGB_8888 : Config.RGB_565;
    if (reuse != null && reuse.getWidth() == currentRenderingContext.width && reuse.getHeight() == currentRenderingContext.height && cfg == reuse.getConfig()) {
      bmp=reuse;
      bmp.eraseColor(currentRenderingContext.defaultColor);
    }
 else {
      if (reuse != null) {
        log.warn(String.format("Create new image ? %d != %d (w) %d != %d (h) ",currentRenderingContext.width,reuse.getWidth(),currentRenderingContext.height,reuse.getHeight()));
      }
      bmp=Bitmap.createBitmap(currentRenderingContext.width,currentRenderingContext.height,cfg);
      if (reuse != null) {
        reuse.recycle();
      }
    }
    this.bmp=bmp;
    this.bmpLocation=tileRect;
    if (nativeLib != null) {
      renderer.generateNewBitmapNative(currentRenderingContext,nativeLib,cNativeObjects,bmp,renderingReq,mapTileDownloader);
    }
 else {
      renderer.generateNewBitmap(currentRenderingContext,cObjects,bmp,renderingReq,mapTileDownloader);
    }
    if (renderingReq != null) {
      log.info("Debug :" + renderingReq != null);
    }
    String renderingDebugInfo=currentRenderingContext.renderingDebugInfo;
    currentRenderingContext.ended=true;
    if (checkWhetherInterrupted()) {
      if (currentRenderingContext.lastRenderedKey < OsmandRenderer.DEFAULT_LINE_MAX) {
        reuse=this.bmp;
        this.bmp=this.prevBmp;
        this.bmpLocation=this.prevBmpLocation;
        this.prevBmp=reuse;
        this.prevBmpLocation=null;
      }
      currentRenderingContext=null;
      return;
    }
 else {
      this.checkedRenderedState=renderedState;
      this.checkedBox=this.bmpLocation;
    }
    currentRenderingContext=null;
    this.prevBmpLocation=null;
    if (prefs.DEBUG_RENDERING_INFO.get() && OsmandPlugin.getEnabledPlugin(OsmandDevelopmentPlugin.class) != null) {
      String timeInfo="Searching: " + searchTime + " ms";
      if (renderingDebugInfo != null) {
        timeInfo+="\n" + renderingDebugInfo;
      }
      final String msg=timeInfo;
      log.info(msg);
      handler.post(new Runnable(){
        @Override public void run(){
          Toast.makeText(context,msg,Toast.LENGTH_LONG).show();
        }
      }
);
    }
  }
 catch (  RuntimeException e) {
    log.error("Runtime memory exception",e);
    handler.post(new Runnable(){
      @Override public void run(){
        Toast.makeText(context,R.string.rendering_exception,Toast.LENGTH_SHORT).show();
      }
    }
);
  }
catch (  OutOfMemoryError e) {
    log.error("Out of memory error",e);
    cObjects=new ArrayList<BinaryMapDataObject>();
    cObjectsBox=new QuadRect();
    handler.post(new Runnable(){
      @Override public void run(){
        int max=(int)(Runtime.getRuntime().maxMemory() / (1 << 20));
        int avl=(int)(Runtime.getRuntime().freeMemory() / (1 << 20));
        String s=" (" + avl + " MB available of "+ max+ ") ";
        Toast.makeText(context,context.getString(R.string.rendering_out_of_memory) + s,Toast.LENGTH_SHORT).show();
      }
    }
);
  }
 finally {
    if (currentRenderingContext != null) {
      currentRenderingContext.ended=true;
    }
  }
}
