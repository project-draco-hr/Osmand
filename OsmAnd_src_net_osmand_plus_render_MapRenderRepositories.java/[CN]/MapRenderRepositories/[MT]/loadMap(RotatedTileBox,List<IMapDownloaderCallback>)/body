{
  interrupted=false;
  if (currentRenderingContext != null) {
    currentRenderingContext=null;
  }
  try {
    OsmandApplication app=((OsmandApplication)context.getApplicationContext());
    Boolean renderDay=app.getDaynightHelper().getDayNightRenderer();
    BaseOsmandRender renderingType=app.getRendererRegistry().getCurrentSelectedRenderer();
    if (renderDay != null && renderingType != null && renderDay.booleanValue() != renderingType.isDayRender()) {
      renderingType=app.getRendererRegistry().getOppositeRendererForDayNight(renderingType);
    }
    requestedBox=new RotatedTileBox(tileRect);
    RectF dataBox=requestedBox.calculateLatLonBox(new RectF());
    long now=System.currentTimeMillis();
    if (cObjectsBox.left > dataBox.left || cObjectsBox.top > dataBox.top || cObjectsBox.right < dataBox.right || cObjectsBox.bottom < dataBox.bottom) {
      if ((dataBox.right - dataBox.left) > (dataBox.top - dataBox.bottom)) {
        double wi=(dataBox.right - dataBox.left) * .2;
        dataBox.left-=wi;
        dataBox.right+=wi;
      }
 else {
        double hi=(dataBox.top - dataBox.bottom) * .2;
        dataBox.top+=hi;
        dataBox.bottom-=hi;
      }
      validateLatLonBox(dataBox);
      boolean loaded=loadVectorData(dataBox,requestedBox.getZoom(),renderingType);
      if (!loaded || checkWhetherInterrupted()) {
        return;
      }
    }
    final long searchTime=System.currentTimeMillis() - now;
    currentRenderingContext=new OsmandRenderer.RenderingContext();
    currentRenderingContext.leftX=(float)requestedBox.getLeftTileX();
    currentRenderingContext.topY=(float)requestedBox.getTopTileY();
    currentRenderingContext.zoom=requestedBox.getZoom();
    currentRenderingContext.rotate=requestedBox.getRotate();
    currentRenderingContext.width=(int)(requestedBox.getTileWidth() * OsmandRenderer.TILE_SIZE);
    currentRenderingContext.height=(int)(requestedBox.getTileHeight() * OsmandRenderer.TILE_SIZE);
    if (checkWhetherInterrupted()) {
      return;
    }
    now=System.currentTimeMillis();
    Bitmap bmp=Bitmap.createBitmap(currentRenderingContext.width,currentRenderingContext.height,Config.RGB_565);
    boolean stepByStep=prefs.USE_STEP_BY_STEP_RENDERING.get();
    if (stepByStep) {
      this.bmp=bmp;
      this.bmpLocation=tileRect;
    }
    renderer.generateNewBitmap(currentRenderingContext,cObjects,bmp,prefs.USE_ENGLISH_NAMES.get(),renderingType,stepByStep ? notifyList : null);
    String renderingDebugInfo=currentRenderingContext.renderingDebugInfo;
    if (checkWhetherInterrupted()) {
      currentRenderingContext=null;
      return;
    }
    currentRenderingContext=null;
    if (!stepByStep) {
      this.bmp=bmp;
      this.bmpLocation=tileRect;
    }
    if (prefs.DEBUG_RENDERING_INFO.get()) {
      String timeInfo="Search done in " + searchTime + " ms";
      if (renderingDebugInfo != null) {
        timeInfo+="\n" + renderingDebugInfo;
      }
      final String msg=timeInfo;
      handler.post(new Runnable(){
        @Override public void run(){
          Toast.makeText(context,msg,Toast.LENGTH_SHORT).show();
        }
      }
);
    }
  }
 catch (  RuntimeException e) {
    log.error("Runtime memory exception",e);
    handler.post(new Runnable(){
      @Override public void run(){
        Toast.makeText(context,R.string.rendering_exception,Toast.LENGTH_SHORT).show();
      }
    }
);
  }
catch (  OutOfMemoryError e) {
    log.error("Out of memory error",e);
    cObjects=new ArrayList<BinaryMapDataObject>();
    cObjectsBox=new RectF();
    handler.post(new Runnable(){
      @Override public void run(){
        Toast.makeText(context,R.string.rendering_out_of_memory,Toast.LENGTH_SHORT).show();
      }
    }
);
  }
}
