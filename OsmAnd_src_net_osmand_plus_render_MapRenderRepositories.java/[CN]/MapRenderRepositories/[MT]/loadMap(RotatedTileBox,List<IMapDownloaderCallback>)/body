{
  interrupted=false;
  if (currentRenderingContext != null) {
    currentRenderingContext=null;
  }
  try {
    OsmandApplication app=((OsmandApplication)context.getApplicationContext());
    Boolean renderDay=app.getDaynightHelper().getDayNightRenderer();
    boolean nightMode=renderDay != null && !renderDay.booleanValue();
    RenderingRulesStorage storage=app.getRendererRegistry().getCurrentSelectedRenderer();
    RenderingRuleSearchRequest renderingReq=new RenderingRuleSearchRequest(storage);
    renderingReq.setBooleanFilter(renderingReq.ALL.R_NIGHT_MODE,nightMode);
    for (    RenderingRuleProperty customProp : storage.PROPS.getCustomRules()) {
      CommonPreference<String> settings=app.getSettings().getCustomRenderProperty(customProp.getAttrName());
      String res=settings.get();
      if (!Algoritms.isEmpty(res)) {
        if (customProp.isString()) {
          renderingReq.setStringFilter(customProp,res);
        }
 else         if (customProp.isBoolean()) {
          renderingReq.setBooleanFilter(customProp,"true".equalsIgnoreCase(res));
        }
 else {
          try {
            renderingReq.setIntFilter(customProp,Integer.parseInt(res));
          }
 catch (          NumberFormatException e) {
            e.printStackTrace();
          }
        }
      }
    }
    renderingReq.saveState();
    requestedBox=new RotatedTileBox(tileRect);
    RectF dataBox=requestedBox.calculateLatLonBox(new RectF());
    long now=System.currentTimeMillis();
    if (cObjectsBox.left > dataBox.left || cObjectsBox.top > dataBox.top || cObjectsBox.right < dataBox.right || cObjectsBox.bottom < dataBox.bottom || prefs.NATIVE_RENDERING.get() == (cNativeObjects == null)) {
      if ((dataBox.right - dataBox.left) > (dataBox.top - dataBox.bottom)) {
        double wi=(dataBox.right - dataBox.left) * .2;
        dataBox.left-=wi;
        dataBox.right+=wi;
      }
 else {
        double hi=(dataBox.top - dataBox.bottom) * .2;
        dataBox.top+=hi;
        dataBox.bottom-=hi;
      }
      validateLatLonBox(dataBox);
      boolean loaded;
      if (prefs.NATIVE_RENDERING.get()) {
        cObjects=new LinkedList<BinaryMapDataObject>();
        loaded=loadVectorDataNative(dataBox,requestedBox.getZoom(),renderingReq);
      }
 else {
        cNativeObjects=null;
        loaded=loadVectorData(dataBox,requestedBox.getZoom(),renderingReq,nightMode);
      }
      if (!loaded || checkWhetherInterrupted()) {
        return;
      }
    }
    final long searchTime=System.currentTimeMillis() - now;
    currentRenderingContext=new OsmandRenderer.RenderingContext(context);
    RenderingRuleProperty rr=storage.PROPS.get("shadowRenderingMode");
    if (rr != null) {
      CommonPreference<String> settings=app.getSettings().getCustomRenderProperty(rr.getAttrName());
      if (settings.get().length() > 0) {
        try {
          ShadowRenderingMode m=ShadowRenderingMode.valueOf(settings.get().replace(' ','_').toUpperCase());
          currentRenderingContext.shadowRenderingMode=m.value;
        }
 catch (        IllegalArgumentException e) {
        }
      }
    }
    currentRenderingContext.leftX=(float)requestedBox.getLeftTileX();
    currentRenderingContext.topY=(float)requestedBox.getTopTileY();
    currentRenderingContext.zoom=requestedBox.getZoom();
    currentRenderingContext.rotate=requestedBox.getRotate();
    currentRenderingContext.width=(int)(requestedBox.getTileWidth() * OsmandRenderer.TILE_SIZE);
    currentRenderingContext.height=(int)(requestedBox.getTileHeight() * OsmandRenderer.TILE_SIZE);
    currentRenderingContext.nightMode=nightMode;
    currentRenderingContext.highResMode=prefs.USE_HIGH_RES_MAPS.get();
    currentRenderingContext.mapTextSize=prefs.MAP_TEXT_SIZE.get();
    if (checkWhetherInterrupted()) {
      return;
    }
    now=System.currentTimeMillis();
    Bitmap bmp=Bitmap.createBitmap(currentRenderingContext.width,currentRenderingContext.height,Config.RGB_565);
    this.prevBmp=this.bmp;
    this.prevBmpLocation=this.bmpLocation;
    this.bmp=bmp;
    this.bmpLocation=tileRect;
    if (app.getSettings().NATIVE_RENDERING.get()) {
      renderer.generateNewBitmapNative(currentRenderingContext,cNativeObjects,bmp,prefs.USE_ENGLISH_NAMES.get(),renderingReq,notifyList,storage.getBgColor(nightMode));
    }
 else {
      renderer.generateNewBitmap(currentRenderingContext,cObjects,bmp,prefs.USE_ENGLISH_NAMES.get(),renderingReq,notifyList,storage.getBgColor(nightMode));
    }
    String renderingDebugInfo=currentRenderingContext.renderingDebugInfo;
    currentRenderingContext.ended=true;
    if (checkWhetherInterrupted()) {
      if (currentRenderingContext.lastRenderedKey < 35) {
        this.bmp=this.prevBmp;
        this.bmpLocation=this.prevBmpLocation;
      }
      currentRenderingContext=null;
      return;
    }
    currentRenderingContext=null;
    this.prevBmp=null;
    this.prevBmpLocation=null;
    if (prefs.DEBUG_RENDERING_INFO.get()) {
      String timeInfo="Searching: " + searchTime + " ms";
      if (renderingDebugInfo != null) {
        timeInfo+="\n" + renderingDebugInfo;
      }
      final String msg=timeInfo;
      log.info(msg);
      handler.post(new Runnable(){
        @Override public void run(){
          Toast.makeText(context,msg,Toast.LENGTH_LONG).show();
        }
      }
);
    }
  }
 catch (  RuntimeException e) {
    log.error("Runtime memory exception",e);
    handler.post(new Runnable(){
      @Override public void run(){
        Toast.makeText(context,R.string.rendering_exception,Toast.LENGTH_SHORT).show();
      }
    }
);
  }
catch (  OutOfMemoryError e) {
    log.error("Out of memory error",e);
    cObjects=new ArrayList<BinaryMapDataObject>();
    cObjectsBox=new RectF();
    handler.post(new Runnable(){
      @Override public void run(){
        Toast.makeText(context,R.string.rendering_out_of_memory,Toast.LENGTH_SHORT).show();
      }
    }
);
  }
 finally {
    if (currentRenderingContext != null) {
      currentRenderingContext.ended=true;
    }
  }
}
