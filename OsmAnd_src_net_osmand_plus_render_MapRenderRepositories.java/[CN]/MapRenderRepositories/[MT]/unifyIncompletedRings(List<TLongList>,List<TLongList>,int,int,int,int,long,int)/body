{
  int mask=0xffffffff;
  Set<Integer> nonvisitedRings=new LinkedHashSet<Integer>();
  for (int j=0; j < incompletedRings.size(); j++) {
    TLongList i=incompletedRings.get(j);
    int x=(int)(i.get(i.size() - 1) >> 32);
    int y=(int)(i.get(i.size() - 1) & mask);
    int sx=(int)(i.get(0) >> 32);
    int sy=(int)(i.get(0) & mask);
    boolean st=y == topY || x == rightX || y == bottomY || x == leftX;
    boolean end=sy == topY || sx == rightX || sy == bottomY || sx == leftX;
    if (!end || !st) {
      float dx=(float)MapUtils.get31LongitudeX(x);
      float dsx=(float)MapUtils.get31LongitudeX(sx);
      float dy=(float)MapUtils.get31LatitudeY(y);
      float dsy=(float)MapUtils.get31LatitudeY(sy);
      String str;
      if (!end) {
        str=" Start point (to close) not found : end_x = {0}, end_y = {1}, start_x = {2}, start_y = {3} : bounds {4} {5} - {6} {7}";
        System.err.println(MessageFormat.format(dbId + str,dx,dy,dsx,dsy,leftX + "",topY + "",rightX + "",bottomY + ""));
      }
      if (!st) {
        str=" End not found : end_x = {0}, end_y = {1}, start_x = {2}, start_y = {3} : bounds {4} {5} - {6} {7}";
        System.err.println(MessageFormat.format(dbId + str,dx,dy,dsx,dsy,leftX + "",topY + "",rightX + "",bottomY + ""));
      }
    }
 else {
      nonvisitedRings.add(j);
    }
  }
  for (int j=0; j < incompletedRings.size(); j++) {
    TLongList i=incompletedRings.get(j);
    if (!nonvisitedRings.contains(j)) {
      continue;
    }
    int x=(int)(i.get(i.size() - 1) >> 32);
    int y=(int)(i.get(i.size() - 1) & mask);
    int EVAL_DELTA=6 << (23 - zoom);
    int UNDEFINED_MIN_DIFF=-1 - EVAL_DELTA;
    while (true) {
      int st=0;
      if (y == topY) {
        st=0;
      }
 else       if (x == rightX) {
        st=1;
      }
 else       if (y == bottomY) {
        st=2;
      }
 else       if (x == leftX) {
        st=3;
      }
      int nextRingIndex=-1;
      for (int h=st; h < st + 4; h++) {
        int mindiff=UNDEFINED_MIN_DIFF;
        for (        Integer ni : nonvisitedRings) {
          TLongList cni=incompletedRings.get(ni);
          int csx=(int)(cni.get(0) >> 32);
          int csy=(int)(cni.get(0) & mask);
          if (h % 4 == 0) {
            if (csy == topY && csx >= safelyAddDelta(x,-EVAL_DELTA)) {
              if (mindiff == UNDEFINED_MIN_DIFF || (csx - x) <= mindiff) {
                mindiff=(csx - x);
                nextRingIndex=ni;
              }
            }
          }
 else           if (h % 4 == 1) {
            if (csx == rightX && csy >= safelyAddDelta(y,-EVAL_DELTA)) {
              if (mindiff == UNDEFINED_MIN_DIFF || (csy - y) <= mindiff) {
                mindiff=(csy - y);
                nextRingIndex=ni;
              }
            }
          }
 else           if (h % 4 == 2) {
            if (csy == bottomY && csx <= safelyAddDelta(x,EVAL_DELTA)) {
              if (mindiff == UNDEFINED_MIN_DIFF || (x - csx) <= mindiff) {
                mindiff=(x - csx);
                nextRingIndex=ni;
              }
            }
          }
 else           if (h % 4 == 3) {
            if (csx == leftX && csy <= safelyAddDelta(y,EVAL_DELTA)) {
              if (mindiff == UNDEFINED_MIN_DIFF || (y - csy) <= mindiff) {
                mindiff=(y - csy);
                nextRingIndex=ni;
              }
            }
          }
        }
        if (mindiff != UNDEFINED_MIN_DIFF) {
          break;
        }
 else {
          if (h % 4 == 0) {
            y=topY;
            x=rightX;
          }
 else           if (h % 4 == 1) {
            y=bottomY;
            x=rightX;
          }
 else           if (h % 4 == 2) {
            y=bottomY;
            x=leftX;
          }
 else           if (h % 4 == 3) {
            y=topY;
            x=leftX;
          }
          i.add((((long)x) << 32) | ((long)y));
        }
      }
      if (nextRingIndex == -1) {
      }
 else       if (nextRingIndex == j) {
        i.add(i.get(0));
        nonvisitedRings.remove(j);
        break;
      }
 else {
        i.addAll(incompletedRings.get(nextRingIndex));
        nonvisitedRings.remove(nextRingIndex);
        x=(int)(i.get(i.size() - 1) >> 32);
        y=(int)(i.get(i.size() - 1) & mask);
      }
    }
    completedRings.add(i);
  }
}
