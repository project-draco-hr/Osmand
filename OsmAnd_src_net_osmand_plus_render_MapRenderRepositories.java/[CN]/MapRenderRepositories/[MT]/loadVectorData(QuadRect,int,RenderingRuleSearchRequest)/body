{
  double cBottomLatitude=dataBox.bottom;
  double cTopLatitude=dataBox.top;
  double cLeftLongitude=dataBox.left;
  double cRightLongitude=dataBox.right;
  long now=System.currentTimeMillis();
  System.gc();
  ArrayList<BinaryMapDataObject> tempResult=new ArrayList<BinaryMapDataObject>();
  ArrayList<BinaryMapDataObject> basemapResult=new ArrayList<BinaryMapDataObject>();
  int[] count=new int[]{0};
  boolean[] ocean=new boolean[]{false};
  boolean[] land=new boolean[]{false};
  List<BinaryMapDataObject> coastLines=new ArrayList<BinaryMapDataObject>();
  List<BinaryMapDataObject> basemapCoastLines=new ArrayList<BinaryMapDataObject>();
  int leftX=MapUtils.get31TileNumberX(cLeftLongitude);
  int rightX=MapUtils.get31TileNumberX(cRightLongitude);
  int bottomY=MapUtils.get31TileNumberY(cBottomLatitude);
  int topY=MapUtils.get31TileNumberY(cTopLatitude);
  TLongSet ids=new TLongHashSet();
  MapIndex mi=readMapObjectsForRendering(zoom,renderingReq,tempResult,basemapResult,ids,count,ocean,land,coastLines,basemapCoastLines,leftX,rightX,bottomY,topY);
  int renderRouteDataFile=0;
  if (renderingReq.searchRenderingAttribute("showRoadMapsAttribute")) {
    renderRouteDataFile=renderingReq.getIntPropertyValue(renderingReq.ALL.R_ATTR_INT_VALUE);
  }
  if (checkWhetherInterrupted()) {
    return false;
  }
  boolean objectsFromMapSectionRead=tempResult.size() > 0;
  if (renderRouteDataFile >= 0 && zoom >= zoomOnlyForBasemaps) {
    searchRequest=BinaryMapIndexReader.buildSearchRequest(leftX,rightX,topY,bottomY,zoom,null);
    for (    BinaryMapIndexReader c : files.values()) {
      if (c.getMapIndexes().size() == 0 || renderRouteDataFile == 1) {
        readRouteDataAsMapObjects(searchRequest,c,tempResult,ids);
      }
    }
    log.info(String.format("Route objects %s",tempResult.size() + ""));
  }
  String coastlineTime="";
  boolean addBasemapCoastlines=true;
  boolean emptyData=zoom > zoomOnlyForBasemaps && tempResult.isEmpty() && coastLines.isEmpty();
  boolean basemapMissing=zoom <= zoomOnlyForBasemaps && basemapCoastLines.isEmpty() && mi == null;
  boolean detailedLandData=zoom >= zoomForBaseRouteRendering && tempResult.size() > 0 && objectsFromMapSectionRead;
  if (!coastLines.isEmpty()) {
    long ms=System.currentTimeMillis();
    boolean coastlinesWereAdded=processCoastlines(coastLines,leftX,rightX,bottomY,topY,zoom,basemapCoastLines.isEmpty(),true,tempResult);
    addBasemapCoastlines=(!coastlinesWereAdded && !detailedLandData) || zoom <= zoomOnlyForBasemaps;
    coastlineTime="(coastline " + (System.currentTimeMillis() - ms) + " ms )";
  }
 else {
    addBasemapCoastlines=!detailedLandData;
  }
  if (addBasemapCoastlines) {
    long ms=System.currentTimeMillis();
    boolean coastlinesWereAdded=processCoastlines(basemapCoastLines,leftX,rightX,bottomY,topY,zoom,true,true,tempResult);
    addBasemapCoastlines=!coastlinesWereAdded;
    coastlineTime="(coastline " + (System.currentTimeMillis() - ms) + " ms )";
  }
  if (addBasemapCoastlines && mi != null) {
    BinaryMapDataObject o=new BinaryMapDataObject(new int[]{leftX,topY,rightX,topY,rightX,bottomY,leftX,bottomY,leftX,topY},new int[]{ocean[0] && !land[0] ? mi.coastlineEncodingType : (mi.landEncodingType)},null,-1);
    o.setMapIndex(mi);
    tempResult.add(o);
  }
  if (emptyData || basemapMissing) {
    MapIndex mapIndex;
    if (!tempResult.isEmpty()) {
      mapIndex=tempResult.get(0).getMapIndex();
    }
 else {
      mapIndex=new MapIndex();
      mapIndex.initMapEncodingRule(0,1,"natural","coastline");
      mapIndex.initMapEncodingRule(0,2,"name","");
    }
  }
  if (zoom <= zoomOnlyForBasemaps || emptyData) {
    tempResult.addAll(basemapResult);
  }
  if (count[0] > 0) {
    log.info(String.format("BLat=%s, TLat=%s, LLong=%s, RLong=%s, zoom=%s",cBottomLatitude,cTopLatitude,cLeftLongitude,cRightLongitude,zoom));
    log.info(String.format("Searching: %s ms  %s (%s results found)",System.currentTimeMillis() - now,coastlineTime,count[0]));
  }
  cObjects=tempResult;
  cObjectsBox=dataBox;
  return true;
}
