{
  List<TLongList> completedRings=new ArrayList<TLongList>();
  List<TLongList> uncompletedRings=new ArrayList<TLongList>();
  MapIndex mapIndex=null;
  long dbId=0;
  for (  BinaryMapDataObject o : coastLines) {
    int len=o.getPointsLength();
    if (len < 2) {
      continue;
    }
    mapIndex=o.getMapIndex();
    dbId=o.getId() >> 1;
    TLongList coordinates=new TLongArrayList(o.getPointsLength() / 2);
    int px=o.getPoint31XTile(0);
    int py=o.getPoint31YTile(0);
    int x=px;
    int y=py;
    boolean pinside=leftX <= x && x <= rightX && y >= topY && y <= bottomY;
    if (pinside) {
      coordinates.add(combine2Points(x,y));
    }
    for (int i=1; i < len; i++) {
      x=o.getPoint31XTile(i);
      y=o.getPoint31YTile(i);
      boolean inside=leftX <= x && x <= rightX && y >= topY && y <= bottomY;
      boolean lineEnded=calculateLineCoordinates(inside,x,y,pinside,px,py,leftX,rightX,bottomY,topY,coordinates);
      if (lineEnded) {
        combineMultipolygonLine(completedRings,uncompletedRings,coordinates);
        coordinates=new TLongArrayList();
      }
      px=x;
      py=y;
      pinside=inside;
    }
    combineMultipolygonLine(completedRings,uncompletedRings,coordinates);
  }
  if (completedRings.size() == 0 && uncompletedRings.size() == 0) {
    return false;
  }
  if (uncompletedRings.size() > 0) {
    unifyIncompletedRings(uncompletedRings,completedRings,leftX,rightX,bottomY,topY,dbId,zoom);
  }
  long mask=0xffffffffL;
  for (int i=0; i < uncompletedRings.size(); i++) {
    TLongList ring=uncompletedRings.get(i);
    int[] coordinates=new int[ring.size() * 2];
    for (int j=0; j < ring.size(); j++) {
      coordinates[j * 2]=(int)(ring.get(j) >> 32);
      coordinates[j * 2 + 1]=(int)(ring.get(j) & mask);
    }
    BinaryMapDataObject o=new BinaryMapDataObject(coordinates,new int[]{mapIndex.coastlineBrokenEncodingType},null,dbId);
    o.setMapIndex(mapIndex);
    result.add(o);
  }
  if (!doNotAddIfIncompleted && uncompletedRings.size() > 0) {
    return false;
  }
  boolean clockwiseFound=false;
  for (int i=0; i < completedRings.size(); i++) {
    TLongList ring=completedRings.get(i);
    int[] coordinates=new int[ring.size() * 2];
    for (int j=0; j < ring.size(); j++) {
      coordinates[j * 2]=(int)(ring.get(j) >> 32);
      coordinates[j * 2 + 1]=(int)(ring.get(j) & mask);
    }
    boolean clockwise=MapAlgorithms.isClockwiseWay(ring);
    clockwiseFound=clockwiseFound || clockwise;
    BinaryMapDataObject o=new BinaryMapDataObject(coordinates,new int[]{clockwise ? mapIndex.coastlineEncodingType : mapIndex.landEncodingType},null,dbId);
    o.setMapIndex(mapIndex);
    o.setArea(true);
    result.add(o);
  }
  if (!clockwiseFound && uncompletedRings.size() == 0) {
    BinaryMapDataObject o=new BinaryMapDataObject(new int[]{leftX,topY,rightX,topY,rightX,bottomY,leftX,bottomY,leftX,topY},new int[]{mapIndex.coastlineEncodingType},null,dbId);
    o.setMapIndex(mapIndex);
    log.info("!!! Isolated islands !!!");
    result.add(o);
  }
  return true;
}
