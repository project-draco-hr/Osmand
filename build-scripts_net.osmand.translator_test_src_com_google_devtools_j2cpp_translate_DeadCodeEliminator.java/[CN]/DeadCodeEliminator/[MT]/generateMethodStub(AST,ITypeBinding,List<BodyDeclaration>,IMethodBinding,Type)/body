{
  MethodDeclaration decl=ast.newMethodDeclaration();
  decl.setName(ast.newSimpleName(method.getName()));
  decl.setReturnType2(returnType);
  for (  ITypeBinding typeParamBinding : method.getTypeParameters()) {
    TypeParameter typeParam=ast.newTypeParameter();
    typeParam.setName(ast.newSimpleName(typeParamBinding.getName()));
    for (    ITypeBinding typeBound : typeParamBinding.getTypeBounds()) {
      typeParam.typeBounds().add(createType(ast,scope,typeBound));
    }
    decl.typeParameters().add(typeParam);
  }
  int paramCount=0;
  for (  ITypeBinding paramBinding : method.getParameterTypes()) {
    SingleVariableDeclaration var=ast.newSingleVariableDeclaration();
    String paramName="arg" + (paramCount++);
    var.setName(ast.newSimpleName(paramName));
    var.setType(createType(ast,scope,paramBinding));
    decl.parameters().add(var);
  }
  int modifiers=method.getModifiers();
  decl.modifiers().add(ast.newModifier(ModifierKeyword.PUBLIC_KEYWORD));
  if (Modifier.isStrictfp(modifiers)) {
    decl.modifiers().add(ast.newModifier(Modifier.ModifierKeyword.STRICTFP_KEYWORD));
  }
  if (Modifier.isSynchronized(modifiers)) {
    decl.modifiers().add(ast.newModifier(Modifier.ModifierKeyword.SYNCHRONIZED_KEYWORD));
  }
  Block block=ast.newBlock();
  decl.setBody(block);
  addAssertionError(block);
  scopeBody.add(decl);
  generatedMethods.add(decl);
}
