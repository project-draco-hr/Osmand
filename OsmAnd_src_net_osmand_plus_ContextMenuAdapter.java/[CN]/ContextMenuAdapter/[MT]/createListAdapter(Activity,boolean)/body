{
  final int padding=(int)(12 * activity.getResources().getDisplayMetrics().density + 0.5f);
  final int layoutId=defaultLayoutId;
  ListAdapter listadapter=new ArrayAdapter<String>(activity,layoutId,R.id.title,getItemNames()){
    @Override public View getView(    final int position,    View convertView,    ViewGroup parent){
      View v=convertView;
      Integer lid=getLayoutId(position);
      if (v == null || (v.getTag() != lid)) {
        v=activity.getLayoutInflater().inflate(lid,null);
        v.setTag(lid);
      }
      TextView tv=(TextView)v.findViewById(R.id.title);
      tv.setText(getItemName(position));
      if (getImageId(position,holoLight) != 0) {
        tv.setCompoundDrawablesWithIntrinsicBounds(getImageId(position,holoLight),0,0,0);
      }
 else {
        tv.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_action_transparent,0,0,0);
      }
      tv.setCompoundDrawablePadding(padding);
      if (isCategory(position)) {
        tv.setTypeface(Typeface.DEFAULT_BOLD);
      }
 else {
        tv.setTypeface(null);
      }
      final CheckBox ch=((CheckBox)v.findViewById(R.id.check_item));
      if (selectedList.get(position) != -1) {
        ch.setOnCheckedChangeListener(null);
        ch.setVisibility(View.VISIBLE);
        ch.setSelected(selectedList.get(position) > 0);
        ch.setOnCheckedChangeListener(new OnCheckedChangeListener(){
          @Override public void onCheckedChanged(          CompoundButton buttonView,          boolean isChecked){
            OnContextMenuClick ca=getClickAdapter(position);
            if (ca != null) {
              ca.onContextMenuClick((int)getItemId(position),position,isChecked);
            }
          }
        }
);
        ch.setVisibility(View.VISIBLE);
      }
 else {
        ch.setVisibility(View.GONE);
      }
      return v;
    }
  }
;
  return listadapter;
}
