{
  Integer lid=getLayoutId(position);
  if (lid == R.layout.mode_toggles) {
    final Set<ApplicationMode> selected=new LinkedHashSet<ApplicationMode>();
    return AppModeDialog.prepareAppModeDrawerView(activity,visibleModes,selected,allModes,true,new View.OnClickListener(){
      @Override public void onClick(      View view){
        if (selected.size() > 0) {
          app.getSettings().APPLICATION_MODE.set(selected.iterator().next());
          notifyDataSetChanged();
        }
        if (changeAppModeListener != null) {
          changeAppModeListener.onClick(allModes.getResult());
        }
      }
    }
);
  }
  if (convertView == null || (!lid.equals(convertView.getTag()))) {
    convertView=activity.getLayoutInflater().inflate(lid,parent,false);
    AndroidUtils.setListItemBackground(ctx,convertView,!holoLight);
    convertView.setTag(lid);
  }
  TextView tv=(TextView)convertView.findViewById(R.id.title);
  if (!isCategory(position)) {
    AndroidUtils.setTextPrimaryColor(ctx,tv,!holoLight);
  }
  tv.setText(isCategory(position) ? getItemName(position).toUpperCase() : getItemName(position));
  if (layoutId == R.layout.simple_list_menu_item) {
    int color=activity.getResources().getColor(holoLight ? R.color.icon_color : R.color.dashboard_subheader_text_dark);
    Drawable imageId=app.getIconsCache().getPaintedContentIcon(iconListLight.get(position),color);
    float density=activity.getResources().getDisplayMetrics().density;
    int paddingInPixels=(int)(24 * density);
    int drawableSizeInPixels=(int)(24 * density);
    imageId.setBounds(0,0,drawableSizeInPixels,drawableSizeInPixels);
    tv.setCompoundDrawables(imageId,null,null,null);
    tv.setCompoundDrawablePadding(paddingInPixels);
  }
 else {
    Drawable imageId=getImage(app,position,holoLight);
    if (imageId != null) {
      ((ImageView)convertView.findViewById(R.id.icon)).setImageDrawable(imageId);
      convertView.findViewById(R.id.icon).setVisibility(View.VISIBLE);
    }
 else     if (convertView.findViewById(R.id.icon) != null) {
      convertView.findViewById(R.id.icon).setVisibility(View.GONE);
    }
  }
  if (isCategory(position)) {
    tv.setTypeface(Typeface.DEFAULT_BOLD);
  }
 else {
    tv.setTypeface(null);
  }
  if (convertView.findViewById(R.id.toggle_item) != null) {
    final CompoundButton ch=(CompoundButton)convertView.findViewById(R.id.toggle_item);
    if (selectedList.get(position) != -1) {
      ch.setOnCheckedChangeListener(null);
      ch.setVisibility(View.VISIBLE);
      ch.setChecked(selectedList.get(position) > 0);
      final ArrayAdapter<String> la=this;
      final OnCheckedChangeListener listener=new OnCheckedChangeListener(){
        @Override public void onCheckedChanged(        CompoundButton buttonView,        boolean isChecked){
          OnContextMenuClick ca=getClickAdapter(position);
          selectedList.set(position,isChecked ? 1 : 0);
          if (ca != null) {
            ca.onContextMenuClick(la,getElementId(position),position,isChecked);
          }
        }
      }
;
      ch.setOnCheckedChangeListener(listener);
      ch.setVisibility(View.VISIBLE);
    }
 else     if (ch != null) {
      ch.setVisibility(View.GONE);
    }
  }
  if (convertView.findViewById(R.id.seekbar) != null) {
    SeekBar seekBar=(SeekBar)convertView.findViewById(R.id.seekbar);
    if (progressList.get(position) != -1) {
      seekBar.setProgress(getProgress(position));
      seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
        @Override public void onProgressChanged(        SeekBar seekBar,        int progress,        boolean fromUser){
          OnIntegerValueChangedListener listener=getIntegerLister(position);
          progressList.set(position,progress);
          if (listener != null && fromUser) {
            listener.onIntegerValueChangedListener(progress);
          }
        }
        @Override public void onStartTrackingTouch(        SeekBar seekBar){
        }
        @Override public void onStopTrackingTouch(        SeekBar seekBar){
        }
      }
);
      seekBar.setVisibility(View.VISIBLE);
    }
 else     if (seekBar != null) {
      seekBar.setVisibility(View.GONE);
    }
  }
  if (convertView.findViewById(R.id.ProgressBar) != null) {
    ProgressBar bar=(ProgressBar)convertView.findViewById(R.id.ProgressBar);
    if (loadingList.get(position) == 1) {
      bar.setVisibility(View.VISIBLE);
    }
 else {
      bar.setVisibility(View.INVISIBLE);
    }
  }
  String itemDescr=getItemDescr(position);
  if (convertView.findViewById(R.id.description) != null) {
    ((TextView)convertView.findViewById(R.id.description)).setText(itemDescr);
  }
  return convertView;
}
