{
  Integer lid=getLayoutId(position);
  if (lid == R.layout.mode_toggles) {
    final Set<ApplicationMode> selected=new LinkedHashSet<ApplicationMode>();
    return AppModeDialog.prepareAppModeDrawerView(activity,visibleModes,selected,allModes,new View.OnClickListener(){
      @Override public void onClick(      View view){
        if (selected.size() > 0) {
          app.getSettings().APPLICATION_MODE.set(selected.iterator().next());
          notifyDataSetChanged();
        }
        if (changeAppModeListener != null) {
          changeAppModeListener.onClick(allModes.getResult());
        }
      }
    }
);
  }
  if (convertView == null || (convertView.getTag() != lid)) {
    convertView=activity.getLayoutInflater().inflate(lid,null);
    convertView.setTag(lid);
  }
  TextView tv=(TextView)convertView.findViewById(R.id.title);
  tv.setText(isCategory(position) ? getItemName(position).toUpperCase() : getItemName(position));
  Drawable imageId=getImage(app,position,holoLight);
  if (imageId != null) {
    if (layoutId == R.layout.simple_list_menu_item) {
      float density=activity.getResources().getDisplayMetrics().density;
      int paddingInPixels=(int)(24 * density);
      int drawableSizeInPixels=(int)(32 * density);
      imageId.setBounds(0,0,drawableSizeInPixels,drawableSizeInPixels);
      tv.setCompoundDrawables(imageId,null,null,null);
      tv.setCompoundDrawablePadding(paddingInPixels);
    }
 else {
      ((ImageView)convertView.findViewById(R.id.icon)).setImageDrawable(imageId);
      convertView.findViewById(R.id.icon).setVisibility(View.VISIBLE);
    }
  }
 else   if (convertView.findViewById(R.id.icon) != null) {
    convertView.findViewById(R.id.icon).setVisibility(View.GONE);
  }
  if (isCategory(position)) {
    tv.setTypeface(Typeface.DEFAULT_BOLD);
  }
 else {
    tv.setTypeface(null);
  }
  if (convertView.findViewById(R.id.check_item) != null) {
    final CompoundButton ch=(CompoundButton)convertView.findViewById(R.id.check_item);
    if (selectedList.get(position) != -1) {
      ch.setOnCheckedChangeListener(null);
      ch.setVisibility(View.VISIBLE);
      ch.setChecked(selectedList.get(position) > 0);
      final ArrayAdapter<String> la=this;
      final OnCheckedChangeListener listener=new OnCheckedChangeListener(){
        @Override public void onCheckedChanged(        CompoundButton buttonView,        boolean isChecked){
          OnContextMenuClick ca=getClickAdapter(position);
          selectedList.set(position,isChecked ? 1 : 0);
          if (ca != null) {
            ca.onContextMenuClick(la,getElementId(position),position,isChecked);
          }
        }
      }
;
      ch.setOnCheckedChangeListener(listener);
      ch.setVisibility(View.VISIBLE);
    }
 else     if (ch != null) {
      ch.setVisibility(View.GONE);
    }
  }
  if (convertView.findViewById(R.id.ProgressBar) != null) {
    ProgressBar bar=(ProgressBar)convertView.findViewById(R.id.ProgressBar);
    if (loadingList.get(position) == 1) {
      bar.setVisibility(View.VISIBLE);
    }
 else {
      bar.setVisibility(View.INVISIBLE);
    }
  }
  String itemDescr=getItemDescr(position);
  if (convertView.findViewById(R.id.descr) != null) {
    ((TextView)convertView.findViewById(R.id.descr)).setText(itemDescr);
  }
  return convertView;
}
