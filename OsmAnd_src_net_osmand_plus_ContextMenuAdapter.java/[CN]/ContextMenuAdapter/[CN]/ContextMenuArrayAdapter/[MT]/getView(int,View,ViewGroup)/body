{
  final ContextMenuItem item=getItem(position);
  int layoutId=item.getLayout();
  layoutId=layoutId != ContextMenuItem.INVALID_ID ? layoutId : DEFAULT_LAYOUT_ID;
  if (layoutId == R.layout.mode_toggles) {
    final Set<ApplicationMode> selected=new LinkedHashSet<>();
    return AppModeDialog.prepareAppModeDrawerView((Activity)getContext(),selected,true,new View.OnClickListener(){
      @Override public void onClick(      View view){
        if (selected.size() > 0) {
          app.getSettings().APPLICATION_MODE.set(selected.iterator().next());
          notifyDataSetChanged();
        }
        if (changeAppModeListener != null) {
          changeAppModeListener.onClick();
        }
      }
    }
);
  }
  if (convertView == null || !(convertView.getTag() instanceof Integer) || (layoutId != (Integer)convertView.getTag())) {
    int themeRes=holoLight ? R.style.OsmandLightTheme : R.style.OsmandDarkTheme;
    convertView=View.inflate(new ContextThemeWrapper(getContext(),themeRes),layoutId,null);
    convertView.setTag(layoutId);
  }
  TextView tv=(TextView)convertView.findViewById(R.id.title);
  tv.setText(item.getTitle());
  if (this.layoutId == R.layout.simple_list_menu_item) {
    @ColorRes int color=holoLight ? R.color.icon_color : R.color.dashboard_subheader_text_dark;
    Drawable drawable=mIconsCache.getIcon(item.getIcon(),color);
    float density=getContext().getResources().getDisplayMetrics().density;
    int paddingInPixels=(int)(24 * density);
    int drawableSizeInPixels=(int)(24 * density);
    drawable.setBounds(0,0,drawableSizeInPixels,drawableSizeInPixels);
    tv.setCompoundDrawables(drawable,null,null,null);
    tv.setCompoundDrawablePadding(paddingInPixels);
  }
 else {
    if (item.getIcon() != ContextMenuItem.INVALID_ID) {
      Drawable drawable=mIconsCache.getIcon(item.getIcon(),item.getThemedColorRes(getContext()));
      ((AppCompatImageView)convertView.findViewById(R.id.icon)).setImageDrawable(drawable);
      convertView.findViewById(R.id.icon).setVisibility(View.VISIBLE);
    }
 else     if (convertView.findViewById(R.id.icon) != null) {
      convertView.findViewById(R.id.icon).setVisibility(View.GONE);
    }
  }
  @DrawableRes int secondaryDrawable=item.getSecondaryIcon();
  if (secondaryDrawable != ContextMenuItem.INVALID_ID) {
    @ColorRes int colorRes=holoLight ? R.color.icon_color : R.color.dashboard_subheader_text_dark;
    Drawable drawable=mIconsCache.getIcon(item.getSecondaryIcon(),colorRes);
    ImageView imageView=(ImageView)convertView.findViewById(R.id.secondary_icon);
    imageView.setImageDrawable(drawable);
    imageView.setVisibility(View.VISIBLE);
  }
 else {
    ImageView imageView=(ImageView)convertView.findViewById(R.id.secondary_icon);
    if (imageView != null) {
      imageView.setVisibility(View.GONE);
    }
  }
  if (convertView.findViewById(R.id.toggle_item) != null && !item.isCategory()) {
    final CompoundButton ch=(CompoundButton)convertView.findViewById(R.id.toggle_item);
    if (item.getSelected() != null) {
      ch.setOnCheckedChangeListener(null);
      ch.setVisibility(View.VISIBLE);
      ch.setChecked(item.getSelected());
      final ArrayAdapter<ContextMenuItem> la=this;
      final OnCheckedChangeListener listener=new OnCheckedChangeListener(){
        @Override public void onCheckedChanged(        CompoundButton buttonView,        boolean isChecked){
          ItemClickListener ca=item.getItemClickListener();
          item.setSelected(isChecked);
          if (ca != null) {
            ca.onContextMenuClick(la,item.getTitleId(),position,isChecked);
          }
        }
      }
;
      ch.setOnCheckedChangeListener(listener);
      ch.setVisibility(View.VISIBLE);
    }
 else     if (ch != null) {
      ch.setVisibility(View.GONE);
    }
  }
  if (convertView.findViewById(R.id.seekbar) != null) {
    SeekBar seekBar=(SeekBar)convertView.findViewById(R.id.seekbar);
    if (item.getProgress() != ContextMenuItem.INVALID_ID) {
      seekBar.setProgress(item.getProgress());
      seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
        @Override public void onProgressChanged(        SeekBar seekBar,        int progress,        boolean fromUser){
          OnIntegerValueChangedListener listener=item.getIntegerListener();
          item.setProgress(progress);
          if (listener != null && fromUser) {
            listener.onIntegerValueChangedListener(progress);
          }
        }
        @Override public void onStartTrackingTouch(        SeekBar seekBar){
        }
        @Override public void onStopTrackingTouch(        SeekBar seekBar){
        }
      }
);
      seekBar.setVisibility(View.VISIBLE);
    }
 else     if (seekBar != null) {
      seekBar.setVisibility(View.GONE);
    }
  }
  if (convertView.findViewById(R.id.ProgressBar) != null) {
    ProgressBar bar=(ProgressBar)convertView.findViewById(R.id.ProgressBar);
    if (item.isLoading()) {
      bar.setVisibility(View.VISIBLE);
    }
 else {
      bar.setVisibility(View.INVISIBLE);
    }
  }
  View descriptionTextView=convertView.findViewById(R.id.description);
  if (descriptionTextView != null) {
    String itemDescr=item.getDescription();
    if (itemDescr != null) {
      ((TextView)descriptionTextView).setText(itemDescr);
      descriptionTextView.setVisibility(View.VISIBLE);
    }
 else {
      descriptionTextView.setVisibility(View.GONE);
    }
  }
  View dividerView=convertView.findViewById(R.id.divider);
  if (dividerView != null) {
    if (getCount() - 1 == position || getItem(position + 1).isCategory()) {
      dividerView.setVisibility(View.GONE);
    }
 else {
      dividerView.setVisibility(View.VISIBLE);
    }
  }
  return convertView;
}
