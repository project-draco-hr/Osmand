{
  try {
    int tileSize=getTileSize();
    if (images != null) {
      for (int i=0; i < images.length; i++) {
        for (int j=0; j < images[i].length; j++) {
        }
      }
    }
    double xTileLeft=getXTile() - getCenterPointX() / tileSize;
    double xTileRight=getXTile() + getCenterPointX() / tileSize;
    double yTileUp=getYTile() - getCenterPointY() / tileSize;
    double yTileDown=getYTile() + getCenterPointY() / tileSize;
    xStartingImage=-(int)((xTileLeft - Math.floor(xTileLeft)) * tileSize);
    yStartingImage=-(int)((yTileUp - Math.floor(yTileUp)) * tileSize);
    if (loadNecessaryImages) {
      downloader.refuseAllPreviousRequests();
    }
    int tileXCount=((int)xTileRight - (int)xTileLeft + 1);
    int tileYCount=((int)yTileDown - (int)yTileUp + 1);
    images=new BufferedImage[tileXCount][tileYCount];
    for (int i=0; i < images.length; i++) {
      for (int j=0; j < images[i].length; j++) {
        int x=(int)xTileLeft + i;
        int y=(int)yTileUp + j;
        images[i][j]=getImageFor(x,y,zoom,loadNecessaryImages);
      }
    }
    for (    MapPanelLayer l : layers) {
      l.prepareToDraw();
    }
    repaint();
  }
 catch (  IOException e) {
    log.error("Eror reading png preparing images");
  }
}
