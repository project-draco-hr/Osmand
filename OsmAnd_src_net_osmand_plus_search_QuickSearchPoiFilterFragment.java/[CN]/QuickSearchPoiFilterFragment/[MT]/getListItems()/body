{
  OsmandApplication app=getMyApplication();
  MapPoiTypes poiTypes=app.getPoiTypes();
  int groupId=0;
  List<PoiFilterListItem> items=new ArrayList<>();
  Map<String,PoiType> poiAdditionals=filter.getPoiAdditionals();
  Set<String> excludedPoiAdditionalCategories=getExcludedPoiAdditionalCategories();
  List<PoiType> otherAdditionalCategories=poiTypes.getOtherMapCategory().getPoiAdditionalsCategorized();
  if (!excludedPoiAdditionalCategories.contains("opening_hours")) {
    items.add(new PoiFilterListItem(PoiFilterListItemType.DIVIDER,0,null,-1,false,false,false,null,null));
    String keyNameOpen=app.getString(R.string.shared_string_is_open).replace(' ','_').toLowerCase();
    items.add(new PoiFilterListItem(PoiFilterListItemType.SWITCH_ITEM,R.drawable.ic_action_time,app.getString(R.string.shared_string_is_open),++groupId,false,false,selectedPoiAdditionals.contains(keyNameOpen),null,keyNameOpen));
    String keyNameOpen24=app.getString(R.string.shared_string_is_open_24_7).replace(' ','_').toLowerCase();
    items.add(new PoiFilterListItem(PoiFilterListItemType.SWITCH_ITEM,0,app.getString(R.string.shared_string_is_open_24_7),groupId,false,false,selectedPoiAdditionals.contains(keyNameOpen24),null,keyNameOpen24));
  }
  if (poiAdditionals != null) {
    Map<String,List<PoiType>> additionalsMap=new TreeMap<>(String.CASE_INSENSITIVE_ORDER);
    extractPoiAdditionals(poiAdditionals.values(),additionalsMap,excludedPoiAdditionalCategories,false);
    extractPoiAdditionals(otherAdditionalCategories,additionalsMap,excludedPoiAdditionalCategories,false);
    if (additionalsMap.size() > 0) {
      for (      Entry<String,List<PoiType>> entry : additionalsMap.entrySet()) {
        String category=entry.getKey();
        String categoryLocalizedName=poiTypes.getPoiTranslation(category);
        boolean expanded=!collapsedCategories.contains(category);
        boolean showAll=showAllCategories.contains(category);
        items.add(new PoiFilterListItem(PoiFilterListItemType.DIVIDER,0,null,-1,false,false,false,null,null));
        String categoryIconStr=poiTypes.getPoiAdditionalCategoryIcon(category);
        int categoryIconId=0;
        if (!Algorithms.isEmpty(categoryIconStr)) {
          categoryIconId=RenderingIcons.getBigIconResourceId(categoryIconStr);
        }
        if (categoryIconId == 0) {
          categoryIconId=getResources().getIdentifier("mx_" + category,"drawable",app.getPackageName());
        }
        if (categoryIconId == 0) {
          categoryIconId=R.drawable.ic_action_folder_stroke;
        }
        items.add(new PoiFilterListItem(PoiFilterListItemType.GROUP_HEADER,categoryIconId,categoryLocalizedName,++groupId,true,expanded,false,category,null));
        List<PoiType> categoryPoiAdditionals=new ArrayList<>(entry.getValue());
        Collections.sort(categoryPoiAdditionals,new Comparator<PoiType>(){
          @Override public int compare(          PoiType p1,          PoiType p2){
            String firstPoiTypeTranslation=poiAdditionalsTranslations.get(p1);
            String secondPoiTypeTranslation=poiAdditionalsTranslations.get(p2);
            if (firstPoiTypeTranslation != null && secondPoiTypeTranslation != null) {
              return firstPoiTypeTranslation.compareTo(secondPoiTypeTranslation);
            }
 else {
              return 0;
            }
          }
        }
);
        for (        PoiType poiType : categoryPoiAdditionals) {
          String keyName=poiType.getKeyName().replace('_',':').toLowerCase();
          String translation=poiAdditionalsTranslations.get(poiType);
          items.add(new PoiFilterListItem(PoiFilterListItemType.CHECKBOX_ITEM,0,translation,groupId,false,false,selectedPoiAdditionals.contains(keyName),category,keyName));
        }
        if (!showAll && categoryPoiAdditionals.size() > 0) {
          items.add(new PoiFilterListItem(PoiFilterListItemType.BUTTON_ITEM,0,app.getString(R.string.shared_string_show_all).toUpperCase(),groupId,false,false,false,category,null));
        }
      }
    }
  }
  return items;
}
