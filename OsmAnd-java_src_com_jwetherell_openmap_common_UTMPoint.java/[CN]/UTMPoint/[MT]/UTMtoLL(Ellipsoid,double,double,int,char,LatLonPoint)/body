{
  if (zoneNumber < 0 || zoneNumber > 60) {
    return null;
  }
  double k0=0.9996;
  double a=ellip.radius;
  double eccSquared=ellip.eccsq;
  double eccPrimeSquared;
  double e1=(1 - Math.sqrt(1 - eccSquared)) / (1 + Math.sqrt(1 - eccSquared));
  double N1, T1, C1, R1, D, M;
  double LongOrigin;
  double mu, phi1Rad;
  double x=UTMEasting - 500000.0d;
  double y=UTMNorthing;
  if (zoneLetter == 'S') {
    y-=10000000.0d;
  }
  LongOrigin=(zoneNumber - 1) * 6 - 180 + 3;
  eccPrimeSquared=(eccSquared) / (1 - eccSquared);
  M=y / k0;
  mu=M / (a * (1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared* eccSquared / 256));
  phi1Rad=mu + (3 * e1 / 2 - 27 * e1 * e1* e1 / 32) * Math.sin(2 * mu) + (21 * e1 * e1 / 16 - 55 * e1 * e1* e1* e1 / 32) * Math.sin(4 * mu) + (151 * e1 * e1* e1 / 96) * Math.sin(6 * mu);
  N1=a / Math.sqrt(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));
  T1=Math.tan(phi1Rad) * Math.tan(phi1Rad);
  C1=eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);
  R1=a * (1 - eccSquared) / Math.pow(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad),1.5);
  D=x / (N1 * k0);
  double lat=phi1Rad - (N1 * Math.tan(phi1Rad) / R1) * (D * D / 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D* D* D / 24 + (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D* D* D* D* D / 720);
  lat=ProjMath.radToDeg(lat);
  double lon=(D - (1 + 2 * T1 + C1) * D * D* D / 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D* D* D* D / 120) / Math.cos(phi1Rad);
  lon=LongOrigin + ProjMath.radToDeg(lon);
  if (llpoint != null) {
    llpoint.setLatLon(lat,lon);
    return llpoint;
  }
  return new LatLonPoint(lat,lon);
}
