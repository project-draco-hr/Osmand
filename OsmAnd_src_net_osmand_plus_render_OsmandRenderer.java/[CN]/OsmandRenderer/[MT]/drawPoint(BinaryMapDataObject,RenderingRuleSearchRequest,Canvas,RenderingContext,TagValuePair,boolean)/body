{
  if (render == null || pair == null) {
    return;
  }
  render.setInitialTagValueZoom(pair.tag,pair.value,rc.zoom,obj);
  render.search(RenderingRulesStorage.POINT_RULES);
  String resId=render.getStringPropertyValue(render.ALL.R_ICON);
  if (resId == null && !renderText) {
    return;
  }
  int len=obj.getPointsLength();
  rc.visible++;
  PointF ps=new PointF(0,0);
  for (int i=0; i < len; i++) {
    PointF p=calcPoint(obj,i,rc);
    ps.x+=p.x;
    ps.y+=p.y;
  }
  if (len > 1) {
    ps.x/=len;
    ps.y/=len;
  }
  if (resId != null) {
    IconDrawInfo ico=new IconDrawInfo();
    ico.x=ps.x;
    ico.y=ps.y;
    ico.iconOrder=render.getIntPropertyValue(render.ALL.R_ICON_ORDER,100);
    ico.iconSize=rc.getComplexValue(render,render.ALL.R_ICON_VISIBLE_SIZE,-1);
    ico.shieldId=render.getStringPropertyValue(render.ALL.R_SHIELD);
    ico.resId=resId;
    rc.iconsToDraw.add(ico);
  }
  if (renderText) {
    textRenderer.renderText(obj,render,rc,pair,ps.x,ps.y,null,null);
  }
}
