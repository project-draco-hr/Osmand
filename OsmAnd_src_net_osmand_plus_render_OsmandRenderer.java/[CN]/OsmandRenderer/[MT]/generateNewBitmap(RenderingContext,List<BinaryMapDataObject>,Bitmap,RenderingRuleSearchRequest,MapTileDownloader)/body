{
  long now=System.currentTimeMillis();
  Canvas cv=new Canvas(bmp);
  if (rc.defaultColor != 0) {
    cv.drawColor(rc.defaultColor);
  }
  if (objects != null && !objects.isEmpty() && rc.width > 0 && rc.height > 0) {
    rc.cosRotateTileSize=(float)(Math.cos((float)Math.toRadians(rc.rotate)) * TILE_SIZE);
    rc.sinRotateTileSize=(float)(Math.sin((float)Math.toRadians(rc.rotate)) * TILE_SIZE);
    List<MapDataObjectPrimitive> pointsArray=new ArrayList<OsmandRenderer.MapDataObjectPrimitive>();
    List<MapDataObjectPrimitive> polygonsArray=new ArrayList<OsmandRenderer.MapDataObjectPrimitive>();
    List<MapDataObjectPrimitive> linesArray=new ArrayList<OsmandRenderer.MapDataObjectPrimitive>();
    sortObjectsByProperOrder(rc,objects,render,pointsArray,polygonsArray,linesArray);
    rc.lastRenderedKey=0;
    drawObject(rc,cv,render,polygonsArray,0);
    rc.lastRenderedKey=DEFAULT_POLYGON_MAX;
    if (rc.shadowRenderingMode > 1) {
      drawObject(rc,cv,render,linesArray,1);
    }
    rc.lastRenderedKey=(DEFAULT_LINE_MAX + DEFAULT_POLYGON_MAX) / 2;
    drawObject(rc,cv,render,linesArray,2);
    rc.lastRenderedKey=DEFAULT_LINE_MAX;
    drawObject(rc,cv,render,pointsArray,3);
    rc.lastRenderedKey=DEFAULT_POINTS_MAX;
    long beforeIconTextTime=System.currentTimeMillis() - now;
    notifyListeners(mapTileDownloader);
    drawIconsOverCanvas(rc,cv);
    notifyListeners(mapTileDownloader);
    textRenderer.drawTextOverCanvas(rc,cv,rc.preferredLocale);
    long time=System.currentTimeMillis() - now;
    rc.renderingDebugInfo=String.format("Rendering: %s ms  (%s text)\n" + "(%s points, %s points inside, %s of %s objects visible)",time,time - beforeIconTextTime,rc.pointCount,rc.pointInsideCount,rc.visible,rc.allObjects);
    log.info(rc.renderingDebugInfo);
  }
}
