{
  long now=System.currentTimeMillis();
  Canvas cv=new Canvas(bmp);
  if (defaultColor != 0) {
    paintFillEmpty.setColor(defaultColor);
  }
  cv.drawRect(0,0,bmp.getWidth(),bmp.getHeight(),paintFillEmpty);
  int sz=objects.size();
  int init=sz / 4;
  TIntObjectHashMap<TIntArrayList> orderMap=sortObjectsByProperOrder(rc,objects,render,sz,init);
  if (objects != null && !objects.isEmpty() && rc.width > 0 && rc.height > 0) {
    int objCount=0;
    rc.tileDivisor=(int)(1 << (31 - rc.zoom));
    rc.cosRotateTileSize=FloatMath.cos((float)Math.toRadians(rc.rotate)) * TILE_SIZE;
    rc.sinRotateTileSize=FloatMath.sin((float)Math.toRadians(rc.rotate)) * TILE_SIZE;
    int[] keys=orderMap.keys();
    Arrays.sort(keys);
    boolean shadowDrawn=false;
    for (int k=0; k < keys.length; k++) {
      if (!shadowDrawn && keys[k] >= rc.shadowLevelMin && keys[k] <= rc.shadowLevelMax && rc.shadowRenderingMode > 1) {
        for (int ki=k; ki < keys.length; ki++) {
          if (keys[ki] > rc.shadowLevelMax || rc.interrupted) {
            break;
          }
          TIntArrayList list=orderMap.get(keys[ki]);
          for (int j=0; j < list.size(); j++) {
            int i=list.get(j);
            int ind=i >> 8;
            int l=i & 0xff;
            BinaryMapDataObject obj=objects.get(ind);
            drawObj(obj,render,cv,rc,l,l == 0,true);
            objCount++;
          }
        }
        shadowDrawn=true;
      }
      if (rc.interrupted) {
        return null;
      }
      TIntArrayList list=orderMap.get(keys[k]);
      for (int j=0; j < list.size(); j++) {
        int i=list.get(j);
        int ind=i >> 8;
        int l=i & 0xff;
        BinaryMapDataObject obj=objects.get(ind);
        drawObj(obj,render,cv,rc,l,l == 0,false);
        objCount++;
      }
      if (objCount > 25) {
        notifyListeners(notifyList);
        objCount=0;
      }
    }
    long beforeIconTextTime=System.currentTimeMillis() - now;
    notifyListeners(notifyList);
    drawIconsOverCanvas(rc,cv);
    notifyListeners(notifyList);
    drawTextOverCanvas(rc,cv,useEnglishNames);
    long time=System.currentTimeMillis() - now;
    rc.renderingDebugInfo=String.format("Rendering done in %s (%s text) ms\n" + "(%s points, %s points inside, %s objects visile from %s)",time,time - beforeIconTextTime,rc.pointCount,rc.pointInsideCount,rc.visible,rc.allObjects);
    log.info(rc.renderingDebugInfo);
  }
  return bmp;
}
