{
  String name=obj.getName();
  String ref=null;
  if (name.charAt(0) == MapRenderingTypes.REF_CHAR) {
    ref=name.substring(1);
    name="";
    for (int k=0; k < ref.length(); k++) {
      if (ref.charAt(k) == MapRenderingTypes.REF_CHAR) {
        if (k < ref.length() - 1) {
          name=ref.substring(k + 1);
        }
        ref=ref.substring(0,k);
        break;
      }
    }
  }
  if (ref != null && ref.trim().length() > 0) {
    render.setInitialTagValueZoom(pair.tag,pair.value,rc.zoom);
    render.setIntFilter(render.ALL.R_TEXT_LENGTH,ref.length());
    render.setBooleanFilter(render.ALL.R_REF,true);
    if (render.search(RenderingRulesStorage.TEXT_RULES)) {
      if (render.getIntPropertyValue(render.ALL.R_TEXT_SIZE) > 0) {
        TextDrawInfo text=new TextDrawInfo(ref);
        text.fillProperties(render,middlePoint.x,middlePoint.y);
        text.pathRotate=pathRotate;
        rc.textToDraw.add(text);
      }
    }
  }
  if (name != null && name.trim().length() > 0) {
    render.setInitialTagValueZoom(pair.tag,pair.value,rc.zoom);
    render.setIntFilter(render.ALL.R_TEXT_LENGTH,name.length());
    render.setBooleanFilter(render.ALL.R_REF,false);
    if (render.search(RenderingRulesStorage.TEXT_RULES) && render.getIntPropertyValue(render.ALL.R_TEXT_SIZE) > 0) {
      TextDrawInfo text=new TextDrawInfo(name);
      if (render.getIntPropertyValue(render.ALL.R_TEXT_ON_PATH,0) == 0) {
        text.fillProperties(render,middlePoint.x,middlePoint.y);
        rc.textToDraw.add(text);
      }
 else {
        paintText.setTextSize(text.textSize);
        if (paintText.measureText(obj.getName()) < roadLength) {
          if (inverse) {
            path.rewind();
            boolean st=true;
            for (int i=obj.getPointsLength() - 1; i >= 0; i--) {
              PointF p=calcPoint(obj,i,rc);
              if (st) {
                st=false;
                path.moveTo(p.x,p.y);
              }
 else {
                path.lineTo(p.x,p.y);
              }
            }
          }
          text.fillProperties(render,xMid / 2,yMid / 2);
          text.pathRotate=pathRotate;
          text.drawOnPath=path;
          float strokeWidth=render.getFloatPropertyValue(render.ALL.R_STROKE_WIDTH);
          text.vOffset=strokeWidth / 2 - 1;
          rc.textToDraw.add(text);
        }
      }
    }
  }
}
