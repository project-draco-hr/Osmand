{
  if (render == null || pair == null) {
    return;
  }
  int length=obj.getPointsLength();
  if (length < 2) {
    return;
  }
  render.setInitialTagValueZoom(pair.tag,pair.value,rc.zoom,obj);
  render.setIntFilter(render.ALL.R_LAYER,layer);
  boolean rendered=render.search(RenderingRulesStorage.LINE_RULES);
  if (!rendered || !updatePaint(render,paint,0,false,rc)) {
    return;
  }
  int oneway=0;
  if (rc.zoom >= 16 && "highway".equals(pair.tag)) {
    if (obj.containsAdditionalType(obj.getMapIndex().onewayAttribute)) {
      oneway=1;
    }
 else     if (obj.containsAdditionalType(obj.getMapIndex().onewayReverseAttribute)) {
      oneway=-1;
    }
  }
  rc.visible++;
  Path path=null;
  float xMid=0;
  float yMid=0;
  int middle=obj.getPointsLength() / 2;
  PointF[] textPoints=null;
  if (!drawOnlyShadow) {
    textPoints=new PointF[length];
  }
  boolean intersect=false;
  PointF prev=null;
  for (int i=0; i < length; i++) {
    PointF p=calcPoint(obj,i,rc);
    if (textPoints != null) {
      textPoints[i]=new PointF(p.x,p.y);
    }
    if (!intersect) {
      if (p.x >= 0 && p.y >= 0 && p.x < rc.width && p.y < rc.height) {
        intersect=true;
      }
      if (!intersect && prev != null) {
        if ((p.x < 0 && prev.x < 0) || (p.y < 0 && prev.y < 0) || (p.x > rc.width && prev.x > rc.width)|| (p.y > rc.height && prev.y > rc.height)) {
          intersect=false;
        }
 else {
          intersect=true;
        }
      }
    }
    if (path == null) {
      path=new Path();
      path.moveTo(p.x,p.y);
    }
 else {
      if (i == middle) {
        xMid=p.x;
        yMid=p.y;
      }
      path.lineTo(p.x,p.y);
    }
    prev=p;
  }
  if (!intersect) {
    return;
  }
  if (path != null) {
    if (drawOnlyShadow) {
      int shadowColor=render.getIntPropertyValue(render.ALL.R_SHADOW_COLOR);
      int shadowRadius=(int)rc.getComplexValue(render,render.ALL.R_SHADOW_RADIUS);
      if (shadowColor == 0) {
        shadowColor=rc.shadowRenderingColor;
      }
      drawPolylineShadow(canvas,rc,path,shadowColor,shadowRadius);
    }
 else {
      boolean update=false;
      if (updatePaint(render,paint,-2,false,rc)) {
        update=true;
        canvas.drawPath(path,paint);
      }
      if (updatePaint(render,paint,-1,false,rc)) {
        update=true;
        canvas.drawPath(path,paint);
      }
      if (update) {
        updatePaint(render,paint,0,false,rc);
      }
      canvas.drawPath(path,paint);
      if (updatePaint(render,paint,1,false,rc)) {
        canvas.drawPath(path,paint);
      }
      if (updatePaint(render,paint,2,false,rc)) {
        canvas.drawPath(path,paint);
      }
      if (updatePaint(render,paint,3,false,rc)) {
        canvas.drawPath(path,paint);
      }
    }
    if (oneway != 0 && !drawOnlyShadow) {
      Paint[] paints=oneway == -1 ? getReverseOneWayPaints(rc) : getOneWayPaints(rc);
      for (int i=0; i < paints.length; i++) {
        canvas.drawPath(path,paints[i]);
      }
    }
    if (textPoints != null) {
      textRenderer.renderText(obj,render,rc,pair,xMid,yMid,path,textPoints);
    }
  }
}
