{
  int sz=objects.size();
  List<MapDataObjectPrimitive> linesArray=new ArrayList<OsmandRenderer.MapDataObjectPrimitive>();
  if (render != null) {
    render.clearState();
    float mult=(float)(1. / MapUtils.getPowZoom(Math.max(31 - (rc.zoom + 8),0)));
    for (int i=0; i < sz; i++) {
      BinaryMapDataObject o=objects.get(i);
      for (int j=0; j < o.getTypes().length; j++) {
        int wholeType=o.getTypes()[j];
        int layer=0;
        if (o.getPointsLength() > 1) {
          layer=o.getSimpleLayer();
        }
        TagValuePair pair=o.getMapIndex().decodeType(wholeType);
        if (pair != null) {
          render.setTagValueZoomLayer(pair.tag,pair.value,rc.zoom,layer,o);
          render.setBooleanFilter(render.ALL.R_AREA,o.isArea());
          render.setBooleanFilter(render.ALL.R_POINT,o.getPointsLength() == 1);
          render.setBooleanFilter(render.ALL.R_CYCLE,o.isCycle());
          if (render.search(RenderingRulesStorage.ORDER_RULES)) {
            int objectType=render.getIntPropertyValue(render.ALL.R_OBJECT_TYPE);
            int order=render.getIntPropertyValue(render.ALL.R_ORDER);
            MapDataObjectPrimitive mapObj=new MapDataObjectPrimitive();
            mapObj.objectType=objectType;
            mapObj.order=order;
            mapObj.typeInd=j;
            mapObj.obj=o;
            if (objectType == 3) {
              MapDataObjectPrimitive pointObj=mapObj;
              pointObj.objectType=1;
              double area=polygonArea(mapObj,mult);
              if (area > MAX_V) {
                mapObj.order=mapObj.order + (1. / area);
                polygonsArray.add(mapObj);
                pointsArray.add(pointObj);
              }
            }
 else             if (objectType == 1) {
              pointsArray.add(mapObj);
            }
 else {
              linesArray.add(mapObj);
            }
            if (render.isSpecified(render.ALL.R_SHADOW_LEVEL)) {
              rc.shadowLevelMin=Math.min(rc.shadowLevelMin,order);
              rc.shadowLevelMax=Math.max(rc.shadowLevelMax,order);
              render.clearValue(render.ALL.R_SHADOW_LEVEL);
            }
          }
        }
      }
      if (rc.interrupted) {
        return;
      }
    }
  }
  Collections.sort(polygonsArray,sortByOrder());
  Collections.sort(pointsArray,sortByOrder());
  Collections.sort(linesArray,sortByOrder());
  filterLinesByDensity(rc,linesResArray,linesArray);
}
