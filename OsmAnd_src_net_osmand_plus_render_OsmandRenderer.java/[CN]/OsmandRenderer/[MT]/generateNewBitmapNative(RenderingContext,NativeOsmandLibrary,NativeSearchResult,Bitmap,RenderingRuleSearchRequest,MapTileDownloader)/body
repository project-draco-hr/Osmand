{
  long now=System.currentTimeMillis();
  if (rc.width > 0 && rc.height > 0 && searchResultHandler != null) {
    rc.cosRotateTileSize=FloatMath.cos((float)Math.toRadians(rc.rotate)) * TILE_SIZE;
    rc.sinRotateTileSize=FloatMath.sin((float)Math.toRadians(rc.rotate)) * TILE_SIZE;
    try {
      if (Looper.getMainLooper() != null && library.useDirectRendering()) {
        final Handler h=new Handler(Looper.getMainLooper());
        notifyListenersWithDelay(rc,mapTileDownloader,h);
      }
      final NativeLibrary.RenderingGenerationResult res=library.generateRendering(rc,searchResultHandler,bmp,bmp.hasAlpha(),render);
      rc.ended=true;
      notifyListeners(mapTileDownloader);
      long time=System.currentTimeMillis() - now;
      rc.renderingDebugInfo=String.format("Rendering: %s ms  (%s text)\n" + "(%s points, %s points inside, %s of %s objects visible)\n",time,rc.textRenderingTime,rc.pointCount,rc.pointInsideCount,rc.visible,rc.allObjects);
      if (res.bitmapBuffer != null) {
        bmp.copyPixelsFromBuffer(res.bitmapBuffer);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}
