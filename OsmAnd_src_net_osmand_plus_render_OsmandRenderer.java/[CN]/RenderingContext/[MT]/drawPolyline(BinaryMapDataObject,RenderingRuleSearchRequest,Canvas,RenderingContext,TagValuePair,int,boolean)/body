{
  if (render == null || pair == null) {
    return;
  }
  int length=obj.getPointsLength();
  if (length < 2) {
    return;
  }
  render.setInitialTagValueZoom(pair.tag,pair.value,rc.zoom);
  render.setIntFilter(render.ALL.R_LAYER,layer);
  boolean rendered=render.search(RenderingRulesStorage.LINE_RULES);
  if (!rendered || !updatePaint(render,paint,0,false,rc)) {
    return;
  }
  boolean oneway=false;
  rc.visible++;
  Path path=null;
  float xMid=0;
  float yMid=0;
  int middle=obj.getPointsLength() / 2;
  PointF[] textPoints=null;
  if (!drawOnlyShadow) {
    textPoints=new PointF[length];
  }
  for (int i=0; i < length; i++) {
    PointF p=calcPoint(obj,i,rc);
    if (textPoints != null) {
      textPoints[i]=new PointF(p.x,p.y);
    }
    if (path == null) {
      path=new Path();
      path.moveTo(p.x,p.y);
    }
 else {
      if (i == middle) {
        xMid=p.x;
        yMid=p.y;
      }
      path.lineTo(p.x,p.y);
    }
  }
  if (path != null) {
    if (drawOnlyShadow) {
      int shadowColor=render.getIntPropertyValue(render.ALL.R_SHADOW_COLOR);
      int shadowRadius=render.getIntPropertyValue(render.ALL.R_SHADOW_RADIUS);
      if (shadowColor == 0) {
        shadowColor=rc.shadowRenderingColor;
      }
      drawPolylineShadow(canvas,rc,path,shadowColor,shadowRadius);
    }
 else {
      canvas.drawPath(path,paint);
      if (updatePaint(render,paint,1,false,rc)) {
        canvas.drawPath(path,paint);
        if (updatePaint(render,paint,2,false,rc)) {
          canvas.drawPath(path,paint);
        }
      }
    }
    if (oneway && !drawOnlyShadow) {
      Paint[] paints=getOneWayPaints();
      for (int i=0; i < paints.length; i++) {
        canvas.drawPath(path,paints[i]);
      }
    }
    if (textPoints != null) {
      textRenderer.renderText(obj,render,rc,pair,xMid,yMid,path,textPoints);
    }
  }
}
