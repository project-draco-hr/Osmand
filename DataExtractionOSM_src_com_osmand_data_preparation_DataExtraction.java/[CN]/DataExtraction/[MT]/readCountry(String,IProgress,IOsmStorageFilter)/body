{
  File f=new File(path);
  InputStream stream=new FileInputStream(f);
  InputStream streamFile=stream;
  long st=System.currentTimeMillis();
  if (path.endsWith(".bz2")) {
    if (stream.read() != 'B' || stream.read() != 'Z') {
      throw new RuntimeException("The source stream must start with the characters BZ if it is to be read as a BZip2 stream.");
    }
 else {
      stream=new CBZip2InputStream(stream);
    }
  }
  if (progress != null) {
    progress.startTask("Loading file " + path,-1);
  }
  final ArrayList<Node> places=new ArrayList<Node>();
  final ArrayList<Entity> buildings=new ArrayList<Entity>();
  final ArrayList<Amenity> amenities=new ArrayList<Amenity>();
  final ArrayList<Way> ways=new ArrayList<Way>();
  IOsmStorageFilter filter=new IOsmStorageFilter(){
    @Override public boolean acceptEntityToLoad(    OsmBaseStorage storage,    Entity e){
      if ("yes".equals(e.getTag(OSMTagKey.BUILDING))) {
        if (e.getTag(OSMTagKey.ADDR_HOUSE_NUMBER) != null && e.getTag(OSMTagKey.ADDR_STREET) != null) {
          buildings.add(e);
          return true;
        }
      }
      if (Amenity.isAmenity(e)) {
        amenities.add(new Amenity((Node)e));
        return true;
      }
      if (e instanceof Node && e.getTag(OSMTagKey.PLACE) != null) {
        places.add((Node)e);
        return true;
      }
      if (e instanceof Way && OSMSettings.wayForCar(e.getTag(OSMTagKey.HIGHWAY))) {
        ways.add((Way)e);
        return true;
      }
      return e instanceof Node;
    }
  }
;
  OsmBaseStorage storage=new OsmBaseStorage();
  if (addFilter != null) {
    storage.getFilters().add(addFilter);
  }
  storage.getFilters().add(filter);
  storage.parseOSM(stream,progress,streamFile);
  if (log.isDebugEnabled()) {
    log.debug("File parsed : " + (System.currentTimeMillis() - st));
  }
  Region country=new Region();
  int i=f.getName().indexOf('.');
  country.setName(Algoritms.capitalizeFirstLetterAndLowercase(f.getName().substring(0,i)));
  country.setStorage(storage);
  readingAmenities(amenities,country);
  readingCities(places,country);
  readingStreets(progress,ways,country);
  readingBuildings(progress,buildings,country);
  normalizingStreets(progress,country);
  country.doDataPreparation();
  return country;
}
