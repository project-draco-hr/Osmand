{
  InputStream stream=new FileInputStream(path);
  InputStream streamFile=stream;
  long st=System.currentTimeMillis();
  if (path.endsWith(".bz2")) {
    if (stream.read() != 'B' || stream.read() != 'Z')     throw new RuntimeException("The source stream must start with the characters BZ if it is to be read as a BZip2 stream.");
 else     stream=new CBZip2InputStream(stream);
  }
  if (progress != null) {
    progress.startTask("Loading file " + path,-1);
  }
  places=new ArrayList<Node>();
  buildings=new ArrayList<Entity>();
  amenities=new ArrayList<Amenity>();
  ways=new ArrayList<Way>();
  IOsmStorageFilter filter=new IOsmStorageFilter(){
    @Override public boolean acceptEntityToLoad(    OsmBaseStorage storage,    Entity e){
      if ("yes".equals(e.getTag(OSMTagKey.BUILDING))) {
        if (e.getTag(OSMTagKey.ADDR_HOUSE_NUMBER) != null && e.getTag(OSMTagKey.ADDR_STREET) != null) {
          buildings.add(e);
          return true;
        }
      }
      if (Amenity.isAmenity(e)) {
        amenities.add(new Amenity((Node)e));
        return true;
      }
      if (e instanceof Node && e.getTag(OSMTagKey.PLACE) != null) {
        places.add((Node)e);
        return true;
      }
      if (e instanceof Way && OSMSettings.wayForCar(e.getTag(OSMTagKey.HIGHWAY))) {
        ways.add((Way)e);
        return true;
      }
      return e instanceof Node;
    }
  }
;
  OsmBaseStorage storage=new OsmBaseStorage();
  if (filters != null) {
    for (    IOsmStorageFilter f : filters) {
      if (f != null) {
        storage.getFilters().add(f);
      }
    }
  }
  storage.getFilters().add(filter);
  storage.parseOSM(stream,progress,streamFile);
  if (log.isDebugEnabled()) {
    log.debug("File parsed : " + (System.currentTimeMillis() - st));
  }
  Region country=new Region(null);
  country.setStorage(storage);
  for (  Node s : places) {
    String place=s.getTag(OSMTagKey.PLACE);
    if (place == null) {
      continue;
    }
    if ("country".equals(place)) {
      country.setEntity(s);
    }
 else {
      country.registerCity(s);
    }
  }
  for (  Amenity a : amenities) {
    country.registerAmenity(a);
  }
  progress.startTask("Indexing streets...",ways.size());
  waysManager=new DataTileManager<Way>();
  for (  Way w : ways) {
    progress.progress(1);
    if (w.getTag(OSMTagKey.NAME) != null) {
      String street=w.getTag(OSMTagKey.NAME);
      LatLon center=MapUtils.getWeightCenterForNodes(w.getNodes());
      if (center != null) {
        City city=country.getClosestCity(center);
        if (city == null) {
          Node n=new Node(center.getLatitude(),center.getLongitude(),-1);
          n.putTag(OSMTagKey.PLACE.getValue(),CityType.TOWN.name());
          n.putTag(OSMTagKey.NAME.getValue(),"Uknown city");
          country.registerCity(n);
          city=country.getClosestCity(center);
        }
        if (city != null) {
          Street str=city.registerStreet(street);
          for (          Node n : w.getNodes()) {
            str.getWayNodes().add(n);
          }
        }
        waysManager.registerObject(center.getLatitude(),center.getLongitude(),w);
      }
    }
  }
  progress.finishTask();
  progress.startTask("Indexing buildings...",buildings.size());
  for (  Entity b : buildings) {
    LatLon center=b.getLatLon();
    progress.progress(1);
    if (center == null) {
    }
 else {
      City city=country.getClosestCity(center);
      if (city == null) {
        Node n=new Node(center.getLatitude(),center.getLongitude(),-1);
        n.putTag(OSMTagKey.PLACE.getValue(),CityType.TOWN.name());
        n.putTag(OSMTagKey.NAME.getValue(),"Uknown city");
        country.registerCity(n);
        city=country.getClosestCity(center);
      }
      if (city != null) {
        city.registerBuilding(b);
      }
    }
  }
  progress.finishTask();
  country.doDataPreparation();
  return country;
}
