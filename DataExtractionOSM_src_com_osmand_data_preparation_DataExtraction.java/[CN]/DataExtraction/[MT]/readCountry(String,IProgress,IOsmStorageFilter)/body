{
  File f=new File(path);
  InputStream stream=new FileInputStream(f);
  InputStream streamFile=stream;
  long st=System.currentTimeMillis();
  if (path.endsWith(".bz2")) {
    if (stream.read() != 'B' || stream.read() != 'Z') {
      throw new RuntimeException("The source stream must start with the characters BZ if it is to be read as a BZip2 stream.");
    }
 else {
      stream=new CBZip2InputStream(stream);
    }
  }
  if (progress != null) {
    progress.startTask("Loading file " + path,-1);
  }
  OsmBaseStorage storage=new OsmBaseStorage();
  storage.setSupressWarnings(DataExtractionSettings.getSettings().isSupressWarningsForDuplicatedId());
  if (addFilter != null) {
    storage.getFilters().add(addFilter);
  }
  DataExtractionOsmFilter filter=new DataExtractionOsmFilter();
  final ArrayList<Node> places=filter.getPlaces();
  final ArrayList<Entity> buildings=filter.getBuildings();
  final ArrayList<Entity> amenities=filter.getAmenities();
  final ArrayList<Way> ways=filter.getWays();
  final ArrayList<Relation> transport=filter.getTransport();
  Map<Long,String> postalCodes=filter.getPostalCodes();
  storage.getFilters().add(filter);
  try {
    filter.initDatabase();
    progress.setGeneralProgress("[40 of 100]");
    storage.parseOSM(stream,progress,streamFile,parseEntityInfo);
    if (log.isInfoEnabled()) {
      log.info("File parsed : " + (System.currentTimeMillis() - st));
    }
    progress.finishTask();
    progress.setGeneralProgress("[55 of 100]");
    filter.correlateData(storage,progress);
  }
  finally {
    if (log.isInfoEnabled()) {
      log.info("File indexed : " + (System.currentTimeMillis() - st));
    }
    filter.close();
  }
  Region country=new Region();
  int i=f.getName().indexOf('.');
  country.setName(Algoritms.capitalizeFirstLetterAndLowercase(f.getName().substring(0,i)));
  country.setStorage(storage);
  progress.setGeneralProgress("[60 of 100]");
  progress.startTask("Indexing poi...",-1);
  if (indexPOI) {
    readingAmenities(amenities,country);
  }
  progress.setGeneralProgress("[65 of 100]");
  progress.startTask("Indexing cities...",-1);
  readingCities(places,country);
  if (indexAddress) {
    progress.setGeneralProgress("[80 of 100]");
    readingStreets(progress,ways,country);
    progress.setGeneralProgress("[95 of 100]");
    readingBuildings(progress,buildings,country,postalCodes);
  }
  progress.setGeneralProgress("[100 of 100]");
  if (normalizeStreets) {
    normalizingStreets(progress,country);
  }
  if (indexTransport) {
    readingTransport(transport,country,progress);
  }
  country.doDataPreparation();
  convertEnglishName(country);
  for (  CityType c : CityType.values()) {
    for (    City city : country.getCitiesByType(c)) {
      convertEnglishName(city);
      for (      Street s : city.getStreets()) {
        convertEnglishName(s);
        for (        Building b : s.getBuildings()) {
          convertEnglishName(b);
        }
      }
    }
  }
  for (  Amenity a : country.getAmenityManager().getAllObjects()) {
    convertEnglishName(a);
  }
  for (  List<TransportRoute> r : country.getTransportRoutes().values()) {
    for (    TransportRoute route : r) {
      convertEnglishName(route);
      for (      TransportStop s : route.getBackwardStops()) {
        convertEnglishName(s);
      }
      for (      TransportStop s : route.getForwardStops()) {
        convertEnglishName(s);
      }
    }
  }
  return country;
}
