{
  final ArrayList<Node> places=new ArrayList<Node>();
  final ArrayList<Entity> buildings=new ArrayList<Entity>();
  final ArrayList<Entity> amenities=new ArrayList<Entity>();
  final ArrayList<Way> ways=new ArrayList<Way>();
  File f=new File(path);
  InputStream stream=new FileInputStream(f);
  InputStream streamFile=stream;
  long st=System.currentTimeMillis();
  if (path.endsWith(".bz2")) {
    if (stream.read() != 'B' || stream.read() != 'Z') {
      throw new RuntimeException("The source stream must start with the characters BZ if it is to be read as a BZip2 stream.");
    }
 else {
      stream=new CBZip2InputStream(stream);
    }
  }
  if (progress != null) {
    progress.startTask("Loading file " + path,-1);
  }
  OsmBaseStorage storage=new OsmBaseStorage();
  if (addFilter != null) {
    storage.getFilters().add(addFilter);
  }
  DataExtractionOsmFilter filter=new DataExtractionOsmFilter(amenities,buildings,places,ways);
  storage.getFilters().add(filter);
  try {
    filter.initDatabase();
    storage.parseOSM(stream,progress,streamFile);
    if (log.isInfoEnabled()) {
      log.info("File parsed : " + (System.currentTimeMillis() - st));
    }
    progress.finishTask();
    filter.correlateData(storage,progress);
  }
  finally {
    if (log.isInfoEnabled()) {
      log.info("File indexed : " + (System.currentTimeMillis() - st));
    }
    filter.close();
  }
  Region country=new Region();
  int i=f.getName().indexOf('.');
  country.setName(Algoritms.capitalizeFirstLetterAndLowercase(f.getName().substring(0,i)));
  country.setStorage(storage);
  if (indexPOI) {
    readingAmenities(amenities,country);
  }
  readingCities(places,country);
  if (indexAddress) {
    readingStreets(progress,ways,country);
    readingBuildings(progress,buildings,country);
  }
  if (normalizeStreets) {
    normalizingStreets(progress,country);
  }
  country.doDataPreparation();
  return country;
}
