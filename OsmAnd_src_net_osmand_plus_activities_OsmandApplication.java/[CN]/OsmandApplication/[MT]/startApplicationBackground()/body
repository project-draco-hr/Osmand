{
  List<String> warnings=null;
  try {
    if (osmandSettings.NATIVE_RENDERING.get()) {
      startDialog.startTask(getString(R.string.init_native_library),-1);
      RenderingRulesStorage storage=rendererRegistry.getCurrentSelectedRenderer();
      boolean initialized=NativeOsmandLibrary.getLibrary(storage) != null;
      if (!initialized) {
        LOG.info("Native library could not loaded!");
      }
    }
    warnings=manager.reloadIndexes(startDialog);
    player=null;
    SavingTrackHelper helper=new SavingTrackHelper(OsmandApplication.this);
    if (helper.hasDataToSave()) {
      startDialog.startTask(getString(R.string.saving_gpx_tracks),-1);
      warnings.addAll(helper.saveDataToGpx());
    }
    helper.close();
    final File appDir=OsmandSettings.getOsmandSettings(this).extendOsmandPath(ResourceManager.APP_DIR);
    File save=new File(appDir,FavouritesDbHelper.FILE_TO_SAVE);
    File bak=new File(appDir,FavouritesDbHelper.FILE_TO_BACKUP);
    if (bak.exists() && (!save.exists() || bak.lastModified() > save.lastModified())) {
      if (save.exists()) {
        save.delete();
      }
      bak.renameTo(save);
    }
  }
  finally {
synchronized (OsmandApplication.this) {
      final ProgressDialog toDismiss;
      if (startDialog != null) {
        toDismiss=startDialog.getDialog();
      }
 else {
        toDismiss=null;
      }
      startDialog=null;
      if (toDismiss != null) {
        uiHandler.post(new Runnable(){
          @Override public void run(){
            if (toDismiss.getOwnerActivity() != null) {
              toDismiss.getOwnerActivity().dismissDialog(PROGRESS_DIALOG);
            }
          }
        }
);
        showWarnings(warnings,toDismiss.getContext());
      }
 else {
        startingWarnings=warnings;
      }
    }
  }
}
