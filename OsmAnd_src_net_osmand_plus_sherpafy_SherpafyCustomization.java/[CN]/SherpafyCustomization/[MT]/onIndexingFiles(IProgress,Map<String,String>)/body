{
  ArrayList<TourInformation> tourPresent=new ArrayList<TourInformation>();
  List<String> warns=new ArrayList<String>();
  selectedTour=null;
  final HashSet<String> suggestToDownloadMap=new HashSet<String>();
  if (toursFolder.exists()) {
    File[] availableTours=toursFolder.listFiles();
    if (availableTours != null) {
      String selectedName=originalApi.getString(originalGlobal,SELECTED_TOUR,null);
      for (      File tr : availableTours) {
        if (tr.isDirectory()) {
          String date=app.getResourceManager().getDateFormat().format(new Date(DownloadIndexFragment.findFileInDir(tr).lastModified()));
          indexFileNames.put(tr.getName(),date);
          final TourInformation tourInformation=new TourInformation(tr);
          tourPresent.add(tourInformation);
          try {
            tourInformation.loadFullInformation();
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
          if (toursIndexed) {
            for (            String map : tourInformation.getMaps()) {
              if (!new File(toursFolder.getParentFile(),map + ".obf").exists()) {
                suggestToDownloadMap.add(map);
              }
            }
          }
          boolean selected=selectedName != null && selectedName.equals(tourInformation.getName());
          if (selected) {
            reloadSelectedTour(progress,tourInformation);
          }
        }
      }
      if (selectedName == null) {
        app.getSettings().setSettingsAPI(originalApi);
      }
    }
    toursIndexed=true;
  }
  this.tourPresent=tourPresent;
  if (!suggestToDownloadMap.isEmpty()) {
    final DownloadIndexFragment da=app.getDownloadActivity();
    if (da != null) {
      app.runInUIThread(new Runnable(){
        @Override public void run(){
          da.showDialogToDownloadMaps(suggestToDownloadMap);
        }
      }
);
    }
  }
  return warns;
}
