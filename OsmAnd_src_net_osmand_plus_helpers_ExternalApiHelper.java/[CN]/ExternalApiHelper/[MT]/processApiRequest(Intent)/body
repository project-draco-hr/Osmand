{
  Intent result=new Intent();
  OsmandApplication app=(OsmandApplication)mapActivity.getApplication();
  try {
    Uri uri=intent.getData();
    String cmd=uri.getHost().toLowerCase();
    if (API_CMD_SHOW_GPX.equals(cmd) || API_CMD_NAVIGATE_GPX.equals(cmd)) {
      boolean navigate=API_CMD_NAVIGATE_GPX.equals(cmd);
      String path=uri.getQueryParameter(PARAM_PATH);
      boolean force=uri.getBooleanQueryParameter(PARAM_FORCE,false);
      GPXFile gpx=null;
      if (path != null) {
        File f=new File(path);
        if (f.exists()) {
          gpx=GPXUtilities.loadGPXFile(mapActivity,f);
        }
      }
 else       if (intent.getStringExtra(PARAM_DATA) != null) {
        String gpxStr=intent.getStringExtra(PARAM_DATA);
        if (!Algorithms.isEmpty(gpxStr)) {
          gpx=GPXUtilities.loadGPXFile(mapActivity,new ByteArrayInputStream(gpxStr.getBytes()));
        }
      }
 else       if (uri.getBooleanQueryParameter(PARAM_URI,false)) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
          LOG.debug("uriString=" + intent.getClipData().getItemAt(0).getUri());
          Uri gpxUri=intent.getClipData().getItemAt(0).getUri();
          ParcelFileDescriptor gpxParcelDescriptor=mapActivity.getContentResolver().openFileDescriptor(gpxUri,"r");
          if (gpxParcelDescriptor != null) {
            FileDescriptor fileDescriptor=gpxParcelDescriptor.getFileDescriptor();
            gpx=GPXUtilities.loadGPXFile(mapActivity,new FileInputStream(fileDescriptor));
          }
 else {
            finish=true;
            resultCode=RESULT_CODE_ERROR_GPX_NOT_FOUND;
          }
        }
 else {
          finish=true;
          resultCode=RESULT_CODE_ERROR_GPX_NOT_FOUND;
        }
      }
 else {
        finish=true;
        resultCode=RESULT_CODE_ERROR_GPX_NOT_FOUND;
      }
      if (gpx != null) {
        if (navigate) {
          final RoutingHelper routingHelper=app.getRoutingHelper();
          if (routingHelper.isFollowingMode() && !force) {
            final GPXFile gpxFile=gpx;
            AlertDialog dlg=mapActivity.getMapActions().stopNavigationActionConfirm();
            dlg.setOnDismissListener(new DialogInterface.OnDismissListener(){
              @Override public void onDismiss(              DialogInterface dialog){
                if (!routingHelper.isFollowingMode()) {
                  startNavigation(gpxFile,null,null,null,null,null);
                }
              }
            }
);
          }
 else {
            startNavigation(gpx,null,null,null,null,null);
          }
        }
 else {
          app.getSelectedGpxHelper().setGpxFileToDisplay(gpx);
        }
        resultCode=Activity.RESULT_OK;
      }
 else {
        finish=true;
        resultCode=RESULT_CODE_ERROR_GPX_NOT_FOUND;
      }
    }
 else     if (API_CMD_NAVIGATE.equals(cmd)) {
      String profileStr=uri.getQueryParameter(PARAM_PROFILE);
      final ApplicationMode profile=ApplicationMode.valueOfStringKey(profileStr,DEFAULT_PROFILE);
      boolean validProfile=false;
      for (      ApplicationMode mode : VALID_PROFILES) {
        if (mode == profile) {
          validProfile=true;
          break;
        }
      }
      if (!validProfile) {
        resultCode=RESULT_CODE_ERROR_INVALID_PROFILE;
      }
 else {
        String startName=uri.getQueryParameter(PARAM_START_NAME);
        if (Algorithms.isEmpty(startName)) {
          startName="";
        }
        String destName=uri.getQueryParameter(PARAM_DEST_NAME);
        if (Algorithms.isEmpty(destName)) {
          destName="";
        }
        final LatLon start;
        final PointDescription startDesc;
        String startLatStr=uri.getQueryParameter(PARAM_START_LAT);
        String startLonStr=uri.getQueryParameter(PARAM_START_LON);
        if (!Algorithms.isEmpty(startLatStr) && !Algorithms.isEmpty(startLonStr)) {
          double lat=Double.parseDouble(uri.getQueryParameter(PARAM_START_LAT));
          double lon=Double.parseDouble(uri.getQueryParameter(PARAM_START_LON));
          start=new LatLon(lat,lon);
          startDesc=new PointDescription(PointDescription.POINT_TYPE_LOCATION,startName);
        }
 else {
          start=null;
          startDesc=null;
        }
        double destLat=Double.parseDouble(uri.getQueryParameter(PARAM_DEST_LAT));
        double destLon=Double.parseDouble(uri.getQueryParameter(PARAM_DEST_LON));
        final LatLon dest=new LatLon(destLat,destLon);
        final PointDescription destDesc=new PointDescription(PointDescription.POINT_TYPE_LOCATION,destName);
        boolean force=uri.getBooleanQueryParameter(PARAM_FORCE,false);
        final RoutingHelper routingHelper=app.getRoutingHelper();
        if (routingHelper.isFollowingMode() && !force) {
          AlertDialog dlg=mapActivity.getMapActions().stopNavigationActionConfirm();
          dlg.setOnDismissListener(new DialogInterface.OnDismissListener(){
            @Override public void onDismiss(            DialogInterface dialog){
              if (!routingHelper.isFollowingMode()) {
                startNavigation(null,start,startDesc,dest,destDesc,profile);
              }
            }
          }
);
        }
 else {
          startNavigation(null,start,startDesc,dest,destDesc,profile);
        }
      }
    }
 else     if (API_CMD_RECORD_AUDIO.equals(cmd) || API_CMD_RECORD_VIDEO.equals(cmd) || API_CMD_RECORD_PHOTO.equals(cmd)|| API_CMD_STOP_AV_REC.equals(cmd)) {
      AudioVideoNotesPlugin plugin=OsmandPlugin.getPlugin(AudioVideoNotesPlugin.class);
      if (plugin == null) {
        resultCode=RESULT_CODE_ERROR_PLUGIN_INACTIVE;
        finish=true;
      }
 else {
        if (API_CMD_STOP_AV_REC.equals(cmd)) {
          plugin.stopRecording(mapActivity,false);
        }
 else {
          double lat=Double.parseDouble(uri.getQueryParameter(PARAM_LAT));
          double lon=Double.parseDouble(uri.getQueryParameter(PARAM_LON));
          if (API_CMD_RECORD_AUDIO.equals(cmd)) {
            plugin.recordAudio(lat,lon,mapActivity);
          }
 else           if (API_CMD_RECORD_VIDEO.equals(cmd)) {
            plugin.recordVideo(lat,lon,mapActivity);
          }
 else           if (API_CMD_RECORD_PHOTO.equals(cmd)) {
            plugin.takePhoto(lat,lon,mapActivity,true);
          }
        }
        resultCode=Activity.RESULT_OK;
      }
    }
 else     if (API_CMD_GET_INFO.equals(cmd)) {
      Location location=mapActivity.getMyApplication().getLocationProvider().getLastKnownLocation();
      if (location != null) {
        result.putExtra(PARAM_LAT,location.getLatitude());
        result.putExtra(PARAM_LON,location.getLongitude());
      }
      final RoutingHelper routingHelper=app.getRoutingHelper();
      if (routingHelper.isRouteCalculated()) {
        int time=routingHelper.getLeftTime();
        result.putExtra(PARAM_TIME_LEFT,time);
        long eta=time + System.currentTimeMillis() / 1000;
        result.putExtra(PARAM_ETA,eta);
        result.putExtra(PARAM_DISTANCE_LEFT,routingHelper.getLeftDistance());
        NextDirectionInfo ni=routingHelper.getNextRouteDirectionInfo(new NextDirectionInfo(),true);
        if (ni.distanceTo > 0) {
          updateTurnInfo("next_",result,ni);
          ni=routingHelper.getNextRouteDirectionInfoAfter(ni,new NextDirectionInfo(),true);
          if (ni.distanceTo > 0) {
            updateTurnInfo("after_next",result,ni);
          }
        }
        routingHelper.getNextRouteDirectionInfo(new NextDirectionInfo(),false);
        if (ni.distanceTo > 0) {
          updateTurnInfo("no_speak_next_",result,ni);
        }
      }
      result.putExtra(PARAM_VERSION,VERSION_CODE);
      finish=true;
      resultCode=Activity.RESULT_OK;
    }
 else     if (API_CMD_ADD_FAVORITE.equals(cmd)) {
      String name=uri.getQueryParameter(PARAM_NAME);
      String desc=uri.getQueryParameter(PARAM_DESC);
      String category=uri.getQueryParameter(PARAM_CATEGORY);
      double lat=Double.parseDouble(uri.getQueryParameter(PARAM_LAT));
      double lon=Double.parseDouble(uri.getQueryParameter(PARAM_LON));
      String colorTag=uri.getQueryParameter(PARAM_COLOR);
      boolean visible=uri.getBooleanQueryParameter(PARAM_VISIBLE,true);
      if (name == null) {
        name="";
      }
      if (desc == null) {
        desc="";
      }
      if (category == null) {
        category="";
      }
      int color=0;
      if (!Algorithms.isEmpty(colorTag)) {
        color=ColorDialogs.getColorByTag(colorTag);
        if (color == 0) {
          LOG.error("Wrong color tag: " + colorTag);
        }
      }
      FavouritePoint fav=new FavouritePoint(lat,lon,name,category);
      fav.setDescription(desc);
      fav.setColor(color);
      fav.setVisible(visible);
      FavouritesDbHelper helper=app.getFavorites();
      helper.addFavourite(fav);
      showOnMap(lat,lon,fav,mapActivity.getMapLayers().getFavoritesLayer().getObjectName(fav));
      resultCode=Activity.RESULT_OK;
    }
 else     if (API_CMD_ADD_MAP_MARKER.equals(cmd)) {
      double lat=Double.parseDouble(uri.getQueryParameter(PARAM_LAT));
      double lon=Double.parseDouble(uri.getQueryParameter(PARAM_LON));
      String name=uri.getQueryParameter(PARAM_NAME);
      PointDescription pd=new PointDescription(PointDescription.POINT_TYPE_MAP_MARKER,name != null ? name : "");
      MapMarkersHelper markersHelper=app.getMapMarkersHelper();
      markersHelper.addMapMarker(new LatLon(lat,lon),pd);
      MapMarker marker=markersHelper.getFirstMapMarker();
      if (marker != null) {
        showOnMap(lat,lon,marker,mapActivity.getMapLayers().getMapMarkersLayer().getObjectName(marker));
      }
      resultCode=Activity.RESULT_OK;
    }
 else     if (API_CMD_START_GPX_REC.equals(cmd)) {
      OsmandMonitoringPlugin plugin=OsmandPlugin.getPlugin(OsmandMonitoringPlugin.class);
      if (plugin == null) {
        resultCode=RESULT_CODE_ERROR_PLUGIN_INACTIVE;
        finish=true;
      }
 else {
        plugin.startGPXMonitoring(null);
      }
      if (uri.getBooleanQueryParameter(PARAM_CLOSE_AFTER_COMMAND,true)) {
        finish=true;
      }
      resultCode=Activity.RESULT_OK;
    }
 else     if (API_CMD_STOP_GPX_REC.equals(cmd)) {
      OsmandMonitoringPlugin plugin=OsmandPlugin.getPlugin(OsmandMonitoringPlugin.class);
      if (plugin == null) {
        resultCode=RESULT_CODE_ERROR_PLUGIN_INACTIVE;
        finish=true;
      }
 else {
        plugin.stopRecording();
      }
      if (uri.getBooleanQueryParameter(PARAM_CLOSE_AFTER_COMMAND,true)) {
        finish=true;
      }
      resultCode=Activity.RESULT_OK;
    }
 else     if (API_CMD_SUBSCRIBE_VOICE_NOTIFICATIONS.equals(cmd)) {
      resultCode=RESULT_CODE_ERROR_NOT_IMPLEMENTED;
    }
  }
 catch (  Exception e) {
    LOG.error("Error processApiRequest:",e);
    resultCode=RESULT_CODE_ERROR_UNKNOWN;
  }
  return result;
}
