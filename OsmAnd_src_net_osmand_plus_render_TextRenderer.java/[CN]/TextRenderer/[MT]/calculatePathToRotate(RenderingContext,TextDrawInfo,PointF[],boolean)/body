{
  int len=points.length;
  if (!drawOnPath) {
    p.drawOnPath=null;
    float px=0;
    float py=0;
    for (int i=1; i < len; i++) {
      px+=points[i].x - points[i - 1].x;
      py+=points[i].y - points[i - 1].y;
    }
    if (px != 0 || py != 0) {
      p.pathRotate=(float)(-Math.atan2(px,py) + Math.PI / 2);
    }
    return true;
  }
  boolean inverse=false;
  float roadLength=0;
  boolean prevInside=false;
  float visibleRoadLength=0;
  float textw=(float)p.bounds.width();
  int last=0;
  int startVisible=0;
  float[] distances=new float[points.length - 1];
  float normalTextLen=1.5f * textw;
  for (int i=0; i < len; i++, last++) {
    boolean inside=points[i].x >= 0 && points[i].x <= rc.width && points[i].x >= 0 && points[i].y <= rc.height;
    if (i > 0) {
      float d=FloatMath.sqrt(fsqr(points[i].x - points[i - 1].x) + fsqr(points[i].y - points[i - 1].y));
      distances[i - 1]=d;
      roadLength+=d;
      if (inside) {
        visibleRoadLength+=d;
        if (!prevInside) {
          startVisible=i - 1;
        }
      }
 else       if (prevInside) {
        if (visibleRoadLength >= normalTextLen) {
          break;
        }
        visibleRoadLength=0;
      }
    }
    prevInside=inside;
  }
  if (textw >= roadLength) {
    return false;
  }
  int startInd=0;
  int endInd=len;
  if (textw < visibleRoadLength && last - startVisible > 1) {
    startInd=startVisible;
    endInd=last;
    if (visibleRoadLength > 3 * textw) {
      boolean ch;
      do {
        ch=false;
        if (endInd - startInd > 2 && visibleRoadLength - distances[startInd] > normalTextLen) {
          visibleRoadLength-=distances[startInd];
          startInd++;
          ch=true;
        }
        if (endInd - startInd > 2 && visibleRoadLength - distances[endInd - 2] > normalTextLen) {
          visibleRoadLength-=distances[endInd - 2];
          endInd--;
          ch=true;
        }
      }
 while (ch);
    }
  }
  if (startInd > 0 || endInd < len) {
    Path path=new Path();
    for (int i=startInd; i < endInd; i++) {
      if (i == startInd) {
        path.moveTo(points[i].x,points[i].y);
      }
 else {
        path.lineTo(points[i].x,points[i].y);
      }
    }
    p.drawOnPath=path;
  }
  float px=0;
  float py=0;
  for (int i=startInd + 1; i < endInd; i++) {
    px+=points[i].x - points[i - 1].x;
    py+=points[i].y - points[i - 1].y;
  }
  float scale=0.5f;
  float plen=(float)Math.sqrt(px * px + py * py);
  float ox=-py;
  float oy=px;
  if (plen > 0) {
    float rot=(float)(-Math.atan2(px,py) + Math.PI / 2);
    if (rot < 0)     rot+=Math.PI * 2;
    if (rot > Math.PI / 2f && rot < 3 * Math.PI / 2f) {
      rot+=Math.PI;
      inverse=true;
      ox=-ox;
      oy=-oy;
    }
    p.pathRotate=rot;
    ox*=(p.bounds.height() / plen) / 2;
    oy*=(p.bounds.height() / plen) / 2;
  }
  p.centerX=points[startInd].x + scale * px + ox;
  p.centerY=points[startInd].y + scale * py + oy;
  p.vOffset+=p.textSize / 2 - 1;
  if (inverse) {
    Path path=new Path();
    for (int i=endInd - 1; i >= startInd; i--) {
      if (i == endInd - 1) {
        path.moveTo(points[i].x,points[i].y);
      }
 else {
        path.lineTo(points[i].x,points[i].y);
      }
    }
    p.drawOnPath=path;
  }
  return true;
}
