{
  if (Math.abs(tRot) < Math.PI / 15 && Math.abs(sRot) < Math.PI / 15) {
    return QuadRect.intersects(tRect,sRect);
  }
  double dist=Math.sqrt(sqr(tRect.centerX() - sRect.centerX()) + sqr(tRect.centerY() - sRect.centerY()));
  if (dist < 3) {
    return true;
  }
  if (Math.abs(Math.cos(tRot - sRot)) < 0.3) {
    tRot+=Math.PI / 2;
    double l=tRect.centerX() - tRect.height() / 2;
    double t=tRect.centerY() - tRect.width() / 2;
    tRect=new QuadRect(l,t,l + tRect.height(),t + tRect.width());
  }
  if (Math.abs(FloatMath.sin(tRot - sRot)) < 0.3) {
    float diff=(float)(-Math.atan2(tRect.centerX() - sRect.centerX(),tRect.centerY() - sRect.centerY()) + Math.PI / 2);
    diff-=sRot;
    double left=sRect.centerX() + dist * FloatMath.cos(diff) - tRect.width() / 2;
    double top=sRect.centerY() - dist * FloatMath.sin(diff) - tRect.height() / 2;
    QuadRect nRect=new QuadRect(left,top,left + tRect.width(),top + tRect.height());
    return QuadRect.intersects(nRect,sRect);
  }
  return QuadRect.intersects(tRect,sRect);
}
