{
  render.setInitialTagValueZoom(pair.tag,pair.value,rc.zoom,o);
  render.setIntFilter(render.ALL.R_TEXT_LENGTH,name.length());
  render.setStringFilter(render.ALL.R_NAME_TAG,tagName);
  if (render.search(RenderingRulesStorage.TEXT_RULES)) {
    if (render.getFloatPropertyValue(render.ALL.R_TEXT_SIZE) > 0) {
      final TextDrawInfo text=new TextDrawInfo(name);
      text.fillProperties(rc,render,xMid,yMid);
      final String tagName2=render.getStringPropertyValue(render.ALL.R_NAME_TAG2);
      if (!Algorithms.isEmpty(tagName2)) {
        o.getObjectNames().forEachEntry(new TIntObjectProcedure<String>(){
          @Override public boolean execute(          int tagid,          String nname){
            String tagNameN2=o.getMapIndex().decodeType(tagid).tag;
            if (tagName2.equals(tagNameN2)) {
              if (nname != null && nname.trim().length() > 0) {
                text.text+=" " + nname;
              }
              return false;
            }
            return true;
          }
        }
);
      }
      paintText.setTextSize(text.textSize);
      Rect bs=new Rect();
      paintText.getTextBounds(name,0,name.length(),bs);
      text.bounds=new QuadRect(bs.left,bs.top,bs.right,bs.bottom);
      text.bounds.inset(-rc.getDensityValue(3),-rc.getDensityValue(10));
      boolean display=true;
      if (path != null) {
        text.drawOnPath=path;
        display=calculatePathToRotate(rc,text,points,render.getIntPropertyValue(render.ALL.R_TEXT_ON_PATH,0) != 0);
      }
      if (text.drawOnPath == null) {
        text.bounds.offset(text.centerX,text.centerY);
        text.bounds.offset(-text.bounds.width() / 2,0);
      }
 else {
        text.bounds.offset(text.centerX - text.bounds.width() / 2,text.centerY - text.bounds.height() / 2);
      }
      if (display) {
        rc.textToDraw.add(text);
      }
    }
  }
}
