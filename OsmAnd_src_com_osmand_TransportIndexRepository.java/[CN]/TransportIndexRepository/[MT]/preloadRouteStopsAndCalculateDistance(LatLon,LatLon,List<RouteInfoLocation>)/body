{
  long now=System.currentTimeMillis();
  if (cacheSQLRouteStops == null) {
    StringBuilder sql=new StringBuilder(200);
    sql.append("SELECT ");
    String[] cols=IndexConstants.generateColumnNames(IndexTransportStop.values());
    for (int i=0; i < cols.length; i++) {
      if (i > 0) {
        sql.append(", ");
      }
      sql.append(IndexTransportStop.getTable()).append(".").append(cols[i]);
    }
    sql.append(" FROM ").append(IndexTransportRouteStop.getTable());
    sql.append(" JOIN ").append(IndexTransportStop.getTable());
    sql.append(" ON ").append(IndexTransportStop.getTable()).append(".").append(IndexTransportStop.ID);
    sql.append(" = ").append(IndexTransportRouteStop.getTable()).append(".").append(IndexTransportRouteStop.STOP);
    sql.append(" WHERE ").append("? = ").append(IndexTransportRouteStop.getTable()).append(".").append(IndexTransportRouteStop.ROUTE);
    sql.append(" AND ?=").append(IndexTransportRouteStop.getTable()).append(".").append(IndexTransportRouteStop.DIRECTION);
    cacheSQLRouteStops=sql.toString();
  }
  for (  RouteInfoLocation i : listRoutes) {
    int dist=0;
    if (locationToGo != null) {
      dist=(int)MapUtils.getDistance(locationToGo,i.getStart().getLocation());
    }
    Cursor query=db.rawQuery(cacheSQLRouteStops,new String[]{i.getRoute().getId() + "",i.getDirection() ? "1" : "0"});
    if (query.moveToFirst()) {
      boolean found=false;
      do {
        TransportStop st=null;
        if (found) {
          st=new TransportStop();
          st.setId(query.getLong(IndexTransportStop.ID.ordinal()));
          st.setLocation(query.getDouble(IndexTransportStop.LATITUDE.ordinal()),query.getDouble(IndexTransportStop.LONGITUDE.ordinal()));
          st.setName(query.getString(IndexTransportStop.NAME.ordinal()));
          st.setEnName(query.getString(IndexTransportStop.NAME_EN.ordinal()));
        }
 else         if (query.getLong(IndexTransportStop.ID.ordinal()) == i.getStart().getId()) {
          st=i.getStart();
          found=true;
        }
        if (found) {
          if (locationToGo != null) {
            double d=MapUtils.getDistance(locationToGo,st.getLocation());
            if (d < dist) {
              dist=(int)d;
            }
          }
          if (i.direction) {
            i.getRoute().getForwardStops().add(st);
          }
 else {
            i.getRoute().getBackwardStops().add(st);
          }
        }
      }
 while (query.moveToNext());
    }
    query.close();
    if (locationToGo != null) {
      i.setDistToLocation(dist);
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(String.format("Loading routes done in %s ms for %s routes.",System.currentTimeMillis() - now,listRoutes.size()));
  }
  if (locationToGo != null) {
    Collections.sort(listRoutes,new Comparator<RouteInfoLocation>(){
      @Override public int compare(      RouteInfoLocation object1,      RouteInfoLocation object2){
        return object1.getDistToLocation() - object2.getDistToLocation();
      }
    }
);
  }
 else {
    Collections.sort(listRoutes,new Comparator<RouteInfoLocation>(){
      @Override public int compare(      RouteInfoLocation object1,      RouteInfoLocation object2){
        return Double.compare(MapUtils.getDistance(loc,object1.getStart().getLocation()),MapUtils.getDistance(loc,object2.getStart().getLocation()));
      }
    }
);
  }
}
