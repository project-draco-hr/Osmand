{
  if (render == null || pair == null) {
    return;
  }
  int length=obj.getPointsLength();
  if (length < 2) {
    return;
  }
  rc.main.emptyLine();
  rc.second.emptyLine();
  rc.third.emptyLine();
  rc.adds=null;
  boolean res=render.renderPolyline(pair.tag,pair.value,rc.zoom,rc,this,layer);
  if (rc.main.strokeWidth == 0 || !res) {
    return;
  }
  if (rc.zoom >= 16 && "highway".equals(pair.tag) && MapRenderingTypes.isOneWayWay(obj.getHighwayAttributes())) {
    rc.adds=getOneWayProperties();
  }
  rc.visible++;
  Path path=null;
  float pathRotate=0;
  float xLength=0;
  float yLength=0;
  boolean inverse=false;
  float xPrev=0;
  float yPrev=0;
  float xMid=0;
  float yMid=0;
  PointF middlePoint=new PointF();
  int middle=obj.getPointsLength() / 2;
  for (int i=0; i < length; i++) {
    PointF p=calcPoint(obj,i,rc);
    if (i == 0 || i == length - 1) {
      xMid+=p.x;
      yMid+=p.y;
    }
    if (path == null) {
      path=new Path();
      path.moveTo(p.x,p.y);
    }
 else {
      xLength+=p.x - xPrev;
      yLength+=p.y - yPrev;
      if (i == middle) {
        middlePoint.set(p.x,p.y);
        double rot=-Math.atan2(p.x - xPrev,p.y - yPrev) * 180 / Math.PI;
        if (rot < 0) {
          rot+=360;
        }
        if (rot < 180) {
          rot+=180;
          inverse=true;
        }
        pathRotate=(float)rot;
      }
      path.lineTo(p.x,p.y);
    }
    xPrev=p.x;
    yPrev=p.y;
  }
  if (path != null) {
    rc.main.updatePaint(paint);
    canvas.drawPath(path,paint);
    if (rc.second.strokeWidth != 0) {
      rc.second.updatePaint(paint);
      canvas.drawPath(path,paint);
      if (rc.third.strokeWidth != 0) {
        rc.third.updatePaint(paint);
        canvas.drawPath(path,paint);
      }
    }
    if (rc.adds != null) {
      for (int i=0; i < rc.adds.length; i++) {
        rc.adds[i].updatePaint(paint);
        canvas.drawPath(path,paint);
      }
    }
    if (obj.getName() != null && obj.getName().length() > 0) {
      String name=obj.getName();
      String ref=null;
      if (name.charAt(0) == MapRenderingTypes.REF_CHAR) {
        ref=name.substring(1);
        name="";
        for (int k=0; k < ref.length(); k++) {
          if (ref.charAt(k) == MapRenderingTypes.REF_CHAR) {
            if (k < ref.length() - 1) {
              name=ref.substring(k + 1);
            }
            ref=ref.substring(0,k);
            break;
          }
        }
      }
      if (ref != null && ref.trim().length() > 0) {
        rc.clearText();
        ref=render.renderObjectText(ref,pair.tag,pair.value,rc,true);
        TextDrawInfo text=new TextDrawInfo(ref);
        if (!rc.showTextOnPath) {
          text.fillProperties(rc,middlePoint.x,middlePoint.y);
        }
 else {
        }
        rc.textToDraw.add(text);
      }
      if (name != null && name.trim().length() > 0) {
        rc.clearText();
        name=render.renderObjectText(name,pair.tag,pair.value,rc,false);
        if (rc.textSize > 0) {
          TextDrawInfo text=new TextDrawInfo(name);
          if (!rc.showTextOnPath) {
            text.fillProperties(rc,middlePoint.x,middlePoint.y);
            rc.textToDraw.add(text);
          }
 else {
            if (paintText.measureText(obj.getName()) < Math.max(Math.abs(xLength),Math.abs(yLength))) {
              if (inverse) {
                path.rewind();
                boolean st=true;
                for (int i=obj.getPointsLength() - 1; i >= 0; i--) {
                  PointF p=calcPoint(obj,i,rc);
                  if (st) {
                    st=false;
                    path.moveTo(p.x,p.y);
                  }
 else {
                    path.lineTo(p.x,p.y);
                  }
                }
              }
              text.fillProperties(rc,xMid / 2,yMid / 2);
              text.pathRotate=pathRotate;
              text.drawOnPath=path;
              text.vOffset=rc.main.strokeWidth / 2 - 1;
              rc.textToDraw.add(text);
            }
          }
        }
      }
    }
  }
}
