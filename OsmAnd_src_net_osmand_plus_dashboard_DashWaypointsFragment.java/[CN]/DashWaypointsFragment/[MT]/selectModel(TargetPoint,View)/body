{
  boolean light=((OsmandApplication)getActivity().getApplication()).getSettings().isLightContent();
  final PopupMenu optionsMenu=new PopupMenu(getActivity(),v);
  DirectionsDialogs.setupPopUpMenuIcon(optionsMenu);
  MenuItem item=optionsMenu.getMenu().add(R.string.shared_string_add_to_favorites).setIcon(light ? R.drawable.ic_action_fav_light : R.drawable.ic_action_fav_dark);
  item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      Bundle args=new Bundle();
      Dialog dlg=FavoriteDialogs.createAddFavouriteDialog(getActivity(),args);
      dlg.show();
      FavoriteDialogs.prepareAddFavouriteDialog(getActivity(),dlg,args,model.getLatitude(),model.getLongitude(),model.getOriginalPointDescription());
      return true;
    }
  }
);
  boolean target=model == getMyApplication().getTargetPointsHelper().getPointToNavigate();
  if (SHOW_ALL && getMyApplication().getTargetPointsHelper().getIntermediatePoints().size() > 0) {
    final List<TargetPoint> allTargets=getMyApplication().getTargetPointsHelper().getIntermediatePointsWithTarget();
    if (model.index > 0 || target) {
      final int ind=target ? allTargets.size() - 1 : model.index;
      item=optionsMenu.getMenu().add(R.string.waypoint_visit_before).setIcon(light ? R.drawable.ic_action_up_light : R.drawable.ic_action_up_dark);
      item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
        @Override public boolean onMenuItemClick(        MenuItem item){
          TargetPoint remove=allTargets.remove(ind - 1);
          allTargets.add(ind,remove);
          getMyApplication().getTargetPointsHelper().reorderAllTargetPoints(allTargets,true);
          setupTargets();
          return true;
        }
      }
);
    }
    if (!target) {
      item=optionsMenu.getMenu().add(R.string.waypoint_visit_after).setIcon(light ? R.drawable.ic_action_down_light : R.drawable.ic_action_down_dark);
      item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
        @Override public boolean onMenuItemClick(        MenuItem item){
          TargetPoint remove=allTargets.remove(model.index + 1);
          allTargets.add(model.index,remove);
          getMyApplication().getTargetPointsHelper().reorderAllTargetPoints(allTargets,true);
          setupTargets();
          return true;
        }
      }
);
    }
  }
  item=optionsMenu.getMenu().add(R.string.shared_string_delete).setIcon(light ? R.drawable.ic_action_gdiscard_light : R.drawable.ic_action_gdiscard_dark);
  item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    @Override public boolean onMenuItemClick(    MenuItem item){
      getMyApplication().getTargetPointsHelper().removeWayPoint(true,target ? -1 : model.index);
      setupTargets();
      return true;
    }
  }
);
  optionsMenu.show();
}
