{
  GPXFile res=new GPXFile();
  SimpleDateFormat format=new SimpleDateFormat(GPX_TIME_FORMAT);
  format.setTimeZone(TimeZone.getTimeZone("UTC"));
  try {
    XmlPullParser parser=Xml.newPullParser();
    parser.setInput(new InputStreamReader(f));
    Stack<GPXExtensions> parserState=new Stack<GPXExtensions>();
    parserState.push(res);
    int tok;
    while ((tok=parser.next()) != XmlPullParser.END_DOCUMENT) {
      if (tok == XmlPullParser.START_TAG) {
        GPXExtensions element=parserState.peek();
        element.parse(parser,parserState,format);
      }
 else       if (tok == XmlPullParser.END_TAG) {
        GPXExtensions parse=parserState.peek();
        String tag=parser.getName();
        if (!parse.parseEnd(tag,parserState)) {
          log.debug("Bad ending tag: " + tag + " for element "+ parse.getClass());
        }
      }
    }
    if (convertCloudmadeSource && res.isCloudmadeRouteFile()) {
      Track tk=new Track();
      res.tracks.add(tk);
      TrkSegment segment=new TrkSegment();
      tk.segments.add(segment);
      for (      WptPt wp : res.points) {
        segment.points.add(wp);
      }
      res.points.clear();
    }
  }
 catch (  XmlPullParserException e) {
    log.error("Error reading gpx",e);
    res.warning=ctx.getString(R.string.error_reading_gpx);
  }
catch (  IOException e) {
    log.error("Error reading gpx",e);
    res.warning=ctx.getString(R.string.error_reading_gpx);
  }
  return res;
}
