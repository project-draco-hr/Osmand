{
  if (laneType == 0) {
    return defaultType;
  }
  boolean flip=false;
  int turnResourceId=R.drawable.map_turn_right;
  if (secondTurnType == 0) {
    TurnType tp=TurnType.valueOf(laneType,false);
switch (tp.getValue()) {
case TurnType.C:
      turnResourceId=R.drawable.map_turn_forward;
    break;
case TurnType.TR:
  turnResourceId=R.drawable.map_turn_right;
break;
case TurnType.TL:
turnResourceId=R.drawable.map_turn_right;
flip=true;
break;
case TurnType.KR:
turnResourceId=R.drawable.map_turn_right;
break;
case TurnType.KL:
turnResourceId=R.drawable.map_turn_right;
flip=true;
break;
case TurnType.TSLR:
turnResourceId=R.drawable.map_turn_slight_right;
break;
case TurnType.TSLL:
turnResourceId=R.drawable.map_turn_slight_right;
flip=true;
break;
case TurnType.TRU:
turnResourceId=R.drawable.map_turn_uturn_right;
break;
case TurnType.TU:
turnResourceId=R.drawable.map_turn_uturn;
flip=true;
break;
}
}
 else {
TurnType tp=TurnType.valueOf(laneType,false);
switch (tp.getValue()) {
case TurnType.C:
turnResourceId=R.drawable.map_turn_forward;
break;
case TurnType.TR:
turnResourceId=R.drawable.map_turn_forward_right_turn;
break;
case TurnType.TL:
turnResourceId=R.drawable.map_turn_forward_right_turn;
flip=true;
break;
case TurnType.KR:
turnResourceId=R.drawable.map_turn_forward_slight_right_turn;
break;
case TurnType.KL:
turnResourceId=R.drawable.map_turn_forward_slight_right_turn;
flip=true;
break;
case TurnType.TSLR:
turnResourceId=R.drawable.map_turn_forward_slight_right_turn;
break;
case TurnType.TSLL:
turnResourceId=R.drawable.map_turn_forward_slight_right_turn;
flip=true;
break;
case TurnType.TRU:
turnResourceId=R.drawable.map_turn_forward_uturn_right;
break;
case TurnType.TU:
turnResourceId=R.drawable.map_turn_forward_uturn_right;
flip=true;
break;
default :
turnResourceId=R.drawable.map_turn_forward_right_turn;
break;
}
}
Bitmap b=flip ? getFlippedBitmap(res,turnResourceId) : BitmapFactory.decodeResource(res,turnResourceId);
float bRatio=(float)b.getWidth() / (float)b.getHeight();
float s=72f * coef;
int wq=Math.round(s / bRatio);
int hq=Math.round(s);
b=Bitmap.createScaledBitmap(b,wq,hq,false);
return b;
}
