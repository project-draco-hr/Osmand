{
  final List<Path> paths=new ArrayList<Path>();
  final Path laneStraight=getPathFromTurnType(paths,TurnType.C,null);
  final Paint paintBlack=new Paint();
  paintBlack.setStyle(Style.STROKE);
  paintBlack.setColor(Color.BLACK);
  paintBlack.setAntiAlias(true);
  paintBlack.setStrokeWidth(2.5f);
  final Paint paintRouteDirection=new Paint();
  paintRouteDirection.setStyle(Style.FILL);
  paintRouteDirection.setColor(view.getResources().getColor(R.color.nav_arrow));
  paintRouteDirection.setAntiAlias(true);
  final float w=72 * scaleCoefficient / miniCoeff;
  final MapViewTrackingUtilities trackingUtilities=map.getMapViewTrackingUtilities();
  final OsmAndLocationProvider locationProvider=map.getMyApplication().getLocationProvider();
  final RoutingHelper rh=map.getMyApplication().getRoutingHelper();
  final BaseMapWidget lanesControl=new BaseMapWidget(view.getContext()){
    int[] lanes=null;
    boolean imminent=false;
    @Override protected void onMeasure(    int widthMeasureSpec,    int heightMeasureSpec){
      int ls=(int)(lanes == null ? 0 : lanes.length * w);
      setWDimensions(ls,(int)(w + 3 * scaleCoefficient));
    }
    @Override protected void onDraw(    Canvas canvas){
      super.onDraw(canvas);
      if (lanes != null && lanes.length > 0) {
        canvas.save();
        for (int i=0; i < lanes.length; i++) {
          int turnType;
          if ((lanes[i] & 1) == 1) {
            paintRouteDirection.setColor(imminent ? getResources().getColor(R.color.nav_arrow_imminent) : getResources().getColor(R.color.nav_arrow));
            turnType=TurnType.getPrimaryTurn(lanes[i]);
          }
 else {
            paintRouteDirection.setColor(getResources().getColor(R.color.nav_arrow_distant));
            turnType=TurnType.getPrimaryTurn(lanes[i]);
          }
          Path p=getPathFromTurnType(paths,turnType,laneStraight);
          canvas.drawPath(p,paintBlack);
          canvas.drawPath(p,paintRouteDirection);
          canvas.translate(w,0);
        }
        canvas.restore();
      }
    }
    @Override public boolean updateInfo(    DrawSettings drawSettings){
      boolean visible=false;
      int locimminent=-1;
      int[] loclanes=null;
      if ((rh == null || !rh.isFollowingMode()) && trackingUtilities.isMapLinkedToLocation() && view.getSettings().SHOW_LANES.get()) {
        RouteDataObject ro=locationProvider.getLastKnownRouteSegment();
        Location lp=locationProvider.getLastKnownLocation();
        if (ro != null) {
          float degree=lp == null || !lp.hasBearing() ? 0 : lp.getBearing();
          loclanes=RouteResultPreparation.parseTurnLanes(ro,degree / 180 * Math.PI);
        }
      }
 else       if (rh != null && rh.isRouteCalculated()) {
        if (rh.isFollowingMode() && view.getSettings().SHOW_LANES.get()) {
          NextDirectionInfo r=rh.getNextRouteDirectionInfo(new NextDirectionInfo(),false);
          if (r != null && r.directionInfo != null && r.directionInfo.getTurnType() != null) {
            loclanes=r.directionInfo.getTurnType().getLanes();
            locimminent=r.imminent;
            if ((r.distanceTo > 700 && r.directionInfo.getTurnType().isSkipToSpeak()) || r.distanceTo > 1200) {
              loclanes=null;
            }
          }
        }
 else {
          int di=MapRouteInfoControl.getDirectionInfo();
          if (di >= 0 && MapRouteInfoControl.isControlVisible() && di < rh.getRouteDirections().size()) {
            RouteDirectionInfo next=rh.getRouteDirections().get(di);
            if (next != null) {
              loclanes=next.getTurnType().getLanes();
            }
          }
        }
      }
      visible=loclanes != null && loclanes.length > 0;
      if (visible) {
        if (!Arrays.equals(lanes,loclanes)) {
          lanes=loclanes;
          requestLayout();
          invalidate();
        }
        if ((locimminent == 0) != imminent) {
          imminent=(locimminent == 0);
          invalidate();
        }
      }
      updateVisibility(visible);
      return true;
    }
  }
;
  return lanesControl;
}
