{
  final RoutingHelper routingHelper=map.getRoutingHelper();
  final int time=R.drawable.widget_time_day;
  final int timeN=R.drawable.widget_time_night;
  final int timeToGo=R.drawable.widget_time_to_distance_day;
  final int timeToGoN=R.drawable.widget_time_to_distance_night;
  final OsmandApplication ctx=map.getMyApplication();
  final OsmandPreference<Boolean> showArrival=ctx.getSettings().SHOW_ARRIVAL_TIME_OTHERWISE_EXPECTED_TIME;
  final TextInfoWidget leftTimeControl=new TextInfoWidget(map){
    private long cachedLeftTime=0;
    @Override public boolean updateInfo(    DrawSettings drawSettings){
      setIcons(showArrival.get() ? time : timeToGo,showArrival.get() ? timeN : timeToGoN);
      int time=0;
      if (routingHelper != null && routingHelper.isRouteCalculated()) {
        time=routingHelper.getLeftTime();
        if (time != 0) {
          if (showArrival.get()) {
            long toFindTime=time * 1000 + System.currentTimeMillis();
            if (Math.abs(toFindTime - cachedLeftTime) > 30000) {
              cachedLeftTime=toFindTime;
              setContentTitle(map.getString(R.string.access_arrival_time));
              if (DateFormat.is24HourFormat(ctx)) {
                setText(DateFormat.format("k:mm",toFindTime).toString(),null);
              }
 else {
                setText(DateFormat.format("h:mm",toFindTime).toString(),DateFormat.format("aa",toFindTime).toString());
              }
              return true;
            }
          }
 else {
            if (Math.abs(time - cachedLeftTime) > 30) {
              cachedLeftTime=time;
              int hours=time / (60 * 60);
              int minutes=(time / 60) % 60;
              setContentTitle(map.getString(R.string.map_widget_time));
              setText(String.format("%d:%02d",hours,minutes),null);
              return true;
            }
          }
        }
      }
      if (time == 0 && cachedLeftTime != 0) {
        cachedLeftTime=0;
        setText(null,null);
        return true;
      }
      return false;
    }
  }
;
  leftTimeControl.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showArrival.set(!showArrival.get());
      leftTimeControl.setIcons(showArrival.get() ? time : timeToGo,showArrival.get() ? timeN : timeToGoN);
      map.getMapView().refreshMap();
    }
  }
);
  leftTimeControl.setText(null,null);
  leftTimeControl.setIcons(showArrival.get() ? time : timeToGo,showArrival.get() ? timeN : timeToGoN);
  return leftTimeControl;
}
