{
  STORE_ATTTRIBUTES=true;
  String defaultFile="/Users/victorshcherb/osmand/repos/resources/rendering_styles/default.render.xml";
  if (args.length > 0) {
    defaultFile=args[0];
  }
  Map<String,String> renderingConstants=new LinkedHashMap<String,String>();
  InputStream is=new FileInputStream(defaultFile);
  try {
    XmlPullParser parser=PlatformUtil.newXMLPullParser();
    parser.setInput(is,"UTF-8");
    int tok;
    while ((tok=parser.next()) != XmlPullParser.END_DOCUMENT) {
      if (tok == XmlPullParser.START_TAG) {
        String tagName=parser.getName();
        if (tagName.equals("renderingConstant")) {
          if (!renderingConstants.containsKey(parser.getAttributeValue("","name"))) {
            renderingConstants.put(parser.getAttributeValue("","name"),parser.getAttributeValue("","value"));
          }
        }
      }
    }
  }
  finally {
    is.close();
  }
  RenderingRulesStorage storage=new RenderingRulesStorage("default",renderingConstants);
  final RenderingRulesStorageResolver resolver=new RenderingRulesStorageResolver(){
    @Override public RenderingRulesStorage resolve(    String name,    RenderingRulesStorageResolver ref) throws XmlPullParserException, IOException {
      RenderingRulesStorage depends=new RenderingRulesStorage(name,null);
      depends.parseRulesFromXmlInputStream(RenderingRulesStorage.class.getResourceAsStream(name + ".render.xml"),ref);
      return depends;
    }
  }
;
  is=new FileInputStream(defaultFile);
  storage.parseRulesFromXmlInputStream(is,resolver);
  printAllRules(storage);
}
