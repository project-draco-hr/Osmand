{
  boolean stateChanged=false;
  final boolean isCase=isCase(name);
  final boolean isSwitch=isSwitch(name);
  if (isCase || isSwitch) {
    attrsMap.clear();
    boolean top=stack.size() == 0 || isTopCase();
    parseAttributes(attrsMap);
    RenderingRule renderingRule=new RenderingRule(attrsMap,isSwitch,RenderingRulesStorage.this);
    if (top || STORE_ATTTRIBUTES) {
      renderingRule.storeAttributes(attrsMap);
    }
    if (stack.size() > 0 && stack.peek() instanceof RenderingRule) {
      RenderingRule parent=((RenderingRule)stack.peek());
      parent.addIfElseChildren(renderingRule);
    }
    stack.push(renderingRule);
  }
 else   if (isApply(name)) {
    attrsMap.clear();
    parseAttributes(attrsMap);
    RenderingRule renderingRule=new RenderingRule(attrsMap,false,RenderingRulesStorage.this);
    if (STORE_ATTTRIBUTES) {
      renderingRule.storeAttributes(attrsMap);
    }
    if (stack.size() > 0 && stack.peek() instanceof RenderingRule) {
      ((RenderingRule)stack.peek()).addIfChildren(renderingRule);
    }
 else {
      throw new XmlPullParserException("Apply (groupFilter) without parent");
    }
    stack.push(renderingRule);
  }
 else   if ("order".equals(name)) {
    state=ORDER_RULES;
    stateChanged=true;
  }
 else   if ("text".equals(name)) {
    state=TEXT_RULES;
    stateChanged=true;
  }
 else   if ("point".equals(name)) {
    state=POINT_RULES;
    stateChanged=true;
  }
 else   if ("line".equals(name)) {
    state=LINE_RULES;
    stateChanged=true;
  }
 else   if ("polygon".equals(name)) {
    state=POLYGON_RULES;
    stateChanged=true;
  }
 else   if ("renderingAttribute".equals(name)) {
    String attr=parser.getAttributeValue("","name");
    RenderingRule root=new RenderingRule(new HashMap<String,String>(),false,RenderingRulesStorage.this);
    renderingAttributes.put(attr,root);
    stack.push(root);
  }
 else   if ("renderingProperty".equals(name)) {
    String attr=parser.getAttributeValue("","attr");
    RenderingRuleProperty prop;
    String type=parser.getAttributeValue("","type");
    if ("boolean".equalsIgnoreCase(type)) {
      prop=RenderingRuleProperty.createInputBooleanProperty(attr);
    }
 else     if ("string".equalsIgnoreCase(type)) {
      prop=RenderingRuleProperty.createInputStringProperty(attr);
    }
 else {
      prop=RenderingRuleProperty.createInputIntProperty(attr);
    }
    prop.setDescription(parser.getAttributeValue("","description"));
    prop.setCategory(parser.getAttributeValue("","category"));
    prop.setName(parser.getAttributeValue("","name"));
    if (parser.getAttributeValue("","possibleValues") != null) {
      prop.setPossibleValues(parser.getAttributeValue("","possibleValues").split(","));
    }
    PROPS.registerRule(prop);
  }
 else   if ("renderingConstant".equals(name)) {
    if (!renderingConstants.containsKey(parser.getAttributeValue("","name"))) {
      renderingConstants.put(parser.getAttributeValue("","name"),parser.getAttributeValue("","value"));
    }
  }
 else   if ("renderingStyle".equals(name)) {
    String depends=parser.getAttributeValue("","depends");
    if (depends != null && depends.length() > 0) {
      this.dependsStorage=resolver.resolve(depends,resolver);
    }
    if (dependsStorage != null) {
      dictionary=new ArrayList<String>(dependsStorage.dictionary);
      dictionaryMap=new LinkedHashMap<String,Integer>(dependsStorage.dictionaryMap);
      PROPS=new RenderingRuleStorageProperties(dependsStorage.PROPS);
    }
    internalRenderingName=parser.getAttributeValue("","name");
  }
 else   if ("renderer".equals(name)) {
    throw new XmlPullParserException("Rendering style is deprecated and no longer supported.");
  }
 else {
    log.warn("Unknown tag : " + name);
  }
  if (stateChanged) {
    tagValueGlobalRules[state]=new TIntObjectHashMap<RenderingRule>();
  }
}
