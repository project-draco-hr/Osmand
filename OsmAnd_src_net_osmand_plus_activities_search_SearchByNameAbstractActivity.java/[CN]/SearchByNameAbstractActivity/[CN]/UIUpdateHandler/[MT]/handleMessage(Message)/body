{
  String currentFilter=SearchByNameAbstractActivity.this.currentFilter;
  if (msg.what == MESSAGE_CLEAR_LIST) {
    minimalIndex=Integer.MAX_VALUE;
    minimalText=null;
    getListAdapter().clear();
    endingObject=null;
    if (currentFilter.length() == 0) {
      endingMap.clear();
    }
    String etext=endingText;
    endingText="";
    if (previousSpan != null) {
      searchText.getText().removeSpan(previousSpan);
    }
    searchText.getText().replace(currentFilter.length(),currentFilter.length() + etext.length(),"");
  }
 else   if (msg.what == MESSAGE_ADD_ENTITY) {
    getListAdapter().add((T)msg.obj);
    if (currentFilter.length() > 0) {
      String text=getShortText((T)msg.obj);
      int entries=!endingMap.containsKey(text) ? 0 : endingMap.get(text);
      if (entries < minimalIndex) {
        if (minimalText != null) {
          endingMap.put(minimalText,endingMap.get(minimalText) - 1);
        }
        minimalIndex=entries;
        minimalText=text;
        endingMap.put(text,entries + 1);
        if (text.toLowerCase().startsWith(currentFilter.toLowerCase())) {
          text=text.substring(currentFilter.length());
        }
 else {
          text=" - " + text;
        }
        if (text.length() > MAX_VISIBLE_NAME) {
          text=text.substring(0,MAX_VISIBLE_NAME) + "..";
        }
        String etext=endingText;
        endingText=text;
        searchText.getText().replace(currentFilter.length(),currentFilter.length() + etext.length(),text);
        if (previousSpan != null) {
          searchText.getText().removeSpan(previousSpan);
        }
        previousSpan=new StyleSpan(Typeface.BOLD_ITALIC);
        searchText.getText().setSpan(previousSpan,currentFilter.length(),currentFilter.length() + text.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        if (searchText.getSelectionEnd() > currentFilter.length()) {
          searchText.setSelection(currentFilter.length());
        }
        endingObject=(T)msg.obj;
      }
    }
  }
}
