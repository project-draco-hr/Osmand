{
  final FavouritesDbHelper helper=((OsmandApplication)activity.getApplication()).getFavorites();
  final List<FavouritePoint> points=new ArrayList<FavouritePoint>(helper.getFavouritePoints());
  final Collator ci=java.text.Collator.getInstance();
  Collections.sort(points,new Comparator<FavouritePoint>(){
    @Override public int compare(    FavouritePoint object1,    FavouritePoint object2){
      return ci.compare(object1.getName(),object2.getName());
    }
  }
);
  final String[] names=new String[points.size()];
  if (names.length == 0) {
    AccessibleToast.makeText(activity,activity.getString(R.string.fav_points_not_exist),Toast.LENGTH_SHORT).show();
    return null;
  }
  Builder b=new AlertDialog.Builder(activity);
  final FavouritePoint[] favs=new FavouritePoint[points.size()];
  Iterator<FavouritePoint> it=points.iterator();
  int i=0;
  while (it.hasNext()) {
    FavouritePoint fp=it.next();
    favs[i]=fp;
    names[i]=fp.getName();
    i++;
  }
  b.setItems(names,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      FavouritePoint fv=favs[which];
      FavouritePoint point=(FavouritePoint)args.getSerializable(KEY_FAVORITE);
      if (helper.editFavourite(fv,point.getLatitude(),point.getLongitude())) {
        AccessibleToast.makeText(activity,activity.getString(R.string.fav_points_edited),Toast.LENGTH_SHORT).show();
      }
      if (activity instanceof MapActivity) {
        ((MapActivity)activity).getMapView().refreshMap();
      }
    }
  }
);
  AlertDialog al=b.create();
  return al;
}
