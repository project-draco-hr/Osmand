{
  final FavouritesDbHelper helper=((OsmandApplication)activity.getApplication()).getFavorites();
  final List<FavouritePoint> points=new ArrayList<FavouritePoint>(helper.getFavouritePoints());
  final Collator ci=java.text.Collator.getInstance();
  final boolean distance=args.containsKey("DISTANCE");
  Collections.sort(points,new Comparator<FavouritePoint>(){
    @Override public int compare(    FavouritePoint o1,    FavouritePoint o2){
      if (distance && activity instanceof MapActivity) {
        float f1=(float)MapUtils.getDistance(((MapActivity)activity).getMapLocation(),o1.getLatitude(),o1.getLongitude());
        float f2=(float)MapUtils.getDistance(((MapActivity)activity).getMapLocation(),o2.getLatitude(),o2.getLongitude());
        return Float.compare(f1,f2);
      }
      return ci.compare(o1.getCategory() + " " + o1.getName(),o2.getCategory() + " " + o2.getName());
    }
  }
);
  final String[] names=new String[points.size()];
  if (points.size() == 0) {
    AccessibleToast.makeText(activity,activity.getString(R.string.fav_points_not_exist),Toast.LENGTH_SHORT).show();
    return null;
  }
  Builder b=new AlertDialog.Builder(activity);
  final FavouritePoint[] favs=new FavouritePoint[points.size()];
  Iterator<FavouritePoint> it=points.iterator();
  int i=0;
  while (it.hasNext()) {
    FavouritePoint fp=it.next();
    favs[i]=fp;
    if (fp.getCategory().trim().length() == 0) {
      names[i]=fp.getName();
    }
 else {
      names[i]=fp.getCategory() + ": " + fp.getName();
    }
    if (activity instanceof MapActivity) {
      names[i]+="  " + OsmAndFormatter.getFormattedDistance((float)MapUtils.getDistance(((MapActivity)activity).getMapLocation(),fp.getLatitude(),fp.getLongitude()),((MapActivity)activity).getMyApplication());
    }
    i++;
  }
  final int layout;
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
    layout=R.layout.list_menu_item;
  }
 else {
    layout=R.layout.list_menu_item_native;
  }
  final ArrayAdapter<String> listAdapter=new ArrayAdapter<String>(activity,layout,R.id.title,names){
    @Override public View getView(    final int position,    View convertView,    ViewGroup parent){
      View v=convertView;
      if (v == null) {
        v=activity.getLayoutInflater().inflate(layout,null);
        int vl=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,32,activity.getResources().getDisplayMetrics());
        final LinearLayout.LayoutParams ll=new LinearLayout.LayoutParams(vl,vl);
        ll.setMargins(vl / 4,vl / 4,vl / 4,vl / 4);
        v.findViewById(R.id.icon).setLayoutParams(ll);
      }
      ImageView icon=(ImageView)v.findViewById(R.id.icon);
      FavouritePoint fp=points.get(position);
      icon.setImageDrawable(FavoriteImageDrawable.getOrCreate(activity,fp.getColor()));
      icon.setVisibility(View.VISIBLE);
      TextView tv=(TextView)v.findViewById(R.id.title);
      tv.setText(names[position]);
      tv.setTextSize(TypedValue.COMPLEX_UNIT_SP,16);
      final CheckBox ch=((CheckBox)v.findViewById(R.id.check_item));
      ch.setVisibility(View.INVISIBLE);
      return v;
    }
  }
;
  b.setAdapter(listAdapter,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      FavouritePoint fv=favs[which];
      FavouritePoint point=(FavouritePoint)args.getSerializable(KEY_FAVORITE);
      if (helper.editFavourite(fv,point.getLatitude(),point.getLongitude())) {
        AccessibleToast.makeText(activity,activity.getString(R.string.fav_points_edited),Toast.LENGTH_SHORT).show();
      }
      if (activity instanceof MapActivity) {
        ((MapActivity)activity).getMapView().refreshMap();
      }
    }
  }
);
  if (activity instanceof MapActivity) {
    b.setPositiveButton(distance ? R.string.sort_by_name : R.string.sort_by_distance,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        if (distance) {
          args.remove("DISTANCE");
        }
 else {
          args.putBoolean("DISTANCE",true);
        }
        createReplaceFavouriteDialog(activity,args).show();
      }
    }
);
  }
  AlertDialog al=b.create();
  return al;
}
