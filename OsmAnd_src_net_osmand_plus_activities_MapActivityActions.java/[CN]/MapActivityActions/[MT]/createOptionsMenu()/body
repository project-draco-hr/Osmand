{
  final OsmandMapTileView mapView=mapActivity.getMapView();
  final OsmandApplication app=mapActivity.getMyApplication();
  ContextMenuAdapter optionsMenuHelper=new ContextMenuAdapter(app);
  if (Version.isSherpafy(app)) {
    optionsMenuHelper.item(R.string.context_menu_item_share_location).icons(R.drawable.ic_action_gshare_dark,R.drawable.ic_action_gshare_light).listen(new OnContextMenuClick(){
      @Override public void onContextMenuClick(      int itemId,      int pos,      boolean isChecked,      DialogInterface dialog){
        if (getMyApplication().getLocationProvider().getLastKnownLocation() != null) {
          new ShareLocation(mapActivity).run();
        }
 else {
          Toast.makeText(getMyApplication(),"Location unknown",Toast.LENGTH_LONG).show();
        }
      }
    }
).reg();
  }
  optionsMenuHelper.item(R.string.where_am_i).icons(R.drawable.ic_action_gloc_dark,R.drawable.ic_action_gloc_light).listen(new OnContextMenuClick(){
    @Override public void onContextMenuClick(    int itemId,    int pos,    boolean isChecked,    DialogInterface dialog){
      if (getMyApplication().accessibilityEnabled()) {
        whereAmIDialog();
      }
 else {
        mapActivity.getMapViewTrackingUtilities().backToLocationImpl();
      }
    }
  }
).reg();
  boolean muteVisible=routingHelper.getFinalLocation() != null && routingHelper.isFollowingMode();
  if (muteVisible) {
    boolean mute=routingHelper.getVoiceRouter().isMute();
    int t=mute ? R.string.menu_mute_on : R.string.menu_mute_off;
    int icon;
    int iconLight;
    if (mute) {
      icon=R.drawable.a_10_device_access_volume_muted_dark;
      iconLight=R.drawable.a_10_device_access_volume_muted_light;
    }
 else {
      icon=R.drawable.a_10_device_access_volume_on_dark;
      iconLight=R.drawable.a_10_device_access_volume_on_light;
    }
    optionsMenuHelper.item(t).icons(icon,iconLight).listen(new OnContextMenuClick(){
      @Override public void onContextMenuClick(      int itemId,      int pos,      boolean isChecked,      DialogInterface dialog){
        routingHelper.getVoiceRouter().setMute(!routingHelper.getVoiceRouter().isMute());
      }
    }
).reg();
  }
  if (!routingHelper.isFollowingMode() && !routingHelper.isRoutePlanningMode()) {
    optionsMenuHelper.item(R.string.get_directions).icons(R.drawable.ic_action_gdirections_dark,R.drawable.ic_action_gdirections_light).listen(new OnContextMenuClick(){
      @Override public void onContextMenuClick(      int itemId,      int pos,      boolean isChecked,      DialogInterface dialog){
        enterRoutePlanningMode(null,null,false);
      }
    }
).reg();
  }
 else   if (routingHelper.isRouteCalculated()) {
    optionsMenuHelper.item(routingHelper.isRoutePlanningMode() ? R.string.continue_navigation : R.string.pause_navigation).icons(R.drawable.ic_action_gdirections_dark,R.drawable.ic_action_gdirections_light).listen(new OnContextMenuClick(){
      @Override public void onContextMenuClick(      int itemId,      int pos,      boolean isChecked,      DialogInterface dialog){
        if (routingHelper.isRoutePlanningMode()) {
          routingHelper.setRoutePlanningMode(false);
          routingHelper.setFollowingMode(true);
        }
 else {
          routingHelper.setRoutePlanningMode(true);
          routingHelper.setFollowingMode(false);
          routingHelper.setPauseNaviation(true);
        }
        mapActivity.getMapViewTrackingUtilities().switchToRoutePlanningMode();
        mapActivity.refreshMap();
      }
    }
).reg();
  }
  if (mapActivity.getPointToNavigate() != null) {
    int nav;
    if (routingHelper.isFollowingMode()) {
      nav=R.string.cancel_navigation;
    }
 else     if (routingHelper.isRouteCalculated() || routingHelper.isRouteBeingCalculated()) {
      nav=R.string.cancel_route;
    }
 else {
      nav=R.string.clear_destination;
    }
    optionsMenuHelper.item(nav).icons(R.drawable.ic_action_remove_dark,R.drawable.ic_action_remove_light).listen(new OnContextMenuClick(){
      @Override public void onContextMenuClick(      int itemId,      int pos,      boolean isChecked,      DialogInterface dialog){
        stopNavigationActionConfirm(mapView);
      }
    }
).reg();
  }
  if (getTargets().getPointToNavigate() != null) {
    optionsMenuHelper.item(R.string.target_points).icons(R.drawable.ic_action_flage_dark,R.drawable.ic_action_flage_light).listen(new OnContextMenuClick(){
      @Override public void onContextMenuClick(      int itemId,      int pos,      boolean isChecked,      DialogInterface dialog){
        if (getMyApplication().getWaypointHelper().isRouteCalculated()) {
          WaypointDialogHelper.showWaypointsDialog(mapActivity);
        }
 else {
          openIntermediatePointsDialog();
        }
      }
    }
).reg();
  }
  optionsMenuHelper.item(R.string.menu_layers).icons(R.drawable.ic_action_layers_dark,R.drawable.ic_action_layers_light).listen(new OnContextMenuClick(){
    @Override public void onContextMenuClick(    int itemId,    int pos,    boolean isChecked,    DialogInterface dialog){
      mapActivity.getMapLayers().openLayerSelectionDialog(mapView);
    }
  }
).reg();
  optionsMenuHelper.item(R.string.layer_map_appearance).icons(R.drawable.ic_action_settings_dark,R.drawable.ic_action_settings_light).listen(new OnContextMenuClick(){
    @Override public void onContextMenuClick(    int itemId,    int pos,    boolean isChecked,    DialogInterface dialog){
      mapActivity.getMapLayers().getMapInfoLayer().openViewConfigureDialog();
    }
  }
).reg();
  optionsMenuHelper.item(R.string.settings_Button).icons(R.drawable.ic_action_settings2_dark,R.drawable.ic_action_settings2_light).listen(new OnContextMenuClick(){
    @Override public void onContextMenuClick(    int itemId,    int pos,    boolean isChecked,    DialogInterface dialog){
      final Intent intentSettings=new Intent(mapActivity,mapActivity.getMyApplication().getAppCustomization().getSettingsActivity());
      mapActivity.startActivity(intentSettings);
    }
  }
).reg();
  optionsMenuHelper.item(R.string.search_button).icons(R.drawable.ic_action_search_dark,R.drawable.ic_action_search_light).listen(new OnContextMenuClick(){
    @Override public void onContextMenuClick(    int itemId,    int pos,    boolean isChecked,    DialogInterface dialog){
      Intent newIntent=new Intent(mapActivity,mapActivity.getMyApplication().getAppCustomization().getSearchActivity());
      LatLon loc=mapActivity.getMapLocation();
      newIntent.putExtra(SearchActivity.SEARCH_LAT,loc.getLatitude());
      newIntent.putExtra(SearchActivity.SEARCH_LON,loc.getLongitude());
      newIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
      mapActivity.startActivity(newIntent);
    }
  }
).reg();
  optionsMenuHelper.item(R.string.favorites_Button).icons(R.drawable.ic_action_fav_dark,R.drawable.ic_action_fav_light).listen(new OnContextMenuClick(){
    @Override public void onContextMenuClick(    int itemId,    int pos,    boolean isChecked,    DialogInterface dialog){
      Intent newIntent=new Intent(mapActivity,mapActivity.getMyApplication().getAppCustomization().getFavoritesActivity());
      mapActivity.startActivity(newIntent);
    }
  }
).reg();
  optionsMenuHelper.item(R.string.show_point_options).icons(R.drawable.ic_action_marker_dark,R.drawable.ic_action_marker_light).listen(new OnContextMenuClick(){
    @Override public void onContextMenuClick(    int itemId,    int pos,    boolean isChecked,    DialogInterface dialog){
      contextMenuPoint(mapView.getLatitude(),mapView.getLongitude());
    }
  }
).reg();
  if (Version.isGpsStatusEnabled(app)) {
    optionsMenuHelper.item(R.string.show_gps_status).icons(R.drawable.ic_action_gabout_dark,R.drawable.ic_action_gabout_light).listen(new OnContextMenuClick(){
      @Override public void onContextMenuClick(      int itemId,      int pos,      boolean isChecked,      DialogInterface dialog){
        new StartGPSStatus(mapActivity).run();
      }
    }
).reg();
  }
  optionsMenuHelper.item(R.string.tips_and_tricks).icons(R.drawable.ic_action_ghelp_dark,R.drawable.ic_action_ghelp_light).listen(new OnContextMenuClick(){
    @Override public void onContextMenuClick(    int itemId,    int pos,    boolean isChecked,    DialogInterface dialog){
      if (MainMenuActivity.TIPS_AND_TRICKS) {
        TipsAndTricksActivity tactivity=new TipsAndTricksActivity(mapActivity);
        Dialog dlg=tactivity.getDialogToShowTips(false,true);
        dlg.show();
      }
 else {
        final Intent helpIntent=new Intent(mapActivity,HelpActivity.class);
        mapActivity.startActivity(helpIntent);
      }
    }
  }
).reg();
  final OsmAndLocationProvider loc=app.getLocationProvider();
  if (app.getTargetPointsHelper().getPointToNavigate() != null || loc.getLocationSimulation().isRouteAnimating()) {
    if (OsmandPlugin.getEnabledPlugin(OsmandDevelopmentPlugin.class) != null) {
      optionsMenuHelper.item(loc.getLocationSimulation().isRouteAnimating() ? R.string.animate_route_off : R.string.animate_route).icons(R.drawable.ic_action_play_dark,R.drawable.ic_action_play_light).listen(new OnContextMenuClick(){
        @Override public void onContextMenuClick(        int itemId,        int pos,        boolean isChecked,        DialogInterface dialog){
          loc.getLocationSimulation().startStopRouteAnimation(mapActivity);
        }
      }
).reg();
    }
  }
  OsmandPlugin.registerOptionsMenu(mapActivity,optionsMenuHelper);
  optionsMenuHelper.item(R.string.exit_Button).icons(R.drawable.ic_action_quit_dark,R.drawable.ic_action_quit_light).listen(new OnContextMenuClick(){
    @Override public void onContextMenuClick(    int itemId,    int pos,    boolean isChecked,    DialogInterface dialog){
      Intent newIntent=new Intent(mapActivity,mapActivity.getMyApplication().getAppCustomization().getMainMenuActivity());
      newIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
      newIntent.putExtra(MainMenuActivity.APP_EXIT_KEY,MainMenuActivity.APP_EXIT_CODE);
      mapActivity.startActivity(newIntent);
    }
  }
).reg();
  getMyApplication().getAppCustomization().prepareOptionsMenu(mapActivity,optionsMenuHelper);
  return optionsMenuHelper;
}
