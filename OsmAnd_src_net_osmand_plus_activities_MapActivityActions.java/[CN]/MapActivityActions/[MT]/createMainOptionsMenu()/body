{
  final OsmandMapTileView mapView=mapActivity.getMapView();
  int viewHeight=mapView.getViewHeight();
  final OsmandApplication app=mapActivity.getMyApplication();
  ContextMenuAdapter optionsMenuHelper=new ContextMenuAdapter();
  optionsMenuHelper.addItem(new ItemBuilder().setTitleId(R.string.home,mapActivity).setIcon(R.drawable.map_dashboard).setListener(new ContextMenuAdapter.ItemClickListener(){
    @Override public boolean onContextMenuClick(    ArrayAdapter<ContextMenuItem> adapter,    int itemId,    int pos,    boolean isChecked){
      MapActivity.clearPrevActivityIntent();
      mapActivity.closeDrawer();
      mapActivity.getDashboard().setDashboardVisibility(true,DashboardType.DASHBOARD);
      return true;
    }
  }
).createItem());
  if (settings.USE_MAP_MARKERS.get()) {
    optionsMenuHelper.addItem(new ItemBuilder().setTitleId(R.string.map_markers,mapActivity).setIcon(R.drawable.ic_action_flag_dark).setListener(new ContextMenuAdapter.ItemClickListener(){
      @Override public boolean onContextMenuClick(      ArrayAdapter<ContextMenuItem> adapter,      int itemId,      int pos,      boolean isChecked){
        MapActivity.clearPrevActivityIntent();
        mapActivity.getDashboard().setDashboardVisibility(true,DashboardType.MAP_MARKERS);
        return false;
      }
    }
).createItem());
  }
 else {
    optionsMenuHelper.addItem(new ItemBuilder().setTitleId(R.string.waypoints,mapActivity).setIcon(R.drawable.ic_action_intermediate).setListener(new ContextMenuAdapter.ItemClickListener(){
      @Override public boolean onContextMenuClick(      ArrayAdapter<ContextMenuItem> adapter,      int itemId,      int pos,      boolean isChecked){
        MapActivity.clearPrevActivityIntent();
        mapActivity.getDashboard().setDashboardVisibility(true,DashboardType.WAYPOINTS);
        return false;
      }
    }
).createItem());
  }
  optionsMenuHelper.addItem(new ItemBuilder().setTitleId(R.string.shared_string_my_places,mapActivity).setIcon(R.drawable.ic_action_fav_dark).setListener(new ContextMenuAdapter.ItemClickListener(){
    @Override public boolean onContextMenuClick(    ArrayAdapter<ContextMenuItem> adapter,    int itemId,    int pos,    boolean isChecked){
      Intent newIntent=new Intent(mapActivity,mapActivity.getMyApplication().getAppCustomization().getFavoritesActivity());
      newIntent.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
      mapActivity.startActivity(newIntent);
      return true;
    }
  }
).createItem());
  optionsMenuHelper.addItem(new ItemBuilder().setTitleId(R.string.search_button,mapActivity).setIcon(R.drawable.ic_action_search_dark).setListener(new ContextMenuAdapter.ItemClickListener(){
    @Override public boolean onContextMenuClick(    ArrayAdapter<ContextMenuItem> adapter,    int itemId,    int pos,    boolean isChecked){
      mapActivity.showQuickSearch(MapActivity.ShowQuickSearchMode.NEW_IF_EXPIRED,false);
      return true;
    }
  }
).createItem());
  optionsMenuHelper.addItem(new ItemBuilder().setTitleId(R.string.get_directions,mapActivity).setIcon(R.drawable.ic_action_gdirections_dark).setListener(new ContextMenuAdapter.ItemClickListener(){
    @Override public boolean onContextMenuClick(    ArrayAdapter<ContextMenuItem> adapter,    int itemId,    int pos,    boolean isChecked){
      MapControlsLayer mapControlsLayer=mapActivity.getMapLayers().getMapControlsLayer();
      if (mapControlsLayer != null) {
        mapControlsLayer.doRoute(false);
      }
      return true;
    }
  }
).createItem());
  String d=getString(R.string.welmode_download_maps);
  if (app.getDownloadThread().getIndexes().isDownloadedFromInternet) {
    List<IndexItem> updt=app.getDownloadThread().getIndexes().getItemsToUpdate();
    if (updt != null && updt.size() > 0) {
      d+=" (" + updt.size() + ")";
    }
  }
  optionsMenuHelper.addItem(new ItemBuilder().setTitleId(R.string.welmode_download_maps,null).setTitle(d).setIcon(R.drawable.ic_type_archive).setListener(new ContextMenuAdapter.ItemClickListener(){
    @Override public boolean onContextMenuClick(    ArrayAdapter<ContextMenuItem> adapter,    int itemId,    int pos,    boolean isChecked){
      Intent newIntent=new Intent(mapActivity,mapActivity.getMyApplication().getAppCustomization().getDownloadActivity());
      newIntent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
      mapActivity.startActivity(newIntent);
      return true;
    }
  }
).createItem());
  if (Version.isGooglePlayEnabled(app) || Version.isDeveloperVersion(app)) {
    optionsMenuHelper.addItem(new ItemBuilder().setTitleId(R.string.osm_live,mapActivity).setIcon(R.drawable.ic_action_osm_live).setListener(new ContextMenuAdapter.ItemClickListener(){
      @Override public boolean onContextMenuClick(      ArrayAdapter<ContextMenuItem> adapter,      int itemId,      int pos,      boolean isChecked){
        Intent intent=new Intent(mapActivity,OsmLiveActivity.class);
        intent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
        mapActivity.startActivity(intent);
        return false;
      }
    }
).createItem());
  }
  optionsMenuHelper.addItem(new ItemBuilder().setTitleId(R.string.prefs_plugins,mapActivity).setIcon(R.drawable.ic_extension_dark).setListener(new ItemClickListener(){
    @Override public boolean onContextMenuClick(    ArrayAdapter<ContextMenuItem> adapter,    int itemId,    int pos,    boolean isChecked){
      Intent newIntent=new Intent(mapActivity,mapActivity.getMyApplication().getAppCustomization().getPluginsActivity());
      newIntent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
      mapActivity.startActivity(newIntent);
      return true;
    }
  }
).createItem());
  optionsMenuHelper.addItem(new ItemBuilder().setTitleId(R.string.layer_map_appearance,mapActivity).setIcon(R.drawable.ic_configure_screen_dark).setListener(new ContextMenuAdapter.ItemClickListener(){
    @Override public boolean onContextMenuClick(    ArrayAdapter<ContextMenuItem> adapter,    int itemId,    int pos,    boolean isChecked){
      MapActivity.clearPrevActivityIntent();
      mapActivity.getDashboard().setDashboardVisibility(true,DashboardType.CONFIGURE_SCREEN);
      return false;
    }
  }
).createItem());
  optionsMenuHelper.addItem(new ItemBuilder().setTitleId(R.string.shared_string_settings,mapActivity).setIcon(R.drawable.ic_action_settings).setListener(new ContextMenuAdapter.ItemClickListener(){
    @Override public boolean onContextMenuClick(    ArrayAdapter<ContextMenuItem> adapter,    int itemId,    int pos,    boolean isChecked){
      final Intent settings=new Intent(mapActivity,getMyApplication().getAppCustomization().getSettingsActivity());
      settings.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
      mapActivity.startActivity(settings);
      return true;
    }
  }
).createItem());
  optionsMenuHelper.addItem(new ItemBuilder().setTitleId(R.string.shared_string_help,mapActivity).setIcon(R.drawable.ic_action_help).setListener(new ContextMenuAdapter.ItemClickListener(){
    @Override public boolean onContextMenuClick(    ArrayAdapter<ContextMenuItem> adapter,    int itemId,    int pos,    boolean isChecked){
      Intent intent=new Intent(mapActivity,HelpActivity.class);
      intent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
      mapActivity.startActivity(intent);
      return true;
    }
  }
).createItem());
  OsmandPlugin.registerOptionsMenu(mapActivity,optionsMenuHelper);
  ItemBuilder divider=new ItemBuilder().setLayout(R.layout.drawer_divider);
  if (viewHeight > 0) {
    int listItemHeight=app.getResources().getDimensionPixelSize(R.dimen.list_item_height);
    int dividerHeight=viewHeight - optionsMenuHelper.length() * listItemHeight;
    if (dividerHeight > 0) {
      divider.setMinHeight(dividerHeight);
    }
 else     if (dividerHeight < 0) {
      divider.setMinHeight(AndroidUtils.dpToPx(app,16f));
    }
  }
  divider.setPosition(7);
  optionsMenuHelper.addItem(divider.createItem());
  getMyApplication().getAppCustomization().prepareOptionsMenu(mapActivity,optionsMenuHelper);
  return optionsMenuHelper;
}
