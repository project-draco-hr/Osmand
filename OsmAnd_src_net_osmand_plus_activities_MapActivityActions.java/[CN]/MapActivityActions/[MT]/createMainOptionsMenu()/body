{
  final OsmandMapTileView mapView=mapActivity.getMapView();
  final OsmandApplication app=mapActivity.getMyApplication();
  ContextMenuAdapter optionsMenuHelper=new ContextMenuAdapter(app);
  optionsMenuHelper.item(R.string.get_directions).iconColor(R.drawable.ic_action_gdirections_dark).listen(new OnContextMenuClick(){
    @Override public boolean onContextMenuClick(    ArrayAdapter<?> adapter,    int itemId,    int pos,    boolean isChecked){
      if (!routingHelper.isFollowingMode() && !routingHelper.isRoutePlanningMode()) {
        enterRoutePlanningMode(null,null,false);
      }
 else {
        mapActivity.getMapViewTrackingUtilities().switchToRoutePlanningMode();
        mapActivity.refreshMap();
      }
      return true;
    }
  }
).reg();
  optionsMenuHelper.item(R.string.target_points).iconColor(R.drawable.ic_action_flage_dark).listen(new OnContextMenuClick(){
    @Override public boolean onContextMenuClick(    ArrayAdapter<?> adapter,    int itemId,    int pos,    boolean isChecked){
      mapActivity.getDashboard().setDashboardVisibility(true,DashboardType.WAYPOINTS);
      return false;
    }
  }
).reg();
  optionsMenuHelper.item(R.string.search_button).iconColor(R.drawable.ic_action_search_dark).listen(new OnContextMenuClick(){
    @Override public boolean onContextMenuClick(    ArrayAdapter<?> adapter,    int itemId,    int pos,    boolean isChecked){
      Intent newIntent=new Intent(mapActivity,mapActivity.getMyApplication().getAppCustomization().getSearchActivity());
      LatLon loc=mapActivity.getMapLocation();
      newIntent.putExtra(SearchActivity.SEARCH_LAT,loc.getLatitude());
      newIntent.putExtra(SearchActivity.SEARCH_LON,loc.getLongitude());
      if (mapActivity.getMapViewTrackingUtilities().isMapLinkedToLocation()) {
        newIntent.putExtra(SearchActivity.SEARCH_NEARBY,true);
      }
      newIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
      mapActivity.startActivity(newIntent);
      return true;
    }
  }
).reg();
  optionsMenuHelper.item(R.string.shared_string_my_places).iconColor(R.drawable.ic_action_fav_dark).listen(new OnContextMenuClick(){
    @Override public boolean onContextMenuClick(    ArrayAdapter<?> adapter,    int itemId,    int pos,    boolean isChecked){
      Intent newIntent=new Intent(mapActivity,mapActivity.getMyApplication().getAppCustomization().getFavoritesActivity());
      mapActivity.startActivity(newIntent);
      return true;
    }
  }
).reg();
  optionsMenuHelper.item(R.string.show_point_options).iconColor(R.drawable.ic_action_marker_dark).listen(new OnContextMenuClick(){
    @Override public boolean onContextMenuClick(    ArrayAdapter<?> adapter,    int itemId,    int pos,    boolean isChecked){
      contextMenuPoint(mapView.getLatitude(),mapView.getLongitude());
      return true;
    }
  }
).reg();
  optionsMenuHelper.item(R.string.configure_map).iconColor(R.drawable.ic_action_layers_dark).listen(new OnContextMenuClick(){
    @Override public boolean onContextMenuClick(    ArrayAdapter<?> adapter,    int itemId,    int pos,    boolean isChecked){
      mapActivity.getDashboard().setDashboardVisibility(true,DashboardType.CONFIGURE_MAP);
      return false;
    }
  }
).reg();
  optionsMenuHelper.item(R.string.layer_map_appearance).iconColor(R.drawable.ic_configure_screen_dark).listen(new OnContextMenuClick(){
    @Override public boolean onContextMenuClick(    ArrayAdapter<?> adapter,    int itemId,    int pos,    boolean isChecked){
      mapActivity.getDashboard().setDashboardVisibility(true,DashboardType.CONFIGURE_SCREEN);
      return false;
    }
  }
).reg();
  optionsMenuHelper.item(R.string.index_settings).iconColor(R.drawable.ic_type_archive).listen(new OnContextMenuClick(){
    @Override public boolean onContextMenuClick(    ArrayAdapter<?> adapter,    int itemId,    int pos,    boolean isChecked){
      Intent newIntent=new Intent(mapActivity,mapActivity.getMyApplication().getAppCustomization().getDownloadActivity());
      mapActivity.startActivity(newIntent);
      return true;
    }
  }
).reg();
  optionsMenuHelper.item(R.string.prefs_plugins).iconColor(R.drawable.ic_extension_dark).listen(new OnContextMenuClick(){
    @Override public boolean onContextMenuClick(    ArrayAdapter<?> adapter,    int itemId,    int pos,    boolean isChecked){
      Intent newIntent=new Intent(mapActivity,mapActivity.getMyApplication().getAppCustomization().getPluginsActivity());
      mapActivity.startActivity(newIntent);
      return true;
    }
  }
).reg();
  optionsMenuHelper.item(R.string.shared_string_settings).iconColor(R.drawable.ic_action_settings).listen(new OnContextMenuClick(){
    @Override public boolean onContextMenuClick(    ArrayAdapter<?> adapter,    int itemId,    int pos,    boolean isChecked){
      final Intent settings=new Intent(mapActivity,getMyApplication().getAppCustomization().getSettingsActivity());
      mapActivity.startActivity(settings);
      return true;
    }
  }
).reg();
  OsmandPlugin.registerOptionsMenu(mapActivity,optionsMenuHelper);
  optionsMenuHelper.item(R.string.shared_string_exit).iconColor(R.drawable.ic_action_quit_dark).listen(new OnContextMenuClick(){
    @Override public boolean onContextMenuClick(    ArrayAdapter<?> adapter,    int itemId,    int pos,    boolean isChecked){
      Intent newIntent=new Intent(mapActivity,mapActivity.getMyApplication().getAppCustomization().getMainMenuActivity());
      newIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
      newIntent.putExtra(AppInitializer.APP_EXIT_KEY,AppInitializer.APP_EXIT_CODE);
      mapActivity.startActivity(newIntent);
      return true;
    }
  }
).reg();
  getMyApplication().getAppCustomization().prepareOptionsMenu(mapActivity,optionsMenuHelper);
  return optionsMenuHelper;
}
