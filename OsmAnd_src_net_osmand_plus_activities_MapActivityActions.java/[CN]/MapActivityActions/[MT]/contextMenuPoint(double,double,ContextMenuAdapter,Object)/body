{
  final ContextMenuAdapter adapter=iadapter == null ? new ContextMenuAdapter(mapActivity) : iadapter;
  if (!mapActivity.getRoutingHelper().isFollowingMode() && !mapActivity.getRoutingHelper().isRoutePlanningMode()) {
    adapter.item(R.string.context_menu_item_directions_to).icons(R.drawable.ic_action_gdirections_dark,R.drawable.ic_action_gdirections_light).reg();
    adapter.item(R.string.context_menu_item_directions_from).icons(R.drawable.ic_action_gdirections_dark,R.drawable.ic_action_gdirections_light).reg();
  }
  final TargetPointsHelper targets=getMyApplication().getTargetPointsHelper();
  if (targets.getPointToNavigate() != null) {
    adapter.item(R.string.context_menu_item_destination_point).icons(R.drawable.ic_action_flag_dark,R.drawable.ic_action_flag_light).reg();
    adapter.item(R.string.context_menu_item_intermediate_point).icons(R.drawable.ic_action_flage_dark,R.drawable.ic_action_flage_light).reg();
  }
 else {
    adapter.item(R.string.context_menu_item_destination_point).icons(R.drawable.ic_action_flag_dark,R.drawable.ic_action_flag_light).reg();
  }
  adapter.item(R.string.context_menu_item_search).icons(R.drawable.ic_action_search_dark,R.drawable.ic_action_search_light).reg();
  adapter.item(R.string.context_menu_item_share_location).icons(R.drawable.ic_action_gshare_dark,R.drawable.ic_action_gshare_light).reg();
  adapter.item(R.string.context_menu_item_add_favorite).icons(R.drawable.ic_action_fav_dark,R.drawable.ic_action_fav_light).reg();
  OsmandPlugin.registerMapContextMenu(mapActivity,latitude,longitude,adapter,selectedObj);
  getMyApplication().getAppCustomization().prepareLocationMenu(mapActivity,adapter);
  final Builder builder=new AlertDialog.Builder(mapActivity);
  final ArrayAdapter<?> listAdapter=adapter.createListAdapter(mapActivity,getMyApplication().getSettings().isLightContent());
  builder.setAdapter(listAdapter,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      int standardId=adapter.getElementId(which);
      OnContextMenuClick click=adapter.getClickAdapter(which);
      if (click != null) {
        click.onContextMenuClick(listAdapter,standardId,which,false);
      }
 else       if (standardId == R.string.context_menu_item_search) {
        Intent intent=new Intent(mapActivity,mapActivity.getMyApplication().getAppCustomization().getSearchActivity());
        intent.putExtra(SearchActivity.SEARCH_LAT,latitude);
        intent.putExtra(SearchActivity.SEARCH_LON,longitude);
        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
        mapActivity.startActivity(intent);
      }
 else       if (standardId == R.string.context_menu_item_directions_to) {
        targets.navigateToPoint(new LatLon(latitude,longitude),true,-1,null);
        enterRoutePlanningMode(null,null,false);
      }
 else       if (standardId == R.string.context_menu_item_directions_from) {
        List<PointDescription> nms=mapActivity.getMapLayers().getContextMenuLayer().getSelectedObjectNames();
        enterRoutePlanningMode(new LatLon(latitude,longitude),nms.isEmpty() ? null : nms.get(0),false);
      }
 else       if (standardId == R.string.context_menu_item_intermediate_point || standardId == R.string.context_menu_item_destination_point) {
        boolean dest=standardId == R.string.context_menu_item_destination_point;
        List<PointDescription> nms=mapActivity.getMapLayers().getContextMenuLayer().getSelectedObjectNames();
        targets.navigateToPoint(new LatLon(latitude,longitude),true,dest ? -1 : targets.getIntermediatePoints().size(),nms.size() == 0 ? null : nms.get(0));
        if (targets.getIntermediatePoints().size() > 0) {
          openIntermediatePointsDialog();
        }
      }
 else       if (standardId == R.string.context_menu_item_share_location) {
        enhance(dialogBundle,latitude,longitude,mapActivity.getMapView().getZoom());
        new ShareLocation(mapActivity).run();
      }
 else       if (standardId == R.string.context_menu_item_add_favorite) {
        addFavouritePoint(latitude,longitude);
      }
    }
  }
);
  builder.create().show();
}
