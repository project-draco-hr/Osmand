{
  List<RouteDirectionInfo> directions=null;
  if (!osmandRouter) {
    for (    WptPt pt : gpxFile.points) {
      res.add(createLocation(pt));
    }
  }
 else {
    for (    Track tr : gpxFile.tracks) {
      for (      TrkSegment ts : tr.segments) {
        for (        WptPt p : ts.points) {
          res.add(createLocation(p));
        }
      }
    }
  }
  Route route=null;
  if (gpxFile.routes.size() > 0) {
    route=gpxFile.routes.get(0);
  }
  RouteDirectionInfo previous=null;
  if (route != null && route.points.size() > 0) {
    directions=new ArrayList<RouteDirectionInfo>();
    for (    WptPt item : route.points) {
      try {
        RouteDirectionInfo dirInfo=new RouteDirectionInfo();
        dirInfo.descriptionRoute=item.desc;
        String stime=item.getExtensionsToRead().get("time");
        if (stime != null) {
          dirInfo.expectedTime=Integer.parseInt(stime);
        }
        String stype=item.getExtensionsToRead().get("turn");
        if (stype != null) {
          dirInfo.turnType=TurnType.valueOf(stype.toUpperCase());
        }
 else {
          dirInfo.turnType=TurnType.valueOf(TurnType.C);
        }
        String sturn=item.getExtensionsToRead().get("turn-angle");
        if (sturn != null) {
          dirInfo.turnType.setTurnAngle((float)Double.parseDouble(sturn));
        }
        int offset=Integer.parseInt(item.getExtensionsToRead().get("offset"));
        dirInfo.routePointOffset=offset;
        if (previous != null && previous.turnType != null && !TurnType.C.equals(previous.turnType.getValue()) && !osmandRouter) {
          if (previous.routePointOffset > 0) {
            float paz=res.get(previous.routePointOffset - 1).bearingTo(res.get(previous.routePointOffset));
            float caz;
            if (previous.turnType.isRoundAbout() && dirInfo.routePointOffset < res.size() - 1) {
              caz=res.get(dirInfo.routePointOffset).bearingTo(res.get(dirInfo.routePointOffset + 1));
            }
 else {
              caz=res.get(dirInfo.routePointOffset - 1).bearingTo(res.get(dirInfo.routePointOffset));
            }
            float angle=caz - paz;
            if (angle < 0) {
              angle+=360;
            }
 else             if (angle > 360) {
              angle-=360;
            }
            angle+=75;
            if (previous.turnType.getTurnAngle() < 0.5f) {
              previous.turnType.setTurnAngle(angle);
            }
          }
        }
        directions.add(dirInfo);
        previous=dirInfo;
      }
 catch (      NumberFormatException e) {
        log.info("Exception",e);
      }
catch (      IllegalArgumentException e) {
        log.info("Exception",e);
      }
    }
  }
  if (previous != null && previous.turnType != null && !TurnType.C.equals(previous.turnType.getValue())) {
    if (previous.routePointOffset > 0 && previous.routePointOffset < res.size() - 1) {
      float paz=res.get(previous.routePointOffset - 1).bearingTo(res.get(previous.routePointOffset));
      float caz=res.get(previous.routePointOffset).bearingTo(res.get(res.size() - 1));
      float angle=caz - paz;
      if (angle < 0) {
        angle+=360;
      }
      if (previous.turnType.getTurnAngle() < 0.5f) {
        previous.turnType.setTurnAngle(angle);
      }
    }
  }
  return directions;
}
