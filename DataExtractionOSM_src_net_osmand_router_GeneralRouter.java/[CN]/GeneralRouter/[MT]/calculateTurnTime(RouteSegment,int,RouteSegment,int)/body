{
  int[] pt=prev.getRoad().getPointTypes(prevSegmentEnd);
  if (pt != null) {
    RouteRegion reg=prev.getRoad().region;
    for (int i=0; i < pt.length; i++) {
      RouteTypeRule r=reg.quickGetEncodingRule(pt[i]);
      if ("highway".equals(r.getTag()) && "traffic_signals".equals(r.getValue())) {
        return 0;
      }
    }
  }
  double rt=getRoundaboutTurn();
  if (rt > 0 && !prev.getRoad().roundabout() && segment.getRoad().roundabout()) {
    return rt;
  }
  if (getLeftTurn() > 0 || getRightTurn() > 0) {
    double a1=segment.getRoad().directionRoute(segment.segmentStart,segment.segmentStart < segmentEnd);
    double a2=prev.getRoad().directionRoute(prevSegmentEnd,prevSegmentEnd < prev.segmentStart);
    double diff=Math.abs(MapUtils.alignAngleDifference(a1 - a2 - Math.PI));
    if (diff > 2 * Math.PI / 3) {
      return getLeftTurn();
    }
 else     if (diff > Math.PI / 2) {
      return getRightTurn();
    }
    return 0;
  }
  return 0;
}
