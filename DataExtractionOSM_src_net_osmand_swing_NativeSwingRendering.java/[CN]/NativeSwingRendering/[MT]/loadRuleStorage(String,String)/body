{
  RenderingRulesStorage storage=new RenderingRulesStorage();
  final RenderingRulesStorageResolver resolver=new RenderingRulesStorageResolver(){
    @Override public RenderingRulesStorage resolve(    String name,    RenderingRulesStorageResolver ref) throws SAXException {
      RenderingRulesStorage depends=new RenderingRulesStorage();
      try {
        depends.parseRulesFromXmlInputStream(RenderingRulesStorage.class.getResourceAsStream(name + ".render.xml"),ref);
      }
 catch (      IOException e) {
        throw new SAXException(e);
      }
      return depends;
    }
  }
;
  if (path == null || path.equals("default.render.xml")) {
    storage.parseRulesFromXmlInputStream(RenderingRulesStorage.class.getResourceAsStream("default.render.xml"),resolver);
  }
 else {
    storage.parseRulesFromXmlInputStream(new FileInputStream(path),resolver);
  }
  renderingProps=new HashMap<String,String>();
  String[] props=renderingProperties.split(",");
  for (  String s : props) {
    int i=s.indexOf('=');
    if (i > 0) {
      renderingProps.put(s.substring(0,i).trim(),s.substring(i + 1).trim());
    }
  }
  this.storage=storage;
}
