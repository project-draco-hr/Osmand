{
  NodeList list=doc.getElementsByTagName("process");
  if (list.getLength() != 1) {
    throw new IllegalArgumentException("You should specify exactly 1 process element!");
  }
  Element process=(Element)list.item(0);
  downloadFiles=Boolean.parseBoolean(process.getAttribute("downloadOsmFiles"));
  generateIndexes=Boolean.parseBoolean(process.getAttribute("generateIndexes"));
  uploadIndexes=Boolean.parseBoolean(process.getAttribute("uploadIndexes"));
  deleteFilesAfterUploading=Boolean.parseBoolean(process.getAttribute("deleteFilesAfterUploading"));
  wget=process.getAttribute("wget");
  indexPOI=Boolean.parseBoolean(process.getAttribute("indexPOI"));
  indexMap=Boolean.parseBoolean(process.getAttribute("indexMap"));
  indexTransport=Boolean.parseBoolean(process.getAttribute("indexTransport"));
  indexAddress=Boolean.parseBoolean(process.getAttribute("indexAddress"));
  parseProcessAttributes(process);
  list=doc.getElementsByTagName("process_attributes");
  if (list.getLength() == 1) {
    parseProcessAttributes((Element)list.item(0));
  }
  String dir=process.getAttribute("directory_for_osm_files");
  if (dir == null || !new File(dir).exists()) {
    throw new IllegalArgumentException("Please specify directory with .osm or .osm.bz2 files as directory_for_osm_files (attribute)");
  }
  osmDirFiles=new File(dir);
  dir=process.getAttribute("directory_for_index_files");
  if (dir == null || !new File(dir).exists()) {
    throw new IllegalArgumentException("Please specify directory with generated index files  as directory_for_index_files (attribute)");
  }
  indexDirFiles=new File(dir);
  InputStream regionsStream=null;
  if (downloadFiles) {
    dir=process.getAttribute("list_download_regions_file");
    if (!Algoritms.isEmpty(dir)) {
      File regionsFile=new File(dir);
      if (!regionsFile.exists()) {
        if (local) {
          regionsStream=IndexBatchCreator.class.getResourceAsStream("regions.xml");
        }
        if (regionsStream == null) {
          throw new IllegalArgumentException("Please specify file with regions to download as list_download_regions_file (attribute)");
        }
      }
 else {
        regionsStream=new FileInputStream(regionsFile);
      }
    }
  }
  dir=process.getAttribute("directory_for_uploaded_files");
  if (dir != null) {
    File file=new File(dir);
    file.mkdirs();
    if (file.exists()) {
      backupUploadedFiles=file;
    }
  }
  if (uploadIndexes) {
    list=doc.getElementsByTagName("authorization_info");
    if (list.getLength() != 1) {
      throw new IllegalArgumentException("You should specify exactly 1 authorization_info element to upload indexes!");
    }
    Element authorization=(Element)list.item(0);
    uploadToOsmandGooglecode=Boolean.parseBoolean(process.getAttribute("upload_osmand_googlecode"));
    if (uploadToOsmandGooglecode) {
      user=authorization.getAttribute("google_code_user");
      password=authorization.getAttribute("google_code_password");
      cookieHSID=authorization.getAttribute("cookieHSID");
      cookieSID=authorization.getAttribute("cookieSID");
      pagegen=authorization.getAttribute("pagegen");
      token=authorization.getAttribute("token");
      if (googlePassword.length() > 0) {
        ExtractGooglecodeAuthorization gca=new ExtractGooglecodeAuthorization();
        try {
          GooglecodeUploadTokens tokens=gca.getGooglecodeTokensForUpload(user,googlePassword);
          cookieHSID=tokens.getHsid();
          cookieSID=tokens.getSid();
          pagegen=tokens.getPagegen();
          token=tokens.getToken();
        }
 catch (        IOException e) {
          log.error("Error retrieving google tokens",e);
        }
      }
    }
 else {
      user=authorization.getAttribute("osmand_download_user");
      password=authorization.getAttribute("osmand_download_password");
    }
  }
  List<RegionCountries> countriesToDownload=new ArrayList<RegionCountries>();
  parseCountriesToDownload(doc,countriesToDownload);
  if (regionsStream != null) {
    Document innerDoc=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(regionsStream);
    parseCountriesToDownload(innerDoc,countriesToDownload);
  }
  runBatch(countriesToDownload);
}
