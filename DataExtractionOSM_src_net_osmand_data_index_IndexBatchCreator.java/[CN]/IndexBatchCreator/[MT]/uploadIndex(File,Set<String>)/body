{
  if (!uploadIndexes) {
    return;
  }
  String fileName=f.getName();
  log.info("Upload index " + fileName);
  String summary;
  double mbLengh=(double)f.length() / MB;
  boolean zip=true;
  if (fileName.endsWith(IndexConstants.POI_INDEX_EXT) || fileName.endsWith(IndexConstants.POI_INDEX_EXT_ZIP)) {
    summary="POI index for ";
  }
 else   if (fileName.endsWith(IndexConstants.BINARY_MAP_INDEX_EXT) || fileName.endsWith(IndexConstants.BINARY_MAP_INDEX_EXT_ZIP)) {
    boolean addr=indexAddress;
    boolean trans=indexTransport;
    boolean map=indexMap;
    RandomAccessFile raf=null;
    if (fileName.endsWith(IndexConstants.BINARY_MAP_INDEX_EXT)) {
      try {
        raf=new RandomAccessFile(f,"r");
        BinaryMapIndexReader reader=new BinaryMapIndexReader(raf);
        trans=reader.hasTransportData();
        map=reader.containsMapData();
        addr=reader.containsAddressData();
        reader.close();
      }
 catch (      Exception e) {
        log.info("Exception",e);
        if (raf != null) {
          try {
            raf.close();
          }
 catch (          IOException e1) {
          }
        }
      }
    }
    summary=" index for ";
    boolean fir=true;
    if (addr) {
      summary="Address" + (fir ? "" : ", ") + summary;
      fir=false;
    }
    if (trans) {
      summary="Transport" + (fir ? "" : ", ") + summary;
      fir=false;
    }
    if (map) {
      summary="Map" + (fir ? "" : ", ") + summary;
      fir=false;
    }
  }
 else {
    return;
  }
  if (mbLengh < MIN_SIZE_TO_UPLOAD) {
    return;
  }
  File toUpload=f;
  if (mbLengh > MIN_SIZE_TO_NOT_ZIP && (fileName.endsWith(".odb") || fileName.endsWith(".obf")) && zip) {
    String n=fileName;
    if (fileName.endsWith(".odb")) {
      n=fileName.substring(0,fileName.length() - 4);
    }
    String zipFileName=n + ".zip";
    File zFile=new File(f.getParentFile(),zipFileName);
    log.info("Zipping file " + fileName);
    try {
      ZipOutputStream zout=new ZipOutputStream(new FileOutputStream(zFile));
      zout.setLevel(9);
      ZipEntry zEntry=new ZipEntry(fileName);
      zEntry.setSize(f.length());
      zout.putNextEntry(zEntry);
      FileInputStream is=new FileInputStream(f);
      byte[] BUFFER=new byte[8192];
      int read=0;
      while ((read=is.read(BUFFER)) != -1) {
        zout.write(BUFFER,0,read);
      }
      is.close();
      zout.close();
    }
 catch (    IOException e) {
      log.error("Exception while zipping file",e);
    }
    if (f.delete()) {
      log.info("Source odb file was deleted");
    }
    toUpload=zFile;
  }
  String regionName=fileName.substring(0,fileName.lastIndexOf('_',fileName.indexOf('.')));
  summary+=regionName;
  summary=summary.replace('_',' ');
  List<File> splittedFiles=Collections.emptyList();
  try {
    splittedFiles=splitFiles(toUpload);
    boolean uploaded=true;
    for (    File fs : splittedFiles) {
      uploaded&=uploadFileToServer(fs,toUpload,summary);
    }
    if (uploaded) {
      if (deleteFilesAfterUploading && toUpload.exists()) {
        toUpload.delete();
      }
 else       if (backupUploadedFiles != null) {
        File toBackup=new File(backupUploadedFiles,toUpload.getName());
        if (toBackup.exists()) {
          toBackup.delete();
        }
        toUpload.renameTo(toBackup);
      }
    }
    alreadyUploadedFiles.add(fileName);
  }
 catch (  IOException e) {
    log.error("Input/output exception uploading " + fileName,e);
  }
 finally {
    for (    File fs : splittedFiles) {
      if (!fs.equals(toUpload)) {
        fs.delete();
      }
    }
  }
}
