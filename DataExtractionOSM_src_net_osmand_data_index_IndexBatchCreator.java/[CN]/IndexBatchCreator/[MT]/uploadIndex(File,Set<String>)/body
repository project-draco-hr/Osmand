{
  if (!uploadIndexes) {
    return;
  }
  MessageFormat format=new MessageFormat("{0,date,dd.MM.yyyy} : {1, number,##.#} MB",Locale.US);
  String summary;
  double mbLengh=(double)f.length() / MB;
  boolean zip=true;
  String regionName;
  if (f.getName().endsWith(IndexConstants.POI_INDEX_EXT) || f.getName().endsWith(IndexConstants.POI_INDEX_EXT_ZIP)) {
    regionName=f.getName().substring(0,f.getName().length() - IndexConstants.POI_INDEX_EXT.length() - 2);
    summary="POI index for ";
  }
 else   if (f.getName().endsWith(IndexConstants.ADDRESS_INDEX_EXT) || f.getName().endsWith(IndexConstants.ADDRESS_INDEX_EXT_ZIP)) {
    regionName=f.getName().substring(0,f.getName().length() - IndexConstants.ADDRESS_INDEX_EXT.length() - 2);
    summary="Address index for ";
  }
 else   if (f.getName().endsWith(IndexConstants.TRANSPORT_INDEX_EXT) || f.getName().endsWith(IndexConstants.TRANSPORT_INDEX_EXT_ZIP)) {
    regionName=f.getName().substring(0,f.getName().length() - IndexConstants.TRANSPORT_INDEX_EXT.length() - 2);
    summary="Transport index for ";
  }
 else   if (f.getName().endsWith(IndexConstants.BINARY_MAP_INDEX_EXT) || f.getName().endsWith(IndexConstants.BINARY_MAP_INDEX_EXT_ZIP)) {
    regionName=f.getName().substring(0,f.getName().length() - IndexConstants.BINARY_MAP_INDEX_EXT.length() - 2);
    boolean addr=indexAddress;
    boolean trans=indexTransport;
    boolean map=indexMap;
    RandomAccessFile raf=null;
    try {
      raf=new RandomAccessFile(f,"r");
      BinaryMapIndexReader reader=new BinaryMapIndexReader(raf);
      trans=reader.hasTransportData();
      map=reader.containsMapData();
      addr=reader.containsAddressData();
      reader.close();
    }
 catch (    Exception e) {
      log.info("Exception",e);
      if (raf != null) {
        try {
          raf.close();
        }
 catch (        IOException e1) {
        }
      }
    }
    summary=" index for ";
    boolean fir=true;
    if (addr) {
      summary="Address" + (fir ? "" : ", ") + summary;
      fir=false;
    }
    if (trans) {
      summary="Transport" + (fir ? "" : ", ") + summary;
      fir=false;
    }
    if (map) {
      summary="Map" + (fir ? "" : ", ") + summary;
      fir=false;
    }
  }
 else {
    return;
  }
  if (mbLengh < 0.015) {
    return;
  }
  if (mbLengh > 2 && (f.getName().endsWith(".odb") || f.getName().endsWith(".obf")) && zip) {
    String n=f.getName();
    if (f.getName().endsWith(".odb")) {
      n=f.getName().substring(0,f.getName().length() - 4);
    }
    String zipFileName=n + ".zip";
    File zFile=new File(f.getParentFile(),zipFileName);
    log.info("Zipping file " + f.getName());
    try {
      ZipOutputStream zout=new ZipOutputStream(new FileOutputStream(zFile));
      zout.setLevel(9);
      zout.putNextEntry(new ZipEntry(f.getName()));
      FileInputStream is=new FileInputStream(f);
      byte[] BUFFER=new byte[8192];
      int read=0;
      while ((read=is.read(BUFFER)) != -1) {
        zout.write(BUFFER,0,read);
      }
      is.close();
      zout.close();
    }
 catch (    IOException e) {
      log.error("Exception while zipping file",e);
    }
    if (f.delete()) {
      log.info("Source odb file was deleted");
    }
    f=zFile;
  }
  try {
    DownloaderIndexFromGoogleCode.deleteFileFromGoogleDownloads(f.getName(),token,pagegen,cookieHSID,cookieSID);
    try {
      Thread.sleep(4000);
    }
 catch (    InterruptedException e) {
    }
  }
 catch (  IOException e) {
    log.warn("Deleting file from downloads" + f.getName() + " "+ e.getMessage());
  }
  mbLengh=(double)f.length() / MB;
  if (mbLengh > 100) {
    System.err.println("ERROR : file " + f.getName() + " exceeded 100 mb!!! Could not be uploaded.");
    return;
  }
  String descriptionFile="{" + format.format(new Object[]{new Date(f.lastModified()),mbLengh}) + "}";
  summary+=regionName + " " + descriptionFile;
  GoogleCodeUploadIndex uploader=new GoogleCodeUploadIndex();
  uploader.setFileName(f.getAbsolutePath());
  uploader.setTargetFileName(f.getName());
  uploader.setProjectName("osmand");
  uploader.setUserName(user);
  uploader.setPassword(password);
  uploader.setLabels("Type-Archive, Testdata");
  uploader.setSummary(summary.replace('_',' '));
  try {
    uploader.upload();
    if (deleteFilesAfterUploading) {
      f.delete();
    }
    alreadyUploadedFiles.add(f.getName());
  }
 catch (  IOException e) {
    log.error("Input/output exception uploading " + f.getName(),e);
  }
}
