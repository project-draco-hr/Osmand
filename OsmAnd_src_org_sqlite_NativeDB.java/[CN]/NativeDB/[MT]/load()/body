{
  if (loaded != null)   return loaded == Boolean.TRUE;
  String libpath=System.getProperty("org.sqlite.lib.path");
  String libname=System.getProperty("org.sqlite.lib.name");
  if (libname == null)   libname=System.mapLibraryName("sqlitejdbc");
  try {
    if (libpath == null)     System.loadLibrary("sqlitejdbc");
 else     System.load(new File(libpath,libname).getAbsolutePath());
    loaded=Boolean.TRUE;
    return true;
  }
 catch (  UnsatisfiedLinkError e) {
  }
  String osname=System.getProperty("os.name").toLowerCase();
  String osarch=System.getProperty("os.arch");
  if (osname.startsWith("mac os")) {
    osname="mac";
    osarch="universal";
  }
  if (osname.startsWith("windows"))   osname="win";
  if (osname.startsWith("sunos"))   osname="solaris";
  if (osarch.startsWith("i") && osarch.endsWith("86"))   osarch="x86";
  libname=osname + '-' + osarch+ ".lib";
  try {
    ClassLoader cl=NativeDB.class.getClassLoader();
    InputStream in=cl.getResourceAsStream(libname);
    if (in == null)     throw new Exception("libname: " + libname + " not found");
    File tmplib=File.createTempFile("libsqlitejdbc-",".lib");
    tmplib.deleteOnExit();
    OutputStream out=new FileOutputStream(tmplib);
    byte[] buf=new byte[1024];
    for (int len; (len=in.read(buf)) != -1; )     out.write(buf,0,len);
    in.close();
    out.close();
    System.load(tmplib.getAbsolutePath());
    loaded=Boolean.TRUE;
    return true;
  }
 catch (  Exception e) {
  }
  loaded=Boolean.FALSE;
  return false;
}
