{
  if (!isMultiTouchSupported()) {
    return false;
  }
  int actionCode=event.getAction() & ACTION_MASK;
  try {
    if (actionCode == MotionEvent.ACTION_UP || actionCode == MotionEvent.ACTION_CANCEL) {
      multiTouch=false;
    }
    Integer pointCount=(Integer)getPointerCount.invoke(event);
    if (pointCount < 2) {
      if (inZoomMode || inTiltMode) {
        listener.onGestureFinished(scale,rotation);
        inZoomMode=false;
        inTiltMode=false;
      }
      return multiTouch;
    }
 else {
      multiTouch=true;
    }
    Float x1=(Float)getX.invoke(event,0);
    Float x2=(Float)getX.invoke(event,1);
    Float y1=(Float)getY.invoke(event,0);
    Float y2=(Float)getY.invoke(event,1);
    float distance=(float)Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
    float angle=0;
    boolean angleDefined=false;
    if (x1.floatValue() != x2.floatValue() || y1.floatValue() != y2.floatValue()) {
      angleDefined=true;
      angle=(float)(Math.atan2(y2 - y1,x2 - x1) * 180 / Math.PI);
    }
switch (actionCode) {
case MotionEvent.ACTION_POINTER_DOWN:
{
        centerPoint=new PointF((x1 + x2) / 2,(y1 + y2) / 2);
        firstFingerStart=new PointF(x1,y1);
        secondFingerStart=new PointF(x2,y2);
        listener.onGestureInit(x1,y1,x2,y2);
        return true;
      }
case MotionEvent.ACTION_POINTER_UP:
{
      if (inZoomMode || inTiltMode) {
        listener.onGestureFinished(scale,rotation);
        inZoomMode=false;
        inTiltMode=false;
      }
      return true;
    }
case MotionEvent.ACTION_MOVE:
{
    if (inZoomMode) {
      if (angleDefined) {
        float a=MapUtils.unifyRotationTo360(angle - initialAngle);
        if (!isRotating && Math.abs(a) > ROTATION_THRESHOLD_DEG) {
          isRotating=true;
          initialAngle=angle;
        }
 else         if (isRotating) {
          rotation=a;
        }
      }
      scale=distance / initialDistance;
      listener.onZoomingOrRotating(scale,rotation);
      return true;
    }
 else     if (inTiltMode) {
      float dy2=secondFingerStart.y - y2;
      float viewAngle=dy2 / 8f;
      listener.onChangingViewAngle(viewAngle);
    }
 else {
      float dx1=Math.abs(firstFingerStart.x - x1);
      float dx2=Math.abs(secondFingerStart.x - x2);
      float dy1=Math.abs(firstFingerStart.y - y1);
      float dy2=Math.abs(secondFingerStart.y - y2);
      float startDy=Math.abs(secondFingerStart.y - firstFingerStart.y);
      if (dx1 < TILT_X_THRESHOLD_PX && dx2 < TILT_X_THRESHOLD_PX && dy1 > TILT_Y_THRESHOLD_PX && dy2 > TILT_Y_THRESHOLD_PX && startDy < TILT_Y_THRESHOLD_PX * 6 && Math.abs(dy2 - dy1) < TILT_DY_THRESHOLD_PX) {
        listener.onChangeViewAngleStarted();
        inTiltMode=true;
      }
 else       if (dx1 > TILT_X_THRESHOLD_PX || dx2 > TILT_X_THRESHOLD_PX || Math.abs(dy2 - dy1) > TILT_DY_THRESHOLD_PX || Math.abs(dy1 - dy2) > TILT_DY_THRESHOLD_PX) {
        listener.onZoomStarted(centerPoint);
        initialDistance=distance;
        initialAngle=angle;
        rotation=0;
        scale=0;
        isRotating=false;
        inZoomMode=true;
      }
    }
  }
default :
break;
}
}
 catch (Exception e) {
Log.e(TAG,"Multi touch exception",e);
}
return true;
}
