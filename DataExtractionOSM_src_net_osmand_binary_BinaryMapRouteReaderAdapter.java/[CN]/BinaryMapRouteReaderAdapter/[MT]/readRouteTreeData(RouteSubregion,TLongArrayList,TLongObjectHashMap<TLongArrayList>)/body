{
  routeTree.dataObjects=new ArrayList<RouteDataObject>();
  idTables.clear();
  restrictions.clear();
  while (true) {
    int t=codedIS.readTag();
    int tag=WireFormat.getTagFieldNumber(t);
switch (tag) {
case 0:
      TLongObjectIterator<TLongArrayList> it=restrictions.iterator();
    while (it.hasNext()) {
      it.advance();
      int from=(int)it.key();
      RouteDataObject fromr=routeTree.dataObjects.get(from);
      fromr.restrictions=new long[it.value().size()];
      for (int k=0; k < fromr.restrictions.length; k++) {
        int to=(int)(it.value().get(k) >> RouteDataObject.RESTRICTION_SHIFT);
        long valto=(idTables.get(to) << RouteDataObject.RESTRICTION_SHIFT) | ((long)it.value().get(k) & RouteDataObject.RESTRICTION_MASK);
        fromr.restrictions[k]=valto;
      }
    }
  for (  RouteDataObject o : routeTree.dataObjects) {
    if (o != null) {
      if (o.id < idTables.size()) {
        o.id=idTables.get((int)o.id);
      }
    }
  }
return;
case RouteDataBlock.DATAOBJECTS_FIELD_NUMBER:
int length=codedIS.readRawVarint32();
int oldLimit=codedIS.pushLimit(length);
RouteDataObject obj=readRouteDataObject(routeTree.routeReg,routeTree.left,routeTree.top);
while (obj.id >= routeTree.dataObjects.size()) {
routeTree.dataObjects.add(null);
}
routeTree.dataObjects.set((int)obj.id,obj);
codedIS.popLimit(oldLimit);
break;
case RouteDataBlock.IDTABLE_FIELD_NUMBER:
long routeId=0;
length=codedIS.readRawVarint32();
oldLimit=codedIS.pushLimit(length);
idLoop: while (true) {
int ts=codedIS.readTag();
int tags=WireFormat.getTagFieldNumber(ts);
switch (tags) {
case 0:
break idLoop;
case IdTable.ROUTEID_FIELD_NUMBER:
routeId+=codedIS.readSInt64();
idTables.add(routeId);
break;
default :
skipUnknownField(ts);
break;
}
}
codedIS.popLimit(oldLimit);
break;
case RouteDataBlock.RESTRICTIONS_FIELD_NUMBER:
length=codedIS.readRawVarint32();
oldLimit=codedIS.pushLimit(length);
long from=0;
long to=0;
long type=0;
idLoop: while (true) {
int ts=codedIS.readTag();
int tags=WireFormat.getTagFieldNumber(ts);
switch (tags) {
case 0:
break idLoop;
case RestrictionData.FROM_FIELD_NUMBER:
from=codedIS.readInt32();
break;
case RestrictionData.TO_FIELD_NUMBER:
to=codedIS.readInt32();
break;
case RestrictionData.TYPE_FIELD_NUMBER:
type=codedIS.readInt32();
break;
default :
skipUnknownField(ts);
break;
}
}
if (!restrictions.containsKey(from)) {
restrictions.put(from,new TLongArrayList());
}
restrictions.get(from).add((to << RouteDataObject.RESTRICTION_SHIFT) + type);
codedIS.popLimit(oldLimit);
break;
case RouteDataBlock.STRINGTABLE_FIELD_NUMBER:
length=codedIS.readRawVarint32();
oldLimit=codedIS.pushLimit(length);
codedIS.skipRawBytes(codedIS.getBytesUntilLimit());
codedIS.popLimit(oldLimit);
break;
default :
skipUnknownField(t);
break;
}
}
}
