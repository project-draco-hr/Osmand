{
  stopAnimatingSync();
  stopped=false;
  final boolean notifyListener=true;
  final float animationTime=ZOOM_ANIMATION_TIME;
  Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      currentThread=Thread.currentThread();
      float curZoom=zoomStart;
      AccelerateInterpolator interpolator=new AccelerateInterpolator(1);
      long timeMillis=SystemClock.uptimeMillis();
      float normalizedTime=0f;
      while (!stopped) {
        normalizedTime=(SystemClock.uptimeMillis() - timeMillis) / animationTime;
        if (normalizedTime > 1f) {
          break;
        }
        float interpolation=interpolator.getInterpolation(normalizedTime);
        curZoom=interpolation * (zoomEnd - zoomStart) + zoomStart;
        callback.zoomTo(curZoom,notifyListener);
        try {
          Thread.sleep(DEFAULT_SLEEP_TO_REDRAW);
        }
 catch (        InterruptedException e) {
          stopped=true;
        }
      }
      if (curZoom != ((int)Math.round(curZoom))) {
        if (Math.abs(curZoom - zoomEnd) > 2) {
          if (zoomStart > zoomEnd) {
            curZoom=(float)Math.floor(curZoom);
          }
 else {
            curZoom=(float)Math.ceil(curZoom);
          }
          callback.zoomTo(curZoom,notifyListener);
        }
 else {
          callback.zoomTo(zoomEnd,notifyListener);
        }
      }
      try {
        pendingRotateAnimation();
      }
 catch (      InterruptedException e) {
      }
      currentThread=null;
    }
  }
,"Animatable zooming");
  thread.start();
}
