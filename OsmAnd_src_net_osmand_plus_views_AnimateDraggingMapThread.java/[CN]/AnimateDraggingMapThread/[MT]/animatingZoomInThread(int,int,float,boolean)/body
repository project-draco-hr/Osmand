{
  float curZoom=zoomStart;
  LinearInterpolator interpolator=new LinearInterpolator();
  long timeMillis=SystemClock.uptimeMillis();
  float normalizedTime=0f;
  while (!stopped) {
    normalizedTime=(SystemClock.uptimeMillis() - timeMillis) / animationTime;
    if (normalizedTime > 1f) {
      break;
    }
    float interpolation=interpolator.getInterpolation(normalizedTime);
    curZoom=interpolation * (zoomEnd - zoomStart) + zoomStart;
    tileView.zoomToAnimate(curZoom,notifyListener);
    try {
      Thread.sleep(DEFAULT_SLEEP_TO_REDRAW);
    }
 catch (    InterruptedException e) {
      stopped=true;
    }
  }
  if (curZoom != ((int)Math.round(curZoom))) {
    if (Math.abs(curZoom - zoomEnd) > 2) {
      if (zoomStart > zoomEnd) {
        curZoom=(float)Math.floor(curZoom);
      }
 else {
        curZoom=(float)Math.ceil(curZoom);
      }
      tileView.zoomToAnimate(curZoom,notifyListener);
    }
 else {
      tileView.zoomToAnimate(zoomEnd,notifyListener);
    }
  }
}
