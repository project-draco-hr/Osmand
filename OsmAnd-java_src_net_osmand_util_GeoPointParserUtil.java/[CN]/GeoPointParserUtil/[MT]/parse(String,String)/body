{
  final URI data=URI.create(uri.replaceAll("\\s+","+"));
  if ("http".equals(scheme) || "https".equals(scheme)) {
    final String schemeSpecific=data.getSchemeSpecificPart();
    if (schemeSpecific == null) {
      return null;
    }
    final String[] osmandNetSite={"//download.osmand.net/go?"};
    final String[] osmandNetPattern={"lat=(-?\\d{1,3}\\.\\d+)&lon=(-?\\d{1,3}\\.\\d+)&z=(\\d{1,2})"};
    final String[] openstreetmapOrgSite={"//openstreetmap.org/","//www.openstreetmap.org/"};
    final String[] openstreetmapOrgPattern={"(?:.*)(?:map=)(\\d{1,2})/(-?\\d{1,3}\\.\\d+)/(-?\\d{1,3}\\.\\d+)(?:.*)"};
    final String[] openstreetmapDeSite={"//openstreetmap.de/","//www.openstreetmap.de/"};
    final String[] openstreetmapDePattern={"(?:.*)zoom=(\\d{1,2})&lat=(-?\\d{1,3}\\.\\d+)&lon=(-?\\d{1,3}\\.\\d+)(?:.*)","(?:.*)lat=(-?\\d{1,3}\\.\\d+)&lon=(-?\\d{1,3}\\.\\d+)&z(?:oom)?=(\\d{1,2})(?:.*)"};
    final String[] googleComSite={"//www.google.com/maps/","//maps.google.com/maps","//maps.google.com"};
    final String[] googleComPattern={"(?:.*)[@/](-?\\d{1,3}\\.\\d+),(-?\\d{1,3}\\.\\d+),(\\d{1,2})z(?:.*)","(?:.*)ll=(-?\\d{1,3}\\.\\d+),(-?\\d{1,3}\\.\\d+)(?:.+)z=(\\d{1,2})(?:.*)","(?:.*)q=([\\-+]?\\d{1,3}\\.\\d+),([\\-+]?\\d{1,3}\\.\\d+)(?:.*)&z=(\\d{1,2})","(?:.*)(q=)(-?\\d{1,3}\\.\\d+),(-?\\d{1,3}\\.\\d+)(?:.*)","(?:.*)q=loc:(-?\\d{1,3}\\.\\d+),(-?\\d{1,3}\\.\\d+)&z=(\\d{1,2})(?:.*)","(?:.*)(q=loc:)(-?\\d{1,3}\\.\\d+),(-?\\d{1,3}\\.\\d+)(?:.*)","(.*)daddr=(-?\\d{1,3}\\.\\d+),(-?\\d{1,3}\\.\\d+)(?:.*)","(.*)/(-?\\d{1,3}\\.\\d+),(-?\\d{1,3}\\.\\d+)(?:.*)"};
    final String[] yandexRuSite={"//maps.yandex.ru/"};
    final String[] yandexRuPattern={"(?:.*)ll=(-?\\d{1,3}.\\d+),(-?\\d{1,3}.\\d+)(?:.+)z=(\\d{1,2})(?:.*)"};
    final String sites[][]={osmandNetSite,openstreetmapOrgSite,openstreetmapDeSite,googleComSite,yandexRuSite};
    final String patterns[][]={osmandNetPattern,openstreetmapOrgPattern,openstreetmapDePattern,googleComPattern,yandexRuPattern};
    for (int s=0; s < sites.length; s++) {
      for (int si=0; si < sites[s].length; si++) {
        if (schemeSpecific.startsWith(sites[s][si])) {
          for (int p=0; p < patterns[s].length; p++) {
            String subString=schemeSpecific.substring(sites[s][si].length());
            if (subString.equals("")) {
              subString=data.getFragment();
            }
            final Matcher matcher=Pattern.compile(patterns[s][p]).matcher(subString);
            if (matcher.matches()) {
              try {
                final double lat;
                final double lon;
                int zoom;
                if (!matcher.group(3).contains(".")) {
                  lat=Double.valueOf(matcher.group(1));
                  lon=Double.valueOf(matcher.group(2));
                  zoom=Integer.valueOf(matcher.group(3));
                }
 else {
                  lat=Double.valueOf(matcher.group(2));
                  lon=Double.valueOf(matcher.group(3));
                  try {
                    zoom=Integer.valueOf(matcher.group(1));
                  }
 catch (                  NumberFormatException e) {
                    zoom=GeoParsedPoint.NO_ZOOM;
                  }
                }
                return new GeoParsedPoint(lat,lon,zoom);
              }
 catch (              NumberFormatException e) {
                return null;
              }
            }
          }
          break;
        }
      }
    }
    final String[] googleComAddressPattern=new String[]{"(?:.*)daddr=(.*)","q=(.*)","(?:.*)/(.*)"};
    for (int s=0; s < googleComSite.length; s++) {
      for (int p=0; p < googleComAddressPattern.length; p++) {
        final String subString=schemeSpecific.substring(googleComSite[s].length());
        final Matcher matcher=Pattern.compile(googleComAddressPattern[p]).matcher(subString);
        if (matcher.matches()) {
          return new GeoParsedPoint(matcher.group(1));
        }
      }
    }
    return null;
  }
  if ("geo".equals(scheme) || "osmand.geo".equals(scheme)) {
    final String schemeSpecific=data.getSchemeSpecificPart();
    if (schemeSpecific == null) {
      return null;
    }
    if (schemeSpecific.startsWith("0,0?")) {
      String query=schemeSpecific.substring("0,0?".length());
      final String pattern="(?:z=([0-9]{1,2})?)?&?q=([\\-0-9\\.]+)?,([\\-0-9\\.]+)?\\s*(?:\\((.+?)\\))?";
      final Matcher matcher=Pattern.compile(pattern).matcher(query);
      if (matcher.matches()) {
        final String z=matcher.group(1);
        final String name=matcher.group(4);
        final int zoom=z != null ? Integer.parseInt(z) : GeoParsedPoint.NO_ZOOM;
        final double lat=Double.parseDouble(matcher.group(2));
        final double lon=Double.parseDouble(matcher.group(3));
        return new GeoParsedPoint(lat,lon,zoom,name);
      }
 else {
        if (query.contains("z="))         query=query.substring(query.indexOf("&") + 1);
        return new GeoParsedPoint(query);
      }
    }
 else {
      final String pattern="([\\-0-9.]+),([\\-0-9.]+)(?:,([\\-0-9.]+))?(?:\\?z=([0-9]+))?(?:;.*)?";
      int indexQ=schemeSpecific.indexOf("&q");
      final Matcher matcher;
      if (indexQ != -1) {
        final String schemeQ=schemeSpecific.substring(0,indexQ);
        matcher=Pattern.compile(pattern).matcher(schemeQ);
      }
 else {
        matcher=Pattern.compile(pattern).matcher(schemeSpecific);
      }
      final String pattern2="([\\-0-9.]+),([\\-0-9.]+)(?:.*)";
      final Matcher matcher2=Pattern.compile(pattern2).matcher(schemeSpecific);
      if (matcher.matches()) {
        final double lat=Double.valueOf(matcher.group(1));
        final double lon=Double.valueOf(matcher.group(2));
        if (matcher.group(4) == null) {
          return new GeoParsedPoint(lat,lon);
        }
 else {
          return new GeoParsedPoint(lat,lon,Integer.valueOf(matcher.group(4)));
        }
      }
 else       if (matcher2.matches()) {
        final double lat=Double.valueOf(matcher2.group(1));
        final double lon=Double.valueOf(matcher2.group(2));
        return new GeoParsedPoint(lat,lon);
      }
 else {
        return null;
      }
    }
  }
  return null;
}
