{
  final URI data=URI.create(uri.replaceAll("\\s+","+").replaceAll("%20","+").replaceAll("%2C",","));
  if ("http".equals(scheme) || "https".equals(scheme)) {
    final String schemeSpecific=data.getSchemeSpecificPart();
    if (schemeSpecific == null) {
      return null;
    }
    final String[] osmandNetSite={"//download.osmand.net/go?"};
    final String[] osmandNetPattern={"lat=([+-]?\\d+(?:\\.\\d+)?)&lon=([+-]?\\d+(?:\\.\\d+)?)&?(z=\\d{1,2})"};
    final String[] openstreetmapOrgSite={"//openstreetmap.org/","//www.openstreetmap.org/"};
    final String[] openstreetmapOrgPattern={"(?:.*)(?:map=)(\\d{1,2})/([+-]?\\d+(?:\\.\\d+)?)/([+-]?\\d+(?:\\.\\d+)?)(?:.*)"};
    final String[] openstreetmapDeSite={"//openstreetmap.de/","//www.openstreetmap.de/"};
    final String[] openstreetmapDePattern={"(?:.*)zoom=(\\d{1,2})&lat=([+-]?\\d+(?:\\.\\d+)?)&lon=([+-]?\\d+(?:\\.\\d+)?)(?:.*)","(?:.*)lat=([+-]?\\d+(?:\\.\\d+)?)&lon=([+-]?\\d+(?:\\.\\d+)?)&?(z(?:oom)?=\\d{1,2})(?:.*)"};
    final String[] googleComSite={"//www.google.com/maps/","//maps.google.com/maps","//maps.google.com"};
    final String[] googleComPattern={"(?:.*)[@/]([+-]?\\d+(?:\\.\\d+)?),([+-]?\\d+(?:\\.\\d+)?),(\\d{1,2}z)(?:.*)","(?:.*)ll=([+-]?\\d+(?:\\.\\d+)?),([+-]?\\d+(?:\\.\\d+)?)(?:.+)(z=\\d{1,2})(?:.*)","(?:.*)q=([+-]?\\d+(?:\\.\\d+)?),([+-]?\\d+(?:\\.\\d+)?)(?:.*)&?(z=\\d{1,2})","(?:.*)(q=)([+-]?\\d+(?:\\.\\d+)?),([+-]?\\d+(?:\\.\\d+)?)(?:.*)","(?:.*)q=loc:([+-]?\\d+(?:\\.\\d+)?),([+-]?\\d+(?:\\.\\d+)?)&?(z=\\d{1,2})(?:.*)","(?:.*)(q=loc:)([+-]?\\d+(?:\\.\\d+)?),([+-]?\\d+(?:\\.\\d+)?)(?:.*)","(.*)daddr=([+-]?\\d+(?:\\.\\d+)?),([+-]?\\d+(?:\\.\\d+)?)(?:.*)","(.*)/([+-]?\\d+(?:\\.\\d+)?),([+-]?\\d+(?:\\.\\d+)?)(?:.*)"};
    final String[] yandexRuSite={"//maps.yandex.ru/"};
    final String[] yandexRuPattern={"(?:.*)ll=([+-]?\\d+(?:\\.\\d+)?),([+-]?\\d+(?:\\.\\d+)?)(?:.+)(z=\\d{1,2})(?:.*)"};
    final String sites[][]={osmandNetSite,openstreetmapOrgSite,openstreetmapDeSite,googleComSite,yandexRuSite};
    final String patterns[][]={osmandNetPattern,openstreetmapOrgPattern,openstreetmapDePattern,googleComPattern,yandexRuPattern};
    for (int s=0; s < sites.length; s++) {
      for (int si=0; si < sites[s].length; si++) {
        if (schemeSpecific.startsWith(sites[s][si])) {
          for (int p=0; p < patterns[s].length; p++) {
            String subString=schemeSpecific.substring(sites[s][si].length());
            if (subString.equals("")) {
              subString=data.getFragment();
            }
            final Matcher matcher=Pattern.compile(patterns[s][p]).matcher(subString);
            if (matcher.matches()) {
              try {
                final double lat;
                final double lon;
                int zoom;
                if (matcher.group(3).contains("z=")) {
                  lat=Double.valueOf(matcher.group(1));
                  lon=Double.valueOf(matcher.group(2));
                  zoom=Integer.valueOf(matcher.group(3).substring("z=".length()));
                }
 else                 if (matcher.group(3).contains("zoom=")) {
                  lat=Double.valueOf(matcher.group(1));
                  lon=Double.valueOf(matcher.group(2));
                  zoom=Integer.valueOf(matcher.group(3).substring("zoom=".length()));
                }
 else                 if (matcher.group(3).contains("z")) {
                  lat=Double.valueOf(matcher.group(1));
                  lon=Double.valueOf(matcher.group(2));
                  zoom=Integer.valueOf(matcher.group(3).substring(0,matcher.group(3).length() - 1));
                }
 else {
                  lat=Double.valueOf(matcher.group(2));
                  lon=Double.valueOf(matcher.group(3));
                  try {
                    zoom=Integer.valueOf(matcher.group(1));
                  }
 catch (                  NumberFormatException e) {
                    zoom=GeoParsedPoint.NO_ZOOM;
                  }
                }
                return new GeoParsedPoint(lat,lon,zoom);
              }
 catch (              NumberFormatException e) {
                return null;
              }
            }
          }
          break;
        }
      }
    }
    final String[] googleComAddressPattern=new String[]{"(?:.*)daddr=(.*)","q=(.*)","(?:.*)/(.*)"};
    for (int s=0; s < googleComSite.length; s++) {
      for (int p=0; p < googleComAddressPattern.length; p++) {
        final String subString=schemeSpecific.substring(googleComSite[s].length());
        final Matcher matcher=Pattern.compile(googleComAddressPattern[p]).matcher(subString);
        if (matcher.matches()) {
          return new GeoParsedPoint(matcher.group(1));
        }
      }
    }
    return null;
  }
  if ("geo".equals(scheme) || "osmand.geo".equals(scheme)) {
    final String schemeSpecific=data.getSchemeSpecificPart();
    if (schemeSpecific == null) {
      return null;
    }
    if (schemeSpecific.startsWith("0,0?")) {
      String query=schemeSpecific.substring("0,0?".length());
      final String pattern="(?:z=(\\d{1,2}))?&?q=([+-]?\\d+(?:\\.\\d+)?),([+-]?\\d+(?:\\.\\d+)?)[\\+]?(?:\\((.+?)\\))?";
      final Matcher matcher=Pattern.compile(pattern).matcher(query);
      if (matcher.matches()) {
        final String z=matcher.group(1);
        final String name=matcher.group(4);
        final int zoom=z != null ? Integer.parseInt(z) : GeoParsedPoint.NO_ZOOM;
        final double lat=Double.parseDouble(matcher.group(2));
        final double lon=Double.parseDouble(matcher.group(3));
        return new GeoParsedPoint(lat,lon,zoom,name);
      }
 else {
        if (query.contains("z="))         query=query.substring(query.indexOf("&") + 1);
        return new GeoParsedPoint(query);
      }
    }
 else {
      final String pattern="([+-]?\\d+(?:\\.\\d+)?),([+-]?\\d+(?:\\.\\d+)?)(?:(?:\\?z=(\\d{1,2}))?|(?:\\?q=.*?)?)[\\+]?(?:\\((.*?)\\))?";
      final Matcher matcher=Pattern.compile(pattern).matcher(schemeSpecific);
      if (matcher.matches()) {
        final double lat=Double.valueOf(matcher.group(1));
        final double lon=Double.valueOf(matcher.group(2));
        final String name=matcher.group(4);
        int zoom=matcher.group(3) != null ? Integer.parseInt(matcher.group(3)) : GeoParsedPoint.NO_ZOOM;
        if (zoom != GeoParsedPoint.NO_ZOOM) {
          return new GeoParsedPoint(lat,lon,zoom,name);
        }
 else {
          return new GeoParsedPoint(lat,lon,name);
        }
      }
 else {
        return null;
      }
    }
  }
  return null;
}
