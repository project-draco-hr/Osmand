{
  final int ilat=34, ilon=-106;
  final double dlat=34.99393, dlon=-106.61568;
  final double longLat=34.993933029174805, longLon=-106.615680694580078;
  final String name="Treasure Island";
  int z=GeoParsedPoint.NO_ZOOM;
  String url;
  String noQueryParameters[]={"geo:0,0","geo:0,0?","http://download.osmand.net/go","http://download.osmand.net/go?"};
  for (  String s : noQueryParameters) {
    URI uri=URI.create(s);
    Map<String,String> map=getQueryParameters(uri);
    System.out.print(s + " map: " + map.size()+ "...");
    if (map.size() != 0) {
      System.out.println("");
      throw new RuntimeException("Map should be 0 but is " + map.size());
    }
    System.out.println(" Passed!");
  }
  String oneQueryParameter[]={"geo:0,0?m","geo:0,0?m=","geo:0,0?m=foo","http://download.osmand.net/go?lat","http://download.osmand.net/go?lat=","http://download.osmand.net/go?lat=34.99393"};
  for (  String s : oneQueryParameter) {
    URI uri=URI.create(s);
    Map<String,String> map=getQueryParameters(uri);
    System.out.print(s + " map: " + map.size()+ "...");
    if (map.size() != 1) {
      System.out.println("");
      throw new RuntimeException("Map should be 1 but is " + map.size());
    }
    System.out.println(" Passed!");
  }
  String twoQueryParameters[]={"geo:0,0?z=11&q=Lots+Of+Stuff","http://download.osmand.net/go?lat=34.99393&lon=-110.12345","http://download.osmand.net/go?lat=34.99393&lon=-110.12345#this+should+be+ignored"};
  for (  String s : twoQueryParameters) {
    URI uri=URI.create(s);
    Map<String,String> map=getQueryParameters(uri);
    System.out.print(s + " map: " + map.size()+ "...");
    if (map.size() != 2) {
      System.out.println("");
      throw new RuntimeException("Map should be 2 but is " + map.size());
    }
    System.out.println(" Passed!");
  }
  url="geo:" + ilat + ","+ ilon;
  System.out.println("url: " + url);
  GeoParsedPoint actual=GeoPointParserUtil.parse(url);
  assertUrlEquals(url,actual.getGeoUriString());
  assertGeoPoint(actual,new GeoParsedPoint(ilat,ilon));
  url="geo:" + dlat + ","+ dlon;
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertUrlEquals(url,actual.getGeoUriString());
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon));
  z=11;
  url="geo:" + dlat + ","+ dlon+ "?z="+ z;
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertUrlEquals(url,actual.getGeoUriString());
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon,z));
  url="geo:" + dlat + ","+ dlon+ " ("+ name+ ")";
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon,name));
  z=11;
  url="geo:" + dlat + ","+ dlon+ "?z="+ z+ " ("+ name+ ")";
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon,z,name));
  z=GeoParsedPoint.NO_ZOOM;
  url="geo:" + dlat + ","+ dlon+ "?q="+ dlat+ "%2C"+ dlon+ " ("+ name+ ")";
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon,z,name));
  z=GeoParsedPoint.NO_ZOOM;
  url="geo:" + dlat + ","+ dlon+ "?q="+ dlat+ ","+ dlon+ "("+ URLEncoder.encode(name)+ ")";
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon,z,name));
  assertUrlEquals(url,actual.getGeoUriString());
  z=GeoParsedPoint.NO_ZOOM;
  url="geo:0,0?q=" + ilat + ","+ ilon+ "("+ name+ ")";
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(ilat,ilon,z,name));
  z=GeoParsedPoint.NO_ZOOM;
  url="geo:0,0?q=" + dlat + ","+ dlon+ "("+ name+ ")";
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon,z,name));
  z=11;
  url="geo:0,0?z=" + z + "&q="+ dlat+ ","+ dlon+ " ("+ name+ ")";
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon,z,name));
  z=11;
  url="geo:0,0?z=" + z + "&q="+ dlat+ ","+ dlon;
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon,z));
  String qstr="760 West Genesee Street Syracuse NY 13204";
  url="geo:0,0?q=" + URLEncoder.encode(qstr);
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(qstr));
  assertUrlEquals(url,actual.getGeoUriString());
  qstr="760 West Genesee Street Syracuse NY 13204";
  url="geo:0,0?q=" + qstr;
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(qstr));
  qstr="1600 Amphitheatre Parkway, CA";
  url="geo:0,0?q=" + URLEncoder.encode(qstr);
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(qstr));
  assertUrlEquals(url,actual.getGeoUriString());
  qstr="1600 Amphitheatre Parkway, CA";
  url="geo:0,0?z=11&q=" + URLEncoder.encode(qstr);
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(qstr));
  z=15;
  String qname="Kiev";
  double qlat=50.4513;
  double qlon=30.5699;
  url="geo:50.451300,30.569900?z=15&q=50.451300,30.569900 (Kiev)";
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(qlat,qlon,z,qname));
  url="http://download.osmand.net/go?lat=" + ilat + "&lon="+ ilon+ "&z="+ z;
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(ilat,ilon,z));
  url="http://download.osmand.net/go?lat=" + dlat + "&lon="+ dlon+ "&z="+ z;
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon,z));
  z=11;
  url="http://openstreetmap.org/#map=" + z + "/"+ ilat+ "/"+ ilon;
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(ilat,ilon,z));
  url="http://openstreetmap.org/#map=" + z + "/"+ dlat+ "/"+ dlon;
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon,z));
  url="http://openstreetmap.org/#" + z + "/"+ dlat+ "/"+ dlon;
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon,z));
  url="https://www.openstreetmap.org/#map=" + z + "/"+ dlat+ "/"+ dlon;
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon,z));
  url="https://www.openstreetmap.org/?mlat=" + longLat + "&mlon="+ longLon+ "#map="+ z+ "/"+ dlat+ "/"+ dlon;
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon,z));
  z=15;
  url="http://osm.org/go/TyFYuF6P--?m=";
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertApproximateGeoPoint(actual,new GeoParsedPoint(longLat,longLon,z));
  z=3;
  url="http://osm.org/go/TyFS--";
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertApproximateGeoPoint(actual,new GeoParsedPoint(dlat,dlon,z));
  z=20;
  url="http://osm.org/go/TyFYuF6P~~-?m";
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertApproximateGeoPoint(actual,new GeoParsedPoint(longLat,longLon,z));
  z=21;
  url="http://osm.org/go/TyFYuF6P@@--?m=";
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertApproximateGeoPoint(actual,new GeoParsedPoint(longLat,longLon,z));
  z=11;
  url="http://openstreetmap.de/zoom=" + z + "&lat="+ ilat+ "&lon="+ ilon;
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(ilat,ilon,z));
  url="http://openstreetmap.de/zoom=" + z + "&lat="+ dlat+ "&lon="+ dlon;
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon,z));
  url="http://openstreetmap.de/lat=" + dlat + "&lon="+ dlon+ "&zoom="+ z;
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon,z));
  url="http://maps.google.com/maps/@" + ilat + ","+ ilon+ ","+ z+ "z";
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(ilat,ilon,z));
  url="http://maps.google.com/maps/@" + dlat + ","+ dlon+ ","+ z+ "z";
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon,z));
  url="http://maps.google.com/maps/ll=" + ilat + ","+ ilon+ ",z="+ z;
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(ilat,ilon,z));
  url="http://maps.google.com/maps/ll=" + dlat + ","+ dlon+ ",z="+ z;
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon,z));
  url="http://maps.google.com/maps/q=loc:" + ilat + ","+ ilon+ "&z="+ z;
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(ilat,ilon,z));
  url="http://maps.google.com/maps/q=loc:" + dlat + ","+ dlon+ "&z="+ z;
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon,z));
  z=GeoParsedPoint.NO_ZOOM;
  url="http://maps.google.com/maps/q=loc:" + ilat + ","+ ilon+ " (You)";
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(ilat,ilon,z));
  z=GeoParsedPoint.NO_ZOOM;
  url="http://maps.google.com/maps/q=loc:" + dlat + ","+ dlon+ " (You)";
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon,z));
  url="http://www.google.com/maps/search/food/" + ilat + ","+ ilon+ ","+ z+ "z";
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(ilat,ilon,z));
  url="http://www.google.com/maps/search/food/" + dlat + ","+ dlon+ ","+ z+ "z";
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon,z));
  z=GeoParsedPoint.NO_ZOOM;
  url="http://maps.google.com?saddr=Current+Location&daddr=" + ilat + ","+ ilon;
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(ilat,ilon,z));
  z=GeoParsedPoint.NO_ZOOM;
  url="http://maps.google.com?saddr=Current+Location&daddr=" + dlat + ","+ dlon;
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon,z));
  z=GeoParsedPoint.NO_ZOOM;
  url="http://www.google.com/maps/dir/Current+Location/" + ilat + ","+ ilon;
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(ilat,ilon,z));
  z=GeoParsedPoint.NO_ZOOM;
  url="http://www.google.com/maps/dir/Current+Location/" + dlat + ","+ dlon;
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon,z));
  z=GeoParsedPoint.NO_ZOOM;
  url="http://maps.google.com/maps?q=" + ilat + ","+ ilon;
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(ilat,ilon,z));
  z=GeoParsedPoint.NO_ZOOM;
  url="http://maps.google.com/maps?q=" + dlat + ","+ dlon;
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon,z));
  qstr="760+West+Genesee+Street+Syracuse+NY+13204";
  url="http://www.google.com/maps/place/" + qstr;
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(qstr));
  qstr="760+West+Genesee+Street+Syracuse+NY+13204";
  url="http://www.google.com/maps?q=" + qstr;
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(qstr));
  qstr="760+West+Genesee+Street+Syracuse+NY+13204";
  url="http://www.google.com/maps?daddr=" + qstr;
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(qstr));
  qstr="760+West+Genesee+Street+Syracuse+NY+13204";
  url="http://www.google.com/maps/dir/Current+Location/" + qstr;
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(qstr));
  z=11;
  url="http://maps.yandex.ru/?ll=" + ilat + ","+ ilon+ "&z="+ z;
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(ilat,ilon,z));
  z=11;
  url="http://maps.yandex.ru/?ll=" + dlat + ","+ dlon+ "&z="+ z;
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon,z));
  z=7;
  int latint=((int)(dlat * 100000));
  int lonint=((int)(dlon * 100000));
  url="http://map.baidu.com/?l=" + z + "&tn=B_NORMAL_MAP&c="+ latint+ ","+ lonint+ "&s=gibberish";
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon,z));
  z=13;
  url="http://www.amap.com/#!poi!!q=" + dlat + ","+ dlon+ "|2|%E5%AE%BE%E9%A6%86&radius=1000";
  System.out.println("\nurl: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon,z));
  z=GeoParsedPoint.NO_ZOOM;
  url="http://www.amap.com/?q=" + dlat + ","+ dlon+ ",%E4%B8%8A%E6%B5v%B7%E5%B8%82%E6%B5%A6%E4%B8%9C%E6%96%B0%E5%8C%BA%E4%BA%91%E5%8F%B0%E8%B7%AF8086";
  System.out.println("\nurl: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon,z));
  url="http://share.here.com/l/" + dlat + ","+ dlon+ ",Hannah-Arendt-Stra%C3%9Fe?z="+ z+ "&t=normal";
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon,z));
  z=16;
  url="https://www.here.com/location?map=" + dlat + ","+ dlon+ ","+ z+ ",normal&msg=Hannah-Arendt-Stra%C3%9Fe";
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon,z));
  z=16;
  url="https://www.here.com/?map=" + dlat + ","+ dlon+ ","+ z+ ",normal";
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon,z));
  z=GeoParsedPoint.NO_ZOOM;
  url="http://map.wap.qq.com/loc/detail.jsp?sid=AU8f3ck87L6XDmytunBm4iWg&g_ut=2&city=%E5%8C%97%E4%BA%AC&key=NOBU%20Beijing&x=" + dlon + "&y="+ dlat+ "&md=10461366113386140862";
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon,z));
  z=11;
  url="http://map.qq.com/AppBox/print/?t=&c=%7B%22base%22%3A%7B%22l%22%3A11%2C%22lat%22%3A" + dlat + "%2C%22lng%22%3A"+ dlon+ "%7D%7D";
  System.out.println("url: " + url);
  actual=GeoPointParserUtil.parse(url);
  assertGeoPoint(actual,new GeoParsedPoint(dlat,dlon,z));
  String urls[]={"https://openstreetmap.org/go/0LQ127-?m","http://osm.org/go/0LQ127-?m","http://osm.org/go/0EEQjE==","http://osm.org/go/0EEQjEEb","http://osm.org/go/0EE~jEEb","http://osm.org/go/0EE@jEEb","http://osm.org/go/~~~~","http://osm.org/go/@@@@","https://www.openstreetmap.org/#map=0/0/0","https://www.openstreetmap.org/#map=0/180/180","https://www.openstreetmap.org/#map=0/-180/-180","https://www.openstreetmap.org/#map=0/180.0/180.0","https://www.openstreetmap.org/#map=6/33.907/34.662","https://www.openstreetmap.org/?mlat=49.56275939941406&mlon=17.291107177734375#map=8/49.563/17.291","https://www.google.at/maps/place/Bargou,+Tunesien/@36.0922506,9.5676327,15z/data=!3m1!4b1!4m2!3m1!1s0x12fc5d0b4dc5e66f:0xbd3618c6193d14cd","http://www.amap.com/#!poi!!q=38.174596,114.995033,%E6%B2%B3%E5%8C%97%E7%9C%81%E7%9F%B3%E5%AE%B6%E5%BA%84%E5%B8%82%E6%97%A0%E6%9E%81%E5%8E%BF","http://wb.amap.com/?p=B013706PJN,38.179456,114.98577,%E6%96%B0%E4%B8%9C%E6%96%B9%E5%A4%A7%E9%85%92%E5%BA%97(%E4%BF%9D%E9%99%A9%E8%8A%B1...,%E5%BB%BA%E8%AE%BE%E8%B7%AF67%E5%8F%B7","http://www.amap.com/#!poi!!q=38.179456,114.98577|3|B013706PJN","http://www.amap.com/#!poi!!q=38.174596,114.995033|2|%E5%AE%BE%E9%A6%86&radius=1000","http://www.amap.com/?p=B013704EJT,38.17914,114.976337,%E6%97%A0%E6%9E%81%E5%8E%BF%E4%BA%BA%E6%B0%91%E6%94%BF%E5%BA%9C,%E5%BB%BA%E8%AE%BE%E4%B8%9C%E8%B7%AF12%E5%8F%B7","http://share.here.com/l/52.5134272,13.3778416,Hannah-Arendt-Stra%C3%9Fe?z=16.0&t=normal","https://www.here.com/location?map=52.5134272,13.3778416,16,normal&msg=Hannah-Arendt-Stra%C3%9Fe","https://www.here.com/?map=48.23145,16.38454,15,normal","http://map.wap.qq.com/loc/detail.jsp?sid=AU8f3ck87L6XDmytunBm4iWg&g_ut=2&city=%E5%8C%97%E4%BA%AC&key=NOBU%20Beijing&x=116.48177&y=39.91082&md=10461366113386140862","http://map.wap.qq.com/loc/d.jsp?c=113.275020,39.188380&m=113.275020,39.188380&n=%E9%BC%93%E6%A5%BC&a=%E5%B1%B1%E8%A5%BF%E7%9C%81%E5%BF%BB%E5%B7%9E%E5%B8%82%E7%B9%81%E5%B3%99%E5%8E%BF+&p=+&i=16959367104973338386&z=0","http://map.wap.qq.com/loc/d.jsp?c=113.275020,39.188380&m=113.275020,39.188380&n=%E9%BC%93%E6%A5%BC&a=%E5%B1%B1%E8%A5%BF%E7%9C%81%E5%BF%BB%E5%B7%9E%E5%B8%82%E7%B9%81%E5%B3%99%E5%8E%BF+&p=+&i=16959367104973338386&z=0&m","http://map.qq.com/AppBox/print/?t=&c=%7B%22base%22%3A%7B%22l%22%3A11%2C%22lat%22%3A39.90403%2C%22lng%22%3A116.407526%7D%7D","http://maps.yandex.com/?text=Australia%2C%20Victoria%2C%20Christmas%20Hills&sll=145.319026%2C-37.650344&ll=145.319026%2C-37.650344&spn=0.352249%2C0.151501&z=12&l=map"};
  for (  String u : urls) {
    System.out.println("url: " + u);
    actual=GeoPointParserUtil.parse(u);
    if (actual == null)     throw new RuntimeException(u + " not parsable!");
    System.out.println("Properly parsed as: " + actual);
  }
  String[] unparsableUrls={"http://maps.yandex.ru/-/CVCw6M9g","http://maps.yandex.com/-/CVCXEKYW"};
  for (  String u : unparsableUrls) {
    System.out.println("url: " + u);
    actual=GeoPointParserUtil.parse(u);
    if (actual != null)     throw new RuntimeException(u + " not parsable, but parse did not return null!");
    System.out.println("Handled URL");
  }
}
