{
  System.out.println("parse(" + "uriString=" + uriString + ")");
  URI uri;
  try {
    uri=URI.create(uriString.replaceAll("\\s+","+").replaceAll("%20","+").replaceAll("%2C",",").replaceAll("\\|",";").replaceAll("\\(\\(\\S+\\)\\)",""));
  }
 catch (  IllegalArgumentException e) {
    return null;
  }
  String scheme=uri.getScheme();
  if (scheme == null)   return null;
 else   scheme=scheme.toLowerCase(Locale.US);
  if ("http".equals(scheme) || "https".equals(scheme)) {
    String host=uri.getHost();
    if (host == null)     return null;
 else     host=host.toLowerCase(Locale.US);
    String path=uri.getPath();
    if (path == null) {
      path="";
    }
    String fragment=uri.getFragment();
    Set<String> simpleDomains=new HashSet<String>();
    simpleDomains.add("osmand.net");
    simpleDomains.add("www.osmand.net");
    simpleDomains.add("download.osmand.net");
    simpleDomains.add("openstreetmap.de");
    simpleDomains.add("www.openstreetmap.de");
    final Pattern commaSeparatedPairPattern=Pattern.compile("(?:loc:)?([N|S]?[+-]?\\d+(?:\\.\\d+)?),([E|W]?[+-]?\\d+(?:\\.\\d+)?)");
    try {
      if (host.equals("osm.org") || host.endsWith("openstreetmap.org")) {
        Pattern p;
        Matcher matcher;
        if (path.startsWith("/go/")) {
          p=Pattern.compile("^/go/([A-Za-z0-9_@~]+-*)(?:.*)");
          matcher=p.matcher(path);
          if (matcher.matches()) {
            return MapUtils.decodeShortLinkString(matcher.group(1));
          }
        }
 else {
          double lat=0;
          double lon=0;
          int zoom=GeoParsedPoint.NO_ZOOM;
          if (fragment != null) {
            if (fragment.startsWith("map=")) {
              fragment=fragment.substring("map=".length());
            }
            String[] vls=fragment.split("/");
            if (vls.length >= 3) {
              zoom=parseZoom(vls[0]);
              lat=parseSilentDouble(vls[1]);
              lon=parseSilentDouble(vls[2]);
            }
          }
          String mlat=getQueryParameter("mlat",uri);
          if (mlat != null) {
            lat=parseSilentDouble(mlat);
          }
          String mlon=getQueryParameter("mlon",uri);
          if (mlon != null) {
            lon=parseSilentDouble(mlon);
          }
          return new GeoParsedPoint(lat,lon,zoom);
        }
      }
 else       if (host.startsWith("map.baidu.")) {
        Map<String,String> params=getQueryParameters(uri);
        String zm=params.get("l");
        String[] vls=silentSplit(params.get("c"),",");
        if (vls != null && vls.length >= 2) {
          double lat=parseSilentInt(vls[0]) / 100000.;
          double lon=parseSilentInt(vls[1]) / 100000.;
          int zoom=parseZoom(zm);
          return new GeoParsedPoint(lat,lon,zoom);
        }
      }
 else       if (simpleDomains.contains(host)) {
        Map<String,String> params=getQueryParameters(uri);
        if (uri.getQuery() == null && params.size() == 0) {
          params=getQueryParameters(path.substring(1));
        }
        if (params.containsKey("lat") && params.containsKey("lon")) {
          final double lat=parseSilentDouble(params.get("lat"));
          final double lon=parseSilentDouble(params.get("lon"));
          int zoom=GeoParsedPoint.NO_ZOOM;
          if (params.containsKey("z")) {
            zoom=parseZoom(params.get("z"));
          }
 else           if (params.containsKey("zoom")) {
            zoom=parseZoom(params.get("zoom"));
          }
          return new GeoParsedPoint(lat,lon,zoom);
        }
      }
 else       if (host.matches("(?:www\\.)?(?:maps\\.)?yandex\\.[a-z]+")) {
        Map<String,String> params=getQueryParameters(uri);
        String ll=params.get("ll");
        if (ll != null) {
          Matcher matcher=commaSeparatedPairPattern.matcher(ll);
          if (matcher.matches()) {
            String z=String.valueOf(parseZoom(params.get("z")));
            return new GeoParsedPoint(matcher.group(1),matcher.group(2),z,params.get("text"));
          }
        }
      }
 else       if (host.matches("(?:www\\.)?(?:maps\\.)?google\\.[a-z.]+")) {
        String latString=null;
        String lonString=null;
        String z=String.valueOf(GeoParsedPoint.NO_ZOOM);
        Map<String,String> params=getQueryParameters(uri);
        if (params.containsKey("q")) {
          Matcher matcher=commaSeparatedPairPattern.matcher(params.get("q"));
          if (matcher.matches()) {
            latString=matcher.group(1);
            lonString=matcher.group(2);
          }
        }
 else         if (params.containsKey("ll")) {
          Matcher matcher=commaSeparatedPairPattern.matcher(params.get("ll"));
          if (matcher.matches()) {
            latString=matcher.group(1);
            lonString=matcher.group(2);
          }
        }
        if (latString != null && lonString != null) {
          if (params.containsKey("z")) {
            z=params.get("z");
          }
          return new GeoParsedPoint(latString,lonString,z);
        }
        if (params.containsKey("daddr")) {
          return parseGoogleMapsPath(params.get("daddr"),params);
        }
 else         if (params.containsKey("saddr")) {
          return parseGoogleMapsPath(params.get("saddr"),params);
        }
 else         if (params.containsKey("q")) {
          return parseGoogleMapsPath(params.get("q"),params);
        }
        if (fragment != null) {
          Pattern p=Pattern.compile(".*[!&]q=([^&!]+).*");
          Matcher m=p.matcher(fragment);
          if (m.matches()) {
            return new GeoParsedPoint(m.group(1));
          }
        }
        String[] pathPrefixes=new String[]{"/@","/ll=","loc:","/"};
        for (        String pref : pathPrefixes) {
          if (path.contains(pref)) {
            path=path.substring(path.lastIndexOf(pref) + pref.length());
            return parseGoogleMapsPath(path,params);
          }
        }
      }
 else       if (host.endsWith(".amap.com")) {
        final String subString=uri.toString().substring(scheme.length() + host.length() + 4);
        Pattern p;
        Matcher matcher;
        final String[] patterns={".*q=([+-]?\\d+(?:\\.\\d+)?),([+-]?\\d+(?:\\.\\d+)?).*&radius=(\\d+).*",".*q=([+-]?\\d+(?:\\.\\d+)?),([+-]?\\d+(?:\\.\\d+)?).*",".*p=(?:[A-Z0-9]+),([+-]?\\d+(?:\\.\\d+)?),([+-]?\\d+(?:\\.\\d+)?).*"};
        for (int i=0; i < patterns.length; i++) {
          p=Pattern.compile(patterns[i]);
          matcher=p.matcher(subString);
          if (matcher.matches()) {
            if (matcher.groupCount() == 3) {
              float radius=Float.valueOf(matcher.group(3));
              long zoom=Math.round(23. - Math.log(radius) / Math.log(2.0));
              return new GeoParsedPoint(matcher.group(1),matcher.group(2),String.valueOf(zoom));
            }
 else             if (matcher.groupCount() == 2) {
              return new GeoParsedPoint(matcher.group(1),matcher.group(2));
            }
          }
        }
      }
 else       if (host.equals("here.com") || host.endsWith(".here.com")) {
        Map<String,String> params=getQueryParameters(uri);
        String z=String.valueOf(GeoParsedPoint.NO_ZOOM);
        String label=null;
        if (params.containsKey("msg")) {
          label=params.get("msg");
        }
        if (params.containsKey("z")) {
          z=params.get("z");
        }
        if (params.containsKey("map")) {
          String[] mapArray=params.get("map").split(",");
          if (mapArray.length > 2) {
            return new GeoParsedPoint(mapArray[0],mapArray[1],mapArray[2],label);
          }
 else           if (mapArray.length > 1) {
            return new GeoParsedPoint(mapArray[0],mapArray[1],z,label);
          }
        }
        if (path.startsWith("/l/")) {
          Pattern p=Pattern.compile("^/l/([+-]?\\d+(?:\\.\\d+)),([+-]?\\d+(?:\\.\\d+)),(.*)");
          Matcher matcher=p.matcher(path);
          if (matcher.matches()) {
            return new GeoParsedPoint(matcher.group(1),matcher.group(2),z,matcher.group(3));
          }
        }
      }
 else       if (host.endsWith(".qq.com")) {
        Map<String,String> params=getQueryParameters(uri);
        String x=null;
        String y=null;
        String z=String.valueOf(GeoParsedPoint.NO_ZOOM);
        String label=null;
        if (params.containsKey("city")) {
          label=params.get("city");
        }
 else         if (params.containsKey("key")) {
          label=params.get("key");
        }
 else         if (params.containsKey("a")) {
          label=params.get("a");
        }
 else         if (params.containsKey("n")) {
          label=params.get("n");
        }
        String m=params.get("m");
        if (m != null) {
          Matcher matcher=commaSeparatedPairPattern.matcher(m);
          if (matcher.matches()) {
            x=matcher.group(2);
            y=matcher.group(1);
          }
        }
        String c=params.get("c");
        if (c != null) {
          Matcher matcher=commaSeparatedPairPattern.matcher(c);
          if (matcher.matches()) {
            x=matcher.group(2);
            y=matcher.group(1);
          }
 else {
            x=c.replaceAll(".*\"lng\":\\s*([+\\-]?[0-9.]+).*","$1");
            if (x == null)             x=c.replaceAll(".*\"lon\":\\s*([+\\-]?[0-9.]+).*","$1");
            y=c.replaceAll(".*\"lat\":\\s*([+\\-]?[0-9.]+).*","$1");
            z=c.replaceAll(".*\"l\":\\s*([+-]?[0-9.]+).*","$1");
            return new GeoParsedPoint(y,x,z,label);
          }
        }
        for (        String key : new String[]{"centerX","x","x1","x2"}) {
          if (params.containsKey(key)) {
            x=params.get(key);
            break;
          }
        }
        for (        String key : new String[]{"centerY","y","y1","y2"}) {
          if (params.containsKey(key)) {
            y=params.get(key);
            break;
          }
        }
        if (x != null && y != null)         return new GeoParsedPoint(y,x,z,label);
      }
 else       if (host.equals("maps.apple.com")) {
        Map<String,String> params=getQueryParameters(uri);
        String z=String.valueOf(GeoParsedPoint.NO_ZOOM);
        String label=null;
        if (params.containsKey("q")) {
          label=params.get("q");
        }
        if (params.containsKey("near")) {
          label=params.get("near");
        }
        if (params.containsKey("z")) {
          z=params.get("z");
        }
        String ll=params.get("ll");
        if (ll != null) {
          Matcher matcher=commaSeparatedPairPattern.matcher(ll);
          if (matcher.matches()) {
            return new GeoParsedPoint(matcher.group(1),matcher.group(2),z,label);
          }
        }
        String sll=params.get("sll");
        if (sll != null) {
          Matcher matcher=commaSeparatedPairPattern.matcher(sll);
          if (matcher.matches()) {
            return new GeoParsedPoint(matcher.group(1),matcher.group(2),z,label);
          }
        }
        if (params.containsKey("q")) {
          return new GeoParsedPoint(params.get("q"));
        }
        if (params.containsKey("daddr")) {
          return new GeoParsedPoint(params.get("daddr"));
        }
        if (params.containsKey("saddr")) {
          return new GeoParsedPoint(params.get("saddr"));
        }
      }
    }
 catch (    RuntimeException e) {
      e.printStackTrace();
    }
    return null;
  }
 else   if ("geo".equals(scheme) || "osmand.geo".equals(scheme)) {
    String schemeSpecific=uri.getSchemeSpecificPart();
    if (schemeSpecific == null) {
      return null;
    }
    String name=null;
    final Pattern namePattern=Pattern.compile("[\\+\\s]*\\((.*)\\)[\\+\\s]*$");
    final Matcher nameMatcher=namePattern.matcher(schemeSpecific);
    if (nameMatcher.find()) {
      name=URLDecoder.decode(nameMatcher.group(1));
      if (name != null) {
        schemeSpecific=schemeSpecific.substring(0,nameMatcher.start());
      }
    }
    String positionPart;
    String queryPart="";
    int queryStartIndex=schemeSpecific.indexOf('?');
    if (queryStartIndex == -1) {
      positionPart=schemeSpecific;
    }
 else {
      positionPart=schemeSpecific.substring(0,queryStartIndex);
      if (queryStartIndex < schemeSpecific.length())       queryPart=schemeSpecific.substring(queryStartIndex + 1);
    }
    final Pattern positionPattern=Pattern.compile("([+-]?\\d+(?:\\.\\d+)?),([+-]?\\d+(?:\\.\\d+)?)");
    final Matcher positionMatcher=positionPattern.matcher(positionPart);
    if (!positionMatcher.find()) {
      return null;
    }
    double lat=Double.valueOf(positionMatcher.group(1));
    double lon=Double.valueOf(positionMatcher.group(2));
    int zoom=GeoParsedPoint.NO_ZOOM;
    String searchRequest=null;
    for (    String param : queryPart.split("&")) {
      String paramName;
      String paramValue=null;
      int nameValueDelimititerIndex=param.indexOf('=');
      if (nameValueDelimititerIndex == -1) {
        paramName=param;
      }
 else {
        paramName=param.substring(0,nameValueDelimititerIndex);
        if (nameValueDelimititerIndex < param.length())         paramValue=param.substring(nameValueDelimititerIndex + 1);
      }
      if ("z".equals(paramName) && paramValue != null) {
        zoom=Integer.parseInt(paramValue);
      }
 else       if ("q".equals(paramName) && paramValue != null) {
        searchRequest=URLDecoder.decode(paramValue);
      }
    }
    if (searchRequest != null) {
      final Matcher positionInSearchRequestMatcher=positionPattern.matcher(searchRequest);
      if (lat == 0.0 && lon == 0.0 && positionInSearchRequestMatcher.find()) {
        lat=Double.valueOf(positionInSearchRequestMatcher.group(1));
        lon=Double.valueOf(positionInSearchRequestMatcher.group(2));
      }
    }
    if (lat == 0.0 && lon == 0.0 && searchRequest != null) {
      return new GeoParsedPoint(searchRequest);
    }
    if (zoom != GeoParsedPoint.NO_ZOOM) {
      return new GeoParsedPoint(lat,lon,zoom,name);
    }
    return new GeoParsedPoint(lat,lon,name);
  }
  return null;
}
