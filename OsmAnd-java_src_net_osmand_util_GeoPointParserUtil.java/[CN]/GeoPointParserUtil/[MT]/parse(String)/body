{
  final URI uri=URI.create(uriString.replaceAll("\\s+","+").replaceAll("%20","+").replaceAll("%2C",","));
  String scheme=uri.getScheme();
  if (scheme == null)   return null;
 else   scheme=scheme.toLowerCase(Locale.US);
  if ("http".equals(scheme) || "https".equals(scheme)) {
    final String schemeSpecific=uri.getSchemeSpecificPart();
    if (schemeSpecific == null) {
      return null;
    }
    final String[] osmandNetSite={"//download.osmand.net/go?"};
    final String[] osmandNetPattern={"lat=([+-]?\\d+(?:\\.\\d+)?)&lon=([+-]?\\d+(?:\\.\\d+)?)&?(z=\\d{1,2})"};
    final String[] openstreetmapOrgSite={"//openstreetmap.org/","//www.openstreetmap.org/"};
    final String[] openstreetmapOrgPattern={"(?:.*)(?:map=)(\\d{1,2})/([+-]?\\d+(?:\\.\\d+)?)/([+-]?\\d+(?:\\.\\d+)?)(?:.*)"};
    final String[] openstreetmapDeSite={"//openstreetmap.de/","//www.openstreetmap.de/"};
    final String[] openstreetmapDePattern={"(?:.*)zoom=(\\d{1,2})&lat=([+-]?\\d+(?:\\.\\d+)?)&lon=([+-]?\\d+(?:\\.\\d+)?)(?:.*)","(?:.*)lat=([+-]?\\d+(?:\\.\\d+)?)&lon=([+-]?\\d+(?:\\.\\d+)?)&?(z(?:oom)?=\\d{1,2})(?:.*)"};
    final String[] googleComSite={"//www.google.com/maps/","//maps.google.com/maps","//maps.google.com"};
    final String[] googleComPattern={"(?:.*)[@/]([+-]?\\d+(?:\\.\\d+)?),([+-]?\\d+(?:\\.\\d+)?),(\\d{1,2}z)(?:.*)","(?:.*)ll=([+-]?\\d+(?:\\.\\d+)?),([+-]?\\d+(?:\\.\\d+)?)(?:.+)(z=\\d{1,2})(?:.*)","(?:.*)q=([+-]?\\d+(?:\\.\\d+)?),([+-]?\\d+(?:\\.\\d+)?)(?:.*)&?(z=\\d{1,2})","(?:.*)(q=)([+-]?\\d+(?:\\.\\d+)?),([+-]?\\d+(?:\\.\\d+)?)(?:.*)","(?:.*)q=loc:([+-]?\\d+(?:\\.\\d+)?),([+-]?\\d+(?:\\.\\d+)?)&?(z=\\d{1,2})(?:.*)","(?:.*)(q=loc:)([+-]?\\d+(?:\\.\\d+)?),([+-]?\\d+(?:\\.\\d+)?)(?:.*)","(.*)daddr=([+-]?\\d+(?:\\.\\d+)?),([+-]?\\d+(?:\\.\\d+)?)(?:.*)","(.*)/([+-]?\\d+(?:\\.\\d+)?),([+-]?\\d+(?:\\.\\d+)?)(?:.*)"};
    final String[] yandexRuSite={"//maps.yandex.ru/"};
    final String[] yandexRuPattern={"(?:.*)ll=([+-]?\\d+(?:\\.\\d+)?),([+-]?\\d+(?:\\.\\d+)?)(?:.+)(z=\\d{1,2})(?:.*)"};
    final String sites[][]={osmandNetSite,openstreetmapOrgSite,openstreetmapDeSite,googleComSite,yandexRuSite};
    final String patterns[][]={osmandNetPattern,openstreetmapOrgPattern,openstreetmapDePattern,googleComPattern,yandexRuPattern};
    for (int s=0; s < sites.length; s++) {
      for (int si=0; si < sites[s].length; si++) {
        if (schemeSpecific.startsWith(sites[s][si])) {
          for (int p=0; p < patterns[s].length; p++) {
            String subString=schemeSpecific.substring(sites[s][si].length());
            if (subString.equals("")) {
              subString=uri.getFragment();
            }
            final Matcher matcher=Pattern.compile(patterns[s][p]).matcher(subString);
            if (matcher.matches()) {
              try {
                final double lat;
                final double lon;
                int zoom;
                if (matcher.group(3).contains("z=")) {
                  lat=Double.valueOf(matcher.group(1));
                  lon=Double.valueOf(matcher.group(2));
                  zoom=Integer.valueOf(matcher.group(3).substring("z=".length()));
                }
 else                 if (matcher.group(3).contains("zoom=")) {
                  lat=Double.valueOf(matcher.group(1));
                  lon=Double.valueOf(matcher.group(2));
                  zoom=Integer.valueOf(matcher.group(3).substring("zoom=".length()));
                }
 else                 if (matcher.group(3).contains("z")) {
                  lat=Double.valueOf(matcher.group(1));
                  lon=Double.valueOf(matcher.group(2));
                  zoom=Integer.valueOf(matcher.group(3).substring(0,matcher.group(3).length() - 1));
                }
 else {
                  lat=Double.valueOf(matcher.group(2));
                  lon=Double.valueOf(matcher.group(3));
                  try {
                    zoom=Integer.valueOf(matcher.group(1));
                  }
 catch (                  NumberFormatException e) {
                    zoom=GeoParsedPoint.NO_ZOOM;
                  }
                }
                return new GeoParsedPoint(lat,lon,zoom);
              }
 catch (              NumberFormatException e) {
                return null;
              }
            }
          }
          break;
        }
      }
    }
    final String[] googleComAddressPattern=new String[]{"(?:.*)daddr=(.*)","q=(.*)","(?:.*)/(.*)"};
    for (int s=0; s < googleComSite.length; s++) {
      for (int p=0; p < googleComAddressPattern.length; p++) {
        final String subString=schemeSpecific.substring(googleComSite[s].length());
        final Matcher matcher=Pattern.compile(googleComAddressPattern[p]).matcher(subString);
        if (matcher.matches()) {
          return new GeoParsedPoint(matcher.group(1));
        }
      }
    }
    return null;
  }
  if ("geo".equals(scheme) || "osmand.geo".equals(scheme)) {
    String schemeSpecific=uri.getSchemeSpecificPart();
    if (schemeSpecific == null) {
      return null;
    }
    String name=null;
    final Pattern namePattern=Pattern.compile("[\\+\\s]*\\((.*)\\)[\\+\\s]*$");
    final Matcher nameMatcher=namePattern.matcher(schemeSpecific);
    if (nameMatcher.find()) {
      name=URLDecoder.decode(nameMatcher.group(1));
      if (name != null) {
        schemeSpecific=schemeSpecific.substring(0,nameMatcher.start());
      }
    }
    String positionPart;
    String queryPart="";
    int queryStartIndex=schemeSpecific.indexOf('?');
    if (queryStartIndex == -1) {
      positionPart=schemeSpecific;
    }
 else {
      positionPart=schemeSpecific.substring(0,queryStartIndex);
      if (queryStartIndex < schemeSpecific.length())       queryPart=schemeSpecific.substring(queryStartIndex + 1);
    }
    final Pattern positionPattern=Pattern.compile("([+-]?\\d+(?:\\.\\d+)?),([+-]?\\d+(?:\\.\\d+)?)");
    final Matcher positionMatcher=positionPattern.matcher(positionPart);
    if (!positionMatcher.find()) {
      return null;
    }
    double lat=Double.valueOf(positionMatcher.group(1));
    double lon=Double.valueOf(positionMatcher.group(2));
    int zoom=GeoParsedPoint.NO_ZOOM;
    String searchRequest=null;
    for (    String param : queryPart.split("&")) {
      String paramName;
      String paramValue=null;
      int nameValueDelimititerIndex=param.indexOf('=');
      if (nameValueDelimititerIndex == -1) {
        paramName=param;
      }
 else {
        paramName=param.substring(0,nameValueDelimititerIndex);
        if (nameValueDelimititerIndex < param.length())         paramValue=param.substring(nameValueDelimititerIndex + 1);
      }
      if ("z".equals(paramName) && paramValue != null) {
        zoom=Integer.parseInt(paramValue);
      }
 else       if ("q".equals(paramName) && paramValue != null) {
        searchRequest=URLDecoder.decode(paramValue);
      }
    }
    if (searchRequest != null) {
      final Matcher positionInSearchRequestMatcher=positionPattern.matcher(searchRequest);
      if (lat == 0.0 && lon == 0.0 && positionInSearchRequestMatcher.find()) {
        lat=Double.valueOf(positionInSearchRequestMatcher.group(1));
        lon=Double.valueOf(positionInSearchRequestMatcher.group(2));
      }
    }
    if (lat == 0.0 && lon == 0.0 && searchRequest != null) {
      return new GeoParsedPoint(searchRequest);
    }
    if (zoom != GeoParsedPoint.NO_ZOOM) {
      return new GeoParsedPoint(lat,lon,zoom,name);
    }
    return new GeoParsedPoint(lat,lon,name);
  }
  return null;
}
