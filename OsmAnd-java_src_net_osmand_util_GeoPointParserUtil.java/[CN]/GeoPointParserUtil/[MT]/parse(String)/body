{
  final URI uri=URI.create(uriString.replaceAll("\\s+","+").replaceAll("%20","+").replaceAll("%2C",","));
  String scheme=uri.getScheme();
  if (scheme == null)   return null;
 else   scheme=scheme.toLowerCase(Locale.US);
  if ("http".equals(scheme) || "https".equals(scheme)) {
    String host=uri.getHost();
    if (host == null)     return null;
 else     host=host.toLowerCase(Locale.US);
    String path=uri.getPath();
    if (path == null) {
      path="";
    }
 else     if (path.startsWith("/")) {
      path=path.substring(1);
    }
    String fragment=uri.getFragment();
    String query=uri.getQuery();
    if (query == null) {
      query=path;
    }
    Map<String,String> params=new HashMap<String,String>();
    for (    String vl : query.split("&")) {
      int i=vl.indexOf('=');
      if (i > 0) {
        params.put(vl.substring(0,i),vl.substring(i + 1));
      }
    }
    Set<String> simpleDomains=new HashSet<String>();
    simpleDomains.add("osmand.net");
    simpleDomains.add("www.osmand.net");
    simpleDomains.add("download.osmand.net");
    simpleDomains.add("openstreetmap.de");
    simpleDomains.add("www.openstreetmap.de");
    try {
      if (host.equals("osm.org") || host.endsWith("openstreetmap.org")) {
        Pattern p;
        Matcher matcher;
        if (path.startsWith("go/")) {
          p=Pattern.compile("^/go/([A-Za-z0-9_@~]+-*)(?:.*)");
          matcher=p.matcher(uri.getPath());
          if (matcher.matches()) {
            return MapUtils.decodeShortLinkString(matcher.group(1));
          }
        }
 else {
          double lat=0;
          double lon=0;
          int zoom=GeoParsedPoint.NO_ZOOM;
          if (fragment != null) {
            if (fragment.startsWith("map=")) {
              fragment=fragment.substring("map=".length());
            }
            String[] vls=fragment.split("/");
            if (vls.length >= 3) {
              zoom=parseZoom(vls[0]);
              lat=parseSilentDouble(vls[1]);
              lon=parseSilentDouble(vls[2]);
            }
          }
          if (params.containsKey("mlat") && params.containsKey("mlon")) {
            lat=parseSilentDouble(params.get("mlat"));
            lon=parseSilentDouble(params.get("mlon"));
          }
          return new GeoParsedPoint(lat,lon,zoom);
        }
      }
 else       if (host.startsWith("map.baidu.")) {
        String zm=params.get("l");
        String[] vls=silentSplit(params.get("c"),",");
        if (vls != null && vls.length >= 2) {
          double lat=parseSilentInt(vls[0]) / 100000.;
          double lon=parseSilentInt(vls[1]) / 100000.;
          int zoom=parseZoom(zm);
          return new GeoParsedPoint(lat,lon,zoom);
        }
      }
 else       if (simpleDomains.contains(host)) {
        if (params.containsKey("lat") && params.containsKey("lon")) {
          final double lat=parseSilentDouble(params.get("lat"));
          final double lon=parseSilentDouble(params.get("lon"));
          int zoom=GeoParsedPoint.NO_ZOOM;
          if (params.containsKey("z")) {
            zoom=parseZoom(params.get("z"));
          }
 else           if (params.containsKey("zoom")) {
            zoom=parseZoom(params.get("zoom"));
          }
          return new GeoParsedPoint(lat,lon,zoom);
        }
      }
 else       if (host.equals("maps.yandex.ru") || host.equals("yandex.ru") || host.equals("www.yandex.ru")) {
        String zm=params.get("z");
        String[] vls=silentSplit(params.get("ll"),",");
        if (vls != null && vls.length >= 2) {
          double lat=parseSilentDouble(vls[0]);
          double lon=parseSilentDouble(vls[1]);
          int zoom=parseZoom(zm);
          return new GeoParsedPoint(lat,lon,zoom);
        }
      }
 else       if (host.equals("maps.google.com") || host.equals("google.com") || host.equals("www.google.com")) {
        if (params.containsKey("daddr")) {
          return parseGoogleMapsPath(params.get("daddr"),params);
        }
 else         if (params.containsKey("saddr")) {
          return parseGoogleMapsPath(params.get("saddr"),params);
        }
 else         if (params.containsKey("q")) {
          return parseGoogleMapsPath(params.get("q"),params);
        }
        String[] pathPrefixes=new String[]{"/@","/ll=","loc:","/"};
        for (        String pref : pathPrefixes) {
          if (path.contains(pref)) {
            path=path.substring(path.lastIndexOf(pref) + pref.length());
            return parseGoogleMapsPath(path,params);
          }
        }
      }
    }
 catch (    RuntimeException e) {
      e.printStackTrace();
    }
    return null;
  }
 else   if ("geo".equals(scheme) || "osmand.geo".equals(scheme)) {
    String schemeSpecific=uri.getSchemeSpecificPart();
    if (schemeSpecific == null) {
      return null;
    }
    String name=null;
    final Pattern namePattern=Pattern.compile("[\\+\\s]*\\((.*)\\)[\\+\\s]*$");
    final Matcher nameMatcher=namePattern.matcher(schemeSpecific);
    if (nameMatcher.find()) {
      name=URLDecoder.decode(nameMatcher.group(1));
      if (name != null) {
        schemeSpecific=schemeSpecific.substring(0,nameMatcher.start());
      }
    }
    String positionPart;
    String queryPart="";
    int queryStartIndex=schemeSpecific.indexOf('?');
    if (queryStartIndex == -1) {
      positionPart=schemeSpecific;
    }
 else {
      positionPart=schemeSpecific.substring(0,queryStartIndex);
      if (queryStartIndex < schemeSpecific.length())       queryPart=schemeSpecific.substring(queryStartIndex + 1);
    }
    final Pattern positionPattern=Pattern.compile("([+-]?\\d+(?:\\.\\d+)?),([+-]?\\d+(?:\\.\\d+)?)");
    final Matcher positionMatcher=positionPattern.matcher(positionPart);
    if (!positionMatcher.find()) {
      return null;
    }
    double lat=Double.valueOf(positionMatcher.group(1));
    double lon=Double.valueOf(positionMatcher.group(2));
    int zoom=GeoParsedPoint.NO_ZOOM;
    String searchRequest=null;
    for (    String param : queryPart.split("&")) {
      String paramName;
      String paramValue=null;
      int nameValueDelimititerIndex=param.indexOf('=');
      if (nameValueDelimititerIndex == -1) {
        paramName=param;
      }
 else {
        paramName=param.substring(0,nameValueDelimititerIndex);
        if (nameValueDelimititerIndex < param.length())         paramValue=param.substring(nameValueDelimititerIndex + 1);
      }
      if ("z".equals(paramName) && paramValue != null) {
        zoom=Integer.parseInt(paramValue);
      }
 else       if ("q".equals(paramName) && paramValue != null) {
        searchRequest=URLDecoder.decode(paramValue);
      }
    }
    if (searchRequest != null) {
      final Matcher positionInSearchRequestMatcher=positionPattern.matcher(searchRequest);
      if (lat == 0.0 && lon == 0.0 && positionInSearchRequestMatcher.find()) {
        lat=Double.valueOf(positionInSearchRequestMatcher.group(1));
        lon=Double.valueOf(positionInSearchRequestMatcher.group(2));
      }
    }
    if (lat == 0.0 && lon == 0.0 && searchRequest != null) {
      return new GeoParsedPoint(searchRequest);
    }
    if (zoom != GeoParsedPoint.NO_ZOOM) {
      return new GeoParsedPoint(lat,lon,zoom,name);
    }
    return new GeoParsedPoint(lat,lon,name);
  }
  return null;
}
