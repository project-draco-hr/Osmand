{
  final StringBuilder b=new StringBuilder();
  final DamnCounter mapObjectsCounter=new DamnCounter();
  final MapStats mapObjectStats=new MapStats();
  if (vInfo.osm) {
    printToFile("<?xml version='1.0' encoding='UTF-8'?>\n" + "<osm version='0.6'>\n");
  }
  if (vInfo.isVStats()) {
    BinaryMapIndexReader.READ_STATS=true;
  }
  final SearchRequest<BinaryMapDataObject> req=BinaryMapIndexReader.buildSearchRequest(MapUtils.get31TileNumberX(vInfo.lonleft),MapUtils.get31TileNumberX(vInfo.lonright),MapUtils.get31TileNumberY(vInfo.lattop),MapUtils.get31TileNumberY(vInfo.latbottom),vInfo.getZoom(),new SearchFilter(){
    @Override public boolean accept(    TIntArrayList types,    MapIndex index){
      return true;
    }
  }
,new ResultMatcher<BinaryMapDataObject>(){
    @Override public boolean publish(    BinaryMapDataObject obj){
      mapObjectsCounter.value++;
      if (vInfo.isVStats()) {
        mapObjectStats.process(obj);
      }
 else       if (vInfo.vmapObjects) {
        b.setLength(0);
        if (vInfo.osm) {
          printOsmMapDetails(obj,b,null);
          try {
            printToFile(b.toString());
          }
 catch (          IOException e) {
            throw new RuntimeException(e);
          }
        }
 else {
          printMapDetails(obj,b,vInfo.vmapCoordinates);
          println(b.toString());
        }
      }
      return false;
    }
    @Override public boolean isCancelled(){
      return false;
    }
  }
);
  if (vInfo.vstats) {
    mapObjectStats.setReq(req);
  }
  index.searchMapIndex(req,mapIndex);
  if (vInfo.osm) {
    printToFile("</osm >\n");
  }
  if (vInfo.vstats) {
    mapObjectStats.print();
  }
  println("\tTotal map objects: " + mapObjectsCounter.value);
}
