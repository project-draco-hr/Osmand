{
  String[] cityType_String=new String[]{"Cities/Towns section","Villages section","Postcodes section"};
  int[] cityType=new int[]{BinaryMapAddressReaderAdapter.CITY_TOWN_TYPE,BinaryMapAddressReaderAdapter.VILLAGES_TYPE,BinaryMapAddressReaderAdapter.POSTCODES_TYPE};
  for (int j=0; j < BinaryMapAddressReaderAdapter.CITY_TYPES.length; j++) {
    int type=BinaryMapAddressReaderAdapter.CITY_TYPES[j];
    final List<City> cities=index.getCities(region,null,type);
    print(MessageFormat.format("\t{0}, {1,number,#} group(s)",new Object[]{cityType_String[j],cities.size()}));
    if (BinaryMapAddressReaderAdapter.CITY_TOWN_TYPE == type) {
      if (!verbose.vstreetgroups && !verbose.vcities) {
        println("");
        continue;
      }
    }
 else     if (!verbose.vstreetgroups) {
      println("");
      continue;
    }
    println(":");
    for (    City c : cities) {
      int size=index.preloadStreets(c,null);
      List<Street> streets=new ArrayList<Street>(c.getStreets());
      String cityDescription=(j == BinaryMapAddressReaderAdapter.POSTCODES_TYPE ? MessageFormat.format("\t\t''{0}'' {1,number,#} street(s) size {2,number,#} bytes",c.getName(verbose.lang),streets.size(),size) : MessageFormat.format("\t\t''{0}'' [{1,number,#}], {2,number,#} street(s) size {3,number,#} bytes",c.getName(verbose.lang),c.getId(),streets.size(),size));
      print(cityDescription);
      if (!verbose.vstreets) {
        println("");
        continue;
      }
      println(":");
      if (!verbose.contains(c))       continue;
      for (      Street t : streets) {
        if (!verbose.contains(t))         continue;
        index.preloadBuildings(t,null);
        final List<Building> buildings=t.getBuildings();
        final List<Street> intersections=t.getIntersectedStreets();
        println(MessageFormat.format("\t\t\t''{0}'' [{1,number,#}], {2,number,#} building(s), {3,number,#} intersections(s)",new Object[]{t.getName(lang),t.getId(),buildings.size(),intersections.size()}));
        if (buildings != null && !buildings.isEmpty() && verbose.vbuildings) {
          println("\t\t\t\tBuildings:");
          for (          Building b : buildings) {
            println(MessageFormat.format("\t\t\t\t{0} [{1,number,#}]",new Object[]{b.getName(lang),b.getId()}));
          }
        }
        if (intersections != null && !intersections.isEmpty() && verbose.vintersections) {
          print("\t\t\t\tIntersects with:");
          for (          Street s : intersections) {
            println("\t\t\t\t\t" + s.getName(verbose.lang));
          }
        }
      }
    }
  }
}
