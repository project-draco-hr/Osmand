{
  final DamnCounter mapObjectsCounter=new DamnCounter();
  final StringBuilder b=new StringBuilder();
  List<RouteSubregion> regions=index.searchRouteIndexTree(BinaryMapIndexReader.buildSearchRequest(MapUtils.get31TileNumberX(vInfo.lonleft),MapUtils.get31TileNumberX(vInfo.lonright),MapUtils.get31TileNumberY(vInfo.lattop),MapUtils.get31TileNumberY(vInfo.latbottom),vInfo.getZoom(),null),p.getSubregions());
  index.loadRouteIndexData(regions,new ResultMatcher<RouteDataObject>(){
    @Override public boolean publish(    RouteDataObject obj){
      mapObjectsCounter.value++;
      b.setLength(0);
      b.append("Road ");
      b.append(obj.id);
      for (int i=0; i < obj.getTypes().length; i++) {
        RouteTypeRule rr=obj.region.quickGetEncodingRule(obj.getTypes()[i]);
        b.append(" ").append(rr.getTag()).append("='").append(rr.getValue()).append("'");
      }
      int[] nameIds=obj.getNameIds();
      if (nameIds != null) {
        for (        int key : nameIds) {
          RouteTypeRule rr=obj.region.quickGetEncodingRule(key);
          b.append(" ").append(rr.getTag()).append("='").append(obj.getNames().get(key)).append("'");
        }
      }
      println(b.toString());
      return false;
    }
    @Override public boolean isCancelled(){
      return false;
    }
  }
);
  println("\tTotal map objects: " + mapObjectsCounter.value);
}
