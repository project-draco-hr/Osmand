{
  final DamnCounter mapObjectsCounter=new DamnCounter();
  final StringBuilder b=new StringBuilder();
  List<RouteSubregion> regions=index.searchRouteIndexTree(BinaryMapIndexReader.buildSearchRequest(MapUtils.get31TileNumberX(vInfo.lonleft),MapUtils.get31TileNumberX(vInfo.lonright),MapUtils.get31TileNumberY(vInfo.lattop),MapUtils.get31TileNumberY(vInfo.latbottom),vInfo.getZoom(),null),p.getSubregions());
  if (vInfo.osm) {
    printToFile("<?xml version='1.0' encoding='UTF-8'?>\n" + "<osm version='0.6'>\n");
  }
  index.loadRouteIndexData(regions,new ResultMatcher<RouteDataObject>(){
    @Override public boolean publish(    RouteDataObject obj){
      mapObjectsCounter.value++;
      if (vInfo.osm) {
        b.setLength(0);
        BinaryMapDataObject bobj=new BinaryMapDataObject();
        bobj.setArea(false);
        bobj.coordinates=new int[obj.pointsX.length * 2];
        for (int i=0; i < obj.pointsX.length; i++) {
          bobj.coordinates[2 * i]=obj.pointsX[i];
          bobj.coordinates[2 * i + 1]=obj.pointsY[i];
        }
        bobj.types=obj.types;
        bobj.setId(obj.getId() << 1);
        bobj.objectNames=obj.getNames();
        printOsmMapDetails(bobj,b,obj.region);
        try {
          printToFile(b.toString());
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
      }
      b.setLength(0);
      b.append("Road ");
      b.append(obj.id);
      b.append(" osmid ").append(obj.getId() >> (SHIFT_ID));
      for (int i=0; i < obj.getTypes().length; i++) {
        RouteTypeRule rr=obj.region.quickGetEncodingRule(obj.getTypes()[i]);
        b.append(" ").append(rr.getTag()).append("='").append(rr.getValue()).append("'");
      }
      int[] nameIds=obj.getNameIds();
      if (nameIds != null) {
        for (        int key : nameIds) {
          RouteTypeRule rr=obj.region.quickGetEncodingRule(key);
          b.append(" ").append(rr.getTag()).append("='").append(obj.getNames().get(key)).append("'");
        }
      }
      int pointsLength=obj.getPointsLength();
      if (obj.hasPointNames() || obj.hasPointTypes()) {
        b.append(" pointtypes [");
        for (int i=0; i < pointsLength; i++) {
          String[] names=obj.getPointNames(i);
          int[] nametypes=obj.getPointNameTypes(i);
          int[] types=obj.getPointTypes(i);
          if (types != null || names != null) {
            b.append("[" + (i + 1) + ". ");
            if (names != null) {
              for (int k=0; k < names.length; k++) {
                RouteTypeRule rr=obj.region.quickGetEncodingRule(nametypes[k]);
                b.append(rr.getTag()).append("='").append(names[k]).append("' ");
              }
            }
            if (types != null) {
              for (int k=0; k < types.length; k++) {
                RouteTypeRule rr=obj.region.quickGetEncodingRule(types[k]);
                b.append(rr.getTag()).append("='").append(rr.getValue()).append("' ");
              }
            }
            if (vInfo.vmapCoordinates) {
              float x=(float)MapUtils.get31LongitudeX(obj.getPoint31XTile(i));
              float y=(float)MapUtils.get31LatitudeY(obj.getPoint31YTile(i));
              b.append(y).append(" / ").append(x).append(" ");
            }
            b.append("]");
          }
        }
        b.append("]");
      }
      if (obj.restrictions != null) {
        b.append(" restrictions [");
        for (int i=0; i < obj.restrictions.length; i++) {
          if (i > 0) {
            b.append(", ");
          }
          b.append(obj.getRestrictionId(i)).append(" (").append(obj.getRestrictionType(i)).append(") ");
        }
        b.append("] ");
      }
      if (vInfo.vmapCoordinates) {
        b.append(" lat/lon : ");
        for (int i=0; i < obj.getPointsLength(); i++) {
          float x=(float)MapUtils.get31LongitudeX(obj.getPoint31XTile(i));
          float y=(float)MapUtils.get31LatitudeY(obj.getPoint31YTile(i));
          b.append(y).append(" / ").append(x).append(" , ");
        }
      }
      println(b.toString());
      return false;
    }
    @Override public boolean isCancelled(){
      return false;
    }
  }
);
  println("\tTotal map objects: " + mapObjectsCounter.value);
  if (vInfo.osm) {
    printToFile("</osm >\n");
  }
}
