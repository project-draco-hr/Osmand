{
  List<String> warnings=new ArrayList<String>();
  try {
    try {
      SpecialPhrases.setLanguage(this,osmandSettings);
    }
 catch (    IOException e) {
      LOG.error("I/O exception",e);
      warnings.add("Error while reading the special phrases. Restart OsmAnd if possible");
    }
    if (!Version.isBlackberry(this)) {
      if (osmandSettings.NATIVE_RENDERING_FAILED.get()) {
        osmandSettings.SAFE_MODE.set(true);
        osmandSettings.NATIVE_RENDERING_FAILED.set(false);
        warnings.add(getString(R.string.native_library_not_supported));
      }
 else {
        osmandSettings.SAFE_MODE.set(false);
        osmandSettings.NATIVE_RENDERING_FAILED.set(true);
        startDialog.startTask(getString(R.string.init_native_library),-1);
        RenderingRulesStorage storage=rendererRegistry.getCurrentSelectedRenderer();
        boolean initialized=NativeOsmandLibrary.getLibrary(storage,this) != null;
        osmandSettings.NATIVE_RENDERING_FAILED.set(false);
        if (!initialized) {
          LOG.info("Native library could not be loaded!");
        }
      }
    }
    warnings.addAll(resourceManager.reloadIndexes(startDialog));
    player=null;
    if (savingTrackHelper.hasDataToSave()) {
      startDialog.startTask(getString(R.string.saving_gpx_tracks),-1);
      try {
        warnings.addAll(savingTrackHelper.saveDataToGpx());
      }
 catch (      RuntimeException e) {
        warnings.add(e.getMessage());
      }
    }
    final File appDir=getAppPath(null);
    File save=new File(appDir,FavouritesDbHelper.FILE_TO_SAVE);
    File bak=new File(appDir,FavouritesDbHelper.FILE_TO_BACKUP);
    if (bak.exists() && (!save.exists() || bak.lastModified() > save.lastModified())) {
      if (save.exists()) {
        save.delete();
      }
      bak.renameTo(save);
    }
  }
 catch (  RuntimeException e) {
    e.printStackTrace();
    warnings.add(e.getMessage());
  }
 finally {
synchronized (OsmandApplication.this) {
      final ProgressDialog toDismiss;
      final Runnable pb;
      if (startDialog != null) {
        toDismiss=startDialog.getDialog();
        pb=startDialog.getFinishRunnable();
      }
 else {
        toDismiss=null;
        pb=null;
      }
      startDialog=null;
      if (toDismiss != null || pb != null) {
        uiHandler.post(new Runnable(){
          @Override public void run(){
            if (pb != null) {
            }
            if (toDismiss != null) {
              toDismiss.dismiss();
            }
          }
        }
);
      }
      if (warnings != null && !warnings.isEmpty()) {
        showToastMessage(formatWarnings(warnings).toString());
      }
    }
  }
}
