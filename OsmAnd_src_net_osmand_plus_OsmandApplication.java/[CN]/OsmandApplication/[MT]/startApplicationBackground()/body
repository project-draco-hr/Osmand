{
  List<String> warnings=new ArrayList<String>();
  try {
    favorites.loadFavorites();
    try {
      SpecialPhrases.setLanguage(this,osmandSettings);
    }
 catch (    IOException e) {
      LOG.error("I/O exception",e);
      warnings.add("Error while reading the special phrases. Restart OsmAnd if possible");
    }
    if (!"qnx".equals(System.getProperty("os.name"))) {
      if (osmandSettings.USE_OPENGL_RENDER.get()) {
        boolean success=false;
        if (!osmandSettings.OPENGL_RENDER_FAILED.get()) {
          osmandSettings.OPENGL_RENDER_FAILED.set(true);
          success=NativeCoreContext.tryCatchInit(this);
          if (success) {
            osmandSettings.OPENGL_RENDER_FAILED.set(false);
          }
        }
        if (!success) {
          osmandSettings.OPENGL_RENDER_FAILED.set(false);
          warnings.add("Native OpenGL library is not supported. Please try again after exit");
        }
      }
      if (osmandSettings.NATIVE_RENDERING_FAILED.get()) {
        osmandSettings.SAFE_MODE.set(true);
        osmandSettings.NATIVE_RENDERING_FAILED.set(false);
        warnings.add(getString(R.string.native_library_not_supported));
      }
 else {
        osmandSettings.SAFE_MODE.set(false);
        osmandSettings.NATIVE_RENDERING_FAILED.set(true);
        startDialog.startTask(getString(R.string.init_native_library),-1);
        RenderingRulesStorage storage=rendererRegistry.getCurrentSelectedRenderer();
        boolean initialized=NativeOsmandLibrary.getLibrary(storage,this) != null;
        osmandSettings.NATIVE_RENDERING_FAILED.set(false);
        if (!initialized) {
          LOG.info("Native library could not be loaded!");
        }
      }
    }
    warnings.addAll(resourceManager.reloadIndexes(startDialog));
    player=null;
    if (savingTrackHelper.hasDataToSave()) {
      long timeUpdated=savingTrackHelper.getLastTrackPointTime();
      if (System.currentTimeMillis() - timeUpdated >= 45000) {
        startDialog.startTask(getString(R.string.saving_gpx_tracks),-1);
        try {
          warnings.addAll(savingTrackHelper.saveDataToGpx(appCustomization.getTracksDir()));
        }
 catch (        RuntimeException e) {
          warnings.add(e.getMessage());
        }
      }
    }
    if (getSettings().SAVE_GLOBAL_TRACK_TO_GPX.get()) {
      startNavigationService(NavigationService.USED_BY_GPX);
    }
    final File appDir=getAppPath(null);
    File save=new File(appDir,FavouritesDbHelper.FILE_TO_SAVE);
    File bak=new File(appDir,FavouritesDbHelper.FILE_TO_BACKUP);
    if (bak.exists() && (!save.exists() || bak.lastModified() > save.lastModified())) {
      if (save.exists()) {
        save.delete();
      }
      bak.renameTo(save);
    }
  }
 catch (  RuntimeException e) {
    e.printStackTrace();
    warnings.add(e.getMessage());
  }
 finally {
synchronized (OsmandApplication.this) {
      final ProgressDialog toDismiss;
      final Runnable pb;
      if (startDialog != null) {
        toDismiss=startDialog.getDialog();
        pb=startDialog.getFinishRunnable();
      }
 else {
        toDismiss=null;
        pb=null;
      }
      startDialog=null;
      if (toDismiss != null || pb != null) {
        uiHandler.post(new Runnable(){
          @Override public void run(){
            if (pb != null) {
              pb.run();
            }
            if (toDismiss != null) {
              toDismiss.dismiss();
            }
          }
        }
);
      }
      if (warnings != null && !warnings.isEmpty()) {
        showToastMessage(formatWarnings(warnings).toString());
      }
    }
  }
}
