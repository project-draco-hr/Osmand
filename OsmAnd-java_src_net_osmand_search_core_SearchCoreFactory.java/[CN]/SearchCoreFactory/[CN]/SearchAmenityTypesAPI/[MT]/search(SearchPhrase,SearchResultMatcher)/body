{
  if (translatedNames.isEmpty()) {
    translatedNames=types.getAllTranslatedNames(false);
    topVisibleFilters=types.getTopVisibleFilters();
    categories=types.getCategories(false);
  }
  TreeMap<String,AbstractPoiType> results=new TreeMap<String,AbstractPoiType>();
  NameStringMatcher nm=phrase.getNameStringMatcher();
  for (  PoiFilter pf : topVisibleFilters) {
    if (!phrase.isUnknownSearchWordPresent() || nm.matches(pf.getTranslation())) {
      results.put(pf.getTranslation(),pf);
    }
  }
  if (phrase.isUnknownSearchWordPresent()) {
    for (    PoiCategory c : categories) {
      if (!phrase.isUnknownSearchWordPresent() || nm.matches(c.getTranslation())) {
        results.put(c.getTranslation(),c);
      }
    }
    Iterator<Entry<String,PoiType>> it=translatedNames.entrySet().iterator();
    while (it.hasNext()) {
      Entry<String,PoiType> e=it.next();
      if (nm.matches(e.getKey()) || nm.matches(e.getValue().getTranslation())) {
        results.put(e.getValue().getTranslation(),e.getValue());
      }
    }
  }
  Iterator<Entry<String,AbstractPoiType>> it=results.entrySet().iterator();
  while (it.hasNext()) {
    Entry<String,AbstractPoiType> p=it.next();
    SearchResult res=new SearchResult(phrase);
    res.localeName=p.getKey();
    res.object=p.getValue();
    res.priority=SEARCH_AMENITY_TYPE_PRIORITY;
    res.priorityDistance=0;
    res.objectType=ObjectType.POI_TYPE;
    resultMatcher.publish(res);
  }
  for (int i=0; i < customPoiFilters.size(); i++) {
    CustomSearchPoiFilter csf=customPoiFilters.get(i);
    int p=customPoiFiltersPriorites.get(i);
    if (!phrase.isUnknownSearchWordPresent() || nm.matches(csf.getName())) {
      SearchResult res=new SearchResult(phrase);
      res.localeName=csf.getName();
      res.object=csf;
      res.priority=SEARCH_AMENITY_TYPE_PRIORITY + p;
      res.objectType=ObjectType.POI_TYPE;
      resultMatcher.publish(res);
    }
  }
  return true;
}
