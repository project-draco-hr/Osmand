{
  Street s=null;
  int priority=SEARCH_BUILDING_BY_STREET_PRIORITY;
  if (phrase.isLastWord(ObjectType.STREET)) {
    s=(Street)phrase.getLastSelectedWord().getResult().object;
  }
  if (isLastWordCityGroup(phrase)) {
    priority=SEARCH_BUILDING_BY_CITY_PRIORITY;
    Object o=phrase.getLastSelectedWord().getResult().object;
    if (o instanceof City) {
      List<Street> streets=((City)o).getStreets();
      if (streets.size() == 1) {
        s=streets.get(0);
      }
 else {
        for (        Street st : streets) {
          if (st.getName().equals(((City)o).getName()) || st.getName().equals("<" + ((City)o).getName() + ">")) {
            s=st;
            break;
          }
        }
      }
    }
  }
  if (s != null) {
    BinaryMapIndexReader file=phrase.getLastSelectedWord().getResult().file;
    String lw=phrase.getUnknownSearchWord();
    NameStringMatcher sm=phrase.getNameStringMatcher();
    if (cacheBuilding != s) {
      cacheBuilding=s;
      SearchRequest<Building> sr=BinaryMapIndexReader.buildAddressRequest(new ResultMatcher<Building>(){
        @Override public boolean publish(        Building object){
          return true;
        }
        @Override public boolean isCancelled(){
          return resultMatcher.isCancelled();
        }
      }
);
      file.preloadBuildings(s,sr);
      Collections.sort(s.getBuildings(),new Comparator<Building>(){
        @Override public int compare(        Building o1,        Building o2){
          int i1=Algorithms.extractFirstIntegerNumber(o1.getName());
          int i2=Algorithms.extractFirstIntegerNumber(o2.getName());
          if (i1 == i2) {
            return 0;
          }
          return Algorithms.compare(i1,i2);
        }
      }
);
    }
    for (    Building b : s.getBuildings()) {
      SearchResult res=new SearchResult(phrase);
      boolean interpolation=b.belongsToInterpolation(lw);
      if (!sm.matches(b.getName()) && !interpolation) {
        continue;
      }
      res.localeName=b.getName(phrase.getSettings().getLang(),phrase.getSettings().isTransliterate());
      res.otherNames=b.getAllNames(true);
      res.object=b;
      res.file=file;
      res.priority=priority;
      res.priorityDistance=0;
      res.relatedObject=s;
      res.localeRelatedObjectName=s.getName(phrase.getSettings().getLang(),phrase.getSettings().isTransliterate());
      res.objectType=ObjectType.HOUSE;
      if (interpolation) {
        res.location=b.getLocation(b.interpolation(lw));
      }
 else {
        res.location=b.getLocation();
      }
      res.preferredZoom=17;
      resultMatcher.publish(res);
    }
    if (!Algorithms.isEmpty(lw) && !Character.isDigit(lw.charAt(0))) {
      for (      Street street : s.getIntersectedStreets()) {
        SearchResult res=new SearchResult(phrase);
        if (!sm.matches(street.getName()) && !sm.matches(street.getAllNames(true))) {
          continue;
        }
        res.otherNames=street.getAllNames(true);
        res.localeName=street.getName(phrase.getSettings().getLang(),phrase.getSettings().isTransliterate());
        res.object=street;
        res.file=file;
        res.relatedObject=s;
        res.localeRelatedObjectName=s.getName(phrase.getSettings().getLang(),phrase.getSettings().isTransliterate());
        res.priorityDistance=0;
        res.objectType=ObjectType.STREET_INTERSECTION;
        res.location=street.getLocation();
        res.preferredZoom=16;
        resultMatcher.publish(res);
      }
    }
  }
  return true;
}
