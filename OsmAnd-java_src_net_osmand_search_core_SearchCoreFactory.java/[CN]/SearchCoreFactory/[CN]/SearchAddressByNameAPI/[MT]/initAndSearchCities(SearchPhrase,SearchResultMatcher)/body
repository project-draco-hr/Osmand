{
  QuadRect bbox=phrase.getRadiusBBoxToSearch(DEFAULT_ADDRESS_BBOX_RADIUS * 10);
  Iterator<BinaryMapIndexReader> offlineIndexes=phrase.getOfflineIndexes(bbox,SearchPhraseDataType.ADDRESS);
  while (offlineIndexes.hasNext()) {
    BinaryMapIndexReader r=offlineIndexes.next();
    if (!townCities.containsKey(r)) {
      BinaryMapIndexReader.buildAddressRequest(null);
      List<City> l=r.getCities(null,BinaryMapAddressReaderAdapter.CITY_TOWN_TYPE);
      townCities.put(r,l);
      for (      City c : l) {
        LatLon cl=c.getLocation();
        c.setReferenceFile(r);
        int y=MapUtils.get31TileNumberY(cl.getLatitude());
        int x=MapUtils.get31TileNumberX(cl.getLongitude());
        QuadRect qr=new QuadRect(x,y,x,y);
        townCitiesQR.insert(c,qr);
      }
    }
  }
  if (phrase.isNoSelectedType() && bbox != null && phrase.isUnknownSearchWordPresent()) {
    NameStringMatcher nm=phrase.getNameStringMatcher();
    resArray.clear();
    resArray=townCitiesQR.queryInBox(bbox,resArray);
    int limit=0;
    for (    City c : resArray) {
      SearchResult res=new SearchResult(phrase);
      res.object=c;
      res.file=(BinaryMapIndexReader)c.getReferenceFile();
      res.localeName=c.getName(phrase.getSettings().getLang(),phrase.getSettings().isTransliterate());
      res.otherNames=c.getAllNames(true);
      res.localeRelatedObjectName=res.file.getRegionName();
      res.relatedObject=res.file;
      res.location=c.getLocation();
      res.priority=1;
      res.priorityDistance=0.1;
      res.objectType=ObjectType.CITY;
      if (nm.matches(res.localeName) || nm.matches(res.otherNames)) {
        subSearchApiOrPublish(phrase,resultMatcher,res,cityApi);
      }
      if (limit++ > LIMIT * phrase.getRadiusLevel()) {
        break;
      }
    }
  }
}
