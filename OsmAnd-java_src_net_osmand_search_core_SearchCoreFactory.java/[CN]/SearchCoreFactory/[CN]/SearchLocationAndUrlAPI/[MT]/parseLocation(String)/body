{
  s=s.trim();
  if (s.length() == 0 || !(s.charAt(0) == '-' || Character.isDigit(s.charAt(0)) || s.charAt(0) == 'S' || s.charAt(0) == 's' || s.charAt(0) == 'N' || s.charAt(0) == 'n' || s.contains("://"))) {
    return null;
  }
  List<Double> d=new ArrayList<>();
  List<Object> all=new ArrayList<>();
  List<String> strings=new ArrayList<>();
  splitObjects(s,d,all,strings);
  if (d.size() == 0) {
    return null;
  }
  if (all.size() == 4 && d.size() == 3 && all.get(1) instanceof String) {
    char ch=all.get(1).toString().charAt(0);
    if (Character.isLetter(ch)) {
      UTMPoint upoint=new UTMPoint(d.get(2),d.get(1),d.get(0).intValue(),ch);
      LatLonPoint ll=upoint.toLatLonPoint();
      return new LatLon(ll.getLatitude(),ll.getLongitude());
    }
  }
  if (all.size() == 3 && d.size() == 2 && all.get(1) instanceof String) {
    char ch=all.get(1).toString().charAt(0);
    String combined=strings.get(2);
    if (Character.isLetter(ch)) {
      try {
        String east=combined.substring(0,combined.length() / 2);
        String north=combined.substring(combined.length() / 2,combined.length());
        UTMPoint upoint=new UTMPoint(Double.parseDouble(north),Double.parseDouble(east),d.get(0).intValue(),ch);
        LatLonPoint ll=upoint.toLatLonPoint();
        return new LatLon(ll.getLatitude(),ll.getLongitude());
      }
 catch (      NumberFormatException e) {
      }
    }
  }
  int jointNumbers=0;
  int lastJoin=0;
  int degSplit=-1;
  int degType=-1;
  int northSplit=-1;
  int eastSplit=-1;
  for (int i=1; i < all.size(); i++) {
    if (all.get(i - 1) instanceof Double && all.get(i) instanceof Double) {
      jointNumbers++;
      lastJoin=i;
    }
    if (all.get(i).equals("n") || all.get(i).equals("s") || all.get(i).equals("N")|| all.get(i).equals("S")) {
      northSplit=i + 1;
    }
    if (all.get(i).equals("e") || all.get(i).equals("w") || all.get(i).equals("E")|| all.get(i).equals("W")) {
      eastSplit=i;
    }
    int dg=-1;
    if (all.get(i).equals("??")) {
      dg=0;
    }
 else     if (all.get(i).equals("\'") || all.get(i).equals("???")) {
      dg=1;
    }
 else     if (all.get(i).equals("???") || all.get(i).equals("\"")) {
      dg=2;
    }
    if (dg != -1 && degType != -2) {
      if (degType < dg) {
        degSplit=i + 1;
      }
 else {
        degType=-2;
      }
    }
  }
  int split=-1;
  if (jointNumbers == 1) {
    split=lastJoin;
  }
  if (northSplit != -1 && northSplit < all.size() - 1) {
    split=northSplit;
  }
  if (eastSplit != -1 && eastSplit < all.size() - 1) {
    split=eastSplit;
  }
  if (degSplit != -1 && degSplit < all.size() - 1) {
    split=degSplit;
  }
  if (split != -1) {
    double lat=parse1Coordinate(all,0,split);
    double lon=parse1Coordinate(all,split,all.size());
    return new LatLon(lat,lon);
  }
  if (d.size() == 2) {
    return new LatLon(d.get(0),d.get(1));
  }
  if (s.contains("://")) {
    double lat=0;
    double lon=0;
    boolean only2decimals=true;
    for (int i=0; i < d.size(); i++) {
      if (d.get(i).doubleValue() != d.get(i).intValue()) {
        if (lat == 0) {
          lat=d.get(i);
        }
 else         if (lon == 0) {
          lon=d.get(i);
        }
 else {
          only2decimals=false;
        }
      }
    }
    if (lat != 0 && lon != 0 && only2decimals) {
      return new LatLon(lat,lon);
    }
  }
  if (d.size() > 2 && d.size() % 2 == 0) {
    int ind=d.size() / 2 + 1;
    int splitEq=-1;
    for (int i=0; i < all.size(); i++) {
      if (all.get(i) instanceof Double) {
        ind--;
      }
      if (ind == 0) {
        splitEq=i;
        break;
      }
    }
    if (splitEq != -1) {
      double lat=parse1Coordinate(all,0,splitEq);
      double lon=parse1Coordinate(all,splitEq,all.size());
      return new LatLon(lat,lon);
    }
  }
  return null;
}
