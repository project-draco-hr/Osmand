{
  final boolean[] hasSuperFinalize=new boolean[1];
  method.accept(new ASTVisitor(){
    @Override public void endVisit(    SuperMethodInvocation node){
      if (FINALIZE_METHOD.equals(node.getName().getIdentifier())) {
        hasSuperFinalize[0]=true;
      }
    }
  }
);
  List<Statement> statements=method.getBody().statements();
  if (!statements.isEmpty() && statements.get(0) instanceof TryStatement) {
    TryStatement tryStatement=((TryStatement)statements.get(0));
    if (tryStatement.getBody() != null) {
      statements=tryStatement.getBody().statements();
    }
  }
  AST ast=method.getAST();
  int index=statements.size();
  for (  IVariableBinding field : fields) {
    if (!field.getType().isPrimitive() && !Types.isWeakReference(field)) {
      Assignment assign=ast.newAssignment();
      SimpleName receiver=ast.newSimpleName(field.getName());
      Types.addBinding(receiver,field);
      assign.setLeftHandSide(receiver);
      assign.setRightHandSide(Types.newNullLiteral());
      Types.addBinding(assign,field.getDeclaringClass());
      ExpressionStatement stmt=ast.newExpressionStatement(assign);
      statements.add(index,stmt);
    }
  }
  if (Options.useReferenceCounting() && !hasSuperFinalize[0]) {
    SuperMethodInvocation call=ast.newSuperMethodInvocation();
    IMethodBinding methodBinding=Types.getMethodBinding(method);
    GeneratedMethodBinding binding=new GeneratedMethodBinding(destructorName,Modifier.PUBLIC,Types.mapTypeName("void"),methodBinding.getDeclaringClass(),false,false,true);
    Types.addBinding(call,binding);
    call.setName(ast.newSimpleName(destructorName));
    Types.addBinding(call.getName(),binding);
    ExpressionStatement stmt=ast.newExpressionStatement(call);
    statements.add(stmt);
  }
}
