{
  if (registeredRoutes.isEmpty()) {
    return Collections.emptyList();
  }
  long now=System.currentTimeMillis();
  StringBuilder sql=new StringBuilder(200);
  sql.append("SELECT ");
  String[] cols=IndexConstants.generateColumnNames(IndexTransportStop.values());
  for (int i=0; i < cols.length; i++) {
    if (i > 0) {
      sql.append(", ");
    }
    sql.append(IndexTransportStop.getTable()).append(".").append(cols[i]);
  }
  sql.append(", ").append(IndexTransportRouteStop.getTable()).append(".").append(IndexTransportRouteStop.ROUTE);
  sql.append(", ").append(IndexTransportRouteStop.getTable()).append(".").append(IndexTransportRouteStop.DIRECTION);
  sql.append(" FROM ").append(IndexTransportStop.getTable());
  sql.append(" JOIN ").append(IndexTransportRouteStop.getTable());
  sql.append(" ON ").append(IndexTransportStop.getTable()).append(".").append(IndexTransportStop.ID);
  sql.append(" = ").append(IndexTransportRouteStop.getTable()).append(".").append(IndexTransportRouteStop.STOP);
  sql.append(" WHERE ");
  boolean f=true;
  for (  RouteInfoLocation il : registeredRoutes.values()) {
    if (f) {
      f=false;
    }
 else {
      sql.append(" OR ");
    }
    sql.append("(");
    sql.append(IndexTransportRouteStop.getTable()).append(".").append(IndexTransportRouteStop.ROUTE);
    sql.append(" = ").append(il.getRoute().getId());
    sql.append(" AND ").append(IndexTransportRouteStop.getTable()).append(".").append(IndexTransportRouteStop.DIRECTION);
    sql.append(" = ").append(il.getDirection() ? 1 : 0);
    sql.append(")");
  }
  sql.append(" ORDER BY ").append(IndexTransportRouteStop.getTable()).append(".").append(IndexTransportRouteStop.ORD).append(" ASC");
  int qShift=IndexTransportStop.values().length;
  Map<Long,TransportStop> distanceToLoc=new LinkedHashMap<Long,TransportStop>();
  Cursor query=db.rawQuery(sql.toString(),new String[]{});
  if (query.moveToFirst()) {
    do {
      TransportStop st=null;
      long routeId=query.getLong(qShift);
      int direction=query.getInt(qShift + 1);
      long id=routeId << 1 + direction;
      boolean found=distanceToLoc.containsKey(id);
      RouteInfoLocation i=registeredRoutes.get(id);
      if (found) {
        st=new TransportStop();
        st.setId(query.getLong(IndexTransportStop.ID.ordinal()));
        st.setLocation(query.getDouble(IndexTransportStop.LATITUDE.ordinal()),query.getDouble(IndexTransportStop.LONGITUDE.ordinal()));
        st.setName(query.getString(IndexTransportStop.NAME.ordinal()));
        st.setEnName(query.getString(IndexTransportStop.NAME_EN.ordinal()));
      }
 else       if (query.getLong(IndexTransportStop.ID.ordinal()) == i.getStart().getId()) {
        st=i.getStart();
        found=true;
        distanceToLoc.put(id,st);
      }
      if (found) {
        if (locationToGo != null) {
          double d=MapUtils.getDistance(locationToGo,st.getLocation());
          double dbase=MapUtils.getDistance(locationToGo,distanceToLoc.get(id).getLocation());
          if (d < dbase) {
            distanceToLoc.put(id,st);
          }
        }
        if (i.getDirection()) {
          i.getRoute().getForwardStops().add(st);
        }
 else {
          i.getRoute().getBackwardStops().add(st);
        }
      }
    }
 while (query.moveToNext());
    query.close();
  }
  if (locationToGo != null) {
    for (    Long l : registeredRoutes.keySet()) {
      Integer dist=(int)MapUtils.getDistance(locationToGo,distanceToLoc.get(l).getLocation());
      if (dist != null) {
        registeredRoutes.get(l).setDistToLocation(dist);
      }
      registeredRoutes.get(l).setStop(distanceToLoc.get(l));
    }
  }
  ArrayList<RouteInfoLocation> listRoutes=new ArrayList<RouteInfoLocation>(registeredRoutes.values());
  if (log.isDebugEnabled()) {
    log.debug(String.format("Loading routes done in %s ms for %s routes.",System.currentTimeMillis() - now,listRoutes.size()));
  }
  if (locationToGo != null) {
    Collections.sort(listRoutes,new Comparator<RouteInfoLocation>(){
      @Override public int compare(      RouteInfoLocation object1,      RouteInfoLocation object2){
        int x=(int)(MapUtils.getDistance(loc,object1.getStart().getLocation()) + object1.getDistToLocation());
        int y=(int)(MapUtils.getDistance(loc,object2.getStart().getLocation()) + object2.getDistToLocation());
        return x - y;
      }
    }
);
  }
 else {
    Collections.sort(listRoutes,new Comparator<RouteInfoLocation>(){
      @Override public int compare(      RouteInfoLocation object1,      RouteInfoLocation object2){
        return Double.compare(MapUtils.getDistance(loc,object1.getStart().getLocation()),MapUtils.getDistance(loc,object2.getStart().getLocation()));
      }
    }
);
  }
  return listRoutes;
}
