{
  routingHelper=activity.getRoutingHelper();
  routingHelper.addListener(this);
  data=new OsmandMapLayer.MapLayerData<List<Amenity>>(){
{
      ZOOM_THRESHOLD=0;
    }
    @Override public boolean isInterrupted(){
      return super.isInterrupted();
    }
    @Override public void layerOnPostExecute(){
      activity.getMapView().refreshMap();
    }
    @Override protected List<Amenity> calculateResult(    RotatedTileBox tileBox){
      QuadRect latLonBounds=tileBox.getLatLonBounds();
      if (path) {
        RouteCalculationResult result=routingHelper.getRoute();
        return resourceManager.searchAmenitiesOnThePath(result.getImmutableAllLocations(),radius,filter,null);
      }
 else {
        return resourceManager.searchAmenities(filter,latLonBounds.top,latLonBounds.left,latLonBounds.bottom,latLonBounds.right,tileBox.getZoom(),new ResultMatcher<Amenity>(){
          @Override public boolean publish(          Amenity object){
            return true;
          }
          @Override public boolean isCancelled(){
            return isInterrupted();
          }
        }
);
      }
    }
  }
;
}
