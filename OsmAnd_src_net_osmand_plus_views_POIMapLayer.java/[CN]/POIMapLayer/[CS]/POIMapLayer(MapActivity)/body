{
  routingHelper=activity.getRoutingHelper();
  routingHelper.addListener(this);
  app=activity.getMyApplication();
  data=new OsmandMapLayer.MapLayerData<List<Amenity>>(){
{
      ZOOM_THRESHOLD=0;
    }
    @Override public boolean isInterrupted(){
      return super.isInterrupted();
    }
    @Override public void layerOnPostExecute(){
      activity.getMapView().refreshMap();
    }
    @Override protected List<Amenity> calculateResult(    RotatedTileBox tileBox){
      QuadRect latLonBounds=tileBox.getLatLonBounds();
      if (filters.isEmpty() || latLonBounds == null) {
        return new ArrayList<>();
      }
      int z=(int)Math.floor(tileBox.getZoom() + Math.log(view.getSettings().MAP_DENSITY.get()) / Math.log(2));
      List<Amenity> res=new ArrayList<>();
      PoiUIFilter.combineStandardPoiFilters(filters,app);
      for (      PoiUIFilter filter : filters) {
        res.addAll(filter.searchAmenities(latLonBounds.top,latLonBounds.left,latLonBounds.bottom,latLonBounds.right,z,new ResultMatcher<Amenity>(){
          @Override public boolean publish(          Amenity object){
            return true;
          }
          @Override public boolean isCancelled(){
            return isInterrupted();
          }
        }
));
      }
      Collections.sort(res,new Comparator<Amenity>(){
        @Override public int compare(        Amenity lhs,        Amenity rhs){
          return lhs.getId() < rhs.getId() ? -1 : (lhs.getId().longValue() == rhs.getId().longValue() ? 0 : 1);
        }
      }
);
      return res;
    }
  }
;
}
