{
  amenitiesList.clear();
  boolean relation=entity instanceof Relation;
  Collection<Map<String,String>> it=renderingTypes.splitTagsIntoDifferentObjects(tags);
  for (  Map<String,String> stags : it) {
    if (!stags.isEmpty()) {
      boolean purerelation=relation && !"multipolygon".equals(stags.get("type"));
      boolean hasName=!Algorithms.isEmpty(stags.get("name"));
      for (      Map.Entry<String,String> e : stags.entrySet()) {
        AmenityType type=purerelation ? renderingTypes.getAmenityTypeForRelation(e.getKey(),e.getValue(),hasName) : renderingTypes.getAmenityType(e.getKey(),e.getValue(),hasName);
        if (type != null) {
          String subtype=renderingTypes.getAmenitySubtype(e.getKey(),e.getValue());
          PoiCategory pc=poiTypes.getPoiCategoryByName(type.getCategoryName(),true);
          Amenity a=parseAmenity(entity,stags,pc,subtype,renderingTypes);
          if (checkAmenitiesToAdd(a,amenitiesList) && !"no".equals(subtype)) {
            amenitiesList.add(a);
          }
        }
      }
    }
  }
  return amenitiesList;
}
