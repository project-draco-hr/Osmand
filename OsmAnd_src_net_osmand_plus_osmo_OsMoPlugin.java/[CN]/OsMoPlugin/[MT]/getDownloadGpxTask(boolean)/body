{
  return new AsyncTask<JSONObject,String,String>(){
    @Override protected String doInBackground(    JSONObject... params){
      final File fl=app.getAppPath(IndexConstants.GPX_INDEX_DIR + "/osmo");
      if (!fl.exists()) {
        fl.mkdirs();
      }
      String errors="";
      for (      JSONObject obj : params) {
        try {
          File f=new File(fl,obj.getString("name") + ".gpx");
          long timestamp=obj.getLong("created") * 1000;
          int color=0;
          if (obj.has("color")) {
            try {
              color=Algorithms.parseColor(obj.getString("color"));
            }
 catch (            RuntimeException e) {
              LOG.warn("",e);
            }
          }
          boolean visible=obj.has("visible");
          boolean changed=false;
          if (!f.exists() || (f.lastModified() != timestamp)) {
            long len=!f.exists() ? -1 : f.length();
            boolean sizeEqual=obj.has("size") && obj.getLong("size") == len;
            boolean modifySupported=f.setLastModified(timestamp - 1);
            if (!sizeEqual || modifySupported) {
              changed=true;
              String url=obj.getString("url");
              LOG.info("Download gpx " + url);
              DownloadFileHelper df=new DownloadFileHelper(app);
              InputStream is=df.getInputStreamToDownload(new URL(url),false);
              int av=is.available();
              if (av > 0 && !modifySupported && len == av) {
                is.close();
              }
 else {
                redownloadFile(f,timestamp,color,is);
                publishProgress(app.getString(R.string.osmo_gpx_track_downloaded,obj.getString("name")));
              }
            }
          }
          if (visible && (changed || makeVisible)) {
            GPXFile selectGPXFile=GPXUtilities.loadGPXFile(app,f);
            if (color != 0) {
              selectGPXFile.setColor(color);
            }
            app.getSelectedGpxHelper().setGpxFileToDisplay(selectGPXFile);
          }
        }
 catch (        JSONException|IOException e) {
          e.printStackTrace();
          errors+=e.getMessage() + "\n";
        }
      }
      return errors;
    }
    private void redownloadFile(    File f,    long timestamp,    int color,    InputStream is) throws IOException {
      FileOutputStream fout=new FileOutputStream(f);
      byte[] buf=new byte[1024];
      int k;
      while ((k=is.read(buf)) >= 0) {
        fout.write(buf,0,k);
      }
      fout.close();
      is.close();
      if (!f.setLastModified(timestamp)) {
        LOG.error("Timestamp updates are not supported");
      }
    }
    protected void onProgressUpdate(    String... values){
      if (values != null) {
        String t="";
        for (        String s : values) {
          t+=s + "\n";
        }
        app.showToastMessage(t.trim());
        refreshMap();
      }
    }
    @Override protected void onPostExecute(    String result){
      if (result.length() > 0) {
        app.showToastMessage(app.getString(R.string.osmo_io_error) + result);
      }
    }
  }
;
}
