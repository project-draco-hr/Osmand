{
  if (request != null && request.fileToSave != null && request.url != null) {
    if (currentlyDownloaded.contains(request.fileToSave)) {
      return;
    }
    currentlyDownloaded.add(request.fileToSave);
    pendingToDownload.remove(request.fileToSave);
    if (log.isDebugEnabled()) {
      log.debug("Start downloading tile : " + request.url);
    }
    long time=System.currentTimeMillis();
    try {
      request.fileToSave.getParentFile().mkdirs();
      URL url=new URL(request.url);
      URLConnection connection=url.openConnection();
      connection.setRequestProperty("User-Agent",USER_AGENT);
      connection.setConnectTimeout(CONNECTION_TIMEOUT);
      connection.setReadTimeout(CONNECTION_TIMEOUT);
      BufferedInputStream inputStream=new BufferedInputStream(connection.getInputStream(),8 * 1024);
      FileOutputStream stream=null;
      try {
        stream=new FileOutputStream(request.fileToSave);
        Algorithms.streamCopy(inputStream,stream);
        stream.flush();
      }
  finally {
        Algorithms.closeStream(inputStream);
        Algorithms.closeStream(stream);
      }
      if (log.isDebugEnabled()) {
        log.debug("Downloading tile : " + request.url + " successfull "+ (System.currentTimeMillis() - time)+ " ms");
      }
    }
 catch (    UnknownHostException e) {
      currentErrors++;
      timeForErrorCounter=System.currentTimeMillis();
      request.setError(true);
      log.error("UnknownHostException, cannot download tile " + request.url + " "+ e.getMessage());
    }
catch (    IOException e) {
      currentErrors++;
      timeForErrorCounter=System.currentTimeMillis();
      request.setError(true);
      log.warn("Cannot download tile : " + request.url,e);
    }
 finally {
      currentlyDownloaded.remove(request.fileToSave);
    }
    if (!request.error) {
      for (      IMapDownloaderCallback c : new ArrayList<IMapDownloaderCallback>(callbacks)) {
        c.tileDownloaded(request);
      }
    }
  }
}
