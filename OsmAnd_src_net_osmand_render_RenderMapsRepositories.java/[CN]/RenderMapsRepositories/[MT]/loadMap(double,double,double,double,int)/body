{
  cBottomLatitude=bottomLatitude - (topLatitude - bottomLatitude) / 2;
  cTopLatitude=topLatitude + (topLatitude - bottomLatitude) / 2;
  cLeftLongitude=leftLongitude - (rightLongitude - leftLongitude);
  cRightLongitude=rightLongitude + (rightLongitude - leftLongitude);
  cZoom=zoom;
  log.info(String.format("BLat=%s, TLat=%s, LLong=%s, RLong=%s, zoom=%s",cBottomLatitude,cTopLatitude,cLeftLongitude,cRightLongitude,cZoom));
  long now=System.currentTimeMillis();
  if (pStatement == null) {
    return;
  }
  try {
    pStatement.setDouble(1,cBottomLatitude);
    pStatement.setDouble(2,cTopLatitude);
    pStatement.setDouble(3,cLeftLongitude);
    pStatement.setDouble(4,cRightLongitude);
    ResultSet result=pStatement.executeQuery();
    List<MapRenderObject> local=new LinkedList<MapRenderObject>();
    try {
      int count=0;
      while (result.next()) {
        long id=result.getLong(1);
        MapRenderObject obj=new MapRenderObject(id);
        obj.setData(result.getBytes(2));
        obj.setName(result.getString(3));
        obj.setType(result.getInt(4));
        count++;
        local.add(obj);
      }
      cObjects=local;
      log.info(String.format("Search has been done in %s ms. %s results were found.",System.currentTimeMillis() - now,count));
    }
  finally {
      result.close();
    }
  }
 catch (  java.sql.SQLException e) {
    log.debug("Search failed",e);
  }
  RectF newLoc=new RectF((float)cLeftLongitude,(float)cTopLatitude,(float)cRightLongitude,(float)cBottomLatitude);
  Bitmap bmp=renderer.generateNewBitmap(newLoc,cObjects,cZoom,0);
  Bitmap oldBmp=this.bmp;
  this.bmp=bmp;
  cachedWaysLoc=newLoc;
  if (oldBmp != null) {
    oldBmp.recycle();
  }
}
