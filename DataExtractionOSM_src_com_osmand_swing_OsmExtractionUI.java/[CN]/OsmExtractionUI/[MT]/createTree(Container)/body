{
  treePlaces=new JTree();
  treePlaces.setModel(new DefaultTreeModel(new DefaultMutableTreeNode("Region"),false));
  treePlaces.setEditable(true);
  treePlaces.setCellEditor(new RegionCellEditor(treePlaces,(DefaultTreeCellRenderer)treePlaces.getCellRenderer()));
  treePlaces.addTreeSelectionListener(new TreeSelectionListener(){
    @Override public void valueChanged(    TreeSelectionEvent e){
      if (e.getPath() != null) {
        if (e.getPath().getLastPathComponent() instanceof DataExtractionTreeNode) {
          Object o=((DataExtractionTreeNode)e.getPath().getLastPathComponent()).getModelObject();
          if (o instanceof MapObject) {
            MapObject c=(MapObject)o;
            LatLon location=c.getLocation();
            if (location != null) {
              if (o instanceof Street) {
                DataTileManager<Way> ways=new DataTileManager<Way>();
                for (                Way w : ((Street)o).getWayNodes()) {
                  LatLon l=w.getLatLon();
                  ways.registerObject(l.getLatitude(),l.getLongitude(),w);
                }
                mapPanel.setPoints(ways);
                mapPanel.requestFocus();
              }
              mapPanel.setLatLon(location.getLatitude(),location.getLongitude());
              mapPanel.requestFocus();
            }
            if (o instanceof TransportRoute) {
              DataTileManager<Entity> ways=new DataTileManager<Entity>();
              for (              Way w : ((TransportRoute)o).getWays()) {
                LatLon l=w.getLatLon();
                ways.registerObject(l.getLatitude(),l.getLongitude(),w);
              }
              for (              TransportStop w : ((TransportRoute)o).getBackwardStops()) {
                LatLon l=w.getLocation();
                ways.registerObject(l.getLatitude(),l.getLongitude(),new Node(l.getLatitude(),l.getLongitude(),w.getId()));
              }
              for (              TransportStop w : ((TransportRoute)o).getForwardStops()) {
                LatLon l=w.getLocation();
                ways.registerObject(l.getLatitude(),l.getLongitude(),new Node(l.getLatitude(),l.getLongitude(),w.getId()));
              }
              mapPanel.setPoints(ways);
              mapPanel.requestFocus();
            }
          }
 else           if (o instanceof Entity) {
            Entity c=(Entity)o;
            LatLon latLon=c.getLatLon();
            if (latLon != null) {
              mapPanel.setLatLon(latLon.getLatitude(),latLon.getLongitude());
              mapPanel.requestFocus();
            }
          }
        }
      }
    }
  }
);
  treeModelListener=new TreeModelListener(){
    public void treeNodesChanged(    TreeModelEvent e){
      Object node=e.getTreePath().getLastPathComponent();
      if (e.getChildren() != null && e.getChildren().length > 0) {
        node=e.getChildren()[0];
      }
      if (node instanceof DataExtractionTreeNode) {
        DataExtractionTreeNode n=((DataExtractionTreeNode)node);
        if (n.getModelObject() instanceof MapObject) {
          MapObject r=(MapObject)n.getModelObject();
          String newName=n.getUserObject().toString();
          if (!r.getName().equals(newName)) {
            r.setName(n.getUserObject().toString());
          }
          if (r instanceof Street && !((Street)r).isRegisteredInCity()) {
            DefaultMutableTreeNode parent=((DefaultMutableTreeNode)n.getParent());
            parent.remove(n);
            ((DefaultTreeModel)treePlaces.getModel()).nodeStructureChanged(parent);
          }
        }
      }
    }
    public void treeNodesInserted(    TreeModelEvent e){
    }
    public void treeNodesRemoved(    TreeModelEvent e){
    }
    public void treeStructureChanged(    TreeModelEvent e){
    }
  }
;
  treePlaces.getModel().addTreeModelListener(treeModelListener);
  return treePlaces;
}
