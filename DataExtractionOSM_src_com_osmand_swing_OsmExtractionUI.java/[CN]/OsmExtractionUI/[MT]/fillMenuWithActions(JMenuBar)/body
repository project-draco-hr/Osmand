{
  JMenu menu=new JMenu("File");
  bar.add(menu);
  JMenuItem loadFile=new JMenuItem("Load osm file...");
  menu.add(loadFile);
  JMenuItem loadSpecifiedAreaFile=new JMenuItem("Load osm file for specifed area...");
  menu.add(loadSpecifiedAreaFile);
  JMenuItem closeCurrentFile=new JMenuItem("Close current file");
  menu.add(closeCurrentFile);
  menu.addSeparator();
  JMenuItem saveOsmFile=new JMenuItem("Save data to osm file...");
  menu.add(saveOsmFile);
  JMenuItem specifyWorkingDir=new JMenuItem("Specify working directory...");
  menu.add(specifyWorkingDir);
  menu.addSeparator();
  JMenuItem exitMenu=new JMenuItem("Exit");
  menu.add(exitMenu);
  JMenu tileSource=MapPanel.getMenuToChooseSource(mapPanel);
  tileSource.addSeparator();
  JMenuItem sqliteDB=new JMenuItem("Create sqlite database");
  tileSource.add(sqliteDB);
  bar.add(tileSource);
  menu=new JMenu("Window");
  bar.add(menu);
  JMenuItem settings=new JMenuItem("Settings...");
  menu.add(settings);
  menu.addSeparator();
  JMenuItem openLogFile=new JMenuItem("Open log file...");
  menu.add(openLogFile);
  openLogFile.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      File file=new File(OsmExtractionUI.LOG_PATH);
      if (file != null && file.exists()) {
        if (System.getProperty("os.name").startsWith("Windows")) {
          try {
            Runtime.getRuntime().exec(new String[]{"notepad.exe",file.getAbsolutePath()});
          }
 catch (          IOException es) {
            ExceptionHandler.handle("Failed to open log file ",es);
          }
        }
 else {
          JOptionPane.showMessageDialog(frame,"Open log file manually " + LOG_PATH);
        }
      }
 else {
        ExceptionHandler.handle("Log file is not found");
      }
    }
  }
);
  sqliteDB.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final String regionName=region == null ? "Region" : region.getName();
      final ITileSource map=mapPanel.getMap();
      if (map != null) {
        try {
          final ProgressDialog dlg=new ProgressDialog(frame,"Creating index");
          dlg.setRunnable(new Runnable(){
            @Override public void run(){
              try {
                SQLiteBigPlanetIndex.createSQLiteDatabase(DataExtractionSettings.getSettings().getTilesDirectory(),regionName,map.getName());
              }
 catch (              SQLException e1) {
                throw new IllegalArgumentException(e1);
              }
catch (              IOException e1) {
                throw new IllegalArgumentException(e1);
              }
            }
          }
);
          dlg.run();
        }
 catch (        InterruptedException e1) {
          log.error("Interrupted",e1);
        }
catch (        InvocationTargetException e1) {
          ExceptionHandler.handle("Can't create big planet sqlite index",(Exception)e1.getCause());
        }
      }
    }
  }
);
  exitMenu.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      frame.setVisible(false);
    }
  }
);
  closeCurrentFile.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      setRegion(null,"Region");
      frame.setTitle("OsmAnd Map Creator");
    }
  }
);
  settings.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      OsmExtractionPreferencesDialog dlg=new OsmExtractionPreferencesDialog(frame);
      dlg.showDialog();
    }
  }
);
  specifyWorkingDir.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      JFileChooser fc=new JFileChooser();
      fc.setDialogTitle("Choose working directory");
      fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      File workingDir=DataExtractionSettings.getSettings().getDefaultWorkingDir();
      if (workingDir != null) {
        fc.setCurrentDirectory(workingDir);
      }
      if (fc.showOpenDialog(frame) == JFileChooser.APPROVE_OPTION && fc.getSelectedFile() != null && fc.getSelectedFile().isDirectory()) {
        DataExtractionSettings.getSettings().saveDefaultWorkingDir(fc.getSelectedFile());
        mapPanel.setTilesLocation(DataExtractionSettings.getSettings().getTilesDirectory());
        statusBarLabel.setText("Working directory : " + fc.getSelectedFile().getAbsolutePath());
        updateButtonsBar();
      }
    }
  }
);
  loadSpecifiedAreaFile.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      JFileChooser fc=getOsmFileChooser();
      int answer=fc.showOpenDialog(frame);
      if (answer == JFileChooser.APPROVE_OPTION && fc.getSelectedFile() != null) {
        final JDialog dlg=new JDialog(frame,true);
        dlg.setTitle("Select area to filter");
        MapPanel panel=new MapPanel(DataExtractionSettings.getSettings().getTilesDirectory());
        panel.setLatLon(mapPanel.getLatitude(),mapPanel.getLongitude());
        panel.setZoom(mapPanel.getZoom());
        final StringBuilder res=new StringBuilder();
        panel.getLayer(MapInformationLayer.class).setAreaActionHandler(new AbstractAction("Select area"){
          private static final long serialVersionUID=-3452957517341961969L;
          @Override public void actionPerformed(          ActionEvent e){
            res.append(true);
            dlg.setVisible(false);
          }
        }
);
        dlg.add(panel);
        JMenuBar bar=new JMenuBar();
        bar.add(MapPanel.getMenuToChooseSource(panel));
        dlg.setJMenuBar(bar);
        dlg.setSize(512,512);
        double x=frame.getBounds().getCenterX();
        double y=frame.getBounds().getCenterY();
        dlg.setLocation((int)x - dlg.getWidth() / 2,(int)y - dlg.getHeight() / 2);
        dlg.setVisible(true);
        if (res.length() > 0 && panel.getSelectionArea().isVisible()) {
          MapSelectionArea area=panel.getSelectionArea();
          IOsmStorageFilter filter=new OsmBoundsFilter(area.getLat1(),area.getLon1(),area.getLat2(),area.getLon2());
          loadCountry(fc.getSelectedFile(),filter);
        }
      }
    }
  }
);
  loadFile.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      JFileChooser fc=getOsmFileChooser();
      int answer=fc.showOpenDialog(frame);
      if (answer == JFileChooser.APPROVE_OPTION && fc.getSelectedFile() != null) {
        loadCountry(fc.getSelectedFile(),null);
      }
    }
  }
);
  saveOsmFile.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (region == null) {
        return;
      }
      JFileChooser fc=getOsmFileChooser();
      int answer=fc.showSaveDialog(frame);
      if (answer == JFileChooser.APPROVE_OPTION && fc.getSelectedFile() != null) {
        saveCountry(fc.getSelectedFile());
      }
    }
  }
);
}
