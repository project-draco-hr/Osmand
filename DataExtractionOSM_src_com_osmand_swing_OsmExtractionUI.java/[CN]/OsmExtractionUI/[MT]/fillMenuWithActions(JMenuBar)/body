{
  JMenu menu=new JMenu("File");
  bar.add(menu);
  JMenuItem loadFile=new JMenuItem("Load osm file...");
  menu.add(loadFile);
  JMenuItem saveOsmFile=new JMenuItem("Save data to osm file...");
  menu.add(saveOsmFile);
  JMenuItem specifyWorkingDir=new JMenuItem("Specify working directory...");
  menu.add(specifyWorkingDir);
  menu.addSeparator();
  JMenuItem exitMenu=new JMenuItem("Exit");
  menu.add(exitMenu);
  bar.add(MapPanel.getMenuToChooseSource(mapPanel));
  exitMenu.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      frame.setVisible(false);
    }
  }
);
  specifyWorkingDir.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      JFileChooser fc=new JFileChooser();
      fc.setDialogTitle("Choose working directory");
      fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      File workingDir=DataExtractionSettings.getSettings().getDefaultWorkingDir();
      if (workingDir != null) {
        fc.setCurrentDirectory(workingDir);
      }
      if (fc.showOpenDialog(frame) == JFileChooser.APPROVE_OPTION && fc.getSelectedFile() != null && fc.getSelectedFile().isDirectory()) {
        DataExtractionSettings.getSettings().saveDefaultWorkingDir(fc.getSelectedFile());
        mapPanel.setTilesLocation(DataExtractionSettings.getSettings().getTilesDirectory());
        statusBarLabel.setText("Working directory : " + fc.getSelectedFile().getAbsolutePath());
        updateButtonsBar();
      }
    }
  }
);
  loadFile.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      JFileChooser fc=new JFileChooser();
      fc.setDialogTitle("Choose osm file");
      fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
      fc.setAcceptAllFileFilterUsed(true);
      fc.setCurrentDirectory(DataExtractionSettings.getSettings().getDefaultWorkingDir().getParentFile());
      fc.setFileFilter(new FileFilter(){
        @Override public boolean accept(        File f){
          return f.isDirectory() || f.getName().endsWith(".bz2") || f.getName().endsWith(".osm");
        }
        @Override public String getDescription(){
          return "Osm Files (*.bz2, *.osm)";
        }
      }
);
      int answer=fc.showOpenDialog(frame);
      if (answer == JFileChooser.APPROVE_OPTION && fc.getSelectedFile() != null) {
        loadCountry(fc.getSelectedFile());
      }
    }
  }
);
  saveOsmFile.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (region == null) {
        return;
      }
      JFileChooser fc=new JFileChooser();
      fc.setDialogTitle("Choose osm file to save");
      fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
      fc.setAcceptAllFileFilterUsed(true);
      fc.setCurrentDirectory(DataExtractionSettings.getSettings().getDefaultWorkingDir().getParentFile());
      fc.setFileFilter(new FileFilter(){
        @Override public boolean accept(        File f){
          return f.isDirectory() || f.getName().endsWith(".bz2") || f.getName().endsWith(".osm");
        }
        @Override public String getDescription(){
          return "Osm Files (*.bz2, *.osm)";
        }
      }
);
      int answer=fc.showSaveDialog(frame);
      if (answer == JFileChooser.APPROVE_OPTION && fc.getSelectedFile() != null) {
        saveCountry(fc.getSelectedFile());
      }
    }
  }
);
}
