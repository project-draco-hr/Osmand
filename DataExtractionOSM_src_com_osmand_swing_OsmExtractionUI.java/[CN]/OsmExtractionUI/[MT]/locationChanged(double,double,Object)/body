{
  if (amenitiesTree != null) {
    Region reg=(Region)amenitiesTree.getModelObject();
    List<Amenity> closestAmenities=reg.getAmenityManager().getClosestObjects(newLatitude,newLongitude,0,5);
    MapUtils.sortListOfMapObject(closestAmenities,newLatitude,newLongitude);
    Map<AmenityType,List<Amenity>> filter=new HashMap<AmenityType,List<Amenity>>();
    for (    Amenity n : closestAmenities) {
      AmenityType type=n.getType();
      if (!filter.containsKey(type)) {
        filter.put(type,new ArrayList<Amenity>());
      }
      filter.get(type).add(n);
    }
    for (int i=1; i < amenitiesTree.getChildCount(); i++) {
      AmenityType type=(AmenityType)((DataExtractionTreeNode)amenitiesTree.getChildAt(i)).getModelObject();
      ((DefaultMutableTreeNode)amenitiesTree.getChildAt(i)).removeAllChildren();
      if (filter.get(type) != null) {
        for (        Amenity n : filter.get(type)) {
          int dist=(int)(MapUtils.getDistance(n.getLocation(),newLatitude,newLongitude));
          String str=n.getStringWithoutType(false) + " [" + dist+ " m ]";
          DataExtractionTreeNode node=new DataExtractionTreeNode(str,n);
          ((DefaultMutableTreeNode)amenitiesTree.getChildAt(i)).add(node);
        }
      }
      ((DefaultTreeModel)treePlaces.getModel()).nodeStructureChanged(amenitiesTree.getChildAt(i));
    }
    ((DefaultMutableTreeNode)amenitiesTree.getChildAt(0)).removeAllChildren();
    for (int i=0; i < 15 && i < closestAmenities.size(); i++) {
      Amenity n=closestAmenities.get(i);
      int dist=(int)(MapUtils.getDistance(n.getLocation(),newLatitude,newLongitude));
      String str=n.getSimpleFormat(false) + " [" + dist+ " m ]";
      ((DefaultMutableTreeNode)amenitiesTree.getChildAt(0)).add(new DataExtractionTreeNode(str,n));
      ((DefaultTreeModel)treePlaces.getModel()).nodeStructureChanged(amenitiesTree.getChildAt(0));
    }
  }
}
