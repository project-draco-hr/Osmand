{
  View row=convertView;
  if (row == null) {
    LayoutInflater inflater=getLayoutInflater();
    row=inflater.inflate(R.layout.osmo_group_item,parent,false);
  }
  adjustIndicator(groupPosition,isExpanded,row);
  TextView label=(TextView)row.findViewById(R.id.category_name);
  final OsMoGroup model=getGroup(groupPosition);
  if (selectedObject == model) {
    row.setBackgroundColor(getResources().getColor(R.color.row_selection_color));
  }
 else {
    row.setBackgroundColor(Color.TRANSPARENT);
  }
  label.setText(model.getVisibleName(OsMoGroupsActivity.this));
  if (model.isMainGroup() || model.isActive()) {
    label.setTypeface(Typeface.DEFAULT,Typeface.NORMAL);
  }
 else {
    label.setTypeface(Typeface.DEFAULT,Typeface.ITALIC);
  }
  final CompoundButton ch=(CompoundButton)row.findViewById(R.id.check_item);
  ch.setVisibility(model.isMainGroup() ? View.INVISIBLE : View.VISIBLE);
  ch.setOnCheckedChangeListener(null);
  ch.setChecked(model.enabled);
  ch.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    boolean revert=false;
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      if (revert) {
        revert=false;
        return;
      }
      if (!checkOperationIsNotRunning()) {
        revert=true;
        ch.setChecked(!isChecked);
        return;
      }
      if (isChecked) {
        String operation=osMoPlugin.getGroups().connectGroup(model);
        startLongRunningOperation(operation);
      }
 else {
        String operation=osMoPlugin.getGroups().disconnectGroup(model);
        startLongRunningOperation(operation);
      }
    }
  }
);
  return row;
}
