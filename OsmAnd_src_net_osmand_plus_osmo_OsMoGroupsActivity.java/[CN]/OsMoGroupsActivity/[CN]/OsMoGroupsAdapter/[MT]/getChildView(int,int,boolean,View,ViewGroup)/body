{
  View row=convertView;
  if (row == null) {
    LayoutInflater inflater=getLayoutInflater();
    row=inflater.inflate(R.layout.osmo_group_list_item,parent,false);
  }
  final OsMoDevice osmoDevice=getChild(groupPosition,childPosition);
  row.setTag(osmoDevice);
  if (app.getSettings().isLightContent()) {
    row.setBackgroundResource(R.drawable.expandable_list_item_background_light);
  }
 else {
    row.setBackgroundResource(R.drawable.expandable_list_item_background_dark);
  }
  TextView label=(TextView)row.findViewById(R.id.osmo_label);
  TextView labelTime=(TextView)row.findViewById(R.id.osmo_label_time);
  ImageView icon=(ImageView)row.findViewById(R.id.osmo_user_icon);
  Location location=osmoDevice.getLastLocation();
  if (osmoDevice.getTrackerId().equals(osMoPlugin.getService().getMyGroupTrackerId())) {
    location=tracker.getLastSendLocation();
  }
  int color=osmoDevice.getColor();
  if (!osmoDevice.isEnabled()) {
    icon.setVisibility(View.INVISIBLE);
    label.setTypeface(Typeface.DEFAULT,Typeface.ITALIC);
    label.setText(osmoDevice.getVisibleName());
    labelTime.setText("");
  }
 else   if (location == null || mapLocation == null) {
    label.setTypeface(Typeface.DEFAULT,Typeface.NORMAL);
    icon.setVisibility(View.VISIBLE);
    NonDirectionDrawable nonDirectionDrawable;
    nonDirectionDrawable=nonDireactionDrawables.get(color);
    if (nonDirectionDrawable == null) {
      nonDirectionDrawable=new NonDirectionDrawable(getResources(),widthInPx,heightInPx);
      nonDirectionDrawable.setColor(color);
      nonDireactionDrawables.put(color,nonDirectionDrawable);
    }
    icon.setImageDrawable(nonDirectionDrawable);
    label.setText(osmoDevice.getVisibleName());
    labelTime.setText("");
  }
 else {
    label.setTypeface(Typeface.DEFAULT,Typeface.NORMAL);
    icon.setVisibility(View.VISIBLE);
    float[] mes=new float[2];
    net.osmand.Location.distanceBetween(location.getLatitude(),location.getLongitude(),mapLocation.getLatitude(),mapLocation.getLongitude(),mes);
    long now=System.currentTimeMillis();
    final boolean recent=Math.abs(now - location.getTime()) < RECENT_THRESHOLD;
    color=recent ? color : getResources().getColor(R.color.color_unknown);
    DirectionDrawable directionDrawable;
    directionDrawable=direactionDrawables.get(color);
    if (directionDrawable == null) {
      directionDrawable=new DirectionDrawable(getResources(),widthInPx,heightInPx);
      directionDrawable.setColor(color);
      direactionDrawables.put(color,directionDrawable);
    }
    directionDrawable.setAngle(mes[1] - lastCompass + 180);
    icon.setImageDrawable(directionDrawable);
    int dist=(int)mes[0];
    long seconds=Math.max(0,(now - location.getTime()) / 1000);
    String time;
    if (seconds < 60) {
      seconds=(seconds / 5) * 5;
      time=seconds + " " + getString(R.string.seconds_ago);
    }
 else     if (seconds / 60 < 100) {
      time=(seconds / 60) + " " + getString(R.string.minutes_ago);
    }
 else {
      time=(seconds / (60 * 60)) + " " + getString(R.string.hours_ago);
    }
    String distance=OsmAndFormatter.getFormattedDistance(dist,getMyApplication()) + "  ";
    String visibleName=osmoDevice.getVisibleName();
    String firstPart=distance + visibleName;
    label.setText(firstPart,TextView.BufferType.SPANNABLE);
    ((Spannable)label.getText()).setSpan(new ForegroundColorSpan(getResources().getColor(R.color.color_distance)),0,distance.length() - 1,0);
    labelTime.setText(time,TextView.BufferType.SPANNABLE);
    ((Spannable)labelTime.getText()).setSpan(new ForegroundColorSpan(getResources().getColor(seconds < 60 ? R.color.color_ok : R.color.color_unknown)),0,time.length(),0);
  }
  return row;
}
