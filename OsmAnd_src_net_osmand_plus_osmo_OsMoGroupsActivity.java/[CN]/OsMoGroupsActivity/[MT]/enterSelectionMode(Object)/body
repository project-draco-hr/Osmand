{
  if (!checkOperationIsNotRunning()) {
    return;
  }
  actionMode=startSupportActionMode(new ActionMode.Callback(){
    private OsMoDevice device;
    private OsMoGroup group;
    private Menu menu;
    private MenuItem createActionModeMenuItem(    final ActionMode actionMode,    Menu m,    int id,    int titleRes,    int icon,    int menuItemType){
      final MenuItem menuItem=createMenuItem(m,id,titleRes,icon,menuItemType);
      menuItem.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
        @Override public boolean onMenuItemClick(        MenuItem item){
          onActionItemClicked(actionMode,menuItem);
          return true;
        }
      }
);
      return menuItem;
    }
    @Override public boolean onCreateActionMode(    ActionMode mode,    Menu menu){
      selectedObject=o;
      boolean portrait=AndroidUiHelper.isOrientationPortrait(OsMoGroupsActivity.this);
      if (portrait) {
        menu=getClearToolbar(true).getMenu();
      }
 else {
        getClearToolbar(false);
      }
      this.menu=menu;
      device=(OsMoDevice)(o instanceof OsMoDevice ? o : null);
      group=(OsMoGroup)(o instanceof OsMoGroup ? o : null);
      MenuItem mi=null;
      if (device != null) {
        mode.setTitle(device.getVisibleName());
        if (device.getLastLocation() != null) {
          createActionModeMenuItem(actionMode,menu,SHOW_ON_MAP_ID,R.string.shared_string_show_on_map,R.drawable.ic_action_marker_dark,MenuItemCompat.SHOW_AS_ACTION_ALWAYS);
          MenuItem menuItem=createActionModeMenuItem(actionMode,menu,TRACK_DEV_ID,R.string.osmo_set_moving_target,R.drawable.ic_action_flage_dark,MenuItemCompat.SHOW_AS_ACTION_ALWAYS);
          menuItem.setTitleCondensed(getString(R.string.osmo_follow));
        }
        createActionModeMenuItem(actionMode,menu,SETTINGS_DEV_ID,R.string.shared_string_settings,R.drawable.ic_action_settings,MenuItemCompat.SHOW_AS_ACTION_ALWAYS);
      }
      if (group != null) {
        createActionModeMenuItem(actionMode,menu,SHARE_ID,R.string.shared_string_share,R.drawable.ic_action_gshare_dark,MenuItemCompat.SHOW_AS_ACTION_ALWAYS);
        mode.setTitle(group.getVisibleName(OsMoGroupsActivity.this));
        createActionModeMenuItem(actionMode,menu,GROUP_INFO,R.string.osmo_group_info,R.drawable.ic_action_gabout_dark,MenuItemCompat.SHOW_AS_ACTION_ALWAYS);
        createActionModeMenuItem(actionMode,menu,DELETE_ACTION_ID,R.string.shared_string_delete,R.drawable.ic_action_delete_dark,MenuItemCompat.SHOW_AS_ACTION_ALWAYS);
      }
      if (mi != null) {
        final LayoutInflater inflater=LayoutInflater.from(OsMoGroupsActivity.this);
        FrameLayout l=new FrameLayout(OsMoGroupsActivity.this);
        View view=inflater.inflate(R.layout.check_item_rel,l);
        final CompoundButton check=(CompoundButton)view.findViewById(R.id.check_item);
        check.setChecked((device != null && device.isActive() && device.isEnabled()) || (group != null && group.isActive() && group.isEnabled()));
        check.setOnCheckedChangeListener(new OnCheckedChangeListener(){
          @Override public void onCheckedChanged(          CompoundButton buttonView,          boolean isChecked){
            onOffAction(check);
          }
        }
);
        MenuItemCompat.setActionView(mi,l);
      }
      return true;
    }
    @Override public boolean onPrepareActionMode(    ActionMode mode,    Menu menu){
      return false;
    }
    @Override public void onDestroyActionMode(    ActionMode mode){
      selectedObject=null;
      refreshList();
      if (AndroidUiHelper.isOrientationPortrait(OsMoGroupsActivity.this)) {
        onCreateOptionsMenu(menu);
      }
    }
    @Override public boolean onActionItemClicked(    ActionMode mode,    MenuItem item){
      if (item.getItemId() == TRACK_DEV_ID) {
        if (device != null && device.getLastLocation() != null) {
          TargetPointsHelper targets=getMyApplication().getTargetPointsHelper();
          targets.navigateToPoint(new LatLon(device.getLastLocation().getLatitude(),device.getLastLocation().getLongitude()),true,-1);
          OsMoPositionLayer.setFollowDestination(device);
          MapActivity.launchMapActivityMoveToTop(OsMoGroupsActivity.this);
        }
      }
 else       if (item.getItemId() == SETTINGS_DEV_ID) {
        showSettingsDialog(device);
      }
 else       if (item.getItemId() == DELETE_ACTION_ID) {
        Builder bld=new AlertDialog.Builder(OsMoGroupsActivity.this);
        String name=((OsMoGroup)selectedObject).getVisibleName(OsMoGroupsActivity.this);
        bld.setTitle(getString(R.string.osmo_leave_confirmation_msg,name));
        bld.setPositiveButton(R.string.shared_string_yes,new DialogInterface.OnClickListener(){
          @Override public void onClick(          DialogInterface dialog,          int which){
            Object obj=selectedObject;
            quitSelectionMode();
            deleteObject((OsMoGroup)obj);
          }
        }
);
        bld.setNegativeButton(R.string.shared_string_no,null);
        bld.show();
      }
 else       if (item.getItemId() == GROUP_INFO) {
        showGroupInfo(group);
      }
 else       if (item.getItemId() == SHARE_ID) {
        shareOsMoGroup(group.getVisibleName(app),group.getGroupId());
      }
 else       if (item.getItemId() == SHOW_ON_MAP_ID) {
        if (device != null) {
          Location location=device.getLastLocation();
          MapActivity.getSingleMapViewTrackingUtilities().setMapLinkedToLocation(false);
          if (location != null) {
            app.getSettings().setMapLocationToShow(location.getLatitude(),location.getLongitude(),app.getSettings().getLastKnownMapZoom(),new PointDescription(PointDescription.POINT_TYPE_MARKER,device.getVisibleName()),false,device);
          }
          OsMoPositionLayer.setFollowTrackerId(device,location);
          MapActivity.launchMapActivityMoveToTop(OsMoGroupsActivity.this);
        }
      }
 else       if (item.getItemId() == ON_OFF_ACTION_ID) {
        CompoundButton bt=((CompoundButton)MenuItemCompat.getActionView(item).findViewById(R.id.check_item));
        onOffAction(bt);
      }
      return true;
    }
    private void onOffAction(    CompoundButton bt){
      OsMoGroup g=(OsMoGroup)selectedObject;
      if (bt.isChecked()) {
        String operation=osMoPlugin.getGroups().connectGroup(g);
        startLongRunningOperation(operation);
      }
 else {
        String operation=osMoPlugin.getGroups().disconnectGroup(g);
        startLongRunningOperation(operation);
      }
      quitSelectionMode();
    }
  }
);
  refreshList();
}
