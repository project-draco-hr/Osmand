{
  if (turnType == null) {
    return;
  }
  pathForTurn.reset();
  if (outlay != null) {
    outlay.reset();
  }
  int ha=72;
  int wa=72;
  int lowMargin=6;
  if (TurnType.C == turnType.getValue()) {
    TurnVariables tv=new TurnVariables(false,0,0,wa,ha,1.5f);
    pathForTurn.moveTo(wa / 2 + tv.widthStepIn / 2,ha - lowMargin);
    tv.drawTriangle(pathForTurn);
    pathForTurn.lineTo(wa / 2 - tv.widthStepIn / 2,ha - lowMargin);
  }
 else   if (TurnType.OFFR == turnType.getValue()) {
    TurnVariables tv=new TurnVariables(false,0,0,wa,ha,1.5f);
    float rightX=wa / 2 + tv.widthStepIn / 2;
    float leftX=wa / 2 - tv.widthStepIn / 2;
    int step=7;
    pathForTurn.moveTo(rightX,ha - lowMargin);
    pathForTurn.rLineTo(0,-step);
    pathForTurn.rLineTo(-tv.widthStepIn,0);
    pathForTurn.rLineTo(0,step);
    pathForTurn.rLineTo(tv.widthStepIn,0);
    pathForTurn.moveTo(rightX,ha - 2 * lowMargin - step);
    pathForTurn.rLineTo(0,-step);
    pathForTurn.rLineTo(-tv.widthStepIn,0);
    pathForTurn.rLineTo(0,step);
    pathForTurn.rLineTo(tv.widthStepIn,0);
    pathForTurn.moveTo(rightX,ha - 3 * lowMargin - 2 * step);
    pathForTurn.rLineTo(0,-step);
    pathForTurn.rLineTo(-tv.widthStepIn,0);
    pathForTurn.rLineTo(0,step);
    pathForTurn.rLineTo(tv.widthStepIn,0);
    pathForTurn.moveTo(rightX,ha - 4 * lowMargin - 3 * step);
    tv.drawTriangle(pathForTurn);
    pathForTurn.lineTo(leftX,ha - 4 * lowMargin - 3 * step);
  }
 else   if (TurnType.TR == turnType.getValue() || TurnType.TL == turnType.getValue()) {
    int b=TurnType.TR == turnType.getValue() ? 1 : -1;
    TurnVariables tv=new TurnVariables(b != 1,b == 1 ? 90 : -90,0,wa,ha / 2,1.5f);
    float centerCurveX=wa / 2 + b * 4;
    float centerCurveY=ha / 2;
    float h=centerCurveY - lowMargin;
    float r=tv.cy - tv.widthStepIn / 2;
    float centerLineX=centerCurveX - b * (r + tv.widthStepIn / 2);
    RectF innerOval=new RectF(centerCurveX - r,centerCurveY - r,centerCurveX + r,centerCurveY + r);
    RectF outerOval=new RectF(innerOval);
    outerOval.inset(-tv.widthStepIn,-tv.widthStepIn);
    pathForTurn.moveTo(centerLineX + b * tv.widthStepIn / 2,ha - lowMargin);
    pathForTurn.rLineTo(0,-h);
    pathForTurn.arcTo(innerOval,b == 1 ? -180 : 0,b * 90);
    tv.drawTriangle(pathForTurn);
    pathForTurn.arcTo(outerOval,-90,-b * 90);
    pathForTurn.rLineTo(0,h);
  }
 else   if (TurnType.TSLR == turnType.getValue() || TurnType.TSLL == turnType.getValue()) {
    int b=TurnType.TSLR == turnType.getValue() ? 1 : -1;
    TurnVariables tv=new TurnVariables(b != 1,b == 1 ? 45 : -45,0,wa,ha,1.5f);
    tv.cx-=b * 7;
    float centerBottomX=wa / 2 - b * 6;
    float centerCurveY=ha / 2 + 8;
    float centerCurveX=centerBottomX + b * (wa / 2);
    float rx1=Math.abs(centerCurveX - centerBottomX) - tv.widthStepIn / 2;
    float rx2=Math.abs(centerCurveX - centerBottomX) + tv.widthStepIn / 2;
    double t1=Math.acos(Math.abs(tv.getTriangle1X() - centerCurveX) / rx1);
    float rb1=(float)(Math.abs(tv.getTriangle1Y() - centerCurveY) / Math.sin(t1));
    float ellipseAngle1=(float)(t1 / Math.PI * 180);
    double t2=Math.acos(Math.abs(tv.getTriangle2X() - centerCurveX) / rx2);
    float rb2=(float)(Math.abs(tv.getTriangle2Y() - centerCurveY) / Math.sin(t2));
    float ellipseAngle2=(float)(t2 / Math.PI * 180);
    RectF innerOval=new RectF(centerCurveX - rx1,centerCurveY - rb1,centerCurveX + rx1,centerCurveY + rb1);
    RectF outerOval=new RectF(centerCurveX - rx2,centerCurveY - rb2,centerCurveX + rx2,centerCurveY + rb2);
    pathForTurn.moveTo(centerBottomX + b * tv.widthStepIn / 2,ha - lowMargin);
    pathForTurn.arcTo(innerOval,-90 - b * 90,b * (ellipseAngle1));
    tv.drawTriangle(pathForTurn);
    pathForTurn.arcTo(outerOval,-90 - b * (90 - (ellipseAngle2)),-b * (ellipseAngle2));
    pathForTurn.lineTo(centerBottomX - b * tv.widthStepIn / 2,ha - lowMargin);
  }
 else   if (TurnType.TSHR == turnType.getValue() || TurnType.TSHL == turnType.getValue()) {
    int b=TurnType.TSHR == turnType.getValue() ? 1 : -1;
    float centerCircleY=ha / 4;
    float centerCircleX=wa / 2 - b * (wa / 5);
    TurnVariables tv=new TurnVariables(b != 1,b == 1 ? 135 : -135,0,wa,ha,1.5f);
    float angle=45;
    float r=tv.widthStepIn / 2;
    tv.cx=centerCircleX;
    tv.cy=centerCircleY;
    RectF innerOval=new RectF(centerCircleX - r,centerCircleY - r,centerCircleX + r,centerCircleY + r);
    pathForTurn.moveTo(centerCircleX + b * tv.widthStepIn / 2,ha - lowMargin);
    pathForTurn.lineTo(centerCircleX + b * tv.widthStepIn / 2,(float)(centerCircleY + 2 * r));
    tv.drawTriangle(pathForTurn);
    pathForTurn.arcTo(innerOval,-90 + b * angle,-b * (90 + angle));
    pathForTurn.lineTo(centerCircleX - b * tv.widthStepIn / 2,ha - lowMargin);
  }
 else   if (TurnType.TU == turnType.getValue() || TurnType.TRU == turnType.getValue()) {
    int b=TurnType.TU == turnType.getValue() ? -1 : 1;
    float radius=16;
    float centerRadiusY=ha / 2 - 10;
    float extraMarginBottom=5;
    TurnVariables tv=new TurnVariables(b != 1,180,0,wa,ha,1.5f);
    float centerRadiusX=wa / 2;
    tv.cx=centerRadiusX + b * radius;
    tv.cy=centerRadiusY - extraMarginBottom;
    lowMargin+=extraMarginBottom;
    tv.rot=0;
    float r=radius - tv.widthStepIn / 2;
    float r2=radius + tv.widthStepIn / 2;
    RectF innerOval=new RectF(centerRadiusX - r,centerRadiusY - r,centerRadiusX + r,centerRadiusY + r);
    RectF outerOval=new RectF(centerRadiusX - r2,centerRadiusY - r2,centerRadiusX + r2,centerRadiusY + r2);
    pathForTurn.moveTo(centerRadiusX - b * (radius - tv.widthStepIn / 2),ha - lowMargin);
    pathForTurn.lineTo(centerRadiusX - b * (radius - tv.widthStepIn / 2),centerRadiusY);
    pathForTurn.arcTo(innerOval,-90 - b * 90,b * 180);
    tv.drawTriangle(pathForTurn);
    pathForTurn.arcTo(outerOval,-90 + b * 90,-b * 180);
    pathForTurn.lineTo(centerRadiusX - b * (radius + tv.widthStepIn / 2),ha - lowMargin);
  }
 else   if (TurnType.KL == turnType.getValue() || TurnType.KR == turnType.getValue()) {
    int b=TurnType.KR == turnType.getValue() ? 1 : -1;
    float shiftX=8;
    float firstH=18;
    float secondH=20;
    TurnVariables tv=new TurnVariables(false,0,0,wa,ha,1.5f);
    tv.cx+=b * shiftX;
    pathForTurn.moveTo(wa / 2 + tv.widthStepIn / 2 - b * shiftX,ha - lowMargin);
    pathForTurn.lineTo(wa / 2 + tv.widthStepIn / 2 - b * shiftX,ha - lowMargin - firstH);
    pathForTurn.cubicTo(wa / 2 + tv.widthStepIn / 2 - b * shiftX,ha - lowMargin - firstH- secondH / 2 + b * 3,wa / 2 + tv.widthStepIn / 2 + b * shiftX,ha - lowMargin - firstH- secondH / 2 + b * 3,wa / 2 + tv.widthStepIn / 2 + b * shiftX,ha - lowMargin - firstH- secondH);
    tv.drawTriangle(pathForTurn);
    pathForTurn.lineTo(wa / 2 - tv.widthStepIn / 2 + b * shiftX,ha - lowMargin - firstH- secondH);
    pathForTurn.cubicTo(wa / 2 - tv.widthStepIn / 2 + b * shiftX,ha - lowMargin - firstH- secondH / 2 - b * 2,wa / 2 - tv.widthStepIn / 2 - b * shiftX,ha - lowMargin - firstH- secondH / 2 - b * 2,wa / 2 - tv.widthStepIn / 2 - b * shiftX,ha - lowMargin - firstH);
    pathForTurn.lineTo(wa / 2 - tv.widthStepIn / 2 - b * shiftX,ha - lowMargin);
  }
 else   if (turnType != null && turnType.isRoundAbout()) {
    int out=turnType.getExitOut();
    boolean leftSide=turnType.isLeftSide();
    boolean showSteps=SHOW_STEPS && !mini;
    TurnVariables tv=new TurnVariables(leftSide,leftSide ? -turnType.getTurnAngle() : turnType.getTurnAngle(),out,wa,ha,1);
    if (center != null) {
      center.set(tv.cx,tv.cy);
    }
    RectF qrOut=new RectF(tv.cx - tv.radOuterCircle,tv.cy - tv.radOuterCircle,tv.cx + tv.radOuterCircle,tv.cy + tv.radOuterCircle);
    RectF qrIn=new RectF(tv.cx - tv.radInnerCircle,tv.cy - tv.radInnerCircle,tv.cx + tv.radInnerCircle,tv.cy + tv.radInnerCircle);
    if (outlay != null && !mini) {
      outlay.addArc(qrOut,0,360);
      outlay.addArc(qrIn,0,-360);
    }
    pathForTurn.moveTo(tv.getProjX(tv.dfOut,tv.radOuterCircle),tv.getProjY(tv.dfOut,tv.radOuterCircle));
    if (out <= 1) {
      showSteps=false;
    }
    if (showSteps && outlay != null) {
      double totalStepInter=(out - 1) * tv.dfStepOut;
      double st=(tv.rot - 2 * tv.dfOut - totalStepInter) / out;
      if ((tv.rot > 0) != (st > 0)) {
        showSteps=false;
      }
      if (Math.abs(st) < Math.PI / 60) {
        showSteps=false;
      }
      if (showSteps) {
        outlay.moveTo(tv.getProjX(tv.dfOut,tv.radOuterCircle),tv.getProjY(tv.dfOut,tv.radOuterCircle));
        for (int i=0; i < out - 1; i++) {
          outlay.arcTo(qrOut,startArcAngle(tv.dfOut + i * (st + tv.dfStepOut)),sweepArcAngle(st));
          arcLineTo(outlay,tv.dfOut + (i + 1) * (st + tv.dfStepOut) - tv.dfStepOut / 2 - tv.dfStepInter / 2,tv.cx,tv.cy,tv.radStepInter);
          arcLineTo(outlay,tv.dfOut + (i + 1) * (st + tv.dfStepOut) - tv.dfStepOut / 2 + tv.dfStepInter / 2,tv.cx,tv.cy,tv.radStepInter);
          arcLineTo(outlay,tv.dfOut + (i + 1) * (st + tv.dfStepOut),tv.cx,tv.cy,tv.radOuterCircle);
        }
        outlay.arcTo(qrOut,startArcAngle(tv.rot - tv.dfOut - st),sweepArcAngle(st));
        arcLineTo(outlay,tv.rot - tv.dfIn,tv.cx,tv.cy,tv.radInnerCircle);
        outlay.arcTo(qrIn,startArcAngle(tv.rot - tv.dfIn),-sweepArcAngle(tv.rot - tv.dfIn - tv.dfIn));
      }
    }
    pathForTurn.arcTo(qrOut,startArcAngle(tv.dfOut),sweepArcAngle(tv.rot - tv.dfOut - tv.dfOut));
    tv.drawTriangle(pathForTurn);
    arcLineTo(pathForTurn,tv.rot + tv.dfIn,tv.cx,tv.cy,tv.radInnerCircle);
    pathForTurn.arcTo(qrIn,startArcAngle(tv.rot + tv.dfIn),sweepArcAngle(-tv.rot - tv.dfIn - tv.dfIn));
    arcLineTo(pathForTurn,-tv.dfL,tv.cx,tv.cy,tv.radBottom);
    arcLineTo(pathForTurn,tv.dfL,tv.cx,tv.cy,tv.radBottom);
  }
  pathForTurn.close();
  if (transform != null) {
    pathForTurn.transform(transform);
  }
}
