{
  this.scaleTriangle=scaleTriangle;
  widthArrow=widthArrow * scaleTriangle;
  radArrowTriangle2=radArrowTriangle1 + 1 * scaleTriangle * scaleTriangle;
  dfL=(leftSide ? 1 : -1) * Math.asin(widthStepIn / (2.0 * radBottom));
  dfAr2=(leftSide ? 1 : -1) * Math.asin(widthArrow / (2.0 * radArrowTriangle2));
  dfStepInter=(leftSide ? 1 : -1) * Math.asin(widthStepInter / radStepInter);
  dfAr=Math.asin(radBottom * Math.sin(dfL) / radArrowTriangle1);
  dfOut=Math.asin(radBottom * Math.sin(dfL) / radOuterCircle);
  dfStepOut=Math.asin(radStepInter * Math.sin(dfStepInter) / radOuterCircle);
  dfIn=Math.asin(radBottom * Math.sin(dfL) / radInnerCircle);
  minDelta=Math.abs(dfIn * 2 / Math.PI * 180) + 2;
  rot=alignRotation(turnAngle,leftSide,minDelta,out) / 180 * Math.PI;
  cx=wa / 2;
  cy=ha / 2;
  float potentialArrowEndX=(float)(Math.sin(rot) * radEndOfArrow);
  float potentialArrowEndY=(float)(Math.cos(rot) * radEndOfArrow);
  if (potentialArrowEndX > cx) {
    cx=potentialArrowEndX;
  }
 else   if (potentialArrowEndX < -cx) {
    cx=2 * cx + potentialArrowEndX;
  }
  if (potentialArrowEndY > cy) {
    cy=2 * cy - potentialArrowEndY;
  }
 else   if (potentialArrowEndY < -cy) {
    cy=-potentialArrowEndY;
  }
}
