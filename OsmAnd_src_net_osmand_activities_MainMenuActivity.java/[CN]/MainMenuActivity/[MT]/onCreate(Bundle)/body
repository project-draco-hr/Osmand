{
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  setContentView(Version.VELCOM_EDITION ? R.layout.menu_velcom : R.layout.menu);
  if (Version.VELCOM_EDITION) {
    final ImageView imgView=(ImageView)findViewById(R.id.VelcomMini);
    final Camera camera=new Camera();
    final float firstRotate=0.3f;
    final float invisibleText=0.7f;
    final int animationTime=3600;
    Animation ra=new Animation(){
      @Override protected void applyTransformation(      float interpolatedTime,      Transformation t){
        final Matrix matrix=t.getMatrix();
        int centerY=imgView.getHeight() / 2;
        int centerX=imgView.getWidth() / 2;
        camera.save();
        if (interpolatedTime < firstRotate) {
          camera.rotateY(360 * (firstRotate - interpolatedTime) / firstRotate);
        }
 else         if (interpolatedTime < 2 * firstRotate) {
          camera.rotateY(360 * (2 * firstRotate - interpolatedTime) / firstRotate);
        }
 else {
          camera.rotateY(360 * (interpolatedTime - 2 * firstRotate) / (1 - 2 * firstRotate));
        }
        camera.getMatrix(matrix);
        matrix.preTranslate(-centerX,-centerY);
        matrix.postTranslate(centerX,centerY);
        camera.restore();
      }
    }
;
    ra.setDuration(animationTime);
    imgView.startAnimation(ra);
    final TextView textView=(TextView)findViewById(R.id.TextVelcom);
    Animation alphaAnimation=new Animation(){
      @Override protected void applyTransformation(      float interpolatedTime,      Transformation t){
        if (interpolatedTime < invisibleText) {
          t.setAlpha(0);
        }
 else {
          t.setAlpha((interpolatedTime - invisibleText) / (1 - invisibleText));
        }
      }
    }
;
    alphaAnimation.setAnimationListener(new Animation.AnimationListener(){
      @Override public void onAnimationEnd(      Animation animation){
        textView.setVisibility(View.VISIBLE);
      }
      @Override public void onAnimationRepeat(      Animation animation){
      }
      @Override public void onAnimationStart(      Animation animation){
        textView.setVisibility(View.VISIBLE);
      }
    }
);
    alphaAnimation.setDuration(animationTime);
    textView.startAnimation(alphaAnimation);
    textView.setVisibility(View.INVISIBLE);
  }
  showMap=(Button)findViewById(R.id.MapButton);
  showMap.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      final Intent mapIndent=new Intent(MainMenuActivity.this,MapActivity.class);
      startActivityForResult(mapIndent,0);
    }
  }
);
  settingsButton=(Button)findViewById(R.id.SettingsButton);
  settingsButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      final Intent settings=new Intent(MainMenuActivity.this,SettingsActivity.class);
      startActivity(settings);
    }
  }
);
  favouritesButton=(Button)findViewById(R.id.FavoritesButton);
  favouritesButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      final Intent settings=new Intent(MainMenuActivity.this,FavouritesActivity.class);
      startActivity(settings);
    }
  }
);
  searchButton=(Button)findViewById(R.id.SearchButton);
  searchButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      final Intent search=new Intent(MainMenuActivity.this,SearchActivity.class);
      startActivity(search);
    }
  }
);
  ((OsmandApplication)getApplication()).checkApplicationIsBeingInitialized(this);
  checkPreviousRunsForExceptions();
  SharedPreferences pref=getPreferences(MODE_WORLD_WRITEABLE);
  if (!pref.contains(FIRST_TIME_APP_RUN)) {
    pref.edit().putBoolean(FIRST_TIME_APP_RUN,true).commit();
    Builder builder=new AlertDialog.Builder(this);
    builder.setMessage(R.string.first_time_msg);
    builder.setPositiveButton(R.string.first_time_download,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        startActivity(new Intent(MainMenuActivity.this,DownloadIndexActivity.class));
      }
    }
);
    builder.setNegativeButton(R.string.first_time_continue,null);
    builder.show();
  }
}
