{
  int prevSegment=-1;
  float dist=0;
  int next=1;
  for (int i=0; i <= result.size(); i=next) {
    TurnType t=null;
    next=i + 1;
    if (i < result.size()) {
      t=getTurnInfo(result,i,leftside);
      if (t != null && i < result.size() - 1) {
        boolean tl=TurnType.TL == t.getValue();
        boolean tr=TurnType.TR == t.getValue();
        if (tl || tr) {
          TurnType tnext=getTurnInfo(result,i + 1,leftside);
          if (tnext != null && result.get(i).getDistance() < 35) {
            boolean ut=true;
            if (i > 0) {
              double uTurn=MapUtils.degreesDiff(result.get(i - 1).getBearingEnd(),result.get(i + 1).getBearingBegin());
              if (Math.abs(uTurn) < 120) {
                ut=false;
              }
            }
            String highway=result.get(i).getObject().getHighway();
            if (highway == null || highway.endsWith("track") || highway.endsWith("services") || highway.endsWith("service") || highway.endsWith("path")) {
              ut=false;
            }
            if (ut) {
              if (tl && TurnType.TL == tnext.getValue()) {
                next=i + 2;
                t=TurnType.valueOf(TurnType.TU,false);
              }
 else               if (tr && TurnType.TR == tnext.getValue()) {
                next=i + 2;
                t=TurnType.valueOf(TurnType.TU,true);
              }
            }
          }
        }
      }
      result.get(i).setTurnType(t);
    }
    if (t != null || i == result.size()) {
      if (prevSegment >= 0) {
        String turn=result.get(prevSegment).getTurnType().toString();
        if (result.get(prevSegment).getTurnType().getLanes() != null) {
          turn+=Arrays.toString(result.get(prevSegment).getTurnType().getLanes());
        }
        result.get(prevSegment).setDescription(turn + MessageFormat.format(" and go {0,number,#.##} meters",dist));
        if (result.get(prevSegment).getTurnType().isSkipToSpeak()) {
          result.get(prevSegment).setDescription("-*" + result.get(prevSegment).getDescription());
        }
      }
      prevSegment=i;
      dist=0;
    }
    if (i < result.size()) {
      dist+=result.get(i).getDistance();
    }
  }
  for (int i=result.size() - 2; i >= 0; i--) {
    RouteSegmentResult currentSegment=result.get(i);
    RouteSegmentResult nextSegment=null;
    for (int j=i + 1; j < result.size(); j++) {
      RouteSegmentResult possibleSegment=result.get(j);
      if (possibleSegment.getTurnType() != null && possibleSegment.getTurnType().getLanes() != null) {
        nextSegment=possibleSegment;
        break;
      }
    }
    if (currentSegment.getTurnType() == null || currentSegment.getTurnType().getLanes() == null || nextSegment == null) {
      continue;
    }
    if (currentSegment.getDistance() < 60 && nextSegment.getTurnType().getLanes().length <= currentSegment.getTurnType().getLanes().length && (currentSegment.getTurnType().getValue() == TurnType.C || currentSegment.getTurnType().getValue() == TurnType.TSLL || currentSegment.getTurnType().getValue() == TurnType.TSLR || currentSegment.getTurnType().getValue() == TurnType.KL || currentSegment.getTurnType().getValue() == TurnType.KR)) {
      mergeTurnLanes(leftside,currentSegment,nextSegment);
    }
  }
}
