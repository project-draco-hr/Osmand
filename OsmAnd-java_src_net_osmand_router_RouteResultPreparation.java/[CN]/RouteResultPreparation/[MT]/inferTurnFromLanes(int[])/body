{
  TIntHashSet possibleTurns=new TIntHashSet();
  for (int i=0; i < oLanes.length; i++) {
    if ((oLanes[i] & 1) == 0) {
      continue;
    }
    if (possibleTurns.isEmpty()) {
      possibleTurns.add(TurnType.getPrimaryTurn(oLanes[i]));
      if (TurnType.getSecondaryTurn(oLanes[i]) != 0) {
        possibleTurns.add(TurnType.getSecondaryTurn(oLanes[i]));
      }
      if (TurnType.getTertiaryTurn(oLanes[i]) != 0) {
        possibleTurns.add(TurnType.getTertiaryTurn(oLanes[i]));
      }
    }
 else {
      TIntArrayList laneTurns=new TIntArrayList();
      laneTurns.add(TurnType.getPrimaryTurn(oLanes[i]));
      if (TurnType.getSecondaryTurn(oLanes[i]) != 0) {
        laneTurns.add(TurnType.getSecondaryTurn(oLanes[i]));
      }
      if (TurnType.getTertiaryTurn(oLanes[i]) != 0) {
        laneTurns.add(TurnType.getTertiaryTurn(oLanes[i]));
      }
      possibleTurns.retainAll(laneTurns);
      if (possibleTurns.isEmpty()) {
        return 0;
      }
    }
  }
  for (int i=0; i < oLanes.length; i++) {
    if ((oLanes[i] & 1) == 0 && !possibleTurns.isEmpty()) {
      possibleTurns.remove((Integer)TurnType.getPrimaryTurn(oLanes[i]));
      if (TurnType.getSecondaryTurn(oLanes[i]) != 0) {
        possibleTurns.remove((Integer)TurnType.getSecondaryTurn(oLanes[i]));
      }
      if (TurnType.getTertiaryTurn(oLanes[i]) != 0) {
        possibleTurns.remove((Integer)TurnType.getTertiaryTurn(oLanes[i]));
      }
    }
  }
  if (possibleTurns.size() == 1) {
    int infer=possibleTurns.iterator().next();
    for (int i=0; i < oLanes.length; i++) {
      if (TurnType.getSecondaryTurn(oLanes[i]) == infer) {
        int pt=TurnType.getPrimaryTurn(oLanes[i]);
        int en=oLanes[i] & 1;
        TurnType.setPrimaryTurnAndReset(oLanes,i,infer);
        oLanes[i]|=en;
        TurnType.setSecondaryTurn(oLanes,i,pt);
      }
    }
    return infer;
  }
  return 0;
}
