{
  System.out.println();
  System.out.println("------------");
  long id=-2;
  long[] ids=ctx.indexedSubregions.keys();
  for (  long idt : ids) {
    long x=idt >> 16;
    long y=idt - (x << 16);
  }
  for (int k=0; k < result.size() - d; k+=d) {
    RouteSegmentResult res1=result.get(k);
    RouteSegmentResult res2=result.get(k + d);
    float realdist=0;
    float tm=0;
    for (int t=k; t < k + d + 1; t++) {
      realdist+=result.get(t).getDistance();
      tm+=result.get(t).getDistance() / (ctx.getRouter().defineSpeed(result.get(t).getObject()) * 3.6f);
    }
{
      RouteDataObject obj1=res1.getObject();
      RouteDataObject obj2=res2.getObject();
      int si=res1.getStartPointIndex();
      int ei=res2.getEndPointIndex();
      LatLon segStart=MapUtils.getProjection(MapUtils.get31LatitudeY(obj1.getPoint31YTile(si)),MapUtils.get31LongitudeX(obj1.getPoint31XTile(si)),start.getLatitude(),start.getLongitude(),end.getLatitude(),end.getLongitude());
      LatLon segEnd=MapUtils.getProjection(MapUtils.get31LatitudeY(obj2.getPoint31YTile(ei)),MapUtils.get31LongitudeX(obj2.getPoint31XTile(ei)),start.getLatitude(),start.getLongitude(),end.getLatitude(),end.getLongitude());
      float maxSpeed=ctx.getRouter().defineSpeed(obj1) * 3.6f;
      int cspeed=(int)(MapUtils.getDistance(segStart,segEnd) / tm);
      int percentSt=(int)(100 * MapUtils.getDistance(start,segStart) / MapUtils.getDistance(start,end));
      int percentEnd=(int)(100 * MapUtils.getDistance(start,segEnd) / MapUtils.getDistance(start,end));
      System.out.println("Road " + (k + 1) + " cspeed="+ cspeed+ " segm="+ percentSt+ "%-"+ percentEnd+ "% speed="+ ((int)maxSpeed)+ " dist="+ ((int)realdist));
      if (maxSpeed > 0) {
      }
    }
  }
}
