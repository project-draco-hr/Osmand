{
  RoadSplitStructure rs=new RoadSplitStructure();
  int speakPriority=Math.max(highwaySpeakPriority(prevSegm.getObject().getHighway()),highwaySpeakPriority(currentSegm.getObject().getHighway()));
  for (  RouteSegmentResult attached : attachedRoutes) {
    double ex=MapUtils.degreesDiff(attached.getBearingBegin(),currentSegm.getBearingBegin());
    double mpi=Math.abs(MapUtils.degreesDiff(prevSegm.getBearingEnd(),attached.getBearingBegin()));
    int rsSpeakPriority=highwaySpeakPriority(attached.getObject().getHighway());
    int lanes=countLanesMinOne(attached);
    boolean smallStraightVariation=mpi < TURN_DEGREE_MIN;
    boolean smallTargetVariation=Math.abs(ex) < TURN_DEGREE_MIN;
    boolean attachedOnTheRight=ex >= 0;
    if (attachedOnTheRight) {
      rs.roadsOnRight++;
    }
 else {
      rs.roadsOnLeft++;
    }
    if (rsSpeakPriority != MAX_SPEAK_PRIORITY || speakPriority == MAX_SPEAK_PRIORITY) {
      if (smallTargetVariation || smallStraightVariation) {
        if (attachedOnTheRight) {
          rs.keepLeft=true;
          rs.rightLanes+=lanes;
        }
 else {
          rs.keepRight=true;
          rs.leftLanes+=lanes;
        }
        rs.speak=rs.speak || (rsSpeakPriority <= speakPriority && speakPriority > 0);
      }
 else {
        if (attachedOnTheRight) {
          rs.addRoadsOnRight++;
        }
 else {
          rs.addRoadsOnLeft++;
        }
      }
    }
  }
  return rs;
}
