{
  int exit=1;
  RouteSegmentResult last=rr;
  RouteSegmentResult firstRoundabout=rr;
  RouteSegmentResult lastRoundabout=rr;
  for (int j=i; j < result.size(); j++) {
    RouteSegmentResult rnext=result.get(j);
    last=rnext;
    if (rnext.getObject().roundabout()) {
      lastRoundabout=rnext;
      boolean plus=rnext.getStartPointIndex() < rnext.getEndPointIndex();
      int k=rnext.getStartPointIndex();
      if (j == i) {
      }
      while (k != rnext.getEndPointIndex()) {
        int attachedRoads=rnext.getAttachedRoutes(k).size();
        if (attachedRoads > 0) {
          exit++;
        }
        k=plus ? k + 1 : k - 1;
      }
    }
 else {
      break;
    }
  }
  TurnType t=TurnType.getExitTurn(exit,0,leftSide);
  float turnAngleBasedOnOutRoads=(float)MapUtils.degreesDiff(last.getBearingBegin(),prev.getBearingEnd());
  float turnAngleBasedOnCircle=(float)-MapUtils.degreesDiff(firstRoundabout.getBearingBegin(),lastRoundabout.getBearingEnd() + 180);
  if (Math.abs(turnAngleBasedOnOutRoads - turnAngleBasedOnCircle) > 180) {
    t.setTurnAngle(turnAngleBasedOnCircle);
  }
 else {
    t.setTurnAngle((turnAngleBasedOnCircle + turnAngleBasedOnOutRoads) / 2);
  }
  return t;
}
