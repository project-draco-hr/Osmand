{
  MergeTurnLaneTurn active=new MergeTurnLaneTurn(currentSegment);
  MergeTurnLaneTurn target=new MergeTurnLaneTurn(nextSegment);
  if (active.activeLen < 2) {
    return false;
  }
  if (target.activeStartIndex == -1) {
    return false;
  }
  boolean changed=false;
  if (target.isActiveTurnMostLeft()) {
    if (target.activeLen <= active.activeLen) {
      active.activeEndIndex-=(active.activeLen - target.activeLen);
      changed=true;
    }
  }
 else   if (target.isActiveTurnMostRight()) {
    if (target.activeLen < active.activeLen) {
      active.activeStartIndex+=(active.activeLen - target.activeLen);
      changed=true;
    }
  }
 else {
    if (target.activeLen < active.activeLen) {
      if (target.originalLanes.length == active.activeLen) {
        active.activeEndIndex=active.activeStartIndex + target.activeEndIndex;
        active.activeStartIndex=active.activeStartIndex + target.activeStartIndex;
        changed=true;
      }
 else {
        float ratio=(active.activeLen - target.activeLen) / 2f;
        active.activeEndIndex=(int)Math.ceil(active.activeEndIndex - ratio);
        active.activeStartIndex=(int)Math.floor(active.activeStartIndex + ratio);
        changed=true;
      }
    }
  }
  if (!changed) {
    return false;
  }
  for (int i=0; i < active.disabledLanes.length; i++) {
    if (i >= active.activeStartIndex && i <= active.activeEndIndex && active.originalLanes[i] % 2 == 1) {
      active.disabledLanes[i]|=1;
    }
  }
  TurnType currentTurn=currentSegment.getTurnType();
  currentTurn.setLanes(active.disabledLanes);
  return true;
}
