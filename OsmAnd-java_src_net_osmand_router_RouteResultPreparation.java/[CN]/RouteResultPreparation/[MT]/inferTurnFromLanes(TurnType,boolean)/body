{
  List<Integer> possibleTurns=new ArrayList<Integer>();
  for (int i=0; i < t.getLanes().length; i++) {
    if ((t.getLanes()[i] & 1) == 0) {
      continue;
    }
    if (possibleTurns.isEmpty()) {
      possibleTurns.add(TurnType.getPrimaryTurn(t.getLanes()[i]));
      if (TurnType.getSecondaryTurn(t.getLanes()[i]) != 0) {
        possibleTurns.add(TurnType.getSecondaryTurn(t.getLanes()[i]));
      }
    }
 else {
      List<Integer> laneTurns=new ArrayList<Integer>();
      laneTurns.add(TurnType.getPrimaryTurn(t.getLanes()[i]));
      if (TurnType.getSecondaryTurn(t.getLanes()[i]) != 0) {
        laneTurns.add(TurnType.getSecondaryTurn(t.getLanes()[i]));
      }
      possibleTurns.retainAll(laneTurns);
      if (possibleTurns.isEmpty()) {
        return t;
      }
    }
  }
  for (int i=0; i < t.getLanes().length; i++) {
    if ((t.getLanes()[i] & 1) == 0 && !possibleTurns.isEmpty()) {
      List<Integer> notLaneTurns=new ArrayList<Integer>();
      notLaneTurns.add(TurnType.getPrimaryTurn(t.getLanes()[i]));
      if (TurnType.getSecondaryTurn(t.getLanes()[i]) != 0) {
        notLaneTurns.add(TurnType.getSecondaryTurn(t.getLanes()[i]));
      }
      possibleTurns.removeAll(notLaneTurns);
    }
  }
  if (new HashSet<Integer>(possibleTurns).size() == 1) {
    TurnType derivedTurnType=TurnType.valueOf(possibleTurns.get(0),leftSide);
    derivedTurnType.setLanes(t.getLanes());
    derivedTurnType.setSkipToSpeak(t.isSkipToSpeak());
    t=derivedTurnType;
  }
  return t;
}
