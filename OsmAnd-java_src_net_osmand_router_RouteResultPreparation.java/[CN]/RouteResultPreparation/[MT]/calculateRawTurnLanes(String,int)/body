{
  String[] splitLaneOptions=turnLanes.split("\\|",-1);
  int[] lanes=new int[splitLaneOptions.length];
  for (int i=0; i < splitLaneOptions.length; i++) {
    String[] laneOptions=splitLaneOptions[i].split(";");
    boolean isTertiaryTurn=false;
    for (int j=0; j < laneOptions.length; j++) {
      int turn;
      if (laneOptions[j].equals("none") || laneOptions[j].equals("through")) {
        turn=TurnType.C;
      }
 else       if (laneOptions[j].equals("slight_right")) {
        turn=TurnType.TSLR;
      }
 else       if (laneOptions[j].equals("slight_left")) {
        turn=TurnType.TSLL;
      }
 else       if (laneOptions[j].equals("right")) {
        turn=TurnType.TR;
      }
 else       if (laneOptions[j].equals("left")) {
        turn=TurnType.TL;
      }
 else       if (laneOptions[j].equals("sharp_right")) {
        turn=TurnType.TSHR;
      }
 else       if (laneOptions[j].equals("sharp_left")) {
        turn=TurnType.TSHL;
      }
 else       if (laneOptions[j].equals("reverse")) {
        turn=TurnType.TU;
      }
 else {
        continue;
      }
      final int primary=TurnType.getPrimaryTurn(lanes[i]);
      if (primary == 0) {
        TurnType.setPrimaryTurnAndReset(lanes,i,turn);
      }
 else {
        if (turn == calcTurnType || (TurnType.isRightTurn(calcTurnType) && TurnType.isRightTurn(turn)) || (TurnType.isLeftTurn(calcTurnType) && TurnType.isLeftTurn(turn))) {
          TurnType.setPrimaryTurnShiftOthers(lanes,i,turn);
        }
 else         if (!is_tertiary_turn) {
          TurnType.setSecondaryTurnShiftOthers(lanes,i,turn);
          is_tertiary_turn=true;
        }
 else {
          TurnType.setTertiaryTurn(lanes,i,turn);
          break;
        }
      }
    }
  }
  return lanes;
}
