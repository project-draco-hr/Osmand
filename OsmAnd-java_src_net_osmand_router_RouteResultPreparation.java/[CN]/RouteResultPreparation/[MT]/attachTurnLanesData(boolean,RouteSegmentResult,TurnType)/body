{
  int lanes=prevSegm.getObject().getLanes();
  String turnLanes=getTurnLanesString(prevSegm);
  if (turnLanes == null) {
    return t;
  }
  String[] splitLaneOptions=turnLanes.split("\\|",-1);
  if (splitLaneOptions.length != lanes) {
    return t;
  }
  if (t.getLanes().length != lanes) {
    List<Integer> sourceLanes=new ArrayList<Integer>();
    int outgoingLanesIndex=0;
    int sourceLanesIndex=0;
    while (outgoingLanesIndex < t.getLanes().length && sourceLanesIndex < lanes) {
      if (splitLaneOptions[sourceLanesIndex].contains(";")) {
        int options=countOccurrences(splitLaneOptions[sourceLanesIndex],';');
        if (options == 1) {
          if (outgoingLanesIndex + 1 >= t.getLanes().length) {
            return t;
          }
          int usability=t.getLanes()[outgoingLanesIndex] | t.getLanes()[outgoingLanesIndex + 1];
          sourceLanes.add(usability);
          outgoingLanesIndex+=2;
          sourceLanesIndex++;
        }
 else {
          return t;
        }
      }
 else {
        sourceLanes.add(t.getLanes()[outgoingLanesIndex]);
        outgoingLanesIndex++;
        sourceLanesIndex++;
      }
    }
    int[] newLanes=new int[sourceLanes.size()];
    for (int i=0; i < sourceLanes.size(); i++) {
      newLanes[i]=sourceLanes.get(i);
    }
    t.setLanes(newLanes);
  }
  assignTurns(splitLaneOptions,t);
  t=inferTurnFromLanes(t,leftSide);
  return t;
}
