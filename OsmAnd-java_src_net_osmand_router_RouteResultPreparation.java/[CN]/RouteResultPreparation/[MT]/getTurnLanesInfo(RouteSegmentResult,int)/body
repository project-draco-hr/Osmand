{
  String turnLanes=getTurnLanesString(prevSegm);
  int[] lanesArray;
  if (turnLanes == null) {
    if (prevSegm.getTurnType() != null && prevSegm.getTurnType().getLanes() != null && prevSegm.getDistance() < 100) {
      int[] lns=prevSegm.getTurnType().getLanes();
      TIntArrayList lst=new TIntArrayList();
      for (int i=0; i < lns.length; i++) {
        if (lns[i] % 2 == 1) {
          lst.add((lns[i] >> 1) << 1);
        }
      }
      if (lst.isEmpty()) {
        return null;
      }
      lanesArray=lst.toArray();
    }
 else {
      return null;
    }
  }
 else {
    lanesArray=calculateRawTurnLanes(turnLanes,mainTurnType);
  }
  boolean isSet=setAllowedLanes(mainTurnType,lanesArray);
  if (!isSet && lanesArray.length > 0) {
    boolean leftTurn=TurnType.isLeftTurn(mainTurnType);
    int ind=leftTurn ? 0 : lanesArray.length - 1;
    int primaryTurn=TurnType.getPrimaryTurn(lanesArray[ind]);
    final int st=TurnType.getSecondaryTurn(lanesArray[ind]);
    if (leftTurn) {
      if (!TurnType.isLeftTurn(primaryTurn)) {
        TurnType.setPrimaryTurnAndReset(lanesArray,ind,TurnType.TL);
        TurnType.setSecondaryTurn(lanesArray,ind,primaryTurn);
        TurnType.setTertiaryTurn(lanesArray,ind,st);
        primaryTurn=TurnType.TL;
        lanesArray[ind]|=1;
      }
    }
 else {
      if (!TurnType.isRightTurn(primaryTurn)) {
        TurnType.setPrimaryTurnAndReset(lanesArray,ind,TurnType.TR);
        TurnType.setSecondaryTurn(lanesArray,ind,primaryTurn);
        TurnType.setTertiaryTurn(lanesArray,ind,st);
        primaryTurn=TurnType.TR;
        lanesArray[ind]|=1;
      }
    }
    setAllowedLanes(primaryTurn,lanesArray);
  }
  return lanesArray;
}
