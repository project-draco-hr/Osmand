{
  try {
    String u=SITE_API + "api/0.6/map?bbox=" + leftLon+ ","+ bottomLat+ ","+ righLon+ ","+ topLat;
    URL url=new URL(u);
    log.info("Start loading poi : " + u);
    InputStream is=url.openStream();
    OsmBaseStorage st=new OsmBaseStorage();
    final Map<Amenity,Entity> amen=new LinkedHashMap<Amenity,Entity>();
    final List<Amenity> tempList=new ArrayList<Amenity>();
    final MapRenderingTypes def=MapRenderingTypes.getDefault();
    st.getFilters().add(new IOsmStorageFilter(){
      @Override public boolean acceptEntityToLoad(      OsmBaseStorage storage,      Entity.EntityId id,      Entity entity){
        EntityParser.parseAmenities(def,entity,tempList);
        if (!tempList.isEmpty()) {
          for (          Amenity a : tempList) {
            amen.put(a,entity);
          }
          tempList.clear();
          return true;
        }
        return entity instanceof Node;
      }
    }
);
    st.parseOSM(is,null,null,false);
    for (    Amenity am : amen.keySet()) {
      EntityParser.parseAmenity(am,amen.get(am));
      if (am.getEnName().length() == 0) {
        am.setEnName(Junidecode.unidecode(am.getName()));
      }
      amenities.add(am);
    }
    log.info("Loaded " + amenities.size() + " amenities");
  }
 catch (  IOException e) {
    log.error("Loading nodes failed",e);
    return false;
  }
catch (  SAXException e) {
    log.error("Loading nodes failed",e);
    return false;
  }
  return true;
}
