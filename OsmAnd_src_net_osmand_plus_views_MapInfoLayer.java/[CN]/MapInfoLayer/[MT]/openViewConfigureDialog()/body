{
  final OsmandSettings settings=view.getSettings();
  final ArrayList<Object> list=new ArrayList<Object>();
  String appMode=settings.getApplicationMode().toHumanString(view.getContext());
  list.add(map.getString(R.string.map_widget_reset) + " [" + appMode+ "] ");
  list.add(map.getString(R.string.map_widget_top_stack));
  list.addAll(mapInfoControls.getTop());
  list.add(map.getString(R.string.map_widget_right_stack));
  list.addAll(mapInfoControls.getRight());
  list.add(map.getString(R.string.map_widget_left_stack));
  list.addAll(mapInfoControls.getLeft());
  Set<MapInfoControlRegInfo> widgets=mapInfoControls.getAppearanceWidgets();
  Set<String> cats=getSpecificVisibleCategories(widgets);
  list.add(map.getString(R.string.map_widget_appearance));
  fillAppearanceWidgets(widgets,null,list);
  for (  String cat : cats) {
    list.add(cat);
    fillAppearanceWidgets(widgets,cat,list);
  }
  final ApplicationMode mode=settings.getApplicationMode();
  ListAdapter listAdapter=new ArrayAdapter<Object>(map,R.layout.layers_list_activity_item,R.id.title,list){
    @Override public View getView(    final int position,    View convertView,    ViewGroup parent){
      View v=convertView;
      if (v == null) {
        v=map.getLayoutInflater().inflate(R.layout.layers_list_activity_item,null);
      }
      final TextView tv=(TextView)v.findViewById(R.id.title);
      final CheckBox ch=((CheckBox)v.findViewById(R.id.check_item));
      Object o=list.get(position);
      if (o instanceof MapInfoControlRegInfo) {
        final MapInfoControlRegInfo mi=(MapInfoControlRegInfo)o;
        String s=mi.visibleCollapsed(mode) ? " - " : "  ";
        if (mi.message != null) {
          tv.setText(s + mi.message + s);
        }
 else {
          tv.setText(s + map.getString(mi.messageId) + s);
        }
        if (mi.drawable != 0) {
          tv.setPadding((int)(12 * scaleCoefficient),0,0,0);
          tv.setCompoundDrawablesWithIntrinsicBounds(mi.drawable,0,0,0);
        }
 else {
          tv.setCompoundDrawablesWithIntrinsicBounds(0,0,0,0);
          tv.setPadding((int)(30 * scaleCoefficient),0,0,0);
        }
        final boolean selecteable=mi.selecteable();
        ch.setOnCheckedChangeListener(null);
        if (!mi.selecteable()) {
          ch.setVisibility(View.INVISIBLE);
        }
 else {
          boolean check=mi.visibleCollapsed(mode) || mi.visible(mode);
          ch.setChecked(check);
          ch.setVisibility(View.VISIBLE);
        }
        ch.setOnCheckedChangeListener(new OnCheckedChangeListener(){
          @Override public void onCheckedChanged(          CompoundButton buttonView,          boolean isChecked){
            mapInfoControls.changeVisibility(mi);
            if (selecteable) {
              ch.setChecked(mi.visible(mode) || mi.visibleCollapsed(mode));
            }
            String s=mi.visibleCollapsed(mode) ? " - " : "  ";
            if (mi.message != null) {
              tv.setText(s + mi.message + s);
            }
 else {
              tv.setText(s + map.getString(mi.messageId) + s);
            }
            recreateControls();
          }
        }
);
      }
 else {
        tv.setText(o.toString());
        tv.setPadding((int)(5 * scaleCoefficient),0,0,0);
        if (position == 0) {
          tv.setCompoundDrawablesWithIntrinsicBounds(R.drawable.widget_reset_to_default,0,0,0);
        }
 else {
          tv.setCompoundDrawablesWithIntrinsicBounds(0,0,0,0);
        }
        ch.setVisibility(View.INVISIBLE);
      }
      return v;
    }
  }
;
  Builder b=new AlertDialog.Builder(map);
  b.setAdapter(listAdapter,new OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      Object o=list.get(which);
      if (o instanceof MapInfoControlRegInfo) {
        final MapInfoControlRegInfo mi=(MapInfoControlRegInfo)o;
        final boolean selecteable=mi.selecteable();
        boolean check=mi.visibleCollapsed(mode) || mi.visible(mode);
        if (check || selecteable) {
          mapInfoControls.changeVisibility(mi);
        }
        recreateControls();
      }
 else       if (o.toString().equals(map.getString(R.string.map_widget_reset))) {
        mapInfoControls.resetToDefault();
        recreateControls();
      }
    }
  }
);
  final AlertDialog dlg=b.create();
  dlg.setCanceledOnTouchOutside(true);
  dlg.show();
}
