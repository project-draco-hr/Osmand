{
  final RoutingHelper routingHelper=routeLayer.getHelper();
  final NextTurnInfoControl nextTurnInfo=new NextTurnInfoControl(map,paintSmallText,paintSmallSubText,true){
    NextDirectionInfo calc1=new NextDirectionInfo();
    @Override public boolean updateInfo(){
      boolean visible=false;
      if (routeLayer != null && routingHelper.isRouteCalculated() && routingHelper.isFollowingMode()) {
        boolean uturnWhenPossible=routingHelper.makeUturnWhenPossible();
        NextDirectionInfo r=routingHelper.getNextRouteDirectionInfo(calc1,true);
        if (!uturnWhenPossible) {
          if (r != null) {
            r=routingHelper.getNextRouteDirectionInfo(calc1,true);
            if (r != null) {
              r=routingHelper.getNextRouteDirectionInfoAfter(r,calc1,true);
            }
          }
        }
        if (r != null && r.distanceTo > 0) {
          visible=true;
          if (r == null || r.directionInfo == null) {
            if (turnType != null) {
              turnType=null;
              invalidate();
            }
          }
 else           if (!Algoritms.objectEquals(turnType,r.directionInfo.getTurnType())) {
            turnType=r.directionInfo.getTurnType();
            TurnPathHelper.calcTurnPath(pathForTurn,turnType,pathTransform);
            invalidate();
            requestLayout();
          }
          if (distChanged(r.distanceTo,nextTurnDirection)) {
            invalidate();
            requestLayout();
            nextTurnDirection=r.distanceTo;
          }
          int imminent=r.imminent;
          if (turnImminent != imminent) {
            turnImminent=imminent;
            invalidate();
          }
        }
      }
      updateVisibility(visible);
      return true;
    }
  }
;
  nextTurnInfo.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      view.refreshMap();
    }
  }
);
  return nextTurnInfo;
}
