{
  SharedPreferences prefs=getSharedPreferences(OsmandSettings.SHARED_PREFERENCES_NAME,Context.MODE_WORLD_READABLE);
  Editor edit=prefs.edit();
  BooleanPreference p=null;
  for (  BooleanPreference b : booleanPreferences) {
    if (b.getPref() == preference) {
      p=b;
      break;
    }
  }
  if (p != null) {
    edit.putBoolean(p.getId(),(Boolean)newValue);
    if (p.getId() == OsmandSettings.SHOW_POI_OVER_MAP && ((Boolean)newValue)) {
      edit.putString(OsmandSettings.SELECTED_POI_FILTER_FOR_MAP,PoiFiltersHelper.getOsmDefinedFilterId(null));
    }
    edit.commit();
  }
 else   if (preference == applicationMode) {
    ApplicationMode old=OsmandSettings.getApplicationMode(prefs);
    edit.putString(OsmandSettings.APPLICATION_MODE,(String)newValue);
    setAppMode(ApplicationMode.valueOf(newValue.toString()),edit,(OsmandApplication)getApplication(),old);
    edit.commit();
    updateAllSettings();
  }
 else   if (preference == daynightMode) {
    edit.putString(OsmandSettings.DAYNIGHT_MODE,(String)newValue);
    ((OsmandApplication)getApplication()).getDaynightHelper().setDayNightMode(DayNightMode.valueOf(newValue.toString()));
    edit.commit();
  }
 else   if (preference == mapScreenOrientation) {
    edit.putInt(OsmandSettings.MAP_SCREEN_ORIENTATION,Integer.parseInt(newValue.toString()));
    edit.commit();
  }
 else   if (preference == saveTrackInterval) {
    edit.putInt(OsmandSettings.SAVE_TRACK_INTERVAL,Integer.parseInt(newValue.toString()));
    edit.commit();
  }
 else   if (preference == userPassword) {
    edit.putString(OsmandSettings.USER_PASSWORD,(String)newValue);
    edit.commit();
  }
 else   if (preference == useInternetToDownload) {
    OsmandSettings.setUseInternetToDownloadTiles((Boolean)newValue,edit);
    edit.commit();
  }
 else   if (preference == userName) {
    edit.putString(OsmandSettings.USER_NAME,(String)newValue);
    edit.commit();
  }
 else   if (preference == positionOnMap) {
    edit.putInt(OsmandSettings.POSITION_ON_MAP,positionOnMap.findIndexOfValue((String)newValue));
    edit.commit();
  }
 else   if (preference == maxLevelToDownload) {
    edit.putInt(OsmandSettings.MAX_LEVEL_TO_DOWNLOAD_TILE,Integer.parseInt((String)newValue));
    edit.commit();
  }
 else   if (preference == routeServiceInterval) {
    edit.putInt(OsmandSettings.SERVICE_OFF_INTERVAL,Integer.parseInt((String)newValue) * 60000);
    edit.commit();
  }
 else   if (preference == routeServiceWaitInterval) {
    edit.putInt(OsmandSettings.SERVICE_OFF_WAIT_INTERVAL,Integer.parseInt((String)newValue) * 1000);
    edit.commit();
  }
 else   if (preference == rotateMap) {
    edit.putInt(OsmandSettings.ROTATE_MAP,Integer.parseInt((String)newValue));
    edit.commit();
  }
 else   if (preference == routeServiceProvider) {
    edit.putString(OsmandSettings.SERVICE_OFF_PROVIDER,(String)newValue);
    edit.commit();
  }
 else   if (preference == routeServiceEnabled) {
    Intent serviceIntent=new Intent(this,NavigationService.class);
    if ((Boolean)newValue) {
      ComponentName name=startService(serviceIntent);
      if (name == null) {
        routeServiceEnabled.setChecked(OsmandSettings.getServiceOffEnabled(prefs));
      }
    }
 else {
      if (!stopService(serviceIntent)) {
        routeServiceEnabled.setChecked(OsmandSettings.getServiceOffEnabled(prefs));
      }
    }
  }
 else   if (preference == routerPreference) {
    RouteService s=null;
    for (    RouteService r : RouteService.values()) {
      if (r.getName().equals(newValue)) {
        s=r;
        break;
      }
    }
    if (s != null) {
      edit.putInt(OsmandSettings.ROUTER_SERVICE,s.ordinal());
    }
    edit.commit();
  }
 else   if (preference == rendererPreference) {
    BaseOsmandRender loaded=RendererRegistry.getRegistry().getRenderer((String)newValue);
    if (loaded == null) {
      Toast.makeText(this,R.string.renderer_load_exception,Toast.LENGTH_SHORT).show();
    }
 else {
      RendererRegistry.getRegistry().setCurrentSelectedRender(loaded);
      edit.putString(OsmandSettings.RENDERER,(String)newValue);
      Toast.makeText(this,R.string.renderer_load_sucess,Toast.LENGTH_SHORT).show();
      ((OsmandApplication)getApplication()).getResourceManager().getRenderer().clearCache();
    }
    edit.commit();
  }
 else   if (preference == voicePreference) {
    int i=voicePreference.findIndexOfValue((String)newValue);
    if (i == 0) {
      edit.putString(OsmandSettings.VOICE_PROVIDER,null);
    }
 else {
      edit.putString(OsmandSettings.VOICE_PROVIDER,(String)newValue);
    }
    edit.commit();
    ((OsmandApplication)getApplication()).initCommandPlayer();
  }
 else   if (preference == tileSourcePreference) {
    if (VECTOR_MAP.equals((String)newValue)) {
      edit.putBoolean(OsmandSettings.MAP_VECTOR_DATA,true);
    }
 else {
      edit.putString(OsmandSettings.MAP_TILE_SOURCES,(String)newValue);
      edit.putBoolean(OsmandSettings.MAP_VECTOR_DATA,false);
    }
    edit.commit();
    String summary=tileSourcePreference.getSummary().toString();
    if (summary.lastIndexOf(':') != -1) {
      summary=summary.substring(0,summary.lastIndexOf(':') + 1);
    }
    summary+=" " + (OsmandSettings.isUsingMapVectorData(prefs) ? getString(R.string.vector_data) : OsmandSettings.getMapTileSourceName(prefs));
    tileSourcePreference.setSummary(summary);
  }
  return true;
}
