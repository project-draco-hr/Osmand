{
  File f=new File(path);
  InputStream stream=new FileInputStream(f);
  int i=f.getName().indexOf('.');
  if (regionName == null) {
    regionName=Algoritms.capitalizeFirstLetterAndLowercase(f.getName().substring(0,i));
  }
  InputStream streamFile=stream;
  long st=System.currentTimeMillis();
  if (path.endsWith(".bz2")) {
    if (stream.read() != 'B' || stream.read() != 'Z') {
      throw new RuntimeException("The source stream must start with the characters BZ if it is to be read as a BZip2 stream.");
    }
 else {
      stream=new CBZip2InputStream(stream);
    }
  }
  if (progress != null) {
    progress.startTask("Loading file " + path,-1);
  }
  cities.clear();
  cityManager.clear();
  postalCodeRelations.clear();
  OsmBaseStorage storage=new OsmBaseStorage();
  storage.setSupressWarnings(DataExtractionSettings.getSettings().isSupressWarningsForDuplicatedId());
  if (addFilter != null) {
    storage.getFilters().add(addFilter);
  }
  try {
    Class.forName("org.sqlite.JDBC");
  }
 catch (  ClassNotFoundException e) {
    log.error("Illegal configuration",e);
    throw new IllegalStateException(e);
  }
  if (indexMap) {
    dbFile=new File(workingDir,getMapFileName());
  }
 else {
    dbFile=new File(workingDir,TEMP_NODES_DB);
  }
  if (dbFile.exists()) {
    dbFile.delete();
  }
  dbConn=DriverManager.getConnection("jdbc:sqlite:" + dbFile.getAbsolutePath());
  NewDataExtractionOsmFilter filter=new NewDataExtractionOsmFilter();
  try {
    progress.setGeneralProgress("[50 of 100]");
    filter.initDatabase();
    storage.getFilters().add(filter);
    storage.parseOSM(stream,progress,streamFile,false);
    filter.finishLoading();
    if (log.isInfoEnabled()) {
      log.info("File parsed : " + (System.currentTimeMillis() - st));
    }
    progress.finishTask();
  }
  finally {
    if (log.isInfoEnabled()) {
      log.info("File indexed : " + (System.currentTimeMillis() - st));
    }
  }
  progress.setGeneralProgress("[90 of 100]");
  pselectNode=dbConn.prepareStatement("select * from node where id = ?");
  pselectWay=dbConn.prepareStatement("select * from ways where id = ?");
  pselectRelation=dbConn.prepareStatement("select * from relations where id = ?");
  pselectTags=dbConn.prepareStatement("select key, value from tags where id = ? and type = ?");
  if (indexPOI) {
    poiIndexFile=new File(workingDir,getPoiFileName());
    if (poiIndexFile.exists()) {
      poiIndexFile.delete();
    }
    poiIndexFile.getParentFile().mkdirs();
    poiConnection=DriverManager.getConnection("jdbc:sqlite:" + poiIndexFile.getAbsolutePath());
    poiConnection.setAutoCommit(false);
    DataIndexWriter.createPoiIndexStructure(poiConnection);
    poiPreparedStatement=DataIndexWriter.createStatementAmenityInsert(poiConnection);
    pStatements.put(poiPreparedStatement,0);
  }
  if (indexTransport) {
    transportIndexFile=new File(workingDir,getTransportFileName());
    if (transportIndexFile.exists()) {
      transportIndexFile.delete();
    }
    transportIndexFile.getParentFile().mkdirs();
    transportConnection=DriverManager.getConnection("jdbc:sqlite:" + transportIndexFile.getAbsolutePath());
    DataIndexWriter.createTransportIndexStructure(transportConnection);
    transRouteStat=transportConnection.prepareStatement(IndexConstants.generatePrepareStatementToInsert(IndexTransportRoute.getTable(),IndexTransportRoute.values().length));
    transRouteStopsStat=transportConnection.prepareStatement(IndexConstants.generatePrepareStatementToInsert(IndexTransportRouteStop.getTable(),IndexTransportRouteStop.values().length));
    transStopsStat=transportConnection.prepareStatement(IndexConstants.generatePrepareStatementToInsert(IndexTransportStop.getTable(),IndexTransportStop.values().length));
    pStatements.put(transRouteStat,0);
    pStatements.put(transRouteStopsStat,0);
    pStatements.put(transStopsStat,0);
    transportConnection.setAutoCommit(false);
  }
  if (indexAddress) {
    addressIndexFile=new File(workingDir,getAddressFileName());
    if (addressIndexFile.exists()) {
      addressIndexFile.delete();
    }
    addressIndexFile.getParentFile().mkdirs();
    addressConnection=DriverManager.getConnection("jdbc:sqlite:" + addressIndexFile.getAbsolutePath());
    DataIndexWriter.createAddressIndexStructure(addressConnection);
    addressCityStat=addressConnection.prepareStatement(IndexConstants.generatePrepareStatementToInsert(IndexCityTable.getTable(),IndexCityTable.values().length));
    addressStreetStat=addressConnection.prepareStatement(IndexConstants.generatePrepareStatementToInsert(IndexStreetTable.getTable(),IndexStreetTable.values().length));
    addressSearchStreetStat=addressConnection.prepareStatement("SELECT " + IndexStreetTable.ID.name() + " FROM "+ IndexStreetTable.getTable()+ " WHERE ? = "+ IndexStreetTable.CITY.name()+ " AND ? ="+ IndexStreetTable.NAME.name());
    addressSearchBuildingStat=addressConnection.prepareStatement("SELECT " + IndexBuildingTable.ID.name() + " FROM "+ IndexBuildingTable.getTable()+ " WHERE ? = "+ IndexBuildingTable.ID.name());
    addressSearchStreetNodeStat=addressConnection.prepareStatement("SELECT " + IndexStreetNodeTable.WAY.name() + " FROM "+ IndexStreetNodeTable.getTable()+ " WHERE ? = "+ IndexStreetNodeTable.WAY.name());
    addressBuildingStat=addressConnection.prepareStatement(IndexConstants.generatePrepareStatementToInsert(IndexBuildingTable.getTable(),IndexBuildingTable.values().length));
    addressStreetNodeStat=addressConnection.prepareStatement(IndexConstants.generatePrepareStatementToInsert(IndexStreetNodeTable.getTable(),IndexStreetNodeTable.values().length));
    pStatements.put(addressCityStat,0);
    pStatements.put(addressStreetStat,0);
    pStatements.put(addressStreetNodeStat,0);
    pStatements.put(addressBuildingStat,0);
    pStatements.put(addressSearchBuildingStat,0);
    pStatements.put(addressSearchStreetNodeStat,0);
    pStatements.put(addressSearchStreetStat,0);
    addressConnection.setAutoCommit(false);
  }
  if (normalizeStreets) {
    normalizeDefaultSuffixes=DataExtractionSettings.getSettings().getDefaultSuffixesToNormalizeStreets();
    normalizeSuffixes=DataExtractionSettings.getSettings().getSuffixesToNormalizeStreets();
  }
  if (indexAddress) {
    for (    City c : cities.values()) {
      DataIndexWriter.writeCity(addressCityStat,pStatements,c,BATCH_SIZE);
    }
    if (pStatements.get(addressCityStat) > 0) {
      addressCityStat.executeBatch();
      pStatements.put(addressCityStat,0);
      addressConnection.commit();
    }
  }
  if (indexAddress) {
    iterateOverEntities(progress,EntityType.RELATION,filter.getAllRelations(),STEP_ADDRESS_RELATIONS);
    if (pStatements.get(addressBuildingStat) > 0) {
      addressBuildingStat.executeBatch();
      pStatements.put(addressBuildingStat,0);
    }
    if (pStatements.get(addressStreetNodeStat) > 0) {
      addressStreetNodeStat.executeBatch();
      pStatements.put(addressStreetNodeStat,0);
    }
    addressConnection.commit();
  }
  iterateOverAllEntities(progress,filter,STEP_MAIN);
  if (indexAddress && !postalCodeRelations.isEmpty()) {
    if (pStatements.get(addressBuildingStat) > 0) {
      addressBuildingStat.executeBatch();
      pStatements.put(addressBuildingStat,0);
      addressConnection.commit();
    }
    progress.startTask("Registering postcodes...",-1);
    PreparedStatement pstat=addressConnection.prepareStatement("UPDATE " + IndexBuildingTable.getTable() + " SET "+ IndexBuildingTable.POSTCODE.name()+ " = ? WHERE "+ IndexBuildingTable.ID.name()+ " = ?");
    pStatements.put(pstat,0);
    for (    Relation r : postalCodeRelations) {
      String tag=r.getTag(OSMTagKey.POSTAL_CODE);
      for (      EntityId l : r.getMemberIds()) {
        pstat.setString(1,tag);
        pstat.setLong(2,l.getId());
        DataIndexWriter.addBatch(pStatements,pstat,BATCH_SIZE);
      }
    }
  }
  try {
    if (pselectNode != null) {
      pselectNode.close();
    }
    if (pselectWay != null) {
      pselectWay.close();
    }
    if (pselectRelation != null) {
      pselectRelation.close();
    }
    if (pselectTags != null) {
      pselectTags.close();
    }
    for (    PreparedStatement p : pStatements.keySet()) {
      if (pStatements.get(p) > 0) {
        p.executeBatch();
      }
      p.close();
    }
    if (poiConnection != null) {
      poiConnection.commit();
      poiConnection.close();
      if (lastModifiedDate != null) {
        poiIndexFile.setLastModified(lastModifiedDate);
      }
    }
    if (transportConnection != null) {
      transportConnection.commit();
      transportConnection.close();
      if (lastModifiedDate != null) {
        transportIndexFile.setLastModified(lastModifiedDate);
      }
    }
    if (addressConnection != null) {
      addressConnection.commit();
      addressConnection.close();
      if (lastModifiedDate != null) {
        addressIndexFile.setLastModified(lastModifiedDate);
      }
    }
    dbConn.close();
  }
 catch (  SQLException e) {
  }
}
