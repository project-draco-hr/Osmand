{
  try {
    final ProgressDialog dlg=new ProgressDialog(frame,Messages.getString("OsmExtractionUI.LOADING_OSM_FILE"));
    dlg.setRunnable(new Runnable(){
      @Override public void run(){
        File dir=DataExtractionSettings.getSettings().getDefaultWorkingDir();
        IndexCreator creator=new IndexCreator(dir);
        try {
          creator.setIndexAddress(buildAddressIndex.isSelected());
          creator.setIndexPOI(buildPoiIndex.isSelected());
          creator.setNormalizeStreets(normalizingStreets.isSelected());
          creator.setIndexTransport(buildTransportIndex.isSelected());
          creator.setIndexMap(buildMapIndex.isSelected());
          creator.setCityAdminLevel(DataExtractionSettings.getSettings().getCityAdminLevel());
          String fn=DataExtractionSettings.getSettings().getMapRenderingTypesFile();
          MapRenderingTypes types;
          if (fn == null || fn.length() == 0) {
            types=MapRenderingTypes.getDefault();
          }
 else {
            types=new MapRenderingTypes(fn);
          }
          RTree.clearCache();
          int smoothness=0;
          try {
            smoothness=Integer.parseInt(DataExtractionSettings.getSettings().getLineSmoothness());
          }
 catch (          NumberFormatException e) {
          }
          creator.setZoomWaySmothness(smoothness);
          creator.generateIndexes(f,dlg,filter,DataExtractionSettings.getSettings().getMapZooms(),types);
        }
 catch (        IOException e) {
          throw new IllegalArgumentException(e);
        }
catch (        SAXException e) {
          throw new IllegalStateException(e);
        }
catch (        SQLException e) {
          throw new IllegalStateException(e);
        }
catch (        InterruptedException e) {
          throw new IllegalStateException(e);
        }
        regionName=creator.getRegionName();
        StringBuilder msg=new StringBuilder();
        msg.append(Messages.getString("OsmExtractionUI.INDEXES_FOR")).append(regionName).append(" : ");
        boolean comma=false;
        if (buildMapIndex.isSelected()) {
          if (comma)           msg.append(", ");
          comma=true;
          msg.append(Messages.getString("OsmExtractionUI.MAP"));
        }
        if (buildPoiIndex.isSelected()) {
          if (comma)           msg.append(", ");
          comma=true;
          msg.append(Messages.getString("OsmExtractionUI.POI"));
        }
        if (buildAddressIndex.isSelected()) {
          if (comma)           msg.append(", ");
          comma=true;
          msg.append(Messages.getString("OsmExtractionUI.ADDRESS"));
        }
        if (buildTransportIndex.isSelected()) {
          if (comma)           msg.append(", ");
          comma=true;
          msg.append(Messages.getString("OsmExtractionUI.TRANSPORT"));
        }
        msg.append(MessageFormat.format(Messages.getString("OsmExtractionUI.WERE_SUCCESFULLY_CREATED"),dir.getAbsolutePath()));
        JOptionPane pane=new JOptionPane(msg);
        JDialog dialog=pane.createDialog(frame,Messages.getString("OsmExtractionUI.GENERATION_DATA"));
        dialog.setVisible(true);
      }
    }
);
    dlg.run();
    frame.setTitle(Messages.getString("OsmExtractionUI.OSMAND_MAP_CREATOR_FILE") + f.getName());
  }
 catch (  InterruptedException e1) {
    log.error("Interrupted",e1);
  }
catch (  InvocationTargetException e1) {
    ExceptionHandler.handle("Exception during operation",e1.getCause());
  }
}
