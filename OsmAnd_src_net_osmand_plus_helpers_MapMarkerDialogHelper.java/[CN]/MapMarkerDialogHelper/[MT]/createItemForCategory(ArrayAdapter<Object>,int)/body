{
  View v=mapActivity.getLayoutInflater().inflate(R.layout.waypoint_header,null);
  v.findViewById(R.id.check_item).setVisibility(View.GONE);
  v.findViewById(R.id.ProgressBar).setVisibility(View.GONE);
  if (type == MARKERS_HISTORY) {
    final Button btn=(Button)v.findViewById(R.id.header_button);
    btn.setTextColor(!nightMode ? mapActivity.getResources().getColor(R.color.map_widget_blue) : mapActivity.getResources().getColor(R.color.osmand_orange));
    btn.setText(mapActivity.getString(R.string.shared_string_clear));
    btn.setVisibility(View.VISIBLE);
    btn.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        AlertDialog.Builder builder=new AlertDialog.Builder(mapActivity);
        builder.setMessage(mapActivity.getString(R.string.clear_markers_history_q)).setPositiveButton(R.string.shared_string_yes,new DialogInterface.OnClickListener(){
          @Override public void onClick(          DialogInterface dialog,          int which){
            listAdapter.notifyDataSetInvalidated();
            markersHelper.removeMarkersHistory();
            if (markersHelper.getActiveMapMarkers().size() == 0) {
              mapActivity.getDashboard().hideDashboard();
            }
 else             if (helperCallbacks != null) {
              helperCallbacks.reloadAdapter();
            }
 else {
              reloadListAdapter(listAdapter);
            }
          }
        }
).setNegativeButton(R.string.shared_string_no,null).show();
      }
    }
);
  }
 else   if (type == ACTIVE_MARKERS) {
    if (selectionMode) {
      final Button btn=(Button)v.findViewById(R.id.header_button);
      btn.setTextColor(!nightMode ? mapActivity.getResources().getColor(R.color.map_widget_blue) : mapActivity.getResources().getColor(R.color.osmand_orange));
      if (allSelected) {
        btn.setText(mapActivity.getString(R.string.shared_string_deselect_all));
      }
 else {
        btn.setText(mapActivity.getString(R.string.shared_string_select_all));
      }
      btn.setVisibility(View.VISIBLE);
      btn.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          List<MapMarker> markers=markersHelper.getActiveMapMarkers();
          for (          MapMarker marker : markers) {
            marker.selected=!allSelected;
          }
          allSelected=!allSelected;
          if (helperCallbacks != null) {
            helperCallbacks.reloadAdapter();
          }
 else {
            reloadListAdapter(listAdapter);
          }
        }
      }
);
    }
 else {
      final ImageButton btn=(ImageButton)v.findViewById(R.id.image_button);
      btn.setImageDrawable(app.getIconsCache().getContentIcon(R.drawable.ic_overflow_menu_white,!nightMode));
      btn.setVisibility(View.VISIBLE);
      btn.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          IconsCache iconsCache=app.getIconsCache();
          final PopupMenu optionsMenu=new PopupMenu(mapActivity,v);
          DirectionsDialogs.setupPopUpMenuIcon(optionsMenu);
          MenuItem item;
          item=optionsMenu.getMenu().add(R.string.shared_string_clear).setIcon(iconsCache.getContentIcon(R.drawable.ic_action_delete_dark,!nightMode));
          item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
            @Override public boolean onMenuItemClick(            MenuItem item){
              AlertDialog.Builder builder=new AlertDialog.Builder(mapActivity);
              builder.setMessage(mapActivity.getString(R.string.clear_active_markers_q)).setPositiveButton(R.string.shared_string_yes,new DialogInterface.OnClickListener(){
                @Override public void onClick(                DialogInterface dialog,                int which){
                  listAdapter.notifyDataSetInvalidated();
                  markersHelper.removeActiveMarkers();
                  if (markersHelper.getMapMarkersHistory().size() == 0) {
                    mapActivity.getDashboard().hideDashboard();
                  }
 else                   if (helperCallbacks != null) {
                    helperCallbacks.reloadAdapter();
                  }
 else {
                    reloadListAdapter(listAdapter);
                  }
                }
              }
).setNegativeButton(R.string.shared_string_no,null).show();
              return true;
            }
          }
);
          if (!sorted) {
            item=optionsMenu.getMenu().add(R.string.shared_string_reverse_order).setIcon(iconsCache.getContentIcon(R.drawable.ic_action_undo_dark,!nightMode));
            item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
              @Override public boolean onMenuItemClick(              MenuItem item){
                markersHelper.reverseActiveMarkersOrder();
                if (helperCallbacks != null) {
                  helperCallbacks.reloadAdapter();
                }
 else {
                  reloadListAdapter(listAdapter);
                }
                return true;
              }
            }
);
          }
          item=optionsMenu.getMenu().add(R.string.shared_string_save_as_gpx).setIcon(iconsCache.getContentIcon(R.drawable.ic_action_save,!nightMode));
          item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
            @Override public boolean onMenuItemClick(            MenuItem item){
              generateGPX(markersHelper.getActiveMapMarkers());
              return true;
            }
          }
);
          optionsMenu.show();
        }
      }
);
    }
  }
  TextView tv=(TextView)v.findViewById(R.id.header_text);
  AndroidUtils.setTextPrimaryColor(mapActivity,tv,nightMode);
  tv.setText(getHeader(type));
  return v;
}
