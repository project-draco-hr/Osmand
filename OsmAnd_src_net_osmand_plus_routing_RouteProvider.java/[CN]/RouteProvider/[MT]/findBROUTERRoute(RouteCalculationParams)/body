{
  int numpoints=2 + (params.intermediates != null ? params.intermediates.size() : 0);
  double[] lats=new double[numpoints];
  double[] lons=new double[numpoints];
  int index=0;
  String mode;
  lats[index]=params.start.getLatitude();
  lons[index]=params.start.getLongitude();
  index++;
  if (params.intermediates != null && params.intermediates.size() > 0) {
    for (    LatLon il : params.intermediates) {
      lats[index]=il.getLatitude();
      lons[index]=il.getLongitude();
      index++;
    }
  }
  lats[index]=params.end.getLatitude();
  lons[index]=params.end.getLongitude();
  if (ApplicationMode.PEDESTRIAN == params.mode) {
    mode="foot";
  }
 else   if (ApplicationMode.BICYCLE == params.mode) {
    mode="bicycle";
  }
 else {
    mode="motorcar";
  }
  Bundle bpars=new Bundle();
  bpars.putDoubleArray("lats",lats);
  bpars.putDoubleArray("lons",lons);
  bpars.putString("fast",params.fast ? "1" : "0");
  bpars.putString("v",mode);
  bpars.putString("trackFormat","kml");
  OsmandApplication ctx=(OsmandApplication)params.ctx;
  List<Location> res=new ArrayList<Location>();
  IBRouterService brouterService=ctx.getBRouterService();
  if (brouterService == null) {
    return new RouteCalculationResult("BRouter service is not available");
  }
  try {
    String kmlMessage=brouterService.getTrackFromParams(bpars);
    if (kmlMessage == null)     kmlMessage="no result from brouter";
    if (!kmlMessage.startsWith("<")) {
      return new RouteCalculationResult(kmlMessage);
    }
    DocumentBuilder dom=DocumentBuilderFactory.newInstance().newDocumentBuilder();
    Document doc=dom.parse(new InputSource(new StringReader(kmlMessage)));
    NodeList list=doc.getElementsByTagName("coordinates");
    for (int i=0; i < list.getLength(); i++) {
      Node item=list.item(i);
      String str=item.getFirstChild().getNodeValue();
      if (str == null) {
        continue;
      }
      int st=0;
      int next=0;
      while ((next=str.indexOf('\n',st)) != -1) {
        String coordinate=str.substring(st,next + 1);
        int s=coordinate.indexOf(',');
        if (s != -1) {
          try {
            double lon=Double.parseDouble(coordinate.substring(0,s));
            double lat=Double.parseDouble(coordinate.substring(s + 1));
            Location l=new Location("router");
            l.setLatitude(lat);
            l.setLongitude(lon);
            res.add(l);
          }
 catch (          NumberFormatException e) {
          }
        }
        st=next + 1;
      }
    }
    if (list.getLength() == 0) {
      if (doc.getChildNodes().getLength() == 1) {
        Node item=doc.getChildNodes().item(0);
        return new RouteCalculationResult(item.getNodeValue());
      }
    }
  }
 catch (  Exception e) {
    return new RouteCalculationResult("Exception calling BRouter: " + e);
  }
  return new RouteCalculationResult(res,null,params,null);
}
