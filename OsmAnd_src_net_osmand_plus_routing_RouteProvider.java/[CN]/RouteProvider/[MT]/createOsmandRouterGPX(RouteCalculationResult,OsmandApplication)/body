{
  TargetPointsHelper helper=ctx.getTargetPointsHelper();
  int currentRoute=srcRoute.currentRoute;
  List<Location> routeNodes=srcRoute.getImmutableAllLocations();
  List<RouteDirectionInfo> directionInfo=srcRoute.getImmutableAllDirections();
  int currentDirectionInfo=srcRoute.currentDirectionInfo;
  GPXFile gpx=new GPXFile();
  gpx.author=OSMAND_ROUTER;
  Track track=new Track();
  gpx.tracks.add(track);
  TrkSegment trkSegment=new TrkSegment();
  track.segments.add(trkSegment);
  int cRoute=currentRoute;
  int cDirInfo=currentDirectionInfo;
  for (int i=cRoute; i < routeNodes.size(); i++) {
    Location loc=routeNodes.get(i);
    WptPt pt=new WptPt();
    pt.lat=loc.getLatitude();
    pt.lon=loc.getLongitude();
    if (loc.hasSpeed()) {
      pt.speed=loc.getSpeed();
    }
    if (loc.hasAltitude()) {
      pt.ele=loc.getAltitude();
    }
    if (loc.hasAccuracy()) {
      pt.hdop=loc.getAccuracy();
    }
    trkSegment.points.add(pt);
  }
  Route route=new Route();
  gpx.routes.add(route);
  for (int i=cDirInfo; i < directionInfo.size(); i++) {
    RouteDirectionInfo dirInfo=directionInfo.get(i);
    if (dirInfo.routePointOffset >= cRoute) {
      Location loc=routeNodes.get(dirInfo.routePointOffset);
      WptPt pt=new WptPt();
      pt.lat=loc.getLatitude();
      pt.lon=loc.getLongitude();
      pt.desc=dirInfo.getDescriptionRoute(ctx);
      Map<String,String> extensions=pt.getExtensionsToWrite();
      extensions.put("time",dirInfo.getExpectedTime() + "");
      String turnType=dirInfo.getTurnType().getValue();
      if (dirInfo.getTurnType().isRoundAbout()) {
        turnType+=dirInfo.getTurnType().getExitOut();
      }
      if (!TurnType.C.equals(turnType)) {
        extensions.put("turn",turnType);
        extensions.put("turn-angle",dirInfo.getTurnType().getTurnAngle() + "");
      }
      extensions.put("offset",(dirInfo.routePointOffset - cRoute) + "");
      route.points.add(pt);
    }
  }
  List<LatLon> ps=helper.getIntermediatePointsWithTarget();
  List<String> psNames=helper.getIntermediatePointNamesWithTarget();
  for (int k=0; k < ps.size(); k++) {
    WptPt pt=new WptPt();
    pt.lat=ps.get(k).getLatitude();
    pt.lon=ps.get(k).getLongitude();
    if (k < psNames.size()) {
      pt.name=psNames.get(k) + "";
      if (k == ps.size() - 1) {
        String target=ctx.getString(R.string.destination_point,"");
        if (pt.name.startsWith(target)) {
          pt.name=ctx.getString(R.string.destination_point,pt.name);
        }
      }
 else {
        String prefix=(k + 1) + ". ";
        if (Algorithms.isEmpty(pt.name)) {
          pt.name=ctx.getString(R.string.target_point,pt.name);
        }
        if (pt.name.startsWith(prefix)) {
          pt.name=prefix + pt.name;
        }
      }
      pt.desc=pt.name;
    }
    gpx.points.add(pt);
  }
  return gpx;
}
