{
  GPXRouteParams gpxParams=routeParams.gpxRoute;
  if (routeParams.gpxRoute.useIntermediatePointsRTE) {
    return calculateOsmAndRouteWithIntermediatePoints(routeParams,gpxParams.points);
  }
  List<Location> gpxRoute;
  int[] startI=new int[]{0};
  int[] endI=new int[]{gpxParams.points.size()};
  if (routeParams.gpxRoute.passWholeRoute) {
    gpxRoute=gpxParams.points;
  }
 else {
    gpxRoute=findStartAndEndLocationsFromRoute(gpxParams.points,routeParams.start,routeParams.end,startI,endI);
  }
  final List<RouteDirectionInfo> inputDirections=gpxParams.directions;
  List<RouteDirectionInfo> gpxDirections=calcDirections(startI,endI,inputDirections);
  boolean calculateOsmAndRouteParts=gpxParams.calculateOsmAndRouteParts;
  insertInitialSegment(routeParams,gpxRoute,gpxDirections,calculateOsmAndRouteParts);
  insertFinalSegment(routeParams,gpxRoute,gpxDirections,calculateOsmAndRouteParts);
  for (  RouteDirectionInfo info : gpxDirections) {
    info.distance=0;
    info.afterLeftTime=0;
  }
  RouteCalculationResult res=new RouteCalculationResult(gpxRoute,gpxDirections,routeParams,gpxParams == null ? null : gpxParams.wpt,false);
  return res;
}
