{
  GPXRouteParams gpxParams=routeParams.gpxRoute;
  List<Location> gpxRoute;
  int[] startI=new int[]{0};
  int[] endI=new int[]{gpxParams.points.size()};
  if (routeParams.gpxRoute.passWholeRoute) {
    gpxRoute=gpxParams.points;
  }
 else {
    gpxRoute=findStartAndEndLocationsFromRoute(gpxParams.points,routeParams.start,routeParams.end,startI,endI);
  }
  List<RouteDirectionInfo> gpxDirections=new ArrayList<RouteDirectionInfo>();
  if (gpxParams.directions != null) {
    for (    RouteDirectionInfo info : gpxParams.directions) {
      if (info.routePointOffset >= startI[0] && info.routePointOffset < endI[0]) {
        RouteDirectionInfo ch=new RouteDirectionInfo(info.getAverageSpeed(),info.getTurnType());
        ch.routePointOffset=info.routePointOffset - startI[0];
        ch.setDescriptionRoute(info.getDescriptionRoutePart());
        gpxDirections.add(ch);
      }
    }
  }
  boolean calculateOsmAndRouteParts=gpxParams.calculateOsmAndRouteParts;
  insertInitialSegment(routeParams,gpxRoute,gpxDirections,calculateOsmAndRouteParts);
  insertFinalSegment(routeParams,gpxRoute,gpxDirections,calculateOsmAndRouteParts);
  for (  RouteDirectionInfo info : gpxDirections) {
    info.distance=0;
    info.afterLeftTime=0;
  }
  RouteCalculationResult res=new RouteCalculationResult(gpxRoute,gpxDirections,routeParams,gpxParams.wpt);
  return res;
}
