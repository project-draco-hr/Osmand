{
  BinaryMapIndexReader[] files=app.getResourceManager().getRoutingMapFiles();
  BinaryRoutePlanner router=new BinaryRoutePlanner(NativeOsmandLibrary.getLoadedLibrary(),files);
  RoutingConfiguration.Builder config=RoutingConfiguration.getDefault();
  GeneralRouterProfile p;
  if (mode == ApplicationMode.BICYCLE) {
    p=GeneralRouterProfile.BICYCLE;
  }
 else   if (mode == ApplicationMode.PEDESTRIAN) {
    p=GeneralRouterProfile.PEDESTRIAN;
  }
 else {
    p=GeneralRouterProfile.CAR;
  }
  RoutingContext ctx=new RoutingContext(config.initConfig(p.name().toLowerCase(),!fast));
  RouteSegment st=router.findRouteSegment(start.getLatitude(),start.getLongitude(),ctx);
  if (st == null) {
    return new RouteCalculationResult("Starting point too far from nearest road.");
  }
  RouteSegment en=router.findRouteSegment(end.getLatitude(),end.getLongitude(),ctx);
  if (en == null) {
    return new RouteCalculationResult("End point is far from allowed road.");
  }
  try {
    List<RouteSegmentResult> result=router.searchRoute(ctx,st,en);
    return new RouteCalculationResult(result,start,end);
  }
 catch (  OutOfMemoryError e) {
    return new RouteCalculationResult("Not enough process memory");
  }
}
