{
  BinaryMapIndexReader[] files=app.getResourceManager().getRoutingMapFiles();
  BinaryRoutePlanner router=new BinaryRoutePlanner(files);
  RoutingContext ctx=new RoutingContext();
  ctx.setUsingShortestWay(!fast);
  if (mode == ApplicationMode.BICYCLE) {
    ctx.setRouter(new BicycleRouter());
    ctx.setUseDynamicRoadPrioritising(true);
  }
 else   if (mode == ApplicationMode.PEDESTRIAN) {
    ctx.setRouter(new PedestrianRouter());
    ctx.setUseDynamicRoadPrioritising(false);
    ctx.setHeuristicCoefficient(2);
  }
 else {
    ctx.setRouter(new CarRouter());
    ctx.setUseDynamicRoadPrioritising(true);
  }
  RouteSegment st=router.findRouteSegment(start.getLatitude(),start.getLongitude(),ctx);
  if (st == null) {
    return new RouteCalculationResult("Starting point too far from nearest road.");
  }
  RouteSegment en=router.findRouteSegment(end.getLatitude(),end.getLongitude(),ctx);
  if (en == null) {
    return new RouteCalculationResult("End point is far from allowed road.");
  }
  try {
    List<RouteSegmentResult> result=router.searchRoute(ctx,st,en);
    return new RouteCalculationResult(result,start,end);
  }
 catch (  OutOfMemoryError e) {
    return new RouteCalculationResult("Not enough process memory");
  }
}
