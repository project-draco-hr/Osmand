{
  BinaryMapIndexReader[] files=app.getResourceManager().getRoutingMapFiles();
  BinaryRoutePlanner router=new BinaryRoutePlanner(files);
  RoutingContext ctx=new RoutingContext();
  ctx.setUsingShortestWay(!fast);
  if (mode == ApplicationMode.BICYCLE) {
    ctx.setRouter(new BicycleRouter());
    ctx.setUseDynamicRoadPrioritising(true);
  }
 else   if (mode == ApplicationMode.PEDESTRIAN) {
    ctx.setRouter(new PedestrianRouter());
    ctx.setUseDynamicRoadPrioritising(false);
    ctx.setHeuristicCoefficient(2);
  }
 else {
    ctx.setRouter(new CarRouter());
    ctx.setUseDynamicRoadPrioritising(true);
  }
  RouteSegment st=router.findRouteSegment(start.getLatitude(),start.getLongitude(),ctx);
  if (st == null) {
    return new RouteCalculationResult("Start point is far from allowed road.");
  }
  RouteSegment en=router.findRouteSegment(end.getLatitude(),end.getLongitude(),ctx);
  if (en == null) {
    return new RouteCalculationResult("End point is far from allowed road.");
  }
  List<Location> res=new ArrayList<Location>();
  try {
    List<RouteSegmentResult> result=router.searchRoute(ctx,st,en);
    for (    RouteSegmentResult s : result) {
      boolean plus=s.getStartPointIndex() < s.getEndPointIndex();
      int i=s.getStartPointIndex();
      while (true) {
        Location n=new Location("");
        LatLon point=s.getPoint(i);
        n.setLatitude(point.getLatitude());
        n.setLongitude(point.getLongitude());
        res.add(n);
        if (i == s.getEndPointIndex()) {
          break;
        }
        if (plus) {
          i++;
        }
 else {
          i--;
        }
      }
    }
    return new RouteCalculationResult(res,null,start,end,null);
  }
 catch (  OutOfMemoryError e) {
    return new RouteCalculationResult("Not enough process memory");
  }
}
