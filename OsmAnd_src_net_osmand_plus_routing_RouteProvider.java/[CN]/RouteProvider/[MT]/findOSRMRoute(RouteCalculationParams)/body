{
  List<Location> res=new ArrayList<Location>();
  StringBuilder uri=new StringBuilder();
  String scheme="";
  scheme="http";
  uri.append(scheme + "://router.project-osrm.org/route/v1/driving/");
  uri.append(String.valueOf(params.start.getLongitude()));
  uri.append(",").append(String.valueOf(params.start.getLatitude()));
  if (params.intermediates != null && params.intermediates.size() > 0) {
    for (    LatLon il : params.intermediates) {
      appendOSRMLoc(uri,il);
    }
  }
  appendOSRMLoc(uri,params.end);
  log.info("URL route " + uri);
  URLConnection connection=NetworkUtils.getHttpURLConnection(uri.toString());
  connection.setRequestProperty("User-Agent",Version.getFullVersion(params.ctx));
  StringBuilder content=new StringBuilder();
  BufferedReader rs=new BufferedReader(new InputStreamReader(connection.getInputStream()));
  String s;
  while ((s=rs.readLine()) != null) {
    content.append(s);
  }
  JSONObject obj=new JSONObject(content.toString());
  try {
    rs.close();
  }
 catch (  IOException e) {
  }
  List<LatLon> route=GeoPolylineParserUtil.parse(obj.getJSONArray("routes").getJSONObject(0).getString("geometry"));
  if (route.isEmpty()) {
    return new RouteCalculationResult("Route is empty");
  }
  for (  LatLon pt : route) {
    WptPt wpt=new WptPt();
    wpt.lat=pt.getLatitude();
    wpt.lon=pt.getLongitude();
    res.add(createLocation(wpt));
  }
  params.intermediates=null;
  return new RouteCalculationResult(res,null,params,null,true);
}
