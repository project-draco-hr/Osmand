{
  BinaryMapIndexReader[] files=params.ctx.getResourceManager().getRoutingMapFiles();
  RoutePlannerFrontEnd router=new RoutePlannerFrontEnd(false);
  OsmandSettings settings=params.ctx.getSettings();
  router.setUseFastRecalculation(settings.USE_FAST_RECALCULATION.get());
  RoutingConfiguration.Builder config=params.ctx.getDefaultRoutingConfig();
  GeneralRouter generalRouter=SettingsNavigationActivity.getRouter(config,params.mode);
  if (generalRouter == null) {
    return applicationModeNotSupported(params);
  }
  RoutingConfiguration cf=initOsmAndRoutingConfig(config,params,settings,generalRouter);
  if (cf == null) {
    return applicationModeNotSupported(params);
  }
  PrecalculatedRouteDirection precalculated=null;
  if (calcGPXRoute) {
    ArrayList<Location> sublist=findStartAndEndLocationsFromRoute(params.gpxRoute.points,params.start,params.end,null,null);
    LatLon[] latLon=new LatLon[sublist.size()];
    for (int k=0; k < latLon.length; k++) {
      latLon[k]=new LatLon(sublist.get(k).getLatitude(),sublist.get(k).getLongitude());
    }
    precalculated=PrecalculatedRouteDirection.build(latLon,generalRouter.getMaxDefaultSpeed());
    precalculated.setFollowNext(true);
  }
  NativeOsmandLibrary lib=settings.SAFE_MODE.get() ? null : NativeOsmandLibrary.getLoadedLibrary();
  RoutingContext ctx=router.buildRoutingContext(cf,lib,files,RouteCalculationMode.NORMAL);
  RoutingContext complexCtx=null;
  boolean complex=params.mode.isDerivedRoutingFrom(ApplicationMode.CAR) && !settings.DISABLE_COMPLEX_ROUTING.get() && precalculated == null;
  ctx.leftSideNavigation=params.leftSide;
  ctx.calculationProgress=params.calculationProgress;
  if (params.previousToRecalculate != null && params.onlyStartPointChanged) {
    ctx.previouslyCalculatedRoute=params.previousToRecalculate.getOriginalRoute();
  }
  if (complex && router.getRecalculationEnd(ctx) != null) {
    complex=false;
  }
  if (complex) {
    complexCtx=router.buildRoutingContext(cf,lib,files,RouteCalculationMode.COMPLEX);
    complexCtx.calculationProgress=params.calculationProgress;
    complexCtx.leftSideNavigation=params.leftSide;
    if (params.previousToRecalculate != null && params.onlyStartPointChanged) {
      complexCtx.previouslyCalculatedRoute=params.previousToRecalculate.getOriginalRoute();
    }
  }
  LatLon st=new LatLon(params.start.getLatitude(),params.start.getLongitude());
  LatLon en=new LatLon(params.end.getLatitude(),params.end.getLongitude());
  List<LatLon> inters=new ArrayList<LatLon>();
  if (params.intermediates != null) {
    inters=new ArrayList<LatLon>(params.intermediates);
  }
  return calcOfflineRouteImpl(params,router,ctx,complexCtx,st,en,inters,precalculated);
}
