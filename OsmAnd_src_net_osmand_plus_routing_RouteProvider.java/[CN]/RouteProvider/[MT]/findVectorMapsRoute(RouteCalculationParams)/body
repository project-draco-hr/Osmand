{
  BinaryMapIndexReader[] files=params.ctx.getTodoAPI().getRoutingMapFiles();
  RoutePlannerFrontEnd router=new RoutePlannerFrontEnd(false);
  OsmandSettings settings=params.ctx.getSettings();
  File routingXml=params.ctx.getAppPath(IndexConstants.ROUTING_XML_FILE);
  RoutingConfiguration.Builder config;
  if (routingXml.exists() && routingXml.canRead()) {
    try {
      config=RoutingConfiguration.parseFromInputStream(new FileInputStream(routingXml));
    }
 catch (    XmlPullParserException e) {
      throw new IllegalStateException(e);
    }
  }
 else {
    config=RoutingConfiguration.getDefault();
  }
  GeneralRouterProfile p;
  if (params.mode.isDerivedRoutingFrom(ApplicationMode.BICYCLE)) {
    p=GeneralRouterProfile.BICYCLE;
  }
 else   if (params.mode.isDerivedRoutingFrom(ApplicationMode.PEDESTRIAN)) {
    p=GeneralRouterProfile.PEDESTRIAN;
  }
 else   if (params.mode.isDerivedRoutingFrom(ApplicationMode.CAR)) {
    p=GeneralRouterProfile.CAR;
  }
 else {
    return applicationModeNotSupported(params);
  }
  GeneralRouter generalRouter=SettingsNavigationActivity.getRouter(params.mode);
  if (generalRouter == null) {
    return applicationModeNotSupported(params);
  }
  Map<String,String> paramsR=new LinkedHashMap<String,String>();
  for (  Map.Entry<String,RoutingParameter> e : generalRouter.getParameters().entrySet()) {
    String key=e.getKey();
    RoutingParameter pr=e.getValue();
    String vl;
    if (key.equals(GeneralRouter.USE_SHORTEST_WAY)) {
      Boolean bool=!settings.FAST_ROUTE_MODE.getModeValue(params.mode);
      vl=bool ? "true" : null;
    }
 else     if (pr.getType() == RoutingParameterType.BOOLEAN) {
      CommonPreference<Boolean> pref=settings.getCustomRoutingBooleanProperty(key);
      Boolean bool=pref.getModeValue(params.mode);
      vl=bool ? "true" : null;
    }
 else {
      vl=settings.getCustomRoutingProperty(key).getModeValue(params.mode);
    }
    if (vl != null && vl.length() > 0) {
      paramsR.put(key,vl);
    }
  }
  float mb=(1 << 20);
  Runtime rt=Runtime.getRuntime();
  int memoryLimit=(int)(0.95 * ((rt.maxMemory() - rt.totalMemory()) + rt.freeMemory()) / mb);
  log.warn("Use " + memoryLimit + " MB Free "+ rt.freeMemory() / mb + " of " + rt.totalMemory() / mb + " max " + rt.maxMemory() / mb);
  RoutingConfiguration cf=config.build(p.name().toLowerCase(),params.start.hasBearing() ? params.start.getBearing() / 180d * Math.PI : null,memoryLimit,paramsR);
  boolean complex=params.mode.isDerivedRoutingFrom(ApplicationMode.CAR) && !settings.DISABLE_COMPLEX_ROUTING.get();
  RoutingContext ctx=router.buildRoutingContext(cf,params.ctx.getInternalAPI().getNativeLibrary(),files,RouteCalculationMode.NORMAL);
  RoutingContext complexCtx=null;
  if (complex) {
    complexCtx=router.buildRoutingContext(cf,params.ctx.getInternalAPI().getNativeLibrary(),files,RouteCalculationMode.COMPLEX);
    complexCtx.calculationProgress=params.calculationProgress;
    complexCtx.leftSideNavigation=params.leftSide;
  }
  ctx.leftSideNavigation=params.leftSide;
  ctx.calculationProgress=params.calculationProgress;
  if (params.previousToRecalculate != null) {
  }
  LatLon st=new LatLon(params.start.getLatitude(),params.start.getLongitude());
  LatLon en=new LatLon(params.end.getLatitude(),params.end.getLongitude());
  List<LatLon> inters=new ArrayList<LatLon>();
  if (params.intermediates != null) {
    inters=new ArrayList<LatLon>(params.intermediates);
  }
  try {
    List<RouteSegmentResult> result;
    if (complexCtx != null) {
      try {
        result=router.searchRoute(complexCtx,st,en,inters);
        ctx=complexCtx;
      }
 catch (      final RuntimeException e) {
        params.ctx.runInUIThread(new Runnable(){
          @Override public void run(){
            params.ctx.showToastMessage(R.string.complex_route_calculation_failed,e.getMessage());
          }
        }
);
        result=router.searchRoute(ctx,st,en,inters);
      }
    }
 else {
      result=router.searchRoute(ctx,st,en,inters);
    }
    if (result == null || result.isEmpty()) {
      if (ctx.calculationProgress.segmentNotFound == 0) {
        return new RouteCalculationResult(params.ctx.getString(R.string.starting_point_too_far));
      }
 else       if (ctx.calculationProgress.segmentNotFound == inters.size() + 1) {
        return new RouteCalculationResult(params.ctx.getString(R.string.ending_point_too_far));
      }
 else       if (ctx.calculationProgress.segmentNotFound > 0) {
        return new RouteCalculationResult(params.ctx.getString(R.string.intermediate_point_too_far,"'" + ctx.calculationProgress.segmentNotFound + "'"));
      }
      if (ctx.calculationProgress.directSegmentQueueSize == 0) {
        return new RouteCalculationResult("Route can not be found from start point (" + ctx.calculationProgress.distanceFromBegin / 1000f + " km)");
      }
 else       if (ctx.calculationProgress.reverseSegmentQueueSize == 0) {
        return new RouteCalculationResult("Route can not be found from end point (" + ctx.calculationProgress.distanceFromEnd / 1000f + " km)");
      }
      if (ctx.calculationProgress.isCancelled) {
        return interrupted();
      }
      return emptyResult();
    }
 else {
      RouteCalculationResult res=new RouteCalculationResult(result,params.start,params.end,params.intermediates,params.ctx,params.leftSide,ctx.routingTime);
      return res;
    }
  }
 catch (  RuntimeException e) {
    return new RouteCalculationResult(e.getMessage());
  }
catch (  InterruptedException e) {
    return interrupted();
  }
catch (  OutOfMemoryError e) {
    int max=(int)(Runtime.getRuntime().maxMemory() / (1 << 20));
    int avl=(int)(Runtime.getRuntime().freeMemory() / (1 << 20));
    String s=" (" + avl + " MB available of "+ max+ ") ";
    return new RouteCalculationResult("Not enough process memory " + s);
  }
}
