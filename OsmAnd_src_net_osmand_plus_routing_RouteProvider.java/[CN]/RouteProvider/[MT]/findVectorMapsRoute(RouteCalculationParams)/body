{
  OsmandApplication app=(OsmandApplication)params.ctx.getApplicationContext();
  BinaryMapIndexReader[] files=app.getResourceManager().getRoutingMapFiles();
  RoutePlannerFrontEnd router=new RoutePlannerFrontEnd(true);
  File routingXml=app.getSettings().extendOsmandPath(ResourceManager.ROUTING_XML);
  RoutingConfiguration.Builder config;
  if (routingXml.exists() && routingXml.canRead()) {
    try {
      config=RoutingConfiguration.parseFromInputStream(new FileInputStream(routingXml));
    }
 catch (    SAXException e) {
      throw new IllegalStateException(e);
    }
  }
 else {
    config=RoutingConfiguration.getDefault();
  }
  GeneralRouterProfile p;
  if (params.mode == ApplicationMode.BICYCLE) {
    p=GeneralRouterProfile.BICYCLE;
  }
 else   if (params.mode == ApplicationMode.PEDESTRIAN) {
    p=GeneralRouterProfile.PEDESTRIAN;
  }
 else {
    p=GeneralRouterProfile.CAR;
  }
  List<String> specs=new ArrayList<String>();
  if (!app.getSettings().FAST_ROUTE_MODE.getModeValue(params.mode)) {
    specs.add(GeneralRouter.USE_SHORTEST_WAY);
  }
  if (app.getSettings().AVOID_FERRIES.getModeValue(params.mode)) {
    specs.add(GeneralRouter.AVOID_FERRIES);
  }
  if (app.getSettings().AVOID_TOLL_ROADS.getModeValue(params.mode)) {
    specs.add(GeneralRouter.AVOID_TOLL);
  }
  if (app.getSettings().AVOID_MOTORWAY.getModeValue(params.mode)) {
    specs.add(GeneralRouter.AVOID_MOTORWAY);
  }
  if (app.getSettings().AVOID_UNPAVED_ROADS.getModeValue(params.mode)) {
    specs.add(GeneralRouter.AVOID_UNPAVED);
  }
  String[] specialization=specs.toArray(new String[specs.size()]);
  float mb=(1 << 20);
  Runtime rt=Runtime.getRuntime();
  int memoryLimit=(int)(0.95 * ((rt.maxMemory() - rt.totalMemory()) + rt.freeMemory()) / mb);
  log.warn("Use " + memoryLimit + " MB Free "+ rt.freeMemory() / mb + " of " + rt.totalMemory() / mb + " max " + rt.maxMemory() / mb);
  RoutingConfiguration cf=config.build(p.name().toLowerCase(),params.start.hasBearing() ? params.start.getBearing() / 180d * Math.PI : null,memoryLimit,specialization);
  if (!params.optimal) {
    cf.heuristicCoefficient*=1.5;
    cf.attributes.put("heuristicCoefficient",cf.heuristicCoefficient + "");
  }
  RoutingContext ctx=new RoutingContext(cf,NativeOsmandLibrary.getLoadedLibrary(),files);
  ctx.calculationProgress=params.calculationProgress;
  if (params.previousToRecalculate != null) {
    ctx.previouslyCalculatedRoute=params.previousToRecalculate.getOriginalRoute();
  }
  LatLon st=new LatLon(params.start.getLatitude(),params.start.getLongitude());
  LatLon en=new LatLon(params.end.getLatitude(),params.end.getLongitude());
  List<LatLon> inters=new ArrayList<LatLon>();
  if (params.intermediates != null) {
    inters=new ArrayList<LatLon>(params.intermediates);
  }
  try {
    List<RouteSegmentResult> result=router.searchRoute(ctx,st,en,inters,params.leftSide);
    if (result == null || result.isEmpty()) {
      if (ctx.calculationProgress.segmentNotFound == 0) {
        return new RouteCalculationResult(app.getString(R.string.starting_point_too_far));
      }
 else       if (ctx.calculationProgress.segmentNotFound == inters.size() + 1) {
        return new RouteCalculationResult(app.getString(R.string.ending_point_too_far));
      }
 else       if (ctx.calculationProgress.segmentNotFound > 0) {
        return new RouteCalculationResult(app.getString(R.string.intermediate_point_too_far,"'" + ctx.calculationProgress.segmentNotFound + "'"));
      }
      if (ctx.calculationProgress.directSegmentQueueSize == 0) {
        return new RouteCalculationResult("Route can not be found from start point (" + ctx.calculationProgress.distanceFromBegin / 1000f + " km)");
      }
 else       if (ctx.calculationProgress.reverseSegmentQueueSize == 0) {
        return new RouteCalculationResult("Route can not be found from end point (" + ctx.calculationProgress.distanceFromEnd / 1000f + " km)");
      }
      if (ctx.calculationProgress.isCancelled) {
        return new RouteCalculationResult("Route calculation was interrupted");
      }
      return new RouteCalculationResult("Empty result");
    }
 else {
      return new RouteCalculationResult(result,params.start,params.end,params.intermediates,app,params.leftSide);
    }
  }
 catch (  InterruptedException e) {
    return new RouteCalculationResult("Route calculation was interrupted");
  }
catch (  OutOfMemoryError e) {
    int max=(int)(Runtime.getRuntime().maxMemory() / (1 << 20));
    int avl=(int)(Runtime.getRuntime().freeMemory() / (1 << 20));
    String s=" (" + avl + " MB available of "+ max+ ") ";
    return new RouteCalculationResult("Not enough process memory " + s);
  }
}
