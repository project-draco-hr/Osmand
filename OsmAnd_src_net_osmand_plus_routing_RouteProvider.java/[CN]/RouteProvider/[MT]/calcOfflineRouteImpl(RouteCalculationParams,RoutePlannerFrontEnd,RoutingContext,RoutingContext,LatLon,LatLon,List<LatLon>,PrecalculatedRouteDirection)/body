{
  try {
    List<RouteSegmentResult> result;
    if (complexCtx != null) {
      try {
        result=router.searchRoute(complexCtx,st,en,inters,precalculated);
        ctx=complexCtx;
      }
 catch (      final RuntimeException e) {
        params.ctx.runInUIThread(new Runnable(){
          @Override public void run(){
            params.ctx.showToastMessage(R.string.complex_route_calculation_failed,e.getMessage());
          }
        }
);
        result=router.searchRoute(ctx,st,en,inters);
      }
    }
 else {
      result=router.searchRoute(ctx,st,en,inters);
    }
    if (result == null || result.isEmpty()) {
      if (ctx.calculationProgress.segmentNotFound == 0) {
        return new RouteCalculationResult(params.ctx.getString(R.string.starting_point_too_far));
      }
 else       if (ctx.calculationProgress.segmentNotFound == inters.size() + 1) {
        return new RouteCalculationResult(params.ctx.getString(R.string.ending_point_too_far));
      }
 else       if (ctx.calculationProgress.segmentNotFound > 0) {
        return new RouteCalculationResult(params.ctx.getString(R.string.intermediate_point_too_far,"'" + ctx.calculationProgress.segmentNotFound + "'"));
      }
      if (ctx.calculationProgress.directSegmentQueueSize == 0) {
        return new RouteCalculationResult("Route can not be found from start point (" + ctx.calculationProgress.distanceFromBegin / 1000f + " km)");
      }
 else       if (ctx.calculationProgress.reverseSegmentQueueSize == 0) {
        return new RouteCalculationResult("Route can not be found from end point (" + ctx.calculationProgress.distanceFromEnd / 1000f + " km)");
      }
      if (ctx.calculationProgress.isCancelled) {
        return interrupted();
      }
      return emptyResult();
    }
 else {
      DataTileManager mngr=new DataTileManager<Object>(17);
      List<FavouritePoint> points=params.ctx.getFavorites().getFavouritePoints();
      for (      FavouritePoint point : points) {
        mngr.registerObject(point.getLatitude(),point.getLongitude(),point);
      }
      RouteCalculationResult res=new RouteCalculationResult(result,params.start,params.end,params.intermediates,params.ctx,params.leftSide,ctx.routingTime,mngr);
      return res;
    }
  }
 catch (  RuntimeException e) {
    return new RouteCalculationResult(e.getMessage());
  }
catch (  InterruptedException e) {
    return interrupted();
  }
catch (  OutOfMemoryError e) {
    int max=(int)(Runtime.getRuntime().maxMemory() / (1 << 20));
    int avl=(int)(Runtime.getRuntime().freeMemory() / (1 << 20));
    String s=" (" + avl + " MB available of "+ max+ ") ";
    return new RouteCalculationResult("Not enough process memory " + s);
  }
}
