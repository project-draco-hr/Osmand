{
  final int paddingTop=getListPaddingTop();
  final int paddingBottom=getListPaddingBottom();
  final int paddingLeft=getListPaddingLeft();
  final int paddingRight=getListPaddingRight();
  final int reportedDividerHeight=getDividerHeight();
  final Drawable divider=getDivider();
  final ListAdapter adapter=getAdapter();
  if (adapter == null) {
    return paddingTop + paddingBottom;
  }
  int returnedHeight=paddingTop + paddingBottom;
  final int dividerHeight=((reportedDividerHeight > 0) && divider != null) ? reportedDividerHeight : 0;
  int prevHeightWithoutPartialChild=0;
  View child=null;
  int viewType=0;
  int count=adapter.getCount();
  for (int i=0; i < count; i++) {
    int newType=adapter.getItemViewType(i);
    if (newType != viewType) {
      child=null;
      viewType=newType;
    }
    child=adapter.getView(i,child,this);
    int heightMeasureSpec;
    final ViewGroup.LayoutParams childLp=child.getLayoutParams();
    if (childLp != null && childLp.height > 0) {
      heightMeasureSpec=MeasureSpec.makeMeasureSpec(childLp.height,MeasureSpec.EXACTLY);
    }
 else {
      heightMeasureSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
    }
    child.measure(widthMeasureSpec,heightMeasureSpec);
    if (i > 0) {
      returnedHeight+=dividerHeight;
    }
    returnedHeight+=child.getMeasuredHeight();
    if (returnedHeight >= maxHeight) {
      return (disallowPartialChildPosition >= 0) && (i > disallowPartialChildPosition) && (prevHeightWithoutPartialChild > 0)&& (returnedHeight != maxHeight) ? prevHeightWithoutPartialChild : maxHeight;
    }
    if ((disallowPartialChildPosition >= 0) && (i >= disallowPartialChildPosition)) {
      prevHeightWithoutPartialChild=returnedHeight;
    }
  }
  return returnedHeight;
}
