{
  View mainView=getView();
  final File dir=getMyApplication().getAppPath(IndexConstants.GPX_INDEX_DIR);
  final List<String> list=GpxUiHelper.getSortedGPXFilenames(dir);
  if (list.size() == 0) {
    (mainView.findViewById(R.id.main_fav)).setVisibility(View.GONE);
    return;
  }
 else {
    (mainView.findViewById(R.id.main_fav)).setVisibility(View.VISIBLE);
  }
  LinearLayout tracks=(LinearLayout)mainView.findViewById(R.id.items);
  tracks.removeAllViews();
  if (list.size() > 3) {
    while (list.size() != 3) {
      list.remove(3);
    }
  }
  OsmandApplication app=getMyApplication();
  SavingTrackHelper savingTrackHelper=app.getSavingTrackHelper();
  if (app.getSettings().SAVE_GLOBAL_TRACK_TO_GPX.get()) {
    list.remove(2);
    LayoutInflater inflater=getActivity().getLayoutInflater();
    View view=inflater.inflate(R.layout.dash_gpx_track_item,null,false);
    AvailableGPXFragment.createCurrentTrackView(view,app);
    GpxSelectionHelper.SelectedGpxFile currentTrack=savingTrackHelper.getCurrentTrack();
    ((TextView)view.findViewById(R.id.name)).setText(R.string.currently_recording_track);
    String description=GpxUiHelper.getDescription(getMyApplication(),currentTrack.getGpxFile(),null,true);
    int startindex=description.indexOf(">");
    int endindex=description.indexOf("</font>");
    String distance=description.substring(startindex + 1,endindex);
    String points=String.valueOf(currentTrack.getGpxFile().points.size());
    ((TextView)view.findViewById(R.id.points_count)).setText(points);
    ((TextView)view.findViewById(R.id.distance)).setText(distance);
    tracks.addView(view);
  }
  for (  String filename : list) {
    final File f=new File(dir,filename);
    final GPXUtilities.GPXFile res=GPXUtilities.loadGPXFile(getMyApplication(),f);
    LayoutInflater inflater=getActivity().getLayoutInflater();
    View view=inflater.inflate(R.layout.dash_gpx_track_item,null,false);
    ((TextView)view.findViewById(R.id.name)).setText(filename);
    ((TextView)view.findViewById(R.id.points_count)).setText(res.points.size() + " " + getActivity().getString(R.string.points));
    String description=GpxUiHelper.getDescription(getMyApplication(),res,f,true);
    int startindex=description.indexOf(">");
    int endindex=description.indexOf("</font>");
    String distnace=description.substring(startindex + 1,endindex);
    ((TextView)view.findViewById(R.id.distance)).setText(distnace);
    view.findViewById(R.id.time_icon).setVisibility(View.GONE);
    boolean light=getMyApplication().getSettings().isLightContent();
    Drawable icon=getResources().getDrawable(R.drawable.ic_show_on_map);
    GpxSelectionHelper gpxSelectionHelper=getMyApplication().getSelectedGpxHelper();
    boolean isShowingOnMap=gpxSelectionHelper.getSelectedFileByName(filename) != null;
    if (isShowingOnMap) {
      icon.mutate();
      if (light) {
        icon.setColorFilter(getResources().getColor(R.color.dashboard_gpx_on_map),PorterDuff.Mode.MULTIPLY);
      }
 else {
        icon.setColorFilter(getResources().getColor(R.color.color_distance),PorterDuff.Mode.MULTIPLY);
      }
    }
 else     if (light) {
      icon.mutate();
      icon.setColorFilter(getResources().getColor(R.color.icon_color_light),PorterDuff.Mode.MULTIPLY);
    }
    final ImageButton showOnMap=(ImageButton)view.findViewById(R.id.show_on_map);
    showOnMap.setImageDrawable(icon);
    showOnMap.setVisibility(View.VISIBLE);
    view.findViewById(R.id.stop).setVisibility(View.GONE);
    view.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        showOnMap(res);
      }
    }
);
    tracks.addView(view);
  }
}
