{
  InputStream is;
  try {
    if (resourceName == null) {
      is=MapRenderingTypes.class.getResourceAsStream("rendering_types.xml");
    }
 else {
      is=new FileInputStream(resourceName);
    }
    long time=System.currentTimeMillis();
    final SAXParser parser=SAXParserFactory.newInstance().newSAXParser();
    parser.parse(is,new DefaultHandler(){
      int currentType=1;
      @Override public void startElement(      String uri,      String localName,      String name,      Attributes attributes) throws SAXException {
        name=parser.isNamespaceAware() ? localName : name;
        if (name.equals("type")) {
          currentType=Integer.parseInt(attributes.getValue("id"));
        }
 else         if (name.equals("subtype")) {
          String val=attributes.getValue("minzoom");
          int maxzoom=15;
          if (val != null) {
            maxzoom=Integer.parseInt(val);
          }
          String tag=attributes.getValue("tag");
          val=attributes.getValue("value");
          if (val != null && (val.equalsIgnoreCase("null") || val.length() == 0)) {
            val=null;
          }
          int subtype=Integer.parseInt(attributes.getValue("id"));
          boolean building=Boolean.parseBoolean(attributes.getValue("building"));
          boolean polygon=Boolean.parseBoolean(attributes.getValue("polygon"));
          boolean polyline=Boolean.parseBoolean(attributes.getValue("polyline"));
          boolean point=Boolean.parseBoolean(attributes.getValue("point"));
          boolean polygon_center=Boolean.parseBoolean(attributes.getValue("polygon_center"));
          int polygonRule=0;
          int pointRule=0;
          int polylineRule=0;
          if (building || point || polygon_center) {
            pointRule=POINT_TYPE;
          }
          if (!polyline && polygon) {
            pointRule=POINT_TYPE;
          }
          if (polyline) {
            polylineRule=POLYLINE_TYPE;
          }
 else           if (point) {
            polylineRule=POINT_TYPE;
          }
          if (building) {
            polygonRule=DEFAULT_POLYGON_BUILDING;
          }
 else           if (polygon_center) {
            polygonRule=POLYGON_WITH_CENTER_TYPE;
          }
 else           if (polygon) {
            polygonRule=POLYGON_TYPE;
          }
 else           if (polyline) {
            polygonRule=POLYLINE_TYPE;
          }
 else           if (point) {
            polygonRule=POINT_TYPE;
          }
          stepSubtype(st,maxzoom,tag,val,currentType,subtype,polygonRule,polylineRule,pointRule);
        }
      }
    }
);
    log.info("Time to init " + (System.currentTimeMillis() - time));
    is.close();
  }
 catch (  IOException e) {
    log.error("Unexpected error",e);
    e.printStackTrace();
    throw new RuntimeException(e);
  }
catch (  RuntimeException e) {
    log.error("Unexpected error",e);
    e.printStackTrace();
    throw e;
  }
catch (  ParserConfigurationException e) {
    log.error("Unexpected error",e);
    e.printStackTrace();
    throw new RuntimeException(e);
  }
catch (  SAXException e) {
    log.error("Unexpected error",e);
    e.printStackTrace();
    throw new RuntimeException(e);
  }
}
