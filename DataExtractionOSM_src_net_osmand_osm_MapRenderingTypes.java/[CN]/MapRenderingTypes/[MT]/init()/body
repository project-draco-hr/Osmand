{
  InputStream is;
  try {
    if (resourceName == null) {
      is=MapRenderingTypes.class.getResourceAsStream("rendering_types.xml");
    }
 else {
      is=new FileInputStream(resourceName);
    }
    long time=System.currentTimeMillis();
    final SAXParser parser=SAXParserFactory.newInstance().newSAXParser();
    parser.parse(is,new DefaultHandler(){
      String poiParentCategory=null;
      String poiParentPrefix=null;
      @Override public void startElement(      String uri,      String localName,      String name,      Attributes attributes) throws SAXException {
        name=parser.isNamespaceAware() ? localName : name;
        if (name.equals("category")) {
          poiParentCategory=attributes.getValue("poi_category");
          poiParentPrefix=attributes.getValue("poi_prefix");
          String tag=attributes.getValue("poi_tag");
          if (tag != null) {
            MapRulType rtype=new MapRulType();
            rtype.poiCategory=AmenityType.valueOf(poiParentCategory.toUpperCase());
            rtype.poiSpecified=true;
            rtype.poiPrefix=poiParentPrefix;
            rtype.tag=tag;
            registerRuleType(tag,null,rtype);
          }
        }
 else         if (name.equals("type")) {
          MapRulType rtype=new MapRulType();
          String val=attributes.getValue("minzoom");
          rtype.minzoom=15;
          if (val != null) {
            rtype.minzoom=Integer.parseInt(val);
          }
          rtype.tag=attributes.getValue("tag");
          rtype.value=attributes.getValue("value");
          if (rtype.value != null && rtype.value.length() == 0) {
            rtype.value=null;
          }
          registerRuleType(rtype.tag,rtype.value,rtype);
          rtype.additional=Boolean.parseBoolean(attributes.getValue("additional"));
          rtype.relation=Boolean.parseBoolean(attributes.getValue("relation"));
          String v=attributes.getValue("nameTags");
          if (v != null) {
            String[] names=v.split(",");
            rtype.names=new MapRulType[names.length];
            for (int i=0; i < names.length; i++) {
              MapRulType mt=types.get(constructRuleKey(names[i],null));
              if (mt == null) {
                mt=new MapRulType();
                mt.tag=names[i];
                mt.onlyNameRef=true;
                mt.additional=false;
                registerRuleType(names[i],null,mt);
              }
              rtype.names[i]=mt;
            }
          }
          String targetTag=attributes.getValue("target_tag");
          String targetValue=attributes.getValue("target_value");
          if (targetTag != null || targetValue != null) {
            if (targetTag == null) {
              targetTag=rtype.tag;
            }
            if (targetValue == null) {
              targetValue=rtype.value;
            }
            rtype.targetTagValue=types.get(constructRuleKey(targetTag,targetValue));
            if (rtype.targetTagValue == null) {
              throw new RuntimeException("Illegal target tag/value " + targetTag + " "+ targetValue);
            }
          }
          if (poiParentCategory != null) {
            rtype.poiCategory=AmenityType.valueOf(poiParentCategory.toUpperCase());
            rtype.poiSpecified=true;
          }
          if (poiParentPrefix != null) {
            rtype.poiPrefix=poiParentPrefix;
          }
          String poiCategory=attributes.getValue("poi_category");
          if (poiCategory != null) {
            rtype.poiSpecified=true;
            if (poiCategory.length() == 0) {
              rtype.poiCategory=null;
            }
 else {
              rtype.poiCategory=AmenityType.valueOf(poiCategory.toUpperCase());
            }
          }
          String poiPrefix=attributes.getValue("poi_prefix");
          if (poiPrefix != null) {
            rtype.poiPrefix=poiPrefix;
          }
        }
      }
    }
);
    log.info("Time to init " + (System.currentTimeMillis() - time));
    is.close();
  }
 catch (  IOException e) {
    log.error("Unexpected error",e);
    e.printStackTrace();
    throw new RuntimeException(e);
  }
catch (  RuntimeException e) {
    log.error("Unexpected error",e);
    e.printStackTrace();
    throw e;
  }
catch (  ParserConfigurationException e) {
    log.error("Unexpected error",e);
    e.printStackTrace();
    throw new RuntimeException(e);
  }
catch (  SAXException e) {
    log.error("Unexpected error",e);
    e.printStackTrace();
    throw new RuntimeException(e);
  }
}
