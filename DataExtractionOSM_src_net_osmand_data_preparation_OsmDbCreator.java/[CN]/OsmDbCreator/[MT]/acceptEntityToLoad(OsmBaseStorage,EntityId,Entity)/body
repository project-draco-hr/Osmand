{
  if (dialect == DBDialect.NOSQL) {
    String key;
    currentCountNode++;
    if (e instanceof Node) {
      if (!e.getTags().isEmpty()) {
        allNodes++;
      }
      key="0" + e.getId();
    }
 else     if (e instanceof Way) {
      allWays++;
      key="1" + e.getId();
    }
 else {
      allRelations++;
      key="2" + e.getId();
    }
    batch.Put(key,serializeEntityWOId(e));
    if (currentCountNode > BATCH_SIZE_OSM) {
      database.write(options,batch);
      batch=new DBWriteBatch();
      long usedMemory=Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
      log.info("" + Runtime.getRuntime().totalMemory() / (1024 * 1024) + " MB Total " + (usedMemory / (1024 * 1024)) + " MB used memory");
      currentCountNode=0;
    }
  }
 else {
    try {
      e.removeTags(tagsToIgnore);
      ByteArrayOutputStream tags=new ByteArrayOutputStream();
      try {
        for (        Entry<String,String> i : e.getTags().entrySet()) {
          tags.write(i.getKey().getBytes("UTF-8"));
          tags.write(0);
          tags.write(i.getValue().getBytes("UTF-8"));
          tags.write(0);
        }
      }
 catch (      IOException es) {
        throw new RuntimeException(es);
      }
      if (e instanceof Node) {
        currentCountNode++;
        if (!e.getTags().isEmpty()) {
          allNodes++;
        }
        prepNode.setLong(1,e.getId());
        prepNode.setDouble(2,((Node)e).getLatitude());
        prepNode.setDouble(3,((Node)e).getLongitude());
        prepNode.setBytes(4,tags.toByteArray());
        prepNode.addBatch();
        if (currentCountNode >= BATCH_SIZE_OSM) {
          prepNode.executeBatch();
          dbConn.commit();
          currentCountNode=0;
        }
      }
 else       if (e instanceof Way) {
        allWays++;
        short ord=0;
        TLongArrayList nodeIds=((Way)e).getNodeIds();
        int boundary=((Way)e).getTag(OSMTagKey.BOUNDARY) != null ? 1 : 0;
        for (int j=0; j < nodeIds.size(); j++) {
          currentWaysCount++;
          if (ord == 0) {
            prepWays.setBytes(4,tags.toByteArray());
          }
          prepWays.setLong(1,e.getId());
          prepWays.setLong(2,nodeIds.get(j));
          prepWays.setLong(3,ord++);
          prepWays.setInt(5,boundary);
          prepWays.addBatch();
        }
        if (currentWaysCount >= BATCH_SIZE_OSM) {
          prepWays.executeBatch();
          dbConn.commit();
          currentWaysCount=0;
        }
      }
 else {
        allRelations++;
        short ord=0;
        for (        Entry<EntityId,String> i : ((Relation)e).getMembersMap().entrySet()) {
          currentRelationsCount++;
          if (ord == 0) {
            prepRelations.setBytes(6,tags.toByteArray());
          }
          prepRelations.setLong(1,e.getId());
          prepRelations.setLong(2,i.getKey().getId());
          prepRelations.setLong(3,i.getKey().getType().ordinal());
          prepRelations.setString(4,i.getValue());
          prepRelations.setLong(5,ord++);
          prepRelations.addBatch();
        }
        if (currentRelationsCount >= BATCH_SIZE_OSM) {
          prepRelations.executeBatch();
          dbConn.commit();
          currentRelationsCount=0;
        }
      }
    }
 catch (    SQLException ex) {
      log.error("Could not save in db",ex);
    }
  }
  return false;
}
