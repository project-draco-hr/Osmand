{
  float speed=DEFAULT_SPEED;
  if (currentLocation != null && currentLocation.hasSpeed()) {
    speed=Math.max(currentLocation.getSpeed(),speed);
  }
  NextDirectionInfo nextInfo=router.getNextRouteDirectionInfo(new NextDirectionInfo(),true);
  RouteSegmentResult currentSegment=router.getCurrentSegmentResult();
  if (nextInfo.directionInfo == null) {
    return;
  }
  int dist=nextInfo.distanceTo;
  RouteDirectionInfo next=nextInfo.directionInfo;
  if (next != nextRouteDirection) {
    nextRouteDirection=next;
    currentStatus=STATUS_UNKNOWN;
    suppressDest=false;
    playedAndArriveAtTarget=false;
    announceBackOnRoute=false;
    if (playGoAheadDist != -1) {
      playGoAheadDist=0;
    }
  }
  if (!repeat) {
    if (dist <= 0) {
      return;
    }
 else     if (needsInforming()) {
      playGoAhead(dist,getSpeakableStreetName(currentSegment,next,false));
      return;
    }
 else     if (currentStatus == STATUS_TOLD) {
      return;
    }
  }
  if (currentStatus == STATUS_UNKNOWN) {
    if ((playGoAheadDist == -1) || (dist > PREPARE_LONG_DISTANCE)) {
      playGoAheadDist=dist - 80;
    }
  }
  NextDirectionInfo nextNextInfo=router.getNextRouteDirectionInfoAfter(nextInfo,new NextDirectionInfo(),true);
  if ((repeat || statusNotPassed(STATUS_TURN)) && isDistanceLess(speed,dist,TURN_DISTANCE,TURN_DEFAULT_SPEED)) {
    if (nextNextInfo.distanceTo < TURN_IN_DISTANCE_END && nextNextInfo != null) {
      playMakeTurn(currentSegment,next,nextNextInfo);
    }
 else {
      playMakeTurn(currentSegment,next,null);
    }
    if (nextNextInfo.distanceTo < TURN_IN_DISTANCE && isTargetPoint(nextNextInfo)) {
      if (!next.getTurnType().goAhead()) {
        andSpeakArriveAtPoint(nextNextInfo);
      }
    }
    nextStatusAfter(STATUS_TURN);
  }
 else   if ((repeat || statusNotPassed(STATUS_TURN_IN)) && isDistanceLess(speed,dist,TURN_IN_DISTANCE,0f)) {
    if (repeat || dist >= TURN_IN_DISTANCE_END) {
      if ((isDistanceLess(speed,nextNextInfo.distanceTo,TURN_DISTANCE,0f) || nextNextInfo.distanceTo < TURN_IN_DISTANCE_END) && nextNextInfo != null) {
        playMakeTurnIn(currentSegment,next,dist - (int)btScoDelayDistance,nextNextInfo.directionInfo);
      }
 else {
        playMakeTurnIn(currentSegment,next,dist - (int)btScoDelayDistance,null);
      }
      playAndArriveAtDestination(repeat,nextInfo,currentSegment);
    }
    nextStatusAfter(STATUS_TURN_IN);
  }
 else   if ((repeat || statusNotPassed(STATUS_PREPARE)) && (dist <= PREPARE_DISTANCE)) {
    if (repeat || dist >= PREPARE_DISTANCE_END) {
      if (!repeat && (next.getTurnType().keepLeft() || next.getTurnType().keepRight())) {
      }
 else {
        playPrepareTurn(currentSegment,next,dist);
        playAndArriveAtDestination(repeat,nextInfo,currentSegment);
      }
    }
    nextStatusAfter(STATUS_PREPARE);
  }
 else   if ((repeat || statusNotPassed(STATUS_LONG_PREPARE)) && (dist <= PREPARE_LONG_DISTANCE)) {
    if (repeat || dist >= PREPARE_LONG_DISTANCE_END) {
      playPrepareTurn(currentSegment,next,dist);
      playAndArriveAtDestination(repeat,nextInfo,currentSegment);
    }
    nextStatusAfter(STATUS_LONG_PREPARE);
  }
 else   if (statusNotPassed(STATUS_UNKNOWN)) {
    nextStatusAfter(STATUS_UNKNOWN);
  }
 else   if (repeat || (statusNotPassed(STATUS_PREPARE) && dist < playGoAheadDist)) {
    playGoAheadDist=0;
    playGoAhead(dist,getSpeakableStreetName(currentSegment,next,false));
  }
}
