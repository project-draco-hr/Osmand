{
  InputStream stream;
  if (parseSmallFile) {
    stream=new FileInputStream(DefaultLauncherConstants.pathToOsmFile);
  }
 else {
    stream=new FileInputStream(DefaultLauncherConstants.pathToOsmBz2File);
    if (stream.read() != 66 || stream.read() != 90)     throw new RuntimeException("The source stream must start with the characters BZ if it is to be read as a BZip2 stream.");
 else     stream=new CBZip2InputStream(stream);
  }
  System.out.println("USED Memory " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / 1e6);
  long st=System.currentTimeMillis();
  final List<Node> places=new ArrayList<Node>();
  final List<Entity> buildings=new ArrayList<Entity>();
  final List<Node> amenities=new ArrayList<Node>();
  final List<Way> mapWays=new ArrayList<Way>();
  OsmBaseStorage storage=new OsmBaseStorage(){
    @Override public boolean acceptEntityToLoad(    Entity e){
      if ("yes".equals(e.getTag(OSMTagKey.BUILDING))) {
        if (e.getTag(OSMTagKey.ADDR_HOUSE_NUMBER) != null && e.getTag(OSMTagKey.ADDR_STREET) != null) {
          buildings.add(e);
          return true;
        }
      }
      return super.acceptEntityToLoad(e);
    }
    @Override public boolean acceptNodeToLoad(    Node n){
      if (n.getTag(OSMTagKey.AMENITY) != null) {
        amenities.add(n);
      }
 else       if (n.getTag(OSMTagKey.SHOP) != null) {
        n.putTag(OSMTagKey.AMENITY.getValue(),OSMTagKey.SHOP.getValue());
        amenities.add(n);
      }
 else       if (n.getTag(OSMTagKey.LEISURE) != null) {
        n.putTag(OSMTagKey.AMENITY.getValue(),OSMTagKey.LEISURE.getValue());
        amenities.add(n);
      }
      if (n.getTag(OSMTagKey.PLACE) != null) {
        places.add(n);
        if (places.size() % 500 == 0)         System.out.println();
        System.out.print("-");
      }
      return true;
    }
    @Override public boolean acceptRelationToLoad(    Relation w){
      return false;
    }
    @Override public boolean acceptWayToLoad(    Way w){
      if (OSMSettings.wayForCar(w.getTag(OSMTagKey.HIGHWAY))) {
        mapWays.add(w);
        return true;
      }
      return false;
    }
  }
;
  if (parseOSM) {
    storage.parseOSM(stream);
  }
  System.out.println(System.currentTimeMillis() - st);
  Region country=new Region(null);
  for (  Node s : places) {
    String place=s.getTag(OSMTagKey.PLACE);
    if (place == null) {
      continue;
    }
    if ("country".equals(place)) {
      country.setEntity(s);
    }
 else {
      City registerCity=country.registerCity(s);
      if (registerCity == null) {
        System.out.println(place + " - " + s.getTag(OSMTagKey.NAME));
      }
    }
  }
  for (  Entity b : buildings) {
    LatLon center=b.getLatLon();
    if (center == null) {
    }
 else {
      City city=country.getClosestCity(center);
      if (city != null) {
        city.registerBuilding(center,b);
      }
    }
  }
  for (  Node node : amenities) {
    country.registerAmenity(node);
  }
  DataTileManager<LatLon> waysManager=new DataTileManager<LatLon>();
  for (  Way w : mapWays) {
    for (    Node n : w.getNodes()) {
      if (n != null) {
        LatLon latLon=n.getLatLon();
        waysManager.registerObject(latLon.getLatitude(),latLon.getLongitude(),latLon);
      }
    }
  }
  mapPanel.setPoints(waysManager);
  runUI(country);
  List<Long> interestedObjects=new ArrayList<Long>();
  MapUtils.addIdsToList(places,interestedObjects);
  MapUtils.addIdsToList(amenities,interestedObjects);
  MapUtils.addIdsToList(mapWays,interestedObjects);
  if (DefaultLauncherConstants.writeTestOsmFile != null) {
    OSMStorageWriter writer=new OSMStorageWriter(storage.getRegisteredEntities());
    writer.saveStorage(new FileOutputStream(DefaultLauncherConstants.writeTestOsmFile),interestedObjects,true);
  }
  System.out.println();
  System.out.println("USED Memory " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / 1e6);
  System.out.println("TIME : " + (System.currentTimeMillis() - st));
}
