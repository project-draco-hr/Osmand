{
  InputStream stream=new FileInputStream(path);
  long st=System.currentTimeMillis();
  if (path.endsWith(".bz2")) {
    if (stream.read() != 'B' || stream.read() != 'Z')     throw new RuntimeException("The source stream must start with the characters BZ if it is to be read as a BZip2 stream.");
 else     stream=new CBZip2InputStream(stream);
  }
  places=new ArrayList<Node>();
  buildings=new ArrayList<Entity>();
  amenities=new ArrayList<Amenity>();
  mapWays=new ArrayList<Way>();
  OsmBaseStorage storage=new OsmBaseStorage(){
    @Override public boolean acceptEntityToLoad(    Entity e){
      if ("yes".equals(e.getTag(OSMTagKey.BUILDING))) {
        if (e.getTag(OSMTagKey.ADDR_HOUSE_NUMBER) != null && e.getTag(OSMTagKey.ADDR_STREET) != null) {
          buildings.add(e);
          return true;
        }
      }
      return super.acceptEntityToLoad(e);
    }
    @Override public boolean acceptNodeToLoad(    Node n){
      if (Amenity.isAmenity(n)) {
        amenities.add(new Amenity(n));
      }
      if (n.getTag(OSMTagKey.PLACE) != null) {
        places.add(n);
      }
      return true;
    }
    @Override public boolean acceptRelationToLoad(    Relation w){
      return false;
    }
    @Override public boolean acceptWayToLoad(    Way w){
      if (OSMSettings.wayForCar(w.getTag(OSMTagKey.HIGHWAY))) {
        mapWays.add(w);
        return true;
      }
      return false;
    }
  }
;
  storage.parseOSM(stream,new ConsoleProgressImplementation());
  System.out.println("File parsed : " + (System.currentTimeMillis() - st));
  Region country=new Region(null);
  country.setStorage(storage);
  for (  Node s : places) {
    String place=s.getTag(OSMTagKey.PLACE);
    if (place == null) {
      continue;
    }
    if ("country".equals(place)) {
      country.setEntity(s);
    }
 else {
      City registerCity=country.registerCity(s);
      if (registerCity == null) {
        System.out.println(place + " - " + s.getTag(OSMTagKey.NAME));
      }
    }
  }
  for (  Entity b : buildings) {
    LatLon center=b.getLatLon();
    if (center == null) {
    }
 else {
      City city=country.getClosestCity(center);
      if (city != null) {
        city.registerBuilding(center,b);
      }
    }
  }
  for (  Amenity a : amenities) {
    country.registerAmenity(a);
  }
  waysManager=new DataTileManager<Way>();
  for (  Way w : mapWays) {
    if (w.getTag(OSMTagKey.NAME) != null) {
      LatLon latLon=MapUtils.getWeightCenterForNodes(w.getNodes());
      waysManager.registerObject(latLon.getLatitude(),latLon.getLongitude(),w);
    }
  }
  return country;
}
