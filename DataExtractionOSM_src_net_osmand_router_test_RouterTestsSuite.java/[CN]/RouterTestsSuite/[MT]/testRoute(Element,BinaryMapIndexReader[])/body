{
  BinaryRoutePlanner planner=new BinaryRoutePlanner(NativeSwingRendering.getDefaultFromSettings(),regions);
  String vehicle=testCase.getAttribute("vehicle");
  RoutingContext ctx=new RoutingContext(RoutingConfiguration.getDefault().build(vehicle,true));
  String testDescription=testCase.getAttribute("description");
  String skip=testCase.getAttribute("skip_comment");
  if (skip != null && skip.length() > 0) {
    System.err.println("\n\n!! Skipped test case '" + testDescription + "' because '"+ skip+ "'\n\n");
    return;
  }
  double startLat=Double.parseDouble(testCase.getAttribute("start_lat"));
  double startLon=Double.parseDouble(testCase.getAttribute("start_lon"));
  RouteSegment startSegment=planner.findRouteSegment(startLat,startLon,ctx);
  double endLat=Double.parseDouble(testCase.getAttribute("target_lat"));
  double endLon=Double.parseDouble(testCase.getAttribute("target_lon"));
  RouteSegment endSegment=planner.findRouteSegment(endLat,endLon,ctx);
  if (startSegment == null) {
    throw new IllegalArgumentException("Start segment is not found for test : " + testDescription);
  }
  if (endSegment == null) {
    throw new IllegalArgumentException("End segment is not found for test : " + testDescription);
  }
  List<RouteSegmentResult> route=planner.searchRoute(ctx,startSegment,endSegment,false);
  NodeList segments=testCase.getElementsByTagName("segment");
  int i=0;
  while (i < segments.getLength() && i < route.size()) {
    Element segment=(Element)segments.item(i);
    long expectedId=Long.parseLong(segment.getAttribute("id"));
    int expectedStart=Integer.parseInt(segment.getAttribute("start"));
    int expectedEnd=Integer.parseInt(segment.getAttribute("end"));
    RouteSegmentResult segmentResult=route.get(i);
    if (expectedId != segmentResult.getObject().getId() >> 1) {
      throw new IllegalArgumentException("Test : '" + testDescription + "' on segment "+ (i + 1)+ " : "+ "\n"+ "(expected route id) "+ expectedId+ " != "+ (segmentResult.getObject().getId() >> 1)+ " (actual route id)");
    }
    if (expectedStart != segmentResult.getStartPointIndex()) {
      throw new IllegalArgumentException("Test : '" + testDescription + "' on segment "+ (i + 1)+ " : "+ "\n"+ "(expected start index) "+ expectedStart+ " != "+ segmentResult.getStartPointIndex()+ " (actual start index)");
    }
    if (expectedEnd != segmentResult.getEndPointIndex()) {
      throw new IllegalArgumentException("Test : '" + testDescription + "' on segment "+ (i + 1)+ " : "+ "\n"+ "(expected end index) "+ expectedEnd+ " != "+ segmentResult.getEndPointIndex()+ " (actual end index)");
    }
    i++;
  }
  if (segments.getLength() < route.size()) {
    throw new IllegalArgumentException("Expected route is shorter than calculated for test : " + testDescription);
  }
 else   if (segments.getLength() > route.size()) {
    throw new IllegalArgumentException("Expected route is more lengthy than calculated for test : " + testDescription);
  }
}
