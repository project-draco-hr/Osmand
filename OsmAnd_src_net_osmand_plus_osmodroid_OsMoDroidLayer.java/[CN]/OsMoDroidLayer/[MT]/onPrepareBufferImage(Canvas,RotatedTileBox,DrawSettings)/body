{
  for (  ColoredGPX cg : gpxArrayList) {
    cg.gpxFile.proccessPoints();
    List<List<WptPt>> points=cg.gpxFile.processedPointsToDisplay;
    paint.setColor(cg.color);
    final QuadRect latLonBounds=tileBox.getLatLonBounds();
    for (    List<WptPt> l : points) {
      path.rewind();
      int startIndex=-1;
      for (int i=0; i < l.size(); i++) {
        WptPt ls=l.get(i);
        if (startIndex == -1) {
          if (ls.lat >= latLonBounds.bottom - 0.1 && ls.lat <= latLonBounds.top + 0.1 && ls.lon >= latLonBounds.left - 0.1 && ls.lon <= latLonBounds.right + 0.1) {
            startIndex=i > 0 ? i - 1 : i;
          }
        }
 else         if (!(latLonBounds.left <= ls.lon + 0.1 && ls.lon - 0.1 <= latLonBounds.right && latLonBounds.bottom <= ls.lat + 0.1 && ls.lat - 0.1 <= latLonBounds.top)) {
          drawSegment(canvas,tileBox,l,startIndex,i);
          startIndex=-1;
        }
      }
      if (startIndex != -1) {
        drawSegment(canvas,tileBox,l,startIndex,l.size() - 1);
        continue;
      }
    }
  }
  for (  OsMoDroidPoint op : osMoDroidPointArrayList) {
    if (seekOsMoDroidPoint != null && seekOsMoDroidPoint.equals(op)) {
      map.setMapLocation(op.latlon.getLatitude(),op.latlon.getLongitude());
    }
    LatLon newLatlon;
    try {
      newLatlon=new LatLon(myOsMoDroidPlugin.mIRemoteService.getObjectLat(layerId,op.id),myOsMoDroidPlugin.mIRemoteService.getObjectLon(layerId,op.id));
      if (!op.latlon.equals(newLatlon)) {
        op.prevlatlon=op.latlon;
      }
      op.latlon=newLatlon;
      op.speed=myOsMoDroidPlugin.mIRemoteService.getObjectSpeed(layerId,op.id);
    }
 catch (    RemoteException e) {
      e.printStackTrace();
      return;
    }
    double latitude=op.latlon.getLatitude();
    double longitude=op.latlon.getLongitude();
    double prevlatitude=op.latlon.getLatitude();
    double prevlongitude=op.latlon.getLongitude();
    if (op.prevlatlon != null) {
      prevlatitude=op.prevlatlon.getLatitude();
      prevlongitude=op.prevlatlon.getLongitude();
    }
    int locationX=(int)tileBox.getPixXFromLatLon(latitude,longitude);
    int locationY=(int)tileBox.getPixYFromLatLon(latitude,longitude);
    int prevlocationX=(int)tileBox.getPixXFromLatLon(prevlatitude,prevlongitude);
    int prevlocationY=(int)tileBox.getPixYFromLatLon(prevlatitude,prevlongitude);
    textPaint.setColor(Color.parseColor("#013220"));
    canvas.drawText(op.name,locationX,locationY - radius,textPaint);
    canvas.drawText(op.speed,locationX,locationY - 2 * radius,textPaint);
    textPaint.setColor(Color.parseColor("#" + op.color));
    textPaint.setShadowLayer(radius,0,0,Color.GRAY);
    canvas.drawCircle(locationX,locationY,radius,textPaint);
    textPaint.setStrokeWidth(radius);
    canvas.drawLine(locationX,locationY,prevlocationX,prevlocationY,textPaint);
  }
  for (  OsMoDroidPoint point : osMoDroidFixedPointArrayList) {
    double latitude=point.latlon.getLatitude();
    double longitude=point.latlon.getLongitude();
    int locationX=(int)tileBox.getPixXFromLatLon(latitude,longitude);
    int locationY=(int)tileBox.getPixYFromLatLon(latitude,longitude);
    textPaint.setColor(Color.parseColor("#013220"));
    canvas.drawText(point.name,locationX,locationY - radius,textPaint);
    textPaint.setColor(Color.parseColor("#" + point.color));
    textPaint.setShadowLayer(radius,0,0,Color.GRAY);
    canvas.drawRect(new Rect(locationX - radius,locationY - radius,locationX + radius,locationY + radius),textPaint);
  }
}
