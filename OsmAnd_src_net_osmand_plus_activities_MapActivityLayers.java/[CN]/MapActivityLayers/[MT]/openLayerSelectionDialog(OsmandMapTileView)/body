{
  final TIntArrayList layers=new TIntArrayList();
  TIntArrayList selectedList=new TIntArrayList();
  final OsmandSettings settings=getApplication().getSettings();
  layers.add(R.string.layer_map);
  selectedList.add(1);
  layers.add(R.string.layer_poi);
  selectedList.add(settings.SHOW_POI_OVER_MAP.get() ? 1 : 0);
  if (settings.SHOW_POI_OVER_MAP.get()) {
    layers.add(R.string.layer_poi_label);
    selectedList.add(settings.SHOW_POI_LABEL.get() ? 1 : 0);
  }
  layers.add(R.string.layer_favorites);
  selectedList.add(settings.SHOW_FAVORITES.get() ? 1 : 0);
  layers.add(R.string.layer_overlay);
  selectedList.add(overlayLayer.getMap() != null ? 1 : 0);
  layers.add(R.string.layer_underlay);
  selectedList.add(underlayLayer.getMap() != null ? 1 : 0);
  layers.add(R.string.layer_gpx_layer);
  selectedList.add(gpxLayer.isVisible() ? 1 : 0);
  if (routeInfoLayer.couldBeVisible()) {
    layers.add(R.string.layer_route);
    selectedList.add(routeInfoLayer.isUserDefinedVisible() ? 1 : 0);
  }
  layers.add(R.string.layer_transport);
  selectedList.add(settings.SHOW_TRANSPORT_OVER_MAP.get() ? 1 : 0);
  if (TransportRouteHelper.getInstance().routeIsCalculated()) {
    layers.add(R.string.layer_transport_route);
    selectedList.add(routeInfoLayer.isUserDefinedVisible() ? 1 : 0);
  }
  layers.add(R.string.layer_osm_bugs);
  selectedList.add(settings.SHOW_OSM_BUGS.get() ? 1 : 0);
  final boolean[] selected=new boolean[selectedList.size()];
  for (int i=0; i < selected.length; i++) {
    selected[i]=selectedList.get(i) > 0;
  }
  Builder builder=new AlertDialog.Builder(activity);
  String[] layersName=new String[layers.size()];
  for (int i=0; i < layers.size(); i++) {
    layersName[i]=getString(layers.get(i));
  }
  builder.setMultiChoiceItems(layersName,selected,new DialogInterface.OnMultiChoiceClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int item,    boolean isChecked){
      if (layers.get(item) == R.string.layer_map) {
        dialog.dismiss();
        selectMapLayer(mapView);
      }
 else       if (layers.get(item) == R.string.layer_poi) {
        if (isChecked) {
          selectPOIFilterLayer(mapView);
        }
        settings.SHOW_POI_OVER_MAP.set(isChecked);
      }
 else       if (layers.get(item) == R.string.layer_favorites) {
        settings.SHOW_FAVORITES.set(isChecked);
      }
 else       if (layers.get(item) == R.string.layer_poi_label) {
        settings.SHOW_POI_LABEL.set(isChecked);
      }
 else       if (layers.get(item) == R.string.layer_overlay) {
        if (overlayLayer.getMap() != null) {
          settings.MAP_OVERLAY.set(null);
          updateMapSource(mapView,null);
        }
 else {
          dialog.dismiss();
          selectMapOverlayLayer(mapView,settings.MAP_OVERLAY,settings.MAP_OVERLAY_TRANSPARENCY,overlayLayer);
        }
      }
 else       if (layers.get(item) == R.string.layer_underlay) {
        if (underlayLayer.getMap() != null) {
          settings.MAP_UNDERLAY.set(null);
          updateMapSource(mapView,null);
        }
 else {
          dialog.dismiss();
          selectMapOverlayLayer(mapView,settings.MAP_UNDERLAY,settings.MAP_TRANSPARENCY,mapTileLayer,mapVectorLayer);
        }
      }
 else       if (layers.get(item) == R.string.layer_gpx_layer) {
        if (gpxLayer.isVisible()) {
          getApplication().setGpxFileToDisplay(null);
          gpxLayer.clearCurrentGPX();
        }
 else {
          dialog.dismiss();
          showGPXFileLayer(mapView);
        }
      }
 else       if (layers.get(item) == R.string.layer_transport) {
        settings.SHOW_TRANSPORT_OVER_MAP.set(isChecked);
      }
 else       if (layers.get(item) == R.string.layer_osm_bugs) {
        settings.SHOW_OSM_BUGS.set(isChecked);
      }
 else       if (layers.get(item) == R.string.layer_route) {
        routeInfoLayer.setVisible(isChecked);
      }
 else       if (layers.get(item) == R.string.layer_transport_route) {
        transportInfoLayer.setVisible(isChecked);
      }
      updateLayers(mapView);
      mapView.refreshMap();
    }
  }
);
  builder.show();
}
