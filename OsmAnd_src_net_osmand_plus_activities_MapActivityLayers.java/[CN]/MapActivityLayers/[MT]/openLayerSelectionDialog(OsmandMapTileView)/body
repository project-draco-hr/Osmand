{
  final OsmandSettings settings=getApplication().getSettings();
  final ContextMenuAdapter adapter=new ContextMenuAdapter(activity);
  adapter.item(R.string.layer_map_appearance).icons(R.drawable.ic_action_settings_dark,R.drawable.ic_action_settings_light).reg();
  adapter.item(R.string.layer_poi).selected(settings.SHOW_POI_OVER_MAP.get() ? 1 : 0).icons(R.drawable.ic_action_info_dark,R.drawable.ic_action_info_light).reg();
  adapter.item(R.string.layer_poi_label).selected(settings.SHOW_POI_LABEL.get() ? 1 : 0).icons(R.drawable.ic_action_text_dark,R.drawable.ic_action_text_light).reg();
  adapter.item(R.string.layer_favorites).selected(settings.SHOW_FAVORITES.get() ? 1 : 0).icons(R.drawable.a_3_rating_important_dark,R.drawable.a_3_rating_important_light).reg();
  adapter.item(R.string.layer_gpx_layer).selected(getApplication().getGpxFileToDisplay() != null ? 1 : 0).icons(R.drawable.ic_action_polygom_dark,R.drawable.ic_action_polygom_light).reg();
  adapter.item(R.string.layer_transport).selected(settings.SHOW_TRANSPORT_OVER_MAP.get() ? 1 : 0).icons(R.drawable.ic_action_bus_dark,R.drawable.ic_action_bus_light).reg();
  if (TransportRouteHelper.getInstance().routeIsCalculated()) {
    adapter.item(R.string.layer_transport_route).selected(1).icons(R.drawable.ic_action_bus_dark,R.drawable.ic_action_bus_light).reg();
  }
  OsmandPlugin.registerLayerContextMenu(mapView,adapter,activity);
  final LayerMenuListener listener=new LayerMenuListener(adapter,mapView,settings);
  Builder b=new AlertDialog.Builder(activity);
  final int padding=(int)(12 * activity.getResources().getDisplayMetrics().density + 0.5f);
  final boolean light=getApplication().getSettings().isLightContentMenu();
  final int layout;
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
    layout=R.layout.list_menu_item;
  }
 else {
    layout=R.layout.list_menu_item_native;
  }
  ListAdapter listAdapter=new ArrayAdapter<String>(activity,layout,R.id.title,adapter.getItemNames()){
    @Override public View getView(    final int position,    View convertView,    ViewGroup parent){
      View v=activity.getLayoutInflater().inflate(layout,null);
      TextView tv=(TextView)v.findViewById(R.id.title);
      tv.setText(adapter.getItemName(position));
      if (adapter.getImageId(position,light) != 0) {
        tv.setCompoundDrawablesWithIntrinsicBounds(adapter.getImageId(position,light),0,0,0);
      }
 else {
        tv.setCompoundDrawablesWithIntrinsicBounds(R.drawable.list_activities_transparent,0,0,0);
      }
      tv.setCompoundDrawablePadding(padding);
      final CheckBox ch=((CheckBox)v.findViewById(R.id.check_item));
      if (adapter.getSelection(position) == -1) {
        ch.setVisibility(View.INVISIBLE);
      }
 else {
        ch.setOnCheckedChangeListener(null);
        ch.setChecked(adapter.getSelection(position) > 0);
        ch.setOnCheckedChangeListener(new OnCheckedChangeListener(){
          @Override public void onCheckedChanged(          CompoundButton buttonView,          boolean isChecked){
            listener.onClick(position,isChecked);
          }
        }
);
      }
      return v;
    }
  }
;
  b.setAdapter(listAdapter,new OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int position){
      if (adapter.getSelection(position) >= 0) {
        listener.onClick(position,!(adapter.getSelection(position) > 0));
      }
 else {
        listener.onClick(position,adapter.getSelection(position) > 0);
      }
    }
  }
);
  final AlertDialog dlg=b.create();
  listener.setDialog(dlg);
  dlg.setCanceledOnTouchOutside(true);
  dlg.show();
}
