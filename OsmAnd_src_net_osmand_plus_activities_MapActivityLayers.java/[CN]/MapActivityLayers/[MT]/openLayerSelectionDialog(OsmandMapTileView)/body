{
  final OsmandSettings settings=getApplication().getSettings();
  final ContextMenuAdapter adapter=new ContextMenuAdapter(activity);
  adapter.registerSelectedItem(R.string.layer_poi,settings.SHOW_POI_OVER_MAP.get() ? 1 : 0,R.drawable.list_activities_poi);
  adapter.registerSelectedItem(R.string.layer_poi_label,settings.SHOW_POI_LABEL.get() ? 1 : 0,0);
  adapter.registerSelectedItem(R.string.layer_favorites,settings.SHOW_FAVORITES.get() ? 1 : 0,R.drawable.list_activities_favorites);
  adapter.registerSelectedItem(R.string.layer_gpx_layer,getApplication().getGpxFileToDisplay() != null ? 1 : 0,R.drawable.list_activities_gpx_tracks);
  if (routeInfoLayer.couldBeVisible()) {
    adapter.registerSelectedItem(R.string.layer_route,routeInfoLayer.isUserDefinedVisible() ? 1 : 0,0);
  }
  adapter.registerSelectedItem(R.string.layer_transport,settings.SHOW_TRANSPORT_OVER_MAP.get() ? 1 : 0,R.drawable.list_activities_transport_stops);
  if (TransportRouteHelper.getInstance().routeIsCalculated()) {
    adapter.registerSelectedItem(R.string.layer_transport_route,routeInfoLayer.isUserDefinedVisible() ? 1 : 0,0);
  }
  OsmandPlugin.registerLayerContextMenu(mapView,adapter,activity);
  final OnMultiChoiceClickListener listener=new DialogInterface.OnMultiChoiceClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int item,    boolean isChecked){
      int itemId=adapter.getItemId(item);
      OnContextMenuClick clck=adapter.getClickAdapter(item);
      if (clck != null) {
        clck.onContextMenuClick(itemId,item,isChecked,dialog);
      }
 else       if (itemId == R.string.layer_poi) {
        if (isChecked) {
          selectPOIFilterLayer(mapView);
        }
        settings.SHOW_POI_OVER_MAP.set(isChecked);
      }
 else       if (itemId == R.string.layer_poi_label) {
        settings.SHOW_POI_LABEL.set(isChecked);
      }
 else       if (itemId == R.string.layer_favorites) {
        settings.SHOW_FAVORITES.set(isChecked);
      }
 else       if (itemId == R.string.layer_gpx_layer) {
        if (getApplication().getGpxFileToDisplay() != null) {
          getApplication().setGpxFileToDisplay(null,false);
          gpxLayer.clearCurrentGPX();
        }
 else {
          dialog.dismiss();
          showGPXFileLayer(mapView);
        }
      }
 else       if (itemId == R.string.layer_route) {
        routeInfoLayer.setVisible(isChecked);
      }
 else       if (itemId == R.string.layer_transport_route) {
        transportInfoLayer.setVisible(isChecked);
      }
 else       if (itemId == R.string.layer_transport) {
        settings.SHOW_TRANSPORT_OVER_MAP.set(isChecked);
      }
      updateLayers(mapView);
      mapView.refreshMap();
    }
  }
;
  Builder b=new AlertDialog.Builder(activity);
  ListView list=new ListView(activity);
  list.setCacheColorHint(activity.getResources().getColor(R.color.color_transparent));
  b.setView(list);
  final AlertDialog dlg=b.create();
  final int minWidth=activity.getResources().getDrawable(R.drawable.list_activities_favorites).getMinimumWidth();
  ArrayAdapter<String> arrayAdapter=new ArrayAdapter<String>(activity,R.layout.layers_list_activity_item,adapter.getItemNames()){
    @Override public View getView(    final int position,    View convertView,    ViewGroup parent){
      View row=activity.getLayoutInflater().inflate(R.layout.layers_list_activity_item,null);
      ((TextView)row.findViewById(R.id.title)).setText(adapter.getItemName(position));
      if (adapter.getImageId(position) != 0) {
        Drawable d=activity.getResources().getDrawable(adapter.getImageId(position));
        ((ImageView)row.findViewById(R.id.icon)).setImageDrawable(d);
      }
 else {
        LinearLayout.LayoutParams layoutParams=(android.widget.LinearLayout.LayoutParams)((ImageView)row.findViewById(R.id.icon)).getLayoutParams();
        layoutParams.leftMargin=minWidth;
      }
      final CheckBox ch=((CheckBox)row.findViewById(R.id.check_item));
      if (adapter.getSelection(position) == -1) {
        ch.setVisibility(View.INVISIBLE);
      }
 else {
        ch.setChecked(adapter.getSelection(position) > 0);
        ch.setOnCheckedChangeListener(new OnCheckedChangeListener(){
          @Override public void onCheckedChanged(          CompoundButton buttonView,          boolean isChecked){
            listener.onClick(dlg,position,isChecked);
          }
        }
);
      }
      return row;
    }
  }
;
  list.setAdapter(arrayAdapter);
  list.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      if (adapter.getSelection(position) >= 0) {
        CheckBox ch=((CheckBox)view.findViewById(R.id.check_item));
        ch.setChecked(!ch.isChecked());
      }
 else {
        listener.onClick(dlg,position,adapter.getSelection(position) > 0);
      }
    }
  }
);
  dlg.setCanceledOnTouchOutside(true);
  dlg.show();
}
