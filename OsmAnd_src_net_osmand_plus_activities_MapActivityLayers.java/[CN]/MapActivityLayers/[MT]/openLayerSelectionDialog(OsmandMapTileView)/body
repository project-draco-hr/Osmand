{
  final TIntArrayList layers=new TIntArrayList();
  final TIntArrayList selectedList=new TIntArrayList();
  final TIntArrayList iconList=new TIntArrayList();
  final OsmandSettings settings=getApplication().getSettings();
  layers.add(R.string.layer_map);
  iconList.add(R.drawable.list_activities_map_src);
  selectedList.add(-1);
  layers.add(R.string.layer_poi);
  iconList.add(R.drawable.list_activities_poi);
  selectedList.add(settings.SHOW_POI_OVER_MAP.get() ? 1 : 0);
  if (settings.SHOW_POI_OVER_MAP.get()) {
    layers.add(R.string.layer_poi_label);
    selectedList.add(settings.SHOW_POI_LABEL.get() ? 1 : 0);
    iconList.add(0);
  }
  layers.add(R.string.layer_favorites);
  iconList.add(R.drawable.list_activities_favorites);
  selectedList.add(settings.SHOW_FAVORITES.get() ? 1 : 0);
  layers.add(R.string.layer_overlay);
  selectedList.add(overlayLayer.getMap() != null ? 1 : 0);
  iconList.add(R.drawable.list_activities_overlay_map);
  layers.add(R.string.layer_underlay);
  selectedList.add(underlayLayer.getMap() != null ? 1 : 0);
  iconList.add(R.drawable.list_activities_underlay_map);
  layers.add(R.string.layer_gpx_layer);
  selectedList.add(getApplication().getGpxFileToDisplay() != null ? 1 : 0);
  iconList.add(R.drawable.list_activities_gpx_tracks);
  if (routeInfoLayer.couldBeVisible()) {
    layers.add(R.string.layer_route);
    selectedList.add(routeInfoLayer.isUserDefinedVisible() ? 1 : 0);
    iconList.add(0);
  }
  layers.add(R.string.layer_transport);
  selectedList.add(settings.SHOW_TRANSPORT_OVER_MAP.get() ? 1 : 0);
  iconList.add(R.drawable.list_activities_transport_stops);
  if (TransportRouteHelper.getInstance().routeIsCalculated()) {
    layers.add(R.string.layer_transport_route);
    selectedList.add(routeInfoLayer.isUserDefinedVisible() ? 1 : 0);
    iconList.add(0);
  }
  layers.add(R.string.layer_osm_bugs);
  selectedList.add(settings.SHOW_OSM_BUGS.get() ? 1 : 0);
  iconList.add(R.drawable.list_activities_osm_bugs);
  final OnMultiChoiceClickListener listener=new DialogInterface.OnMultiChoiceClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int item,    boolean isChecked){
      if (layers.get(item) == R.string.layer_map) {
        dialog.dismiss();
        selectMapLayer(mapView);
      }
 else       if (layers.get(item) == R.string.layer_poi) {
        if (isChecked) {
          selectPOIFilterLayer(mapView);
        }
        settings.SHOW_POI_OVER_MAP.set(isChecked);
      }
 else       if (layers.get(item) == R.string.layer_favorites) {
        settings.SHOW_FAVORITES.set(isChecked);
      }
 else       if (layers.get(item) == R.string.layer_poi_label) {
        settings.SHOW_POI_LABEL.set(isChecked);
      }
 else       if (layers.get(item) == R.string.layer_overlay) {
        if (overlayLayer.getMap() != null) {
          settings.MAP_OVERLAY.set(null);
          updateMapSource(mapView,null);
        }
 else {
          dialog.dismiss();
          selectMapOverlayLayer(mapView,settings.MAP_OVERLAY,settings.MAP_OVERLAY_TRANSPARENCY,overlayLayer);
        }
      }
 else       if (layers.get(item) == R.string.layer_underlay) {
        if (underlayLayer.getMap() != null) {
          settings.MAP_UNDERLAY.set(null);
          updateMapSource(mapView,null);
        }
 else {
          dialog.dismiss();
          selectMapOverlayLayer(mapView,settings.MAP_UNDERLAY,settings.MAP_TRANSPARENCY,mapTileLayer,mapVectorLayer);
        }
      }
 else       if (layers.get(item) == R.string.layer_gpx_layer) {
        if (getApplication().getGpxFileToDisplay() != null) {
          getApplication().setGpxFileToDisplay(null,false);
          gpxLayer.clearCurrentGPX();
        }
 else {
          dialog.dismiss();
          showGPXFileLayer(mapView);
        }
      }
 else       if (layers.get(item) == R.string.layer_transport) {
        settings.SHOW_TRANSPORT_OVER_MAP.set(isChecked);
      }
 else       if (layers.get(item) == R.string.layer_osm_bugs) {
        settings.SHOW_OSM_BUGS.set(isChecked);
      }
 else       if (layers.get(item) == R.string.layer_route) {
        routeInfoLayer.setVisible(isChecked);
      }
 else       if (layers.get(item) == R.string.layer_transport_route) {
        transportInfoLayer.setVisible(isChecked);
      }
      updateLayers(mapView);
      mapView.refreshMap();
    }
  }
;
  Builder b=new AlertDialog.Builder(activity);
  ListView list=new ListView(activity,null,R.style.NiceActivity);
  b.setView(list);
  final List<String> layerNames=new ArrayList<String>();
  for (int i=0; i < layers.size(); i++) {
    layerNames.add(getString(layers.get(i)));
  }
  final AlertDialog dlg=b.create();
  final int minWidth=activity.getResources().getDrawable(R.drawable.list_activities_favorites).getMinimumWidth();
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(activity,R.layout.layers_list_activity_item,layerNames){
    @Override public View getView(    final int position,    View convertView,    ViewGroup parent){
      View row=activity.getLayoutInflater().inflate(R.layout.layers_list_activity_item,null);
      ((TextView)row.findViewById(R.id.title)).setText(layerNames.get(position));
      if (iconList.get(position) != 0) {
        Drawable d=activity.getResources().getDrawable(iconList.get(position));
        ((ImageView)row.findViewById(R.id.icon)).setImageDrawable(d);
      }
 else {
        LinearLayout.LayoutParams layoutParams=(android.widget.LinearLayout.LayoutParams)((ImageView)row.findViewById(R.id.icon)).getLayoutParams();
        layoutParams.leftMargin=minWidth;
      }
      final CheckBox ch=((CheckBox)row.findViewById(R.id.check_item));
      if (selectedList.get(position) == -1) {
        ch.setVisibility(View.INVISIBLE);
      }
 else {
        ch.setChecked(selectedList.get(position) > 0);
        ch.setOnCheckedChangeListener(new OnCheckedChangeListener(){
          @Override public void onCheckedChanged(          CompoundButton buttonView,          boolean isChecked){
            listener.onClick(dlg,position,isChecked);
          }
        }
);
      }
      return row;
    }
  }
;
  list.setAdapter(adapter);
  list.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      if (selectedList.get(position) >= 0) {
        CheckBox ch=((CheckBox)view.findViewById(R.id.check_item));
        ch.setChecked(!ch.isChecked());
      }
 else {
        listener.onClick(dlg,position,selectedList.get(position) > 0);
      }
    }
  }
);
  dlg.setCanceledOnTouchOutside(true);
  dlg.show();
}
