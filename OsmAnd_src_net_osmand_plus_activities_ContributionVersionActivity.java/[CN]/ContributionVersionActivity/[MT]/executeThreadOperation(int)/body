{
  if (operationId == DOWNLOAD_BUILDS_LIST) {
    URLConnection connection=new URL(URL_TO_RETRIEVE_BUILDS).openConnection();
    XmlPullParser parser=XmlPullParserFactory.newInstance().newPullParser();
    parser.setInput(connection.getInputStream(),"UTF-8");
    int next;
    while ((next=parser.next()) != XmlPullParser.END_DOCUMENT) {
      if (next == XmlPullParser.START_TAG && parser.getName().equals("build")) {
        if ("osmand".equalsIgnoreCase(parser.getAttributeValue(null,"type"))) {
          String path=parser.getAttributeValue(null,"path");
          String size=parser.getAttributeValue(null,"size");
          String date=parser.getAttributeValue(null,"timestamp");
          String tag=parser.getAttributeValue(null,"tag");
          Date d=null;
          if (date != null) {
            try {
              d=new Date(Long.parseLong(date));
            }
 catch (            RuntimeException e) {
              e.printStackTrace();
            }
          }
          OsmAndBuild build=new OsmAndBuild(path,size,d,tag);
          downloadedBuilds.add(build);
        }
      }
    }
  }
 else   if (operationId == INSTALL_BUILD) {
    URLConnection connection=new URL(URL_GET_BUILD + currentSelectedBuild.path).openConnection();
    if (pathToDownload.exists()) {
      pathToDownload.delete();
    }
    byte[] buffer=new byte[1024];
    InputStream is=connection.getInputStream();
    FileOutputStream fout=new FileOutputStream(pathToDownload);
    try {
      int totalRead=0;
      int read;
      while ((read=is.read(buffer,0,1024)) != -1) {
        fout.write(buffer,0,read);
        totalRead+=read;
        if (totalRead > 1024) {
          progressDlg.incrementProgressBy(totalRead / 1024);
          totalRead%=1024;
        }
      }
    }
  finally {
      fout.close();
      is.close();
    }
  }
}
