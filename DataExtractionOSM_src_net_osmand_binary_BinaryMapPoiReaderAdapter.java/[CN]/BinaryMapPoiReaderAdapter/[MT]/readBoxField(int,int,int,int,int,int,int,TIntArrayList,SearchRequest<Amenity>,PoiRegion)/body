{
  req.numberOfReadSubtrees++;
  boolean checkBox=true;
  int zoom=pzoom;
  int dy=py;
  int dx=px;
  while (true) {
    if (req.isInterrupted()) {
      return;
    }
    int t=codedIS.readTag();
    int tag=WireFormat.getTagFieldNumber(t);
switch (tag) {
case 0:
      return;
case OsmandOdb.OsmAndPoiBox.ZOOM_FIELD_NUMBER:
    zoom=codedIS.readUInt32() + pzoom;
  break;
case OsmandOdb.OsmAndPoiBox.LEFT_FIELD_NUMBER:
dx=codedIS.readSInt32();
break;
case OsmandOdb.OsmAndPoiBox.TOP_FIELD_NUMBER:
dy=codedIS.readSInt32();
break;
case OsmandOdb.OsmAndPoiBox.CATEGORIES_FIELD_NUMBER:
if (req.poiTypeFilter == null) {
skipUnknownField(t);
}
 else {
int length=codedIS.readRawVarint32();
int oldLimit=codedIS.pushLimit(length);
boolean check=checkCategories(req,region);
codedIS.popLimit(oldLimit);
if (!check) {
codedIS.skipRawBytes(codedIS.getBytesUntilLimit());
return;
}
}
break;
case OsmandOdb.OsmAndPoiBox.SUBBOXES_FIELD_NUMBER:
int x=dx + (px << (zoom - pzoom));
int y=dy + (py << (zoom - pzoom));
if (checkBox) {
int xL=x << (31 - zoom);
int xR=(x + 1) << (31 - zoom);
int yT=y << (31 - zoom);
int yB=(y + 1) << (31 - zoom);
if (left31 > xR || xL > right31 || bottom31 < yT || yB < top31) {
codedIS.skipRawBytes(codedIS.getBytesUntilLimit());
return;
}
req.numberOfAcceptedSubtrees++;
checkBox=false;
}
int length=readInt();
int oldLimit=codedIS.pushLimit(length);
readBoxField(left31,right31,top31,bottom31,x,y,zoom,offsets,req,region);
codedIS.popLimit(oldLimit);
break;
case OsmandOdb.OsmAndPoiBox.SHIFTTODATA_FIELD_NUMBER:
offsets.add(readInt());
break;
default :
skipUnknownField(t);
break;
}
}
}
