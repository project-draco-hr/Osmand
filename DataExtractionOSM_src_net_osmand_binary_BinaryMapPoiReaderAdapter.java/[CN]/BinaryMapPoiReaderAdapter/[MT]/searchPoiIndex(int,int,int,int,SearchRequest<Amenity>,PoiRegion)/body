{
  int indexOffset=codedIS.getTotalBytesRead();
  long time=System.currentTimeMillis();
  TIntLongHashMap offsetsMap=new TIntLongHashMap();
  while (true) {
    if (req.isInterrupted()) {
      return;
    }
    int t=codedIS.readTag();
    int tag=WireFormat.getTagFieldNumber(t);
switch (tag) {
case 0:
      return;
case OsmandOdb.OsmAndPoiIndex.BOXES_FIELD_NUMBER:
    int length=readInt();
  int oldLimit=codedIS.pushLimit(length);
readBoxField(left31,right31,top31,bottom31,0,0,0,offsetsMap,req,region);
codedIS.popLimit(oldLimit);
break;
case OsmandOdb.OsmAndPoiIndex.POIDATA_FIELD_NUMBER:
int[] offsets=offsetsMap.keys();
Arrays.sort(offsets);
TLongHashSet skipTiles=null;
int zoomToSkip=31;
if (req.zoom != -1) {
skipTiles=new TLongHashSet();
zoomToSkip=req.zoom + ZOOM_TO_SKIP_FILTER;
}
List<Amenity> temporaryList=new ArrayList<Amenity>();
LOG.info("Searched poi structure in " + (System.currentTimeMillis() - time) + "ms. Found "+ offsets.length+ " subtress");
for (int j=0; j < offsets.length; j++) {
codedIS.seek(offsets[j] + indexOffset);
int len=readInt();
int oldLim=codedIS.pushLimit(len);
if (skipTiles == null) {
readPoiData(left31,right31,top31,bottom31,req,req.getSearchResults(),region,skipTiles,zoomToSkip);
}
 else {
long box=offsetsMap.get(offsets[j]);
int z=(int)(box & 31);
boolean skipBox=false;
if (z >= zoomToSkip) {
int yt=(int)((box >> 5) & ((1 << z) - 1));
int xt=(int)(box >> (5 + z));
long val=((((long)xt) >> (z - zoomToSkip)) << zoomToSkip) | (((long)yt) >> (z - zoomToSkip));
skipBox=skipTiles.contains(val);
}
if (skipBox) {
codedIS.skipRawBytes(codedIS.getBytesUntilLimit());
}
 else {
temporaryList.clear();
readPoiData(left31,right31,top31,bottom31,req,temporaryList,region,skipTiles,zoomToSkip);
for (Amenity a : temporaryList) {
int x=(int)MapUtils.getTileNumberX(zoomToSkip,a.getLocation().getLongitude());
int y=(int)MapUtils.getTileNumberY(zoomToSkip,a.getLocation().getLatitude());
long val=(((long)x) << zoomToSkip) | y;
if (!skipTiles.contains(val)) {
skipTiles.add(val);
req.getSearchResults().add(a);
}
}
}
}
codedIS.popLimit(oldLim);
if (req.isInterrupted()) {
return;
}
}
codedIS.skipRawBytes(codedIS.getBytesUntilLimit());
return;
default :
skipUnknownField(t);
break;
}
}
}
