{
  int indexOffset=codedIS.getTotalBytesRead();
  long time=System.currentTimeMillis();
  TLongHashSet skipTiles=null;
  int zoomToSkip=31;
  if (req.zoom != -1) {
    skipTiles=new TLongHashSet();
    zoomToSkip=req.zoom + ZOOM_TO_SKIP_FILTER;
  }
  int length;
  int oldLimit;
  boolean readCategories=region.categories.isEmpty();
  TIntLongHashMap offsetsMap=new TIntLongHashMap();
  while (true) {
    if (req.isCancelled()) {
      return;
    }
    int t=codedIS.readTag();
    int tag=WireFormat.getTagFieldNumber(t);
switch (tag) {
case 0:
      return;
case OsmandOdb.OsmAndPoiIndex.CATEGORIESTABLE_FIELD_NUMBER:
    if (!readCategories) {
      skipUnknownField(t);
    }
 else {
      length=codedIS.readRawVarint32();
      oldLimit=codedIS.pushLimit(length);
      readCategory(region);
      codedIS.popLimit(oldLimit);
    }
case OsmandOdb.OsmAndPoiIndex.BOXES_FIELD_NUMBER:
  length=readInt();
oldLimit=codedIS.pushLimit(length);
readBoxField(left31,right31,top31,bottom31,0,0,0,offsetsMap,skipTiles,req,region);
codedIS.popLimit(oldLimit);
break;
case OsmandOdb.OsmAndPoiIndex.POIDATA_FIELD_NUMBER:
int[] offsets=offsetsMap.keys();
Arrays.sort(offsets);
if (skipTiles != null) {
skipTiles.clear();
}
LOG.info("Searched poi structure in " + (System.currentTimeMillis() - time) + "ms. Found "+ offsets.length+ " subtress");
for (int j=0; j < offsets.length; j++) {
codedIS.seek(offsets[j] + indexOffset);
int len=readInt();
int oldLim=codedIS.pushLimit(len);
readPoiData(left31,right31,top31,bottom31,req,region,skipTiles,zoomToSkip);
codedIS.popLimit(oldLim);
if (req.isCancelled()) {
return;
}
}
codedIS.skipRawBytes(codedIS.getBytesUntilLimit());
return;
default :
skipUnknownField(t);
break;
}
}
}
