{
  int x=0;
  int y=0;
  City c=null;
  LinkedList<String> additionalTags=null;
  while (true) {
    int t=codedIS.readTag();
    int tag=WireFormat.getTagFieldNumber(t);
switch (tag) {
case 0:
      if (matcher != null) {
        boolean matches=matcher.matches(c.getName());
        if (!matches) {
          for (          String n : c.getAllNames()) {
            matches=matcher.matches(n);
            if (matches) {
              break;
            }
          }
        }
        if (!matches) {
          return null;
        }
      }
    return c;
case OsmandOdb.CityIndex.CITY_TYPE_FIELD_NUMBER:
  int type=codedIS.readUInt32();
c=new City(CityType.values()[type]);
break;
case OsmandOdb.CityIndex.ID_FIELD_NUMBER:
c.setId(codedIS.readUInt64());
break;
case OsmandOdb.CityIndex.ATTRIBUTETAGIDS_FIELD_NUMBER:
int tgid=codedIS.readUInt32();
if (additionalTags == null) {
additionalTags=new LinkedList<String>();
if (additionalTagsTable != null && tgid < additionalTagsTable.size()) {
additionalTags.add(additionalTagsTable.get(tgid));
}
}
break;
case OsmandOdb.CityIndex.ATTRIBUTEVALUES_FIELD_NUMBER:
String nm=codedIS.readString();
if (additionalTags != null && additionalTags.size() > 0) {
String tg=additionalTags.pollFirst();
if (tg.startsWith("name:")) {
c.setName(tg.substring("name:".length()),nm);
}
}
break;
case OsmandOdb.CityIndex.NAME_EN_FIELD_NUMBER:
String enName=codedIS.readString();
c.setEnName(enName);
break;
case OsmandOdb.CityIndex.NAME_FIELD_NUMBER:
String name=codedIS.readString();
if (c == null) {
c=City.createPostcode(name);
}
c.setName(name);
break;
case OsmandOdb.CityIndex.X_FIELD_NUMBER:
x=codedIS.readUInt32();
break;
case OsmandOdb.CityIndex.Y_FIELD_NUMBER:
y=codedIS.readUInt32();
c.setLocation(MapUtils.get31LatitudeY(y),MapUtils.get31LongitudeX(x));
break;
case OsmandOdb.CityIndex.SHIFTTOCITYBLOCKINDEX_FIELD_NUMBER:
int offset=readInt();
offset+=filePointer;
c.setFileOffset(offset);
break;
default :
skipUnknownField(t);
break;
}
}
}
