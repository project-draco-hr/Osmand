{
  int x=0;
  int y=0;
  City c=null;
  boolean englishNameMatched=false;
  while (true) {
    int t=codedIS.readTag();
    int tag=WireFormat.getTagFieldNumber(t);
switch (tag) {
case 0:
      return c;
case OsmandOdb.CityIndex.CITY_TYPE_FIELD_NUMBER:
    int type=codedIS.readUInt32();
  c=new City(CityType.values()[type]);
break;
case OsmandOdb.CityIndex.ID_FIELD_NUMBER:
c.setId(codedIS.readUInt64());
if (nameMatcher != null && useEn && !englishNameMatched) {
codedIS.skipRawBytes(codedIS.getBytesUntilLimit());
return null;
}
break;
case OsmandOdb.CityIndex.NAME_EN_FIELD_NUMBER:
String enName=codedIS.readString();
if (nameMatcher != null && enName.length() > 0) {
if (!nameMatcher.matches(enName)) {
codedIS.skipRawBytes(codedIS.getBytesUntilLimit());
return null;
}
 else {
englishNameMatched=true;
}
}
c.setEnName(enName);
break;
case OsmandOdb.CityIndex.NAME_FIELD_NUMBER:
String name=codedIS.readString();
if (nameMatcher != null) {
if (!useEn) {
if (!nameMatcher.matches(name)) {
codedIS.skipRawBytes(codedIS.getBytesUntilLimit());
return null;
}
}
 else {
if (nameMatcher.matches(Junidecode.unidecode(name))) {
englishNameMatched=true;
}
}
}
if (c == null) {
c=City.createPostcode(name);
}
c.setName(name);
break;
case OsmandOdb.CityIndex.X_FIELD_NUMBER:
x=codedIS.readUInt32();
break;
case OsmandOdb.CityIndex.Y_FIELD_NUMBER:
y=codedIS.readUInt32();
c.setLocation(MapUtils.get31LatitudeY(y),MapUtils.get31LongitudeX(x));
if (c.getEnName().length() == 0) {
c.setEnName(Junidecode.unidecode(c.getName()));
}
break;
case OsmandOdb.CityIndex.SHIFTTOCITYBLOCKINDEX_FIELD_NUMBER:
int offset=readInt();
offset+=filePointer;
c.setFileOffset(offset);
break;
default :
skipUnknownField(t);
break;
}
}
}
