{
  final int zoomToLoad=31 - config.ZOOM_TO_LOAD_TILES;
  int tileX=x31 >> zoomToLoad;
  int tileY=y31 >> zoomToLoad;
  SearchRequest<RouteDataObject> request=BinaryMapIndexReader.buildSearchRouteRequest(tileX << zoomToLoad,(tileX + 1) << zoomToLoad,tileY << zoomToLoad,(tileY + 1) << zoomToLoad,null);
  List<RoutingSubregionTile> collection=null;
  for (  Entry<BinaryMapIndexReader,List<RouteSubregion>> r : map.entrySet()) {
    if (nativeLib == null) {
      try {
        if (r.getValue().size() > 0) {
          long now=System.nanoTime();
          List<RouteSubregion> subregs=r.getKey().searchRouteIndexTree(request,r.getValue());
          for (          RouteSubregion sr : subregs) {
            int ind=searchSubregionTile(sr);
            RoutingSubregionTile found;
            if (ind < 0) {
              found=new RoutingSubregionTile(sr);
              subregionTiles.add(-(ind + 1),found);
            }
 else {
              found=subregionTiles.get(ind);
            }
            if (collection == null) {
              collection=new ArrayList<RoutingContext.RoutingSubregionTile>(4);
            }
            collection.add(found);
          }
          timeToLoadHeaders+=(System.nanoTime() - now);
        }
      }
 catch (      IOException e) {
        throw new RuntimeException("Loading data exception",e);
      }
    }
 else {
      throw new UnsupportedOperationException();
    }
  }
  return collection;
}
