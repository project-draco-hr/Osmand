{
  if (!routers.containsKey(router)) {
    router=defaultRouter;
  }
  RoutingConfiguration i=new RoutingConfiguration();
  i.initialDirection=direction;
  i.heuristicCoefficient=parseSilentDouble(getAttribute(router,"heuristicCoefficient"),i.heuristicCoefficient);
  i.ZOOM_TO_LOAD_TILES=parseSilentInt(getAttribute(router,"zoomToLoadTiles"),i.ZOOM_TO_LOAD_TILES);
  int desirable=parseSilentInt(getAttribute(router,"memoryLimitInMB"),0);
  if (desirable != 0) {
    i.memoryLimitation=desirable * (1 << 20);
  }
 else {
    if (memoryLimitMB == 0) {
      memoryLimitMB=DEFAULT_MEMORY_LIMIT;
    }
    i.memoryLimitation=memoryLimitMB * (1 << 20);
  }
  i.useDynamicRoadPrioritising=parseSilentBoolean(getAttribute(router,"useDynamicRoadPrioritising"),i.useDynamicRoadPrioritising);
  i.useRelaxingStrategy=parseSilentBoolean(getAttribute(router,"useRelaxingStrategy"),i.useRelaxingStrategy);
  i.dynamicRoadPriorityDistance=parseSilentInt(getAttribute(router,"dynamicRoadPriorityDistance"),i.dynamicRoadPriorityDistance);
  i.ITERATIONS_TO_RELAX_NODES=parseSilentInt(getAttribute(router,"iterationsToRelaxRoutes"),i.ITERATIONS_TO_RELAX_NODES);
  i.RELAX_NODES_IF_START_DIST_COEF=parseSilentDouble(getAttribute(router,"relaxNodesIfStartDistSmallCoeff"),i.RELAX_NODES_IF_START_DIST_COEF);
  i.planRoadDirection=parseSilentInt(getAttribute(router,"planRoadDirection"),i.planRoadDirection);
  if (!routers.containsKey(router)) {
    return i;
  }
  i.router=routers.get(router);
  if (specialization != null) {
    for (    String s : specialization) {
      i.router=i.router.specialization(s);
    }
  }
  i.routerName=router;
  return i;
}
