{
  InputStream is=null;
  if (externalRenderers.containsKey(name)) {
    is=new FileInputStream(externalRenderers.get(name));
  }
 else   if (internalRenderers.containsKey(name)) {
    is=RenderingRulesStorage.class.getResourceAsStream(internalRenderers.get(name));
  }
 else {
    throw new IllegalArgumentException("Not found " + name);
  }
  RenderingRulesStorage main=new RenderingRulesStorage();
  loadedRenderers.add(name);
  main.parseRulesFromXmlInputStream(is,new RenderingRulesStorageResolver(){
    @Override public RenderingRulesStorage resolve(    String name,    RenderingRulesStorageResolver ref) throws SAXException {
      if (renderers.containsKey(name)) {
        return renderers.get(name);
      }
      if (loadedRenderers.contains(name)) {
        log.warn("Circular dependencies found " + name);
      }
      RenderingRulesStorage dep=getRenderer(name,loadedRenderers);
      if (dep == null) {
        log.warn("Dependent renderer not found : " + name);
      }
      return dep;
    }
  }
);
  renderers.put(name,main);
  return main;
}
