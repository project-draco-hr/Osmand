{
  List<GeocodingResult> complete=new ArrayList<>();
  double minBuildingDistance=0;
  if (res != null) {
    for (    GeocodingResult r : res) {
      BinaryMapIndexReader foundRepo=null;
      List<BinaryMapReaderResource> rts=usedReaders;
      for (      BinaryMapReaderResource rt : rts) {
        if (rt.isClosed()) {
          continue;
        }
        BinaryMapIndexReader reader=rt.getReader(BinaryMapReaderResourceType.STREET_LOOKUP);
        for (        RouteRegion rb : reader.getRoutingIndexes()) {
          if (r.regionFP == rb.getFilePointer() && r.regionLen == rb.getLength()) {
            foundRepo=reader;
            break;
          }
        }
      }
      if (result.isCancelled()) {
        break;
      }
 else       if (foundRepo != null) {
        List<GeocodingResult> justified=null;
        try {
          justified=new GeocodingUtilities().justifyReverseGeocodingSearch(r,foundRepo,minBuildingDistance,result);
        }
 catch (        IOException e) {
          log.error("Exception happened during reverse geocoding",e);
          e.printStackTrace();
        }
        if (justified != null && !justified.isEmpty()) {
          double md=justified.get(0).getDistance();
          if (minBuildingDistance == 0) {
            minBuildingDistance=md;
          }
 else {
            minBuildingDistance=Math.min(md,minBuildingDistance);
          }
          complete.addAll(justified);
        }
      }
 else {
        complete.add(r);
      }
    }
  }
  if (result.isCancelled()) {
    app.runInUIThread(new Runnable(){
      public void run(){
        result.publish(null);
      }
    }
);
    return;
  }
  Collections.sort(complete,GeocodingUtilities.DISTANCE_COMPARATOR);
  final GeocodingResult rts=complete.size() > 0 ? complete.get(0) : new GeocodingResult();
  app.runInUIThread(new Runnable(){
    public void run(){
      result.publish(rts);
    }
  }
);
}
