{
  if (navigationLayer.getPointToNavigate() == null) {
    Toast.makeText(this,R.string.mark_final_location_first,Toast.LENGTH_LONG).show();
    return;
  }
  Builder builder=new AlertDialog.Builder(this);
  builder.setTitle(R.string.follow_route);
  View view=getLayoutInflater().inflate(R.layout.calculate_route,null);
  final ToggleButton[] buttons=new ToggleButton[ApplicationMode.values().length];
  buttons[ApplicationMode.CAR.ordinal()]=(ToggleButton)view.findViewById(R.id.CarButton);
  buttons[ApplicationMode.BICYCLE.ordinal()]=(ToggleButton)view.findViewById(R.id.BicycleButton);
  buttons[ApplicationMode.PEDESTRIAN.ordinal()]=(ToggleButton)view.findViewById(R.id.PedestrianButton);
  ApplicationMode appMode=OsmandSettings.getApplicationMode(this);
  for (int i=0; i < buttons.length; i++) {
    if (buttons[i] != null) {
      final int ind=i;
      ToggleButton b=buttons[i];
      b.setChecked(appMode == ApplicationMode.values()[i]);
      b.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
        @Override public void onCheckedChanged(        CompoundButton buttonView,        boolean isChecked){
          if (isChecked) {
            if (OsmandSettings.getApplicationMode(MapActivity.this) != ApplicationMode.values()[ind]) {
              Editor edit=getSharedPreferences(OsmandSettings.SHARED_PREFERENCES_NAME,MODE_WORLD_WRITEABLE).edit();
              edit.putString(OsmandSettings.APPLICATION_MODE,ApplicationMode.values()[ind].name());
              SettingsActivity.setAppMode(ApplicationMode.values()[ind],edit);
              edit.commit();
              for (int j=0; j < buttons.length; j++) {
                if (buttons[j] != null) {
                  buttons[j].setChecked(ind == j);
                }
              }
              updateApplicationModeSettings();
              mapView.refreshMap();
            }
          }
 else {
            if (OsmandSettings.getApplicationMode(MapActivity.this) == ApplicationMode.values()[ind]) {
              buttons[ind].setChecked(true);
            }
          }
        }
      }
);
    }
  }
  builder.setView(view);
  builder.setPositiveButton(R.string.follow,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      Location location=locationLayer.getLastKnownLocation();
      if (location == null) {
        location=new Location("map");
        location.setLatitude(lat);
        location.setLongitude(lon);
      }
      routingHelper.setFollowingMode(true);
      routingHelper.setFinalAndCurrentLocation(navigationLayer.getPointToNavigate(),location);
      OsmandSettings.setFollowingByRoute(MapActivity.this,true);
      updateNavigateToPointMenu();
    }
  }
);
  if (routingHelper.isRouterEnabled() && routingHelper.isRouteCalculated()) {
    builder.setNeutralButton(R.string.route_about,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        Intent intent=new Intent(MapActivity.this,ShowRouteInfoActivity.class);
        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
        startActivity(intent);
      }
    }
);
  }
  builder.setNegativeButton(R.string.only_show,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      showRoute(lat,lon);
    }
  }
);
  builder.show();
}
