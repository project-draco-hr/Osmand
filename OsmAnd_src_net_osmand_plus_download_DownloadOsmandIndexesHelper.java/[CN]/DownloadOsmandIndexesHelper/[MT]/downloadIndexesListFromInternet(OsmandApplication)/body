{
  try {
    IndexFileList result=new IndexFileList();
    log.debug("Start loading list of index files");
    try {
      String strUrl=ctx.getAppCustomization().getIndexesUrl();
      log.info(strUrl);
      XmlPullParser parser=XmlPullParserFactory.newInstance().newPullParser();
      File tmp=new File(ctx.getAppPath(IndexConstants.BACKUP_INDEX_DIR),"map_indexes.tmp");
      if (!tmp.exists()) {
        log.info(strUrl);
        log.warn("111 - NO FILE");
        URLConnection connection=NetworkUtils.getHttpURLConnection(strUrl);
        InputStream in=connection.getInputStream();
        FileOutputStream out=new FileOutputStream(tmp);
        int read;
        byte[] buffer=new byte[32256];
        while ((read=in.read(buffer)) != -1) {
          out.write(buffer,0,read);
        }
        out.close();
      }
 else {
        log.warn("111 - READ BACKUP");
      }
      GZIPInputStream gzin=new GZIPInputStream(new FileInputStream(tmp));
      parser.setInput(gzin,"UTF-8");
      int next;
      while ((next=parser.next()) != XmlPullParser.END_DOCUMENT) {
        if (next == XmlPullParser.START_TAG) {
          DownloadActivityType tp=DownloadActivityType.getIndexType(parser.getAttributeValue(null,"type"));
          if (tp != null) {
            IndexItem it=tp.parseIndexItem(ctx,parser);
            if (it != null && !it.getFileName().contains("_wiki")) {
              result.add(it);
            }
          }
 else           if ("osmand_regions".equals(parser.getName())) {
            String mapversion=parser.getAttributeValue(null,"mapversion");
            result.setMapVersion(mapversion);
          }
        }
      }
      result.sort();
      gzin.close();
    }
 catch (    IOException e) {
      log.error("Error while loading indexes from repository",e);
      return null;
    }
catch (    XmlPullParserException e) {
      log.error("Error while loading indexes from repository",e);
      return null;
    }
    if (result.isAcceptable()) {
      return result;
    }
 else {
      return null;
    }
  }
 catch (  RuntimeException e) {
    log.error("Error while loading indexes from repository",e);
    return null;
  }
}
