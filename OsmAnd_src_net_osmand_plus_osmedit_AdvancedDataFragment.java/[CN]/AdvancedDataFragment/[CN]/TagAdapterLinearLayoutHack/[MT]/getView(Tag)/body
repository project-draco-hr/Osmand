{
  final View convertView=LayoutInflater.from(linearLayout.getContext()).inflate(R.layout.poi_tag_list_item,null,false);
  final AutoCompleteTextView tagEditText=(AutoCompleteTextView)convertView.findViewById(R.id.tagEditText);
  tagEditText.setText(tag.tag);
  final EditText valueEditText=(EditText)convertView.findViewById(R.id.valueEditText);
  ImageButton deleteItemImageButton=(ImageButton)convertView.findViewById(R.id.deleteItemImageButton);
  valueEditText.setText(tag.value);
  deleteItemImageButton.setImageDrawable(deleteDrawable);
  deleteItemImageButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      LOG.debug("onClick(" + "v=" + v + ") tag="+ tag+ "; editPoiData.tags"+ editPoiData.tags);
      linearLayout.removeView((View)v.getParent());
      editPoiData.tags.remove(tag);
      LOG.debug("editPoiData.tags" + editPoiData.tags + " mIsUserInput="+ mIsUserInput);
      if (mIsUserInput)       editPoiData.notifyDatasetChanged(null);
      LOG.debug("editPoiData.tags" + editPoiData.tags);
    }
  }
);
  tagEditText.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      editPoiData.tags.remove(tag);
      tag.tag=tagEditText.getText().toString();
      editPoiData.tags.add(tag);
      if (mIsUserInput)       editPoiData.notifyDatasetChanged(mTagsChangedListener);
    }
  }
);
  final Set<String> tagKeys=new TreeSet<String>();
  for (  OSMSettings.OSMTagKey t : OSMSettings.OSMTagKey.values()) {
    if ((t != OSMSettings.OSMTagKey.NAME) && (t != OSMSettings.OSMTagKey.OPENING_HOURS) && (t != OSMSettings.OSMTagKey.PHONE)&& (t != OSMSettings.OSMTagKey.WEBSITE)) {
      tagKeys.add(t.getValue());
    }
  }
  ArrayAdapter<Object> adapter=new ArrayAdapter<Object>(linearLayout.getContext(),R.layout.list_textview,tagKeys.toArray());
  tagEditText.setAdapter(adapter);
  tagEditText.setThreshold(1);
  tagEditText.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
      final String[] tags=tagKeys.toArray(new String[tagKeys.size()]);
      builder.setItems(tags,new Dialog.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          tagEditText.setText(tags[which]);
        }
      }
);
      builder.create();
      builder.show();
    }
  }
);
  valueEditText.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      editPoiData.tags.remove(tag);
      tag.value=valueEditText.getText().toString();
      editPoiData.tags.add(tag);
      if (mIsUserInput)       editPoiData.notifyDatasetChanged(mTagsChangedListener);
    }
  }
);
  return convertView;
}
