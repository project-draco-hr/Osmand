{
  final double ASPECT_TOLERANCE=0.1;
  double targetRatio;
  if (w > h) {
    targetRatio=(double)w / h;
  }
 else {
    targetRatio=(double)h / w;
  }
  if (sizes == null)   return null;
  Camera.Size optimalSize=null;
  double minDiff=Double.MAX_VALUE;
  for (  Camera.Size size : sizes) {
    double ratio=(double)size.width / size.height;
    if (Math.abs(ratio - targetRatio) > ASPECT_TOLERANCE)     continue;
    if (Math.abs(size.height - h) < minDiff) {
      optimalSize=size;
      minDiff=Math.abs(size.height - h);
    }
  }
  if (optimalSize == null) {
    minDiff=Double.MAX_VALUE;
    for (    Camera.Size size : sizes) {
      if (Math.abs(size.height - h) < minDiff) {
        optimalSize=size;
        minDiff=Math.abs(size.height - h);
      }
    }
  }
  return optimalSize;
}
