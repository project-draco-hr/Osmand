{
  final CamcorderProfile p=CamcorderProfile.get(AV_VIDEO_QUALITY.get());
  final Camera.Size mPreviewSize=getPreviewSize();
  final SurfaceView view;
  if (mPreviewSize != null) {
    view=recordingMenu.prepareSurfaceView(mPreviewSize.width,mPreviewSize.height);
  }
 else {
    view=recordingMenu.prepareSurfaceView();
  }
  view.getHolder().setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
  view.getHolder().addCallback(new Callback(){
    @Override public void surfaceDestroyed(    SurfaceHolder holder){
    }
    @Override public void surfaceCreated(    SurfaceHolder holder){
      MediaRecorder mr=new MediaRecorder();
      try {
        startCamera(mPreviewSize,holder);
        cam.unlock();
        mr.setCamera(cam);
      }
 catch (      Exception e) {
        logErr(e);
        closeRecordingMenu();
        closeCamera();
        finishRecording();
        return;
      }
      final File f=getBaseFileName(lat,lon,app,MPEG4_EXTENSION);
      initMediaRecorder(mr,p,f);
      try {
        if (AV_RECORDER_SPLIT.get()) {
          cleanupSpace();
        }
        runMediaRecorder(mapActivity,mr,f);
      }
 catch (      Exception e) {
        logErr(e);
      }
    }
    @Override public void surfaceChanged(    SurfaceHolder holder,    int format,    int width,    int height){
    }
  }
);
  recordingMenu.show();
}
