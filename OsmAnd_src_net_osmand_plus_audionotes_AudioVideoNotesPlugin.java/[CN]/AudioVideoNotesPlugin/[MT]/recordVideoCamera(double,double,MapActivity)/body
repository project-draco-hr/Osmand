{
  SurfaceView view=recordingMenu.prepareSurfaceView();
  view.getHolder().setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
  view.getHolder().addCallback(new Callback(){
    @Override public void surfaceDestroyed(    SurfaceHolder holder){
    }
    @Override public void surfaceCreated(    SurfaceHolder holder){
      MediaRecorder mr=new MediaRecorder();
      try {
        Parameters parameters=cam.getParameters();
        int cameraOrientation=getCamOrientation(mapActivity,Camera.CameraInfo.CAMERA_FACING_BACK);
        cam.setDisplayOrientation(cameraOrientation);
        parameters.set("rotation",cameraOrientation);
        cam.setParameters(parameters);
        cam.setPreviewDisplay(holder);
        cam.startPreview();
        cam.unlock();
        mr.setCamera(cam);
      }
 catch (      Exception e) {
        logErr(e);
        closeRecordingMenu();
        closeCamera();
        finishRecording();
        return;
      }
      String ext=MPEG4_EXTENSION;
      final File f=getBaseFileName(lat,lon,app,ext);
      mr.setAudioSource(MediaRecorder.AudioSource.DEFAULT);
      mr.setVideoSource(MediaRecorder.VideoSource.CAMERA);
      giveMediaRecorderHintRotatedScreen(mapActivity,mr);
      CamcorderProfile p=CamcorderProfile.get(AV_VIDEO_QUALITY.get());
      mr.setProfile(p);
      mr.setOutputFile(f.getAbsolutePath());
      try {
        runMediaRecorder(mapActivity,mr,f);
      }
 catch (      Exception e) {
        logErr(e);
      }
    }
    @Override public void surfaceChanged(    SurfaceHolder holder,    int format,    int width,    int height){
    }
  }
);
  recordingMenu.show();
}
