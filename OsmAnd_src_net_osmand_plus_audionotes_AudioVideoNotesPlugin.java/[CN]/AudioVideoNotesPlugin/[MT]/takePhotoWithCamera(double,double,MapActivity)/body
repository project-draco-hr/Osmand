{
  try {
    lastTakingPhoto=getBaseFileName(lat,lon,app,IMG_EXTENSION);
    final Camera.Size mPreviewSize;
    Parameters parameters=cam.getParameters();
    List<Camera.Size> psps=parameters.getSupportedPictureSizes();
    int camPicSizeIndex=AV_CAMERA_PICTURE_SIZE.get();
    log.debug("takePhotoWithCamera() index=" + camPicSizeIndex);
    if (camPicSizeIndex == AV_PHOTO_SIZE_DEFAULT) {
      camPicSizeIndex=cameraPictureSizeDefault;
      log.debug("takePhotoWithCamera() Default value of picture size. Set index to cameraPictureSizeDefault. Now index=" + camPicSizeIndex);
    }
    final Camera.Size selectedCamPicSize=psps.get(camPicSizeIndex);
    if (mSupportedPreviewSizes != null) {
      int width=selectedCamPicSize.width;
      int height=selectedCamPicSize.height;
      mPreviewSize=getOptimalPreviewSize(mSupportedPreviewSizes,width,height);
    }
 else {
      mPreviewSize=null;
    }
    final SurfaceView view;
    if (mPreviewSize != null) {
      view=recordingMenu.prepareSurfaceView(mPreviewSize.width,mPreviewSize.height);
    }
 else {
      view=recordingMenu.prepareSurfaceView();
    }
    view.getHolder().setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
    view.getHolder().addCallback(new Callback(){
      @Override public void surfaceDestroyed(      SurfaceHolder holder){
      }
      @Override public void surfaceCreated(      SurfaceHolder holder){
        try {
          if (AV_PHOTO_PLAY_SOUND.get()) {
            if (sp == null)             sp=new SoundPool(5,AudioManager.STREAM_MUSIC,0);
            if (shotId == 0) {
              try {
                AssetFileDescriptor assetFileDescriptor=app.getAssets().openFd("sounds/camera_click.ogg");
                shotId=sp.load(assetFileDescriptor,1);
                assetFileDescriptor.close();
              }
 catch (              Exception e) {
                log.error("cannot get shotId for sounds/camera_click.ogg");
              }
            }
          }
          Parameters parameters=cam.getParameters();
          parameters.setPictureSize(selectedCamPicSize.width,selectedCamPicSize.height);
          log.debug("takePhotoWithCamera() set Picture size: width=" + selectedCamPicSize.width + " height="+ selectedCamPicSize.height);
          autofocus=false;
          int cameraOrientation=getCamOrientation(mapActivity,Camera.CameraInfo.CAMERA_FACING_BACK);
          parameters.set("rotation",cameraOrientation);
          if (mPreviewSize != null) {
            parameters.setPreviewSize(mPreviewSize.width,mPreviewSize.height);
          }
          cam.setParameters(parameters);
          cam.setPreviewDisplay(holder);
          cam.startPreview();
          internalShoot();
        }
 catch (        Exception e) {
          logErr(e);
          closeRecordingMenu();
          closeCamera();
          finishRecording();
          e.printStackTrace();
        }
      }
      @Override public void surfaceChanged(      SurfaceHolder holder,      int format,      int width,      int height){
      }
    }
);
    recordingMenu.show();
  }
 catch (  RuntimeException e) {
    logErr(e);
    closeCamera();
  }
}
