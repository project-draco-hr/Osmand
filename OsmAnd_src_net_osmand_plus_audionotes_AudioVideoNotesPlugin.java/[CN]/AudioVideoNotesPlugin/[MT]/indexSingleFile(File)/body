{
  boolean oldFileExist=recordingByFileName.containsKey(f.getName());
  if (oldFileExist) {
    return false;
  }
  Recording r=new Recording(f);
  String fileName=f.getName();
  String otherName=r.getOtherName(fileName);
  int i=otherName.indexOf('.');
  if (i > 0) {
    otherName=otherName.substring(0,i);
  }
  r.file=f;
  GeoParsedPoint geo=MapUtils.decodeShortLinkString(otherName);
  r.lat=geo.getLatitude();
  r.lon=geo.getLongitude();
  Float heading=app.getLocationProvider().getHeading();
  Location loc=app.getLocationProvider().getLastKnownLocation();
  if (lastTakingPhoto != null && lastTakingPhoto.getName().equals(f.getName()) && heading != null) {
    float rot=heading.floatValue();
    try {
      r.updatePhotoInformation(r.lat,r.lon,loc,rot == 0 ? Double.NaN : rot);
    }
 catch (    IOException e) {
      log.error("Error updating EXIF information " + e.getMessage(),e);
    }
    lastTakingPhoto=null;
  }
  recordings.registerObject(r.lat,r.lon,r);
  Map<String,Recording> newMap=new LinkedHashMap<>(recordingByFileName);
  newMap.put(f.getName(),r);
  recordingByFileName=newMap;
  if (isRecording()) {
    AVActionType type=currentRecording.type;
    finishRecording();
    if (!AV_RECORDER_SPLIT.get() || type != AVActionType.REC_VIDEO) {
      final Recording recordingForMenu=r;
      app.runInUIThread(new Runnable(){
        @Override public void run(){
          updateContextMenu(recordingForMenu);
        }
      }
,200);
    }
  }
  return true;
}
