{
  if (points.size() > 2) {
    ArrayList<RouteSegmentResult> firstPartRecalculatedRoute=null;
    ArrayList<RouteSegmentResult> restPartRecalculatedRoute=null;
    if (ctx.previouslyCalculatedRoute != null) {
      List<RouteSegmentResult> prev=ctx.previouslyCalculatedRoute;
      long id=points.get(1).getRoad().id;
      int ss=points.get(1).getSegmentStart();
      for (int i=0; i < prev.size(); i++) {
        RouteSegmentResult rsr=prev.get(i);
        if (id == rsr.getObject().getId() && ss == rsr.getEndPointIndex()) {
          firstPartRecalculatedRoute=new ArrayList<RouteSegmentResult>(prev.subList(0,i + 1));
          restPartRecalculatedRoute=new ArrayList<RouteSegmentResult>(prev.subList(i + 1,prev.size()));
          break;
        }
      }
    }
    List<RouteSegmentResult> results=new ArrayList<RouteSegmentResult>();
    for (int i=0; i < points.size() - 1; i++) {
      RoutingContext local=new RoutingContext(ctx);
      if (i == 0) {
        local.previouslyCalculatedRoute=firstPartRecalculatedRoute;
      }
      local.visitor=ctx.visitor;
      List<RouteSegmentResult> res=searchRouteInternalPrepare(local,points.get(i),points.get(i + 1),leftSideNavigation);
      results.addAll(res);
      ctx.distinctLoadedTiles+=local.distinctLoadedTiles;
      ctx.loadedTiles+=local.loadedTiles;
      ctx.visitedSegments+=local.visitedSegments;
      ctx.loadedPrevUnloadedTiles+=local.loadedPrevUnloadedTiles;
      ctx.timeToCalculate+=local.timeToCalculate;
      ctx.timeToLoad+=local.timeToLoad;
      ctx.timeToLoadHeaders+=local.timeToLoadHeaders;
      ctx.relaxedSegments+=local.relaxedSegments;
      local.unloadAllData(ctx);
      if (restPartRecalculatedRoute != null) {
        results.addAll(restPartRecalculatedRoute);
        break;
      }
    }
    ctx.unloadAllData();
    return results;
  }
  return searchRoute(ctx,points.get(0),points.get(1),leftSideNavigation);
}
