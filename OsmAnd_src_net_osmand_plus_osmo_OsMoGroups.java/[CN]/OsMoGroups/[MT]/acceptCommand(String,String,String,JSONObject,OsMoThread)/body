{
  boolean processed=false;
  String operation=command + ":" + gid;
  OsMoGroup group=null;
  if (command.equalsIgnoreCase("GP")) {
    group=storage.getGroup(gid);
    if (group != null && gid.length() > 0) {
      List<OsMoDevice> delta=mergeGroup(group,obj,false);
      String mygid=service.getMyGroupTrackerId();
      StringBuilder b=new StringBuilder();
      for (      OsMoDevice d : delta) {
        if (d.getDeletedTimestamp() != 0 && d.isEnabled()) {
          if (group.name != null && !d.getTrackerId().equals(mygid)) {
            b.append(app.getString(R.string.osmo_user_left,d.getVisibleName(),group.getVisibleName(app))).append("\n");
          }
          disconnectImpl(d);
        }
 else         if (!d.isActive()) {
          if (group.name != null && !d.getTrackerId().equals(mygid)) {
            b.append(app.getString(R.string.osmo_user_joined,d.getVisibleName(),group.getVisibleName(app))).append("\n");
          }
          connectDeviceImpl(d);
        }
      }
      if (b.length() > 0 && app.getSettings().OSMO_SHOW_GROUP_NOTIFICATIONS.get()) {
        app.showToastMessage(b.toString().trim());
      }
      storage.save();
    }
    processed=true;
  }
 else   if (command.equalsIgnoreCase("GROUP_DISCONNECT")) {
    group=storage.getGroup(gid);
    if (group != null) {
      disconnectAllGroupUsers(group);
      disableGroupTracks(group,group.groupTracks);
      disableGroupTracks(group,Collections.singleton(group.name + " points.gpx"));
    }
    processed=true;
  }
 else   if (command.equalsIgnoreCase("GROUP_CONNECT")) {
    group=storage.getGroup(gid);
    if (group != null) {
      mergeGroup(group,obj,true);
      group.active=true;
      for (      OsMoDevice d : group.getGroupUsers(null)) {
        if (d.isEnabled()) {
          d.active=false;
          connectDeviceImpl(d);
        }
      }
      storage.save();
    }
    processed=true;
  }
 else   if (command.equalsIgnoreCase("GROUP_CREATE") || command.equalsIgnoreCase("GROUP_JOIN")) {
    if (command.equalsIgnoreCase("GROUP_CREATE")) {
      operation=command;
      try {
        gid=obj.getString(GROUP_ID);
      }
 catch (      JSONException e) {
        e.printStackTrace();
        service.showErrorMessage(e.getMessage());
        return true;
      }
    }
    group=storage.getGroup(gid);
    if (group == null) {
      group=new OsMoGroup();
      group.groupId=gid;
      storage.addGroup(group);
    }
    connectGroupImpl(group);
    storage.save();
    processed=true;
  }
 else   if (command.equals("GROUP_LEAVE")) {
    group=storage.getGroup(gid);
    if (group != null) {
      storage.deleteGroup(group);
    }
    storage.save();
    processed=true;
  }
 else   if (command.equals("GROUP_GET_ALL")) {
    try {
      JSONArray arr=new JSONArray(data);
      int arrLength=arr.length();
      if (arrLength > 0) {
        Map<String,OsMoGroup> receivedGroups=new HashMap<String,OsMoGroupsStorage.OsMoGroup>();
        for (int i=0; i < arrLength; i++) {
          JSONObject o=arr.getJSONObject(i);
          OsMoGroup parsedGroup=parseGroup(o);
          receivedGroups.put(parsedGroup.getGroupId(),parsedGroup);
        }
        storage.mergeGroups(receivedGroups);
        storage.save();
      }
      processed=true;
      for (      OsMoGroup g : storage.getGroups()) {
        if (!g.isMainGroup() && g.isEnabled()) {
          connectGroupImpl(g);
        }
      }
    }
 catch (    JSONException e) {
      e.printStackTrace();
      service.showErrorMessage(e.getMessage());
      return processed;
    }
  }
  if (processed && uiListeners != null) {
    for (    OsMoGroupsUIListener listener : uiListeners) {
      listener.groupsListChange(operation,group);
    }
  }
  return processed;
}
