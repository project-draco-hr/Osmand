{
  Way newWay=new Way(randId());
  if (w1.getNodes() != null || w1.getNodes().size() != 0) {
    if (firstNodeW1 && firstNodeW2) {
      for (int i=w1.getNodes().size() - 1; i > 0; i--) {
        newWay.addNode(w1.getNodes().get(i));
      }
      for (      Node n : w2.getNodes()) {
        newWay.addNode(n);
      }
    }
 else     if (firstNodeW1 && !firstNodeW2) {
      for (      Node n : w2.getNodes()) {
        newWay.addNode(n);
      }
      for (int i=1; i < w1.getNodes().size(); i++) {
        newWay.addNode(w1.getNodes().get(i));
      }
    }
 else     if (!firstNodeW1 && firstNodeW2) {
      for (      Node n : w1.getNodes()) {
        newWay.addNode(n);
      }
      for (int i=1; i < w2.getNodes().size(); i++) {
        newWay.addNode(w2.getNodes().get(i));
      }
    }
 else     if (!firstNodeW1 && !firstNodeW2) {
      for (      Node n : w1.getNodes()) {
        newWay.addNode(n);
      }
      for (int i=w2.getNodes().size() - 2; i >= 0; i--) {
        newWay.addNode(w2.getNodes().get(i));
      }
    }
  }
 else {
    if (firstNodeW1 && firstNodeW2) {
      for (int i=w1.getNodeIds().size() - 1; i > 0; i--) {
        newWay.addNode(w1.getNodeIds().get(i));
      }
      for (int i=0; i < w2.getNodeIds().size(); i++) {
        newWay.addNode(w2.getNodeIds().get(i));
      }
    }
 else     if (firstNodeW1 && !firstNodeW2) {
      for (int i=0; i < w2.getNodeIds().size(); i++) {
        newWay.addNode(w2.getNodeIds().get(i));
      }
      for (int i=1; i < w1.getNodeIds().size(); i++) {
        newWay.addNode(w1.getNodeIds().get(i));
      }
    }
 else     if (!firstNodeW1 && firstNodeW2) {
      for (int i=0; i < w1.getNodeIds().size(); i++) {
        newWay.addNode(w1.getNodeIds().get(i));
      }
      for (int i=1; i < w2.getNodeIds().size(); i++) {
        newWay.addNode(w2.getNodeIds().get(i));
      }
    }
 else     if (!firstNodeW1 && !firstNodeW2) {
      for (int i=0; i < w1.getNodeIds().size(); i++) {
        newWay.addNode(w1.getNodeIds().get(i));
      }
      for (int i=w2.getNodeIds().size() - 2; i >= 0; i--) {
        newWay.addNode(w2.getNodeIds().get(i));
      }
    }
  }
  return newWay;
}
