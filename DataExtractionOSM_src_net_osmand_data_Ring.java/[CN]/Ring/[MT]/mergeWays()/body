{
  if (border != null)   return;
  List<Way> ways=new ArrayList<Way>(getWays());
  boolean unInitializedNodes=true;
  for (  Way w : ways) {
    if (w.getNodes() != null && w.getNodes().size() != 0) {
      unInitializedNodes=false;
      break;
    }
  }
  List<Way> borderWays=new ArrayList<Way>();
  for (  Way w : ways) {
    if ((w.getNodes() == null || w.getNodes().size() == 0) && !unInitializedNodes)     continue;
    Way wayToMerge=w;
    Way newWay;
    do {
      newWay=null;
      for (      Way borderWay : borderWays) {
        newWay=combineTwoWaysIfHasPoints(wayToMerge,borderWay);
        if (newWay != null) {
          wayToMerge=newWay;
          borderWays.remove(borderWay);
          break;
        }
      }
    }
 while (newWay != null);
    borderWays.add(wayToMerge);
  }
  if (borderWays.size() != 1) {
    border=new Way(nextRandId());
    return;
  }
  border=borderWays.get(0);
  return;
}
