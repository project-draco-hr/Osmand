{
switch (searchResult.objectType) {
case CITY:
case POSTCODE:
    City city=(City)searchResult.object;
  return Algorithms.capitalizeFirstLetterAndLowercase(city.getType().toString());
case VILLAGE:
city=(City)searchResult.object;
if (!Algorithms.isEmpty(searchResult.localeRelatedObjectName)) {
return Algorithms.capitalizeFirstLetterAndLowercase(city.getType().toString()) + " near " + searchResult.localeRelatedObjectName+ (searchResult.distRelatedObjectName > 0 ? " (" + OsmAndFormatter.getFormattedDistance((float)searchResult.distRelatedObjectName,app) + ")" : "");
}
 else {
return Algorithms.capitalizeFirstLetterAndLowercase(city.getType().toString());
}
case STREET:
Street street=(Street)searchResult.object;
City streetCity=street.getCity();
if (!Algorithms.isEmpty(searchResult.localeRelatedObjectName)) {
return searchResult.localeRelatedObjectName + (searchResult.distRelatedObjectName > 0 ? " (" + OsmAndFormatter.getFormattedDistance((float)searchResult.distRelatedObjectName,app) + ")" : "");
}
 else {
return streetCity.getName() + " - " + Algorithms.capitalizeFirstLetterAndLowercase(streetCity.getType().name());
}
case HOUSE:
return "";
case STREET_INTERSECTION:
return "";
case POI_TYPE:
AbstractPoiType abstractPoiType=(AbstractPoiType)searchResult.object;
String res;
if (abstractPoiType instanceof PoiCategory) {
res="";
}
 else if (abstractPoiType instanceof PoiFilter) {
PoiFilter poiFilter=(PoiFilter)abstractPoiType;
res=poiFilter.getPoiCategory() != null ? poiFilter.getPoiCategory().getTranslation() : "";
}
 else if (abstractPoiType instanceof PoiType) {
PoiType poiType=(PoiType)abstractPoiType;
res=poiType.getParentType() != null ? poiType.getParentType().getTranslation() : null;
if (res == null) {
res=poiType.getCategory() != null ? poiType.getCategory().getTranslation() : null;
}
if (res == null) {
res="";
}
}
 else {
res="";
}
return res;
case POI:
Amenity amenity=(Amenity)searchResult.object;
PoiCategory pc=amenity.getType();
PoiType pt=pc.getPoiTypeByKeyName(amenity.getSubType());
String typeStr=amenity.getSubType();
if (pt != null) {
typeStr=pt.getTranslation();
}
 else if (typeStr != null) {
typeStr=Algorithms.capitalizeFirstLetterAndLowercase(typeStr.replace('_',' '));
}
return typeStr;
case LOCATION:
break;
case FAVORITE:
FavouritePoint fav=(FavouritePoint)searchResult.object;
return fav.getCategory().length() == 0 ? app.getString(R.string.shared_string_favorites) : fav.getCategory();
case REGION:
break;
case RECENT_OBJ:
HistoryEntry entry=(HistoryEntry)searchResult.object;
boolean hasTypeInDescription=!Algorithms.isEmpty(entry.getName().getTypeName());
if (hasTypeInDescription) {
return entry.getName().getTypeName();
}
 else {
return app.getString(R.string.shared_string_history);
}
case WPT:
break;
case UNKNOWN_NAME_FILTER:
break;
}
return searchResult.objectType.name();
}
