{
  AST ast=var.getAST();
  String varName=var.getName().getIdentifier();
  IVariableBinding varBinding=Types.getVariableBinding(var);
  Type returnType=ast.newPrimitiveType(PrimitiveType.VOID);
  Types.addBinding(returnType,ast.resolveWellKnownType("void"));
  String methodName="set" + NameTable.capitalize(varName);
  MethodDeclaration accessor=createBlankAccessor(var,methodName,modifiers,returnType);
  GeneratedMethodBinding binding=new GeneratedMethodBinding(accessor,varBinding.getDeclaringClass(),false);
  Types.addBinding(accessor,binding);
  Types.addBinding(accessor.getName(),binding);
  SingleVariableDeclaration param=ast.newSingleVariableDeclaration();
  param.setName(ast.newSimpleName(paramName));
  Type paramType=NodeCopier.copySubtree(ast,type);
  param.setType(paramType);
  Types.addBinding(paramType,type.resolveBinding());
  @SuppressWarnings("unchecked") List<SingleVariableDeclaration> parameters=accessor.parameters();
  GeneratedVariableBinding paramBinding=new GeneratedVariableBinding(paramName,0,type.resolveBinding(),false,true,varBinding.getDeclaringClass(),binding);
  Types.addBinding(param,paramBinding);
  Types.addBinding(param.getName(),paramBinding);
  parameters.add(param);
  binding.addParameter(paramBinding);
  Assignment assign=ast.newAssignment();
  SimpleName sn=ast.newSimpleName(NameTable.getName(varBinding));
  assign.setLeftHandSide(sn);
  Types.addBinding(sn,varBinding);
  assign.setRightHandSide(NodeCopier.copySubtree(ast,param.getName()));
  Types.addBinding(assign,varBinding.getType());
  ExpressionStatement assignStmt=ast.newExpressionStatement(assign);
  @SuppressWarnings("unchecked") List<Statement> stmts=accessor.getBody().statements();
  stmts.add(assignStmt);
  Symbols.scanAST(accessor);
  return accessor;
}
