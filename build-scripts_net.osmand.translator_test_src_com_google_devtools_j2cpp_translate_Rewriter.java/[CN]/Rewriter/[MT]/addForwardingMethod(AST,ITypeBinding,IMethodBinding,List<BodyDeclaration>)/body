{
  Logger.getAnonymousLogger().fine(String.format("adding %s to %s",interfaceMethod.getName(),typeBinding.getQualifiedName()));
  MethodDeclaration method=createInterfaceMethodBody(ast,typeBinding,interfaceMethod);
  Block body=ast.newBlock();
  method.setBody(body);
  SuperMethodInvocation superInvocation=ast.newSuperMethodInvocation();
  superInvocation.setName(NodeCopier.copySubtree(ast,method.getName()));
  @SuppressWarnings("unchecked") List<SingleVariableDeclaration> parameters=method.parameters();
  @SuppressWarnings("unchecked") List<Expression> args=superInvocation.arguments();
  for (  SingleVariableDeclaration param : parameters) {
    Expression arg=NodeCopier.copySubtree(ast,param.getName());
    args.add(arg);
  }
  Types.addBinding(superInvocation,Types.getMethodBinding(method));
  @SuppressWarnings("unchecked") List<Statement> stmts=body.statements();
  ReturnStatement returnStmt=ast.newReturnStatement();
  returnStmt.setExpression(superInvocation);
  stmts.add(returnStmt);
  decls.add(method);
}
