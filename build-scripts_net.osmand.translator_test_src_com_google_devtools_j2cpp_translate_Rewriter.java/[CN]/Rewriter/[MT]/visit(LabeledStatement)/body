{
  Statement s=node.getBody();
  Statement statementBody=null;
  if (s instanceof DoStatement) {
    statementBody=((DoStatement)s).getBody();
  }
 else   if (s instanceof EnhancedForStatement) {
    statementBody=((EnhancedForStatement)s).getBody();
  }
 else   if (s instanceof ForStatement) {
    statementBody=((ForStatement)s).getBody();
  }
 else   if (s instanceof WhileStatement) {
    statementBody=((WhileStatement)s).getBody();
  }
  if (statementBody != null) {
    AST ast=node.getAST();
    final boolean[] hasContinue=new boolean[1];
    final boolean[] hasBreak=new boolean[1];
    node.accept(new ASTVisitor(){
      @Override public void endVisit(      ContinueStatement node){
        if (node.getLabel() != null) {
          hasContinue[0]=true;
        }
      }
      @Override public void endVisit(      BreakStatement node){
        if (node.getLabel() != null) {
          hasBreak[0]=true;
        }
      }
    }
);
    List<Statement> stmts=null;
    if (hasContinue[0]) {
      if (statementBody instanceof Block) {
        stmts=((Block)statementBody).statements();
        LabeledStatement newLabel=ast.newLabeledStatement();
        newLabel.setLabel(NodeCopier.copySubtree(ast,node.getLabel()));
        newLabel.setBody(ast.newEmptyStatement());
        stmts.add(newLabel);
      }
    }
    if (hasBreak[0]) {
      ASTNode parent=node.getParent();
      if (parent instanceof Block) {
        stmts=((Block)parent).statements();
      }
 else {
        Block block=ast.newBlock();
        stmts=block.statements();
        stmts.add((Statement)parent);
        List<Statement> superStmts=((Block)parent.getParent()).statements();
        for (int i=0; i < superStmts.size(); i++) {
          if (superStmts.get(i) == parent) {
            superStmts.set(i,block);
            break;
          }
        }
        stmts=block.statements();
      }
      for (int i=0; i < stmts.size(); i++) {
        if (stmts.get(i) == node) {
          LabeledStatement newLabel=ast.newLabeledStatement();
          newLabel.setLabel(NodeCopier.copySubtree(ast,node.getLabel()));
          newLabel.setBody(ast.newEmptyStatement());
          stmts.add(i + 1,newLabel);
          break;
        }
      }
    }
    if (hasContinue[0] || hasBreak[0]) {
      ASTNode parent=node.getParent();
      if (parent instanceof Block) {
        stmts=((Block)parent).statements();
        for (int i=0; i < stmts.size(); i++) {
          if (stmts.get(i) == node) {
            stmts.set(i,NodeCopier.copySubtree(ast,node.getBody()));
            break;
          }
        }
      }
    }
  }
  return true;
}
