{
  int init=0;
  int lastIndexResult=-1;
  int cright=0;
  int cleft=0;
  int ctop=0;
  int cbottom=0;
  req.numberOfReadSubtrees++;
  while (true) {
    if (req.isInterrupted()) {
      return;
    }
    int t=codedIS.readTag();
    int tag=WireFormat.getTagFieldNumber(t);
    if (init == 0xf) {
      init=0;
      if (cright < req.left || cleft > req.right || ctop > req.bottom || cbottom < req.top) {
        return;
      }
 else {
        req.numberOfAcceptedSubtrees++;
      }
    }
switch (tag) {
case 0:
      return;
case OsmandOdb.TransportStopsTree.BOTTOM_FIELD_NUMBER:
    cbottom=codedIS.readSInt32() + pbottom;
  init|=1;
break;
case OsmandOdb.TransportStopsTree.LEFT_FIELD_NUMBER:
cleft=codedIS.readSInt32() + pleft;
init|=2;
break;
case OsmandOdb.TransportStopsTree.RIGHT_FIELD_NUMBER:
cright=codedIS.readSInt32() + pright;
init|=4;
break;
case OsmandOdb.TransportStopsTree.TOP_FIELD_NUMBER:
ctop=codedIS.readSInt32() + ptop;
init|=8;
break;
case OsmandOdb.TransportStopsTree.LEAFS_FIELD_NUMBER:
int stopOffset=codedIS.getTotalBytesRead();
int length=codedIS.readRawVarint32();
int oldLimit=codedIS.pushLimit(length);
if (lastIndexResult == -1) {
lastIndexResult=req.searchResults.size();
}
req.numberOfVisitedObjects++;
TransportStop transportStop=readTransportStop(stopOffset,cleft,cright,ctop,cbottom,req);
if (transportStop != null) {
req.searchResults.add(transportStop);
}
codedIS.popLimit(oldLimit);
break;
case OsmandOdb.TransportStopsTree.SUBTREES_FIELD_NUMBER:
length=readInt();
int filePointer=codedIS.getTotalBytesRead();
oldLimit=codedIS.pushLimit(length);
searchTransportTreeBounds(cleft,cright,ctop,cbottom,req);
codedIS.popLimit(oldLimit);
codedIS.seek(filePointer + length);
if (lastIndexResult >= 0) {
throw new IllegalStateException();
}
break;
case OsmandOdb.TransportStopsTree.BASEID_FIELD_NUMBER:
long baseId=codedIS.readUInt64();
if (lastIndexResult != -1) {
for (int i=lastIndexResult; i < req.searchResults.size(); i++) {
TransportStop rs=req.searchResults.get(i);
rs.setId(rs.getId() + baseId);
}
}
break;
default :
skipUnknownField(t);
break;
}
}
}
