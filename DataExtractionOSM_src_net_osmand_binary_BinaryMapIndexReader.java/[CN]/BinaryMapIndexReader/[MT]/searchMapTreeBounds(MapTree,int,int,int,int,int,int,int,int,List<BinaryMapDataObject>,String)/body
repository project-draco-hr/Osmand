{
  int init=0;
  List<BinaryMapDataObject> results=null;
  while (true) {
    int tag=WireFormat.getTagFieldNumber(codedIS.readTag());
    if (init == 0xf) {
      init=0;
      if (tree.right < sleft || tree.left > sright || tree.top > sbottom || tree.bottom < stop) {
        return;
      }
    }
switch (tag) {
case 0:
      return;
case OsmandOdb.MapTree.BOTTOM_FIELD_NUMBER:
    tree.bottom=codedIS.readSInt32() + pbottom;
  init|=1;
break;
case OsmandOdb.MapTree.LEFT_FIELD_NUMBER:
tree.left=codedIS.readSInt32() + pleft;
init|=2;
break;
case OsmandOdb.MapTree.RIGHT_FIELD_NUMBER:
tree.right=codedIS.readSInt32() + pright;
init|=4;
break;
case OsmandOdb.MapTree.TOP_FIELD_NUMBER:
tree.top=codedIS.readSInt32() + ptop;
init|=8;
break;
case OsmandOdb.MapTree.LEAFS_FIELD_NUMBER:
int length=codedIS.readRawVarint32();
int oldLimit=codedIS.pushLimit(length);
BinaryMapDataObject mapObject=readMapDataObject(tree.left,tree.right,tree.top,tree.bottom,sleft,sright,stop,sbottom);
if (mapObject != null) {
if (results == null) {
results=new ArrayList<BinaryMapDataObject>();
}
results.add(mapObject);
searchResults.add(mapObject);
}
codedIS.popLimit(oldLimit);
break;
case OsmandOdb.MapTree.SUBTREES_FIELD_NUMBER:
MapTree r=new MapTree();
r.length=readInt();
r.filePointer=codedIS.getTotalBytesRead();
oldLimit=codedIS.pushLimit(r.length);
searchMapTreeBounds(r,tree.left,tree.right,tree.top,tree.bottom,sleft,sright,stop,sbottom,searchResults,indent + "  ");
codedIS.popLimit(oldLimit);
codedIS.seek(r.filePointer + r.length);
break;
case OsmandOdb.MapTree.BASEID_FIELD_NUMBER:
tree.baseId=codedIS.readUInt64();
if (results != null) {
for (BinaryMapDataObject rs : results) {
rs.id+=tree.baseId;
if (rs.restrictions != null) {
for (int i=0; i < rs.restrictions.length; i++) {
rs.restrictions[i]+=tree.baseId;
}
}
}
}
break;
case OsmandOdb.MapTree.STRINGTABLE_FIELD_NUMBER:
length=codedIS.readRawVarint32();
oldLimit=codedIS.pushLimit(length);
tree.stringTable=readStringTable();
codedIS.popLimit(oldLimit);
if (results != null) {
for (BinaryMapDataObject rs : results) {
if (rs.stringId != -1) {
rs.name=tree.stringTable.get(rs.stringId);
}
}
}
break;
default :
return;
}
}
}
