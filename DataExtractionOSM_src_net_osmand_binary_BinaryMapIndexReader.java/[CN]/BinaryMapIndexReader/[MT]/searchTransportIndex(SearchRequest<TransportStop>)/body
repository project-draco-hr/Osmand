{
  for (  TransportIndex index : transportIndexes) {
    if (index.stopsFileLength == 0 || index.right < req.left || index.left > req.right || index.top > req.bottom || index.bottom < req.top) {
      continue;
    }
    codedIS.seek(index.stopsFileOffset);
    int oldLimit=codedIS.pushLimit(index.stopsFileLength);
    int offset=req.searchResults.size();
    transportAdapter.searchTransportTreeBounds(0,0,0,0,req);
    codedIS.popLimit(oldLimit);
    for (int i=offset; i < req.searchResults.size(); i++) {
      TransportStop st=req.searchResults.get(i);
      if (st.getName().length() != 0) {
        st.setName(transportAdapter.getStringFromStringTable(index.stringTable,st.getName().charAt(0)));
      }
      if (st.getEnName().length() != 0) {
        st.setEnName(transportAdapter.getStringFromStringTable(index.stringTable,st.getEnName().charAt(0)));
      }
 else {
        st.setEnName(Junidecode.unidecode(st.getName()));
      }
    }
  }
  log.info("Search is done. Visit " + req.numberOfVisitedObjects + " objects. Read "+ req.numberOfAcceptedObjects+ " objects.");
  log.info("Read " + req.numberOfReadSubtrees + " subtrees. Go through "+ req.numberOfAcceptedSubtrees+ " subtrees.");
  return req.getSearchResults();
}
