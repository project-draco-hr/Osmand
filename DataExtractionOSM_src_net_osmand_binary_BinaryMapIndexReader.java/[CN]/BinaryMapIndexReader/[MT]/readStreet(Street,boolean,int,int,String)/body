{
  int x=0;
  int y=0;
  boolean loadLocation=city24X != 0 || city24Y != 0;
  while (true) {
    int t=codedIS.readTag();
    int tag=WireFormat.getTagFieldNumber(t);
switch (tag) {
case 0:
      if (loadLocation) {
        s.setLocation(MapUtils.getLatitudeFromTile(24,y),MapUtils.getLongitudeFromTile(24,x));
      }
    return s;
case OsmandOdb.StreetIndex.ID_FIELD_NUMBER:
  s.setId(codedIS.readUInt64());
break;
case OsmandOdb.StreetIndex.NAME_EN_FIELD_NUMBER:
s.setEnName(codedIS.readString());
break;
case OsmandOdb.StreetIndex.NAME_FIELD_NUMBER:
s.setName(codedIS.readString());
if (s.getEnName() == null) {
s.setEnName(Junidecode.unidecode(s.getName()));
}
break;
case OsmandOdb.StreetIndex.X_FIELD_NUMBER:
int sx=codedIS.readSInt32();
if (loadLocation) {
x=sx + city24X;
}
 else {
x=(int)MapUtils.getTileNumberX(24,s.getLocation().getLongitude());
}
break;
case OsmandOdb.StreetIndex.Y_FIELD_NUMBER:
int sy=codedIS.readSInt32();
if (loadLocation) {
y=sy + city24Y;
}
 else {
y=(int)MapUtils.getTileNumberY(24,s.getLocation().getLatitude());
}
break;
case OsmandOdb.StreetIndex.BUILDINGS_FIELD_NUMBER:
int offset=codedIS.getTotalBytesRead();
int length=codedIS.readRawVarint32();
if (loadBuildings) {
int oldLimit=codedIS.pushLimit(length);
Building b=readBuilding(offset,x,y);
if (postcodeFilter == null || postcodeFilter.equalsIgnoreCase(b.getPostcode())) {
s.registerBuilding(b);
}
codedIS.popLimit(oldLimit);
}
 else {
codedIS.skipRawBytes(length);
}
break;
default :
skipUnknownField(t);
break;
}
}
}
