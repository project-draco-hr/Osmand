{
  final OpenstreetmapPoint poi=(OpenstreetmapPoint)getArguments().getSerializable(OPENSTREETMAP_POINT);
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  View view=getActivity().getLayoutInflater().inflate(R.layout.send_poi_dialog,null);
  final EditText messageEditText=(EditText)view.findViewById(R.id.messageEditText);
  final EditText userNameEditText=(EditText)view.findViewById(R.id.userNameEditText);
  final EditText passwordEditText=(EditText)view.findViewById(R.id.passwordEditText);
  final CheckBox closeChangeSetCheckBox=(CheckBox)view.findViewById(R.id.closeChangeSetCheckBox);
  final OsmandSettings settings=((MapActivity)getActivity()).getMyApplication().getSettings();
  userNameEditText.setText(settings.USER_NAME.get());
  passwordEditText.setText(settings.USER_PASSWORD.get());
  builder.setTitle(R.string.commit_poi).setView(view).setPositiveButton(R.string.shared_string_ok,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      final OpenstreetmapRemoteUtil openstreetmapRemoteUtil=new OpenstreetmapRemoteUtil(getActivity());
      settings.USER_NAME.set(userNameEditText.getText().toString());
      settings.USER_PASSWORD.set(passwordEditText.getText().toString());
      final String message=messageEditText.getText().toString();
      final boolean closeChangeSet=closeChangeSetCheckBox.isChecked();
      final Activity activity=getActivity();
      int actionTypeMessageId=-1;
switch (poi.getAction()) {
case CREATE:
        actionTypeMessageId=R.string.poi_action_add;
      break;
case MODIFY:
    actionTypeMessageId=R.string.poi_action_change;
  break;
case DELETE:
actionTypeMessageId=R.string.poi_action_delete;
break;
}
final String resultMessage=getResources().getString(actionTypeMessageId);
final String successTemplate=getResources().getString(R.string.poi_action_succeded_template);
new AsyncTask<Void,Void,EntityInfo>(){
@Override protected EntityInfo doInBackground(Void... params){
return openstreetmapRemoteUtil.loadNode(poi.getEntity());
}
@Override protected void onPostExecute(EntityInfo entityInfo){
EditPoiFragment.commitNode(poi.getAction(),poi.getEntity(),entityInfo,message,closeChangeSet,new Runnable(){
@Override public void run(){
  AccessibleToast.makeText(activity,MessageFormat.format(successTemplate,resultMessage),Toast.LENGTH_LONG).show();
  if (activity instanceof MapActivity) {
    ((MapActivity)activity).getMapView().refreshMap(true);
  }
}
}
,activity,openstreetmapRemoteUtil);
}
}
.execute();
}
}
).setNegativeButton(R.string.shared_string_cancel,null);
return builder.create();
}
