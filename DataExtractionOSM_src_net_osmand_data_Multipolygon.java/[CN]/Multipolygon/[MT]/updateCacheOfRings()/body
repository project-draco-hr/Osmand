{
  if (outerRings == null) {
    outerRings=Ring.combineToRings(getOuterWays());
    maxLat=-90;
    minLat=90;
    maxLon=-180;
    minLon=180;
    for (    Ring r : outerRings) {
      for (      Node n : r.getBorder()) {
        maxLat=(float)Math.max(maxLat,n.getLatitude());
        minLat=(float)Math.min(minLat,n.getLatitude());
        maxLon=(float)Math.max(maxLon,n.getLongitude());
        minLon=(float)Math.min(minLon,n.getLongitude());
      }
    }
    Collections.sort(outerRings);
  }
  if (innerRings == null) {
    innerRings=Ring.combineToRings(getInnerWays());
    for (    Ring inner : innerRings) {
      HashSet<Ring> outContainingRings=new HashSet<Ring>();
      for (      Ring out : outerRings) {
        if (inner.isIn(out)) {
          outContainingRings.add(out);
        }
      }
      cacheContainedInnerInOuter.put(inner,outContainingRings);
    }
    Collections.sort(innerRings);
  }
}
