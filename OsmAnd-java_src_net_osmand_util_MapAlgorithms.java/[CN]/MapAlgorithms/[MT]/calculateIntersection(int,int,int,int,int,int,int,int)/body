{
  int by=-1;
  int bx=-1;
  if (outy < topY && iny >= topY) {
    int tx=(int)(outx + ((double)(inx - outx) * (topY - outy)) / (iny - outy));
    if (leftX <= tx && tx <= rightX) {
      bx=tx;
      by=topY;
      return combine2Points(bx,by);
    }
  }
  if (outy > bottomY && iny <= bottomY) {
    int tx=(int)(outx + ((double)(inx - outx) * (outy - bottomY)) / (outy - iny));
    if (leftX <= tx && tx <= rightX) {
      bx=tx;
      by=bottomY;
      return combine2Points(bx,by);
    }
  }
  if (outx < leftX && inx >= leftX) {
    int ty=(int)(outy + ((double)(iny - outy) * (leftX - outx)) / (inx - outx));
    if (ty >= topY && ty <= bottomY) {
      by=ty;
      bx=leftX;
      return combine2Points(bx,by);
    }
  }
  if (outx > rightX && inx <= rightX) {
    int ty=(int)(outy + ((double)(iny - outy) * (outx - rightX)) / (outx - inx));
    if (ty >= topY && ty <= bottomY) {
      by=ty;
      bx=rightX;
      return combine2Points(bx,by);
    }
  }
  if (outy > topY && iny <= topY) {
    int tx=(int)(outx + ((double)(inx - outx) * (topY - outy)) / (iny - outy));
    if (leftX <= tx && tx <= rightX) {
      bx=tx;
      by=topY;
      return combine2Points(bx,by);
    }
  }
  if (outy < bottomY && iny >= bottomY) {
    int tx=(int)(outx + ((double)(inx - outx) * (outy - bottomY)) / (outy - iny));
    if (leftX <= tx && tx <= rightX) {
      bx=tx;
      by=bottomY;
      return combine2Points(bx,by);
    }
  }
  if (outx > leftX && inx <= leftX) {
    int ty=(int)(outy + ((double)(iny - outy) * (leftX - outx)) / (inx - outx));
    if (ty >= topY && ty <= bottomY) {
      by=ty;
      bx=leftX;
      return combine2Points(bx,by);
    }
  }
  if (outx < rightX && inx >= rightX) {
    int ty=(int)(outy + ((double)(iny - outy) * (outx - rightX)) / (outx - inx));
    if (ty >= topY && ty <= bottomY) {
      by=ty;
      bx=rightX;
      return combine2Points(bx,by);
    }
  }
  if (outx == rightX || outx == leftX || outy == topY || outy == bottomY) {
    bx=outx;
    by=outy;
  }
  return -1L;
}
