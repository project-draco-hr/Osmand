{
  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  super.onCreate(savedInstanceState);
  setSupportProgressBarIndeterminateVisibility(false);
  getSupportActionBar().setTitle(R.string.global_app_settings);
  addPreferencesFromResource(R.xml.general_settings);
  String[] entries;
  String[] entrieValues;
  PreferenceScreen screen=getPreferenceScreen();
  settings=getMyApplication().getSettings();
  if (!Version.isBlackberry(getMyApplication())) {
    CheckBoxPreference nativeCheckbox=createCheckBoxPreference(settings.SAFE_MODE,R.string.safe_mode,R.string.safe_mode_description);
    if ((NativeOsmandLibrary.isLoaded() && !NativeOsmandLibrary.isSupported()) || settings.NATIVE_RENDERING_FAILED.get()) {
      nativeCheckbox.setEnabled(false);
      nativeCheckbox.setChecked(true);
    }
    screen.addPreference(nativeCheckbox);
    applicationDir=new Preference(this);
    applicationDir.setTitle(R.string.application_dir);
    applicationDir.setKey("external_storage_dir");
    applicationDir.setOnPreferenceClickListener(new OnPreferenceClickListener(){
      public void showOtherDialog(){
        AlertDialog.Builder editalert=new AlertDialog.Builder(SettingsGeneralActivity.this);
        editalert.setTitle(R.string.application_dir);
        final EditText input=new EditText(SettingsGeneralActivity.this);
        input.setText(settings.getExternalStorageDirectory().getAbsolutePath());
        input.setPadding(3,3,3,3);
        LinearLayout.LayoutParams lp=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.MATCH_PARENT);
        input.setLayoutParams(lp);
        settings.getExternalStorageDirectory().getAbsolutePath();
        editalert.setView(input);
        editalert.setNegativeButton(R.string.default_buttons_cancel,null);
        editalert.setPositiveButton(R.string.default_buttons_ok,new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int whichButton){
            warnAboutChangingStorage(input.getText().toString());
          }
        }
);
        editalert.show();
      }
      @Override public boolean onPreferenceClick(      Preference preference){
        SuggestExternalDirectoryDialog.showDialog(SettingsGeneralActivity.this,new OnClickListener(){
          @Override public void onClick(          DialogInterface dialog,          int which){
            dialog.dismiss();
            showOtherDialog();
          }
        }
,new Runnable(){
          @Override public void run(){
            reloadIndexes();
          }
        }
);
        return false;
      }
    }
);
    screen.addPreference(applicationDir);
  }
  registerBooleanPreference(settings.USE_ENGLISH_NAMES,screen);
  registerBooleanPreference(settings.LEFT_SIDE_NAVIGATION,screen);
  registerListPreference(settings.ROTATE_MAP,screen,new String[]{getString(R.string.rotate_map_none_opt),getString(R.string.rotate_map_bearing_opt),getString(R.string.rotate_map_compass_opt)},new Integer[]{OsmandSettings.ROTATE_MAP_NONE,OsmandSettings.ROTATE_MAP_BEARING,OsmandSettings.ROTATE_MAP_COMPASS});
  registerListPreference(settings.MAP_SCREEN_ORIENTATION,screen,new String[]{getString(R.string.map_orientation_portrait),getString(R.string.map_orientation_landscape),getString(R.string.map_orientation_default)},new Integer[]{ActivityInfo.SCREEN_ORIENTATION_PORTRAIT,ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE,ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED});
  registerListPreference(settings.OSMAND_THEME,screen,new String[]{"Dark","Light","Dark ActionBar"},new Integer[]{OsmandSettings.OSMAND_DARK_THEME,OsmandSettings.OSMAND_LIGHT_THEME,OsmandSettings.OSMAND_LIGHT_DARK_ACTIONBAR_THEME});
  MetricsConstants[] mvls=new MetricsConstants[]{MetricsConstants.KILOMETERS_AND_METERS,MetricsConstants.MILES_AND_FOOTS,MetricsConstants.MILES_AND_YARDS};
  entries=new String[mvls.length];
  for (int i=0; i < entries.length; i++) {
    entries[i]=mvls[i].toHumanString(getMyApplication());
  }
  registerListPreference(settings.METRIC_SYSTEM,screen,entries,mvls);
  String incompleteSuffix=" (" + getString(R.string.incomplete_locale) + ")";
  entrieValues=new String[]{"","en","af","hy","eu","bs","bg","ca","cs","nl","fi","fr","ka","de","el","he","hi","hu","id","it","ja","ko","lv","lt","mr","no","pl","pt","ro","ru","sk","sl","es","sv","tr","uk","vi","cy"};
  entries=new String[]{getString(R.string.system_locale),"English","Afrikaans","Armenian" + incompleteSuffix,"Basque" + incompleteSuffix,"Bosnian" + incompleteSuffix,"Bulgarian" + incompleteSuffix,"Catalan","Czech","Dutch","Finnish" + incompleteSuffix,"French","Georgian","German","Greek","Hebrew","Hindi" + incompleteSuffix,"Hungarian","Indonesian" + incompleteSuffix,"Italian","Japanese" + incompleteSuffix,"Korean" + incompleteSuffix,"Latvian","Lithuanian","Marathi","Norwegian" + incompleteSuffix,"Polish","Portuguese","Romanian","Russian","Slovak","Slovenian","Spanish","Swedish" + incompleteSuffix,"Turkish" + incompleteSuffix,"Ukrainian" + incompleteSuffix,"Vietnamese","Welsh" + incompleteSuffix};
  registerListPreference(settings.PREFERRED_LOCALE,screen,entries,entrieValues);
  entries=new String[ApplicationMode.values().length];
  for (int i=0; i < entries.length; i++) {
    entries[i]=ApplicationMode.values()[i].toHumanString(getMyApplication());
  }
  registerListPreference(settings.APPLICATION_MODE,screen,entries,ApplicationMode.values());
  if (!Version.isBlackberry((ClientContext)getApplication())) {
    PreferenceScreen cat=getPreferenceScreen();
    int nav=getResources().getConfiguration().navigation;
    if (nav == Configuration.NAVIGATION_DPAD || nav == Configuration.NAVIGATION_TRACKBALL || nav == Configuration.NAVIGATION_WHEEL || nav == Configuration.NAVIGATION_UNDEFINED) {
      cat.addPreference(createCheckBoxPreference(settings.USE_TRACKBALL_FOR_MOVEMENTS,R.string.use_trackball,R.string.use_trackball_descr));
    }
    ListPreference lp=createListPreference(settings.AUDIO_STREAM_GUIDANCE,new String[]{getString(R.string.voice_stream_music),getString(R.string.voice_stream_notification),getString(R.string.voice_stream_voice_call)},new Integer[]{AudioManager.STREAM_MUSIC,AudioManager.STREAM_NOTIFICATION,AudioManager.STREAM_VOICE_CALL},R.string.choose_audio_stream,R.string.choose_audio_stream_descr);
    final OnPreferenceChangeListener prev=lp.getOnPreferenceChangeListener();
    lp.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
      @Override public boolean onPreferenceChange(      Preference preference,      Object newValue){
        prev.onPreferenceChange(preference,newValue);
        CommandPlayer player=getMyApplication().getPlayer();
        if (player != null) {
          player.updateAudioStream(settings.AUDIO_STREAM_GUIDANCE.get());
        }
        return true;
      }
    }
);
    cat.addPreference(lp);
  }
  applicationModePreference=(ListPreference)screen.findPreference(settings.APPLICATION_MODE.getId());
  applicationModePreference.setOnPreferenceChangeListener(this);
}
