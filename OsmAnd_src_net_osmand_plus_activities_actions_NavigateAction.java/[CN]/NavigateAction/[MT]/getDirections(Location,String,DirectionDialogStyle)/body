{
  final Location current=getLastKnownLocation();
  Builder builder=new AlertDialog.Builder(mapActivity);
  final TargetPointsHelper targets=app.getTargetPointsHelper();
  final List<ApplicationMode> values=new ArrayList<ApplicationMode>(ApplicationMode.values(app));
  values.remove(ApplicationMode.DEFAULT);
  View view=mapActivity.getLayoutInflater().inflate(R.layout.calculate_route,null);
  boolean osmandRouter=mapActivity.getMyApplication().getSettings().ROUTER_SERVICE.get() == RouteService.OSMAND;
  final CheckBox nonoptimal=(CheckBox)view.findViewById(R.id.OptimalCheckox);
  LinearLayout topLayout=(LinearLayout)view.findViewById(R.id.LinearLayout);
  final ToggleButton[] buttons=createToggles(values,topLayout,mapActivity);
  final Spinner fromSpinner=setupFromSpinner(mapView,name,view,style);
  final List<LatLon> toList=new ArrayList<LatLon>();
  final Spinner toSpinner=setupToSpinner(mapView,name,view,toList,style);
  if (osmandRouter && targets.hasLongDistancesInBetween(current != null ? current : mapView,150000)) {
    TextView textView=(TextView)view.findViewById(R.id.ValidateTextView);
    textView.setText(R.string.route_is_too_long);
    textView.setVisibility(View.VISIBLE);
  }
  String via=generateViaDescription();
  if (via.length() == 0) {
    ((TextView)view.findViewById(R.id.ViaView)).setVisibility(View.GONE);
  }
 else {
    ((TextView)view.findViewById(R.id.ViaView)).setVisibility(View.VISIBLE);
    ((TextView)view.findViewById(R.id.ViaView)).setText(via);
  }
  ApplicationMode appMode=settings.getApplicationMode();
  if (appMode == ApplicationMode.DEFAULT) {
    appMode=ApplicationMode.CAR;
  }
  for (int i=0; i < buttons.length; i++) {
    if (buttons[i] != null) {
      final int ind=i;
      ToggleButton b=buttons[i];
      final ApplicationMode buttonAppMode=values.get(i);
      b.setChecked(appMode == buttonAppMode);
      if (b.isChecked()) {
        nonoptimal.setChecked(!settings.OPTIMAL_ROUTE_MODE.getModeValue(buttonAppMode));
      }
      b.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
        @Override public void onCheckedChanged(        CompoundButton buttonView,        boolean isChecked){
          if (isChecked) {
            nonoptimal.setChecked(!settings.OPTIMAL_ROUTE_MODE.getModeValue(buttonAppMode));
            for (int j=0; j < buttons.length; j++) {
              if (buttons[j] != null) {
                if (buttons[j].isChecked() != (ind == j)) {
                  buttons[j].setChecked(ind == j);
                }
              }
            }
          }
 else {
            boolean revert=true;
            for (int j=0; j < buttons.length; j++) {
              if (buttons[j] != null) {
                if (buttons[j].isChecked()) {
                  revert=false;
                  break;
                }
              }
            }
            if (revert) {
              buttons[ind].setChecked(true);
            }
          }
        }
      }
);
    }
  }
  DialogInterface.OnClickListener onlyShowCall=new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      LatLon tos=toList.get(toSpinner.getSelectedItemPosition());
      if (tos != null && tos != targets.getPointToNavigate()) {
        targets.navigateToPoint(tos,false,-1);
      }
      if (!targets.checkPointToNavigate(app)) {
        return;
      }
      Location from=fromSpinner.getSelectedItemPosition() == 0 ? current : mapView;
      if (from == null) {
        from=getLastKnownLocation();
      }
      if (from == null) {
        AccessibleToast.makeText(mapActivity,R.string.unknown_from_location,Toast.LENGTH_LONG).show();
        return;
      }
      ApplicationMode mode=getAppMode(buttons,settings,values);
      app.getRoutingHelper().setAppMode(mode);
      settings.OPTIMAL_ROUTE_MODE.setModeValue(mode,!nonoptimal.isChecked());
      settings.FOLLOW_THE_ROUTE.set(false);
      settings.FOLLOW_THE_GPX_ROUTE.set(null);
      app.getRoutingHelper().setFollowingMode(false);
      app.getRoutingHelper().setFinalAndCurrentLocation(targets.getPointToNavigate(),targets.getIntermediatePoints(),from,null);
    }
  }
;
  DialogInterface.OnClickListener followCall=new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      LatLon tos=toList.get(toSpinner.getSelectedItemPosition());
      if (tos != null && tos != targets.getPointToNavigate()) {
        targets.navigateToPoint(tos,false,-1);
      }
      if (!targets.checkPointToNavigate(app)) {
        return;
      }
      boolean msg=true;
      Location lastKnownLocation=getLastKnownLocation();
      Location from=fromSpinner.getSelectedItemPosition() == 0 ? current : mapView;
      if (from == null) {
        from=lastKnownLocation;
      }
      if (OsmAndLocationProvider.isPointAccurateForRouting(lastKnownLocation)) {
        from=lastKnownLocation;
        msg=false;
      }
      if (msg) {
        AccessibleToast.makeText(mapActivity,R.string.route_updated_loc_found,Toast.LENGTH_LONG).show();
      }
      ApplicationMode mode=getAppMode(buttons,settings,values);
      settings.OPTIMAL_ROUTE_MODE.setModeValue(mode,!nonoptimal.isChecked());
      dialog.dismiss();
      mapActivity.followRoute(mode,targets.getPointToNavigate(),targets.getIntermediatePoints(),from,null);
    }
  }
;
  DialogInterface.OnClickListener useGpxNavigation=new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      LatLon tos=toList.get(toSpinner.getSelectedItemPosition());
      if (tos != null && tos != targets.getPointToNavigate()) {
        targets.navigateToPoint(tos,false,-1);
      }
      ApplicationMode mode=getAppMode(buttons,settings,values);
      navigateUsingGPX(mode);
    }
  }
;
  builder.setView(view);
  builder.setTitle(R.string.get_directions);
  builder.setPositiveButton(R.string.follow,followCall);
  builder.setNeutralButton(R.string.only_show,onlyShowCall);
  if (style.gpxRouteEnabled) {
    builder.setNegativeButton(R.string.gpx_navigation,useGpxNavigation);
  }
 else {
    builder.setNegativeButton(R.string.no_route,null);
  }
  builder.show();
}
