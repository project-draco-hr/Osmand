{
  LinearLayout ll=(LinearLayout)a.getLayoutInflater().inflate(R.layout.mode_toggles,parent);
  OsmandSettings settings=((OsmandApplication)a.getApplication()).getSettings();
  final List<ApplicationMode> values=new ArrayList<ApplicationMode>(ApplicationMode.values((OsmandApplication)a.getApplication()));
  if (!showDefault) {
    values.remove(ApplicationMode.DEFAULT);
  }
  final ToggleButton[] buttons=createToggles(values,ll,a);
  ApplicationMode appMode=settings.getApplicationMode();
  for (int i=0; i < buttons.length; i++) {
    if (buttons[i] != null) {
      final int ind=i;
      ToggleButton b=buttons[i];
      final ApplicationMode buttonAppMode=values.get(i);
      b.setChecked(appMode == buttonAppMode);
      if (appMode == buttonAppMode) {
        selected.add(appMode);
      }
      b.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
        @Override public void onCheckedChanged(        CompoundButton buttonView,        boolean isChecked){
          if (isChecked) {
            selected.clear();
            for (int j=0; j < buttons.length; j++) {
              if (buttons[j] != null) {
                if (ind == j) {
                  selected.add(values.get(j));
                }
                if (buttons[j].isChecked() != (ind == j)) {
                  buttons[j].setChecked(ind == j);
                }
              }
            }
          }
 else {
            boolean revert=true;
            for (int j=0; j < buttons.length; j++) {
              if (buttons[j] != null) {
                if (buttons[j].isChecked()) {
                  revert=false;
                  break;
                }
              }
            }
            if (revert) {
              buttons[ind].setChecked(true);
            }
          }
          if (onClickListener != null) {
            onClickListener.onClick(null);
          }
        }
      }
);
    }
  }
  return ll;
}
