{
  super.onCreate(savedInstanceState);
  SampleApplication app=getSampleApplication();
  gestureDetector=new GestureDetector(this,new MapViewOnGestureListener());
  multiTouchSupport=new MultiTouchSupport(this,new MapViewMultiTouchZoomListener());
  setContentView(R.layout.activity_main);
  mapView=(AtlasMapRendererView)findViewById(R.id.mapRendererView);
  textZoom=(TextView)findViewById(R.id.text_zoom);
  azimuthNorthButton=(ImageButton)findViewById(R.id.map_azimuth_north_button);
  azimuthNorthButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      setAzimuth(0f);
    }
  }
);
  findViewById(R.id.map_zoom_in_button).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      setZoom(zoom + 1f);
    }
  }
);
  findViewById(R.id.map_zoom_out_button).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      setZoom(zoom - 1f);
    }
  }
);
  fileLogSink=QIODeviceLogSink.createFileLogSink(app.getAbsoluteAppPath() + "/osmandcore.log");
  Logger.get().addLogSink(fileLogSink);
  DisplayMetrics displayMetrics=new DisplayMetrics();
  getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
  displayDensityFactor=displayMetrics.densityDpi / 160.0f;
  referenceTileSize=(int)(256 * displayDensityFactor);
  rasterTileSize=Integer.highestOneBit(referenceTileSize - 1) * 2;
  Log.i(TAG,"displayDensityFactor = " + displayDensityFactor);
  Log.i(TAG,"referenceTileSize = " + referenceTileSize);
  Log.i(TAG,"rasterTileSize = " + rasterTileSize);
  Log.i(TAG,"Going to resolve default embedded style...");
  mapStylesCollection=new MapStylesCollection();
  mapStyle=mapStylesCollection.getResolvedStyleByName("default");
  if (mapStyle == null) {
    Log.e(TAG,"Failed to resolve style 'default'");
    System.exit(0);
  }
  Log.i(TAG,"Going to prepare OBFs collection");
  obfsCollection=new ObfsCollection();
  Log.i(TAG,"Will load OBFs from " + app.getAbsoluteAppPath());
  obfsCollection.addDirectory(app.getAbsoluteAppPath(),false);
  Log.i(TAG,"Going to prepare all resources for renderer");
  mapPresentationEnvironment=new MapPresentationEnvironment(mapStyle,displayDensityFactor,1.0f,1.0f,MapUtils.LANGUAGE);
  mapPrimitiviser=new MapPrimitiviser(mapPresentationEnvironment);
  obfMapObjectsProvider=new ObfMapObjectsProvider(obfsCollection);
  mapPrimitivesProvider=new MapPrimitivesProvider(obfMapObjectsProvider,mapPrimitiviser,rasterTileSize);
  mapObjectsSymbolsProvider=new MapObjectsSymbolsProvider(mapPrimitivesProvider,rasterTileSize);
  mapView.setReferenceTileSizeOnScreenInPixels(referenceTileSize);
  mapView.addSymbolsProvider(mapObjectsSymbolsProvider);
  restoreMapState();
  mapLayerProvider0=new MapRasterLayerProvider_Software(mapPrimitivesProvider);
  mapView.setMapLayerProvider(0,mapLayerProvider0);
  app.getIconsCache().setDisplayDensityFactor(displayDensityFactor);
  searchAPI=new SearchAPI(obfsCollection,MapUtils.LANGUAGE);
  final EditText searchEditText=(EditText)findViewById(R.id.searchEditText);
  searchEditText.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      runSearch(getScreenCenter31(),getScreenBounds31(),s.toString());
    }
  }
);
  searchEditText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (hasFocus && adapter.getCount() > 0 && isSearchListHidden()) {
        showSearchList();
        LatLon latLon=Utilities.convert31ToLatLon(target31);
        adapter.updateDistance(latLon.getLatitude(),latLon.getLongitude());
        adapter.notifyDataSetChanged();
      }
    }
  }
);
  ImageButton clearButton=(ImageButton)findViewById(R.id.clearButton);
  clearButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      searchEditText.setText("");
      adapter.clear();
      adapter.notifyDataSetChanged();
      hideSearchList();
    }
  }
);
  searchListView=(ListView)findViewById(android.R.id.list);
  adapter=new SearchListAdapter(this);
  searchListView.setAdapter(adapter);
  searchListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      hideSearchList();
      mapView.requestFocus();
      SearchListItem item=adapter.getItem(position);
      if (item instanceof SearchListPositionItem) {
        SearchListPositionItem positionItem=(SearchListPositionItem)item;
        PointI target=Utilities.convertLatLonTo31(new LatLon(positionItem.getLatitude(),positionItem.getLongitude()));
        setTarget(target);
        setZoom(17f);
      }
    }
  }
);
}
