{
  getMyApplication().applyTheme(this);
  super.onCreate(savedInstanceState);
  updateDownloads();
  setContentView(R.layout.download);
  singleTab=getIntent() != null && getIntent().getBooleanExtra(SINGLE_TAB,false);
  int currentTab=0;
  String tab=getIntent() == null || getIntent().getExtras() == null ? null : getIntent().getExtras().getString(TAB_TO_OPEN);
  if (tab != null) {
    if (tab.equals(DOWNLOAD_TAB)) {
      currentTab=1;
    }
 else     if (tab.equals(UPDATES_TAB)) {
      currentTab=2;
    }
  }
  ViewPager viewPager=(ViewPager)findViewById(R.id.pager);
  PagerSlidingTabStrip mSlidingTabLayout=(PagerSlidingTabStrip)findViewById(R.id.sliding_tabs);
  mTabs.add(new TabActivity.TabItem(R.string.download_tab_local,getString(R.string.download_tab_local),LocalIndexesFragment.class));
  mTabs.add(new TabActivity.TabItem(R.string.download_tab_downloads,getString(R.string.download_tab_downloads),DownloadIndexFragment.class));
  mTabs.add(new TabActivity.TabItem(R.string.download_tab_updates,getString(R.string.download_tab_updates),UpdatesIndexFragment.class));
  mTabs.add(new TabActivity.TabItem(R.string.download_tab_local,getString(R.string.download_tab_local),WorldItemsFragment.class));
  viewPager.setAdapter(new TabActivity.OsmandFragmentPagerAdapter(getSupportFragmentManager(),mTabs));
  mSlidingTabLayout.setViewPager(viewPager);
  viewPager.setCurrentItem(currentTab);
  settings=((OsmandApplication)getApplication()).getSettings();
  indeterminateProgressBar=(ProgressBar)findViewById(R.id.IndeterminateProgressBar);
  determinateProgressBar=(ProgressBar)findViewById(R.id.memory_progress);
  progressView=findViewById(R.id.ProgressView);
  progressMessage=(TextView)findViewById(R.id.ProgressMessage);
  progressPercent=(TextView)findViewById(R.id.ProgressPercent);
  cancel=(ImageView)findViewById(R.id.Cancel);
  cancel.setImageDrawable(getMyApplication().getIconsCache().getContentIcon(R.drawable.ic_action_remove_dark));
  cancel.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      makeSureUserCancelDownload();
    }
  }
);
  findViewById(R.id.downloadButton).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      downloadFilesCheckFreeVersion();
    }
  }
);
  findViewById(R.id.wikiButton).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      downloadWikiFiles();
    }
  }
);
  findViewById(R.id.CancelAll).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      getEntriesToDownload().clear();
      updateDownloadButton();
      for (      WeakReference<Fragment> ref : fragSet) {
        Fragment f=ref.get();
        if (f instanceof OsmAndListFragment) {
          if (f.isAdded() && ((OsmAndListFragment)f).getListAdapter() instanceof ArrayAdapter) {
            ((ArrayAdapter)((OsmAndListFragment)f).getListAdapter()).notifyDataSetChanged();
          }
        }
 else         if (f.isAdded() && f instanceof OsmandExpandableListFragment && ((OsmandExpandableListFragment)f).getAdapter() instanceof BaseExpandableListAdapter) {
          ((BaseExpandableListAdapter)((OsmandExpandableListFragment)f).getAdapter()).notifyDataSetChanged();
        }
      }
    }
  }
);
  downloadTypes=createDownloadTypes();
  final Intent intent=getIntent();
  if (intent != null && intent.getExtras() != null) {
    final String filter=intent.getExtras().getString(FILTER_KEY);
    if (filter != null) {
      initialFilter=filter;
    }
    final String filterCat=intent.getExtras().getString(FILTER_CAT);
    if (filterCat != null) {
      DownloadActivityType type=DownloadActivityType.getIndexType(filterCat.toLowerCase());
      if (type != null) {
        downloadTypes.remove(type);
        downloadTypes.add(0,type);
      }
    }
  }
  changeType(downloadTypes.get(0));
}
