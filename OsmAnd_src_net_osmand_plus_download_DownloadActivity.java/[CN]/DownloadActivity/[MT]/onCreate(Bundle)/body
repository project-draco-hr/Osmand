{
  getMyApplication().applyTheme(this);
  super.onCreate(savedInstanceState);
  updateDownloads();
  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  setProgressBarIndeterminateVisibility(false);
  setContentView(R.layout.tab_content);
  singleTab=getIntent() != null && getIntent().getBooleanExtra(SINGLE_TAB,false);
  int currentTab=0;
  String tab=getIntent() == null || getIntent().getExtras() == null ? null : getIntent().getExtras().getString(TAB_TO_OPEN);
  if (tab != null) {
    if (tab.equals(DOWNLOAD_TAB)) {
      currentTab=1;
    }
 else     if (tab.equals(UPDATES_TAB)) {
      currentTab=2;
    }
  }
  if (singleTab) {
    ViewPager viewPager=(ViewPager)findViewById(R.id.pager);
    viewPager.setVisibility(View.GONE);
    Fragment f=currentTab == 0 ? new LocalIndexesFragment() : (currentTab == 1 ? new DownloadIndexFragment() : new UpdatesIndexFragment());
    String tag=currentTab == 0 ? LOCAL_TAB : (currentTab == 1 ? DOWNLOAD_TAB : UPDATES_TAB);
    findViewById(R.id.layout).setVisibility(View.VISIBLE);
    android.support.v4.app.FragmentManager manager=getSupportFragmentManager();
    if (manager.findFragmentByTag(tag) == null) {
      getSupportFragmentManager().beginTransaction().add(R.id.layout,f,tag).commit();
    }
  }
 else {
    tabHost=(TabHost)findViewById(android.R.id.tabhost);
    tabHost.setup();
    ViewPager viewPager=(ViewPager)findViewById(R.id.pager);
    mTabsAdapter=new FavouritesActivity.TabsAdapter(this,tabHost,viewPager,settings,false);
    mTabsAdapter.addTab(tabHost.newTabSpec("LOCAL_INDEX").setIndicator(getString(R.string.download_tab_local)),LocalIndexesFragment.class,null);
    mTabsAdapter.addTab(tabHost.newTabSpec("DOWNLOADS").setIndicator(getString(R.string.download_tab_downloads)),DownloadIndexFragment.class,null);
    mTabsAdapter.addTab(tabHost.newTabSpec("UPDATES").setIndicator(getString(R.string.download_tab_updates)),UpdatesIndexFragment.class,null);
    tabHost.setCurrentTab(currentTab);
  }
  settings=((OsmandApplication)getApplication()).getSettings();
  indeterminateProgressBar=(ProgressBar)findViewById(R.id.IndeterminateProgressBar);
  determinateProgressBar=(ProgressBar)findViewById(R.id.DeterminateProgressBar);
  progressView=findViewById(R.id.ProgressView);
  progressMessage=(TextView)findViewById(R.id.ProgressMessage);
  progressPercent=(TextView)findViewById(R.id.ProgressPercent);
  cancel=(ImageView)findViewById(R.id.Cancel);
  int d=settings.isLightContent() ? R.drawable.a_1_navigation_cancel_small_light : R.drawable.a_1_navigation_cancel_small_dark;
  cancel.setImageDrawable(getResources().getDrawable(d));
  cancel.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      makeSureUserCancelDownload();
    }
  }
);
  findViewById(R.id.DownloadButton).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      downloadFilesCheckFreeVersion();
    }
  }
);
  downloadTypes=createDownloadTypes();
  final Intent intent=getIntent();
  if (intent != null && intent.getExtras() != null) {
    final String filter=intent.getExtras().getString(FILTER_KEY);
    if (filter != null) {
      initialFilter=filter;
    }
    final String filterCat=intent.getExtras().getString(FILTER_CAT);
    if (filterCat != null) {
      DownloadActivityType type=DownloadActivityType.getIndexType(filterCat.toLowerCase());
      if (type != null) {
        downloadTypes.remove(type);
        downloadTypes.add(0,type);
      }
    }
  }
  changeType(downloadTypes.get(0));
  getSupportActionBar().setHomeButtonEnabled(true);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
}
