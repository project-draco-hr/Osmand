{
  getMyApplication().applyTheme(this);
  super.onCreate(savedInstanceState);
  updateDownloads();
  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  setProgressBarIndeterminateVisibility(false);
  setContentView(R.layout.tab_content);
  settings=((OsmandApplication)getApplication()).getSettings();
  tabHost=(TabHost)findViewById(android.R.id.tabhost);
  tabHost.setup();
  ViewPager viewPager=(ViewPager)findViewById(R.id.pager);
  mTabsAdapter=new FavouritesActivity.TabsAdapter(this,tabHost,viewPager,settings,false);
  if (getMyApplication().getAppCustomization().onlyTourDownload()) {
    mTabsAdapter.addTab(tabHost.newTabSpec("DOWNLOADS").setIndicator("Downloads"),DownloadIndexFragment.class,null);
  }
 else {
    mTabsAdapter.addTab(tabHost.newTabSpec("LOCAL_INDEX").setIndicator("Local"),LocalIndexesFragment.class,null);
    mTabsAdapter.addTab(tabHost.newTabSpec("DOWNLOADS").setIndicator("Downloads"),DownloadIndexFragment.class,null);
    mTabsAdapter.addTab(tabHost.newTabSpec("UPDATES").setIndicator("Updates"),UpdatesIndexFragment.class,null);
  }
  tabHost.setCurrentTab(0);
  settings=((OsmandApplication)getApplication()).getSettings();
  indeterminateProgressBar=(ProgressBar)findViewById(R.id.IndeterminateProgressBar);
  determinateProgressBar=(ProgressBar)findViewById(R.id.DeterminateProgressBar);
  progressView=findViewById(R.id.ProgressView);
  progressMessage=(TextView)findViewById(R.id.ProgressMessage);
  progressPercent=(TextView)findViewById(R.id.ProgressPercent);
  cancel=(ImageView)findViewById(R.id.Cancel);
  int d=settings.isLightContent() ? R.drawable.a_1_navigation_cancel_small_light : R.drawable.a_1_navigation_cancel_small_dark;
  cancel.setImageDrawable(getResources().getDrawable(d));
  cancel.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      makeSureUserCancelDownload();
    }
  }
);
  findViewById(R.id.DownloadButton).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      downloadFilesCheckFreeVersion();
    }
  }
);
  final List<DownloadActivityType> downloadTypes=getDownloadTypes();
  final Intent intent=getIntent();
  setType(downloadTypes.get(0));
  if (intent != null && intent.getExtras() != null) {
    final String filter=intent.getExtras().getString(FILTER_KEY);
    if (filter != null) {
      initialFilter=filter;
    }
    final String filterCat=intent.getExtras().getString(FILTER_CAT);
    if (filterCat != null) {
      DownloadActivityType type=DownloadActivityType.getIndexType(filterCat.toLowerCase());
      if (type != null) {
        setType(type);
        downloadTypes.remove(type);
        downloadTypes.add(0,type);
      }
    }
    String tab=intent.getExtras().getString(TAB_TO_OPEN);
    if (tab != null) {
      if (tab.equals(DOWNLOAD_TAB)) {
        tabHost.setCurrentTab(1);
      }
 else       if (tab.equals(UPDATES_TAB)) {
        tabHost.setCurrentTab(2);
      }
    }
  }
  getSupportActionBar().setHomeButtonEnabled(true);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
}
