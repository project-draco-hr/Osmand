{
  compilerOptions=Maps.newHashMap();
  compilerOptions.put(org.eclipse.jdt.core.JavaCore.COMPILER_SOURCE,"1.6");
  compilerOptions.put(org.eclipse.jdt.core.JavaCore.COMPILER_CODEGEN_TARGET_PLATFORM,"1.6");
  compilerOptions.put(org.eclipse.jdt.core.JavaCore.COMPILER_COMPLIANCE,"1.6");
  logger.setLevel(Level.INFO);
  sourcePathEntries=Lists.newArrayList();
  int nArg=0;
  String[] noFiles=new String[0];
  while (nArg < args.length) {
    String arg=args[nArg];
    if (arg.equals("-classpath")) {
      if (++nArg == args.length) {
        return noFiles;
      }
      classPathEntries=getPathArgument(args[nArg]);
    }
 else     if (arg.equals("-sourcepath")) {
      if (++nArg == args.length) {
        usage();
      }
      sourcePathEntries.addAll(getPathArgument(args[nArg]));
    }
 else     if (arg.equals("-pluginpath")) {
      if (++nArg == args.length) {
        usage();
      }
      pluginPathEntries=getPathArgument(args[nArg]);
    }
 else     if (arg.equals("-pluginoptions")) {
      if (++nArg == args.length) {
        usage();
      }
      pluginOptionString=args[nArg];
    }
 else     if (arg.equals("-d")) {
      if (++nArg == args.length) {
        usage();
      }
      outputDirectory=new File(args[nArg]);
    }
 else     if (arg.equals("--mapping")) {
      if (++nArg == args.length) {
        usage();
      }
      mappingFiles.add(args[nArg]);
    }
 else     if (arg.equals("--dead-code-report")) {
      if (++nArg == args.length) {
        usage();
      }
      proGuardUsageFile=new File(args[nArg]);
    }
 else     if (arg.equals("--prefix")) {
      if (++nArg == args.length) {
        usage();
      }
      addPrefixOption(args[nArg]);
    }
 else     if (arg.equals("--prefixes")) {
      if (++nArg == args.length) {
        usage();
      }
      addPrefixesFile(args[nArg]);
    }
 else     if (arg.equals("-x")) {
      if (++nArg == args.length) {
        usage();
      }
      String s=args[nArg];
      if (s.equals("objective-c")) {
        language=Language.OBJECTIVE_C;
      }
 else       if (s.equals("objective-c++")) {
        language=Language.OBJECTIVE_CPP;
      }
 else {
        usage();
      }
    }
 else     if (arg.equals("--print-converted-sources")) {
      printConvertedSources=true;
    }
 else     if (arg.equals("--ignore-missing-imports")) {
      ignoreMissingImports=true;
    }
 else     if (arg.equals("-use-reference-counting")) {
      checkMemoryManagementOption(MemoryManagementOption.REFERENCE_COUNTING);
    }
 else     if (arg.equals("--inline-field-access")) {
      inlineFieldAccess=true;
    }
 else     if (arg.equals("--no-inline-field-access")) {
      inlineFieldAccess=false;
    }
 else     if (arg.equals("--generate-test-main")) {
      generateTestMain=true;
    }
 else     if (arg.equals("--no-generate-test-main")) {
      generateTestMain=false;
    }
 else     if (arg.equals("-use-gc")) {
      checkMemoryManagementOption(MemoryManagementOption.GC);
    }
 else     if (arg.equals("-use-arc")) {
      checkMemoryManagementOption(MemoryManagementOption.ARC);
    }
 else     if (arg.equals("-g")) {
      emitLineDirectives=true;
    }
 else     if (arg.equals("-Werror")) {
      warningsAsErrors=true;
    }
 else     if (arg.equals("-q") || arg.equals("--quiet")) {
      logger.setLevel(Level.WARNING);
    }
 else     if (arg.equals("-t") || arg.equals("--timing-info")) {
      logger.setLevel(Level.FINE);
    }
 else     if (arg.equals("-v") || arg.equals("--verbose")) {
      logger.setLevel(Level.FINEST);
    }
 else     if (arg.startsWith(XBOOTCLASSPATH)) {
      bootclasspath=arg.substring(XBOOTCLASSPATH.length());
    }
 else     if (arg.startsWith("-h") || arg.equals("--help")) {
      help();
    }
 else     if (arg.startsWith("-")) {
      usage();
    }
 else {
      break;
    }
    ++nArg;
  }
  if (memoryManagementOption == null) {
    memoryManagementOption=MemoryManagementOption.REFERENCE_COUNTING;
  }
  int nFiles=args.length - nArg;
  String[] files=new String[nFiles];
  for (int i=0; i < nFiles; i++) {
    String path=args[i + nArg];
    if (path.endsWith(".jar")) {
      appendSourcePath(path);
    }
    files[i]=path;
  }
  return files;
}
