{
  if (e instanceof Relation) {
    throw new IllegalArgumentException();
  }
  boolean init=false;
  int minX=Integer.MAX_VALUE;
  int maxX=0;
  int minY=Integer.MAX_VALUE;
  int maxY=0;
  Collection<Node> nodes;
  if (e instanceof Way) {
    if (writeAsPoint) {
      LatLon center=MapUtils.getCenter(((Way)e));
      nodes=Collections.singleton(new Node(center.getLatitude(),center.getLongitude(),-1));
    }
 else {
      nodes=((Way)e).getNodes();
    }
  }
 else {
    nodes=Collections.singleton((Node)e);
  }
  if (inversePath) {
    nodes=new ArrayList<Node>(nodes);
    Collections.reverse((List<?>)nodes);
  }
  ByteArrayOutputStream bnodes=new ByteArrayOutputStream();
  ByteArrayOutputStream btypes=new ByteArrayOutputStream();
  ByteArrayOutputStream brestrictions=new ByteArrayOutputStream();
  try {
    Algoritms.writeSmallInt(btypes,type);
    for (    Integer i : typeUse) {
      Algoritms.writeSmallInt(btypes,i);
    }
    for (    Long i : restrictions) {
      Algoritms.writeLongInt(brestrictions,i);
    }
    for (    Node n : nodes) {
      if (n != null) {
        int y=MapUtils.get31TileNumberY(n.getLatitude());
        int x=MapUtils.get31TileNumberX(n.getLongitude());
        minX=Math.min(minX,x);
        maxX=Math.max(maxX,x);
        minY=Math.min(minY,y);
        maxY=Math.max(maxY,y);
        init=true;
        Algoritms.writeInt(bnodes,x);
        Algoritms.writeInt(bnodes,y);
      }
    }
  }
 catch (  IOException es) {
    throw new IllegalStateException(es);
  }
  if (init) {
    mapBinaryStat.setLong(1,id);
    mapBinaryStat.setString(2,name);
    mapBinaryStat.setBytes(3,btypes.toByteArray());
    mapBinaryStat.setBytes(4,brestrictions.toByteArray());
    mapBinaryStat.setBytes(5,bnodes.toByteArray());
    mapBinaryStat.setInt(6,highwayAttributes);
    addBatch(mapBinaryStat,commit);
    try {
      mapTree.insert(new LeafElement(new Rect(minX,minY,maxX,maxY),id));
    }
 catch (    RTreeInsertException e1) {
      throw new IllegalArgumentException(e1);
    }
catch (    IllegalValueException e1) {
      throw new IllegalArgumentException(e1);
    }
  }
}
