{
  Element[] e=parent.getAllElements();
  MapDataBlock.Builder dataBlock=null;
  BinaryFileReference ref=bounds.get(parent.getNodeIndex());
  long baseId=0;
  for (int i=0; i < parent.getTotalElements(); i++) {
    Rect re=e[i].getRect();
    if (e[i].getElementType() == rtree.Node.LEAF_NODE) {
      long id=((LeafElement)e[i]).getPtr();
      selectData.setLong(1,id);
      ResultSet rs=selectData.executeQuery();
      if (rs.next()) {
        long cid=convertGeneratedIdToObfWrite(id);
        if (dataBlock == null) {
          baseId=cid;
          dataBlock=writer.createWriteMapDataBlock(baseId);
          tempStringTable.clear();
        }
        tempNames.clear();
        decodeNames(rs.getString(6),tempNames);
        writer.writeMapData(cid - baseId,re.getMinX(),re.getMinY(),rs.getBoolean(1),rs.getBytes(2),rs.getBytes(3),rs.getBytes(4),rs.getBytes(5),tempNames,tempStringTable,dataBlock);
      }
 else {
        logMapDataWarn.error("Something goes wrong with id = " + id);
      }
    }
  }
  if (dataBlock != null) {
    writer.writeMapDataBlock(dataBlock,tempStringTable,ref);
  }
  for (int i=0; i < parent.getTotalElements(); i++) {
    if (e[i].getElementType() != rtree.Node.LEAF_NODE) {
      long ptr=((NonLeafElement)e[i]).getPtr();
      rtree.Node ns=r.getReadNode(ptr);
      writeBinaryMapBlock(ns,r,writer,selectData,bounds,tempStringTable,tempNames);
      writer.endWriteMapTreeElement();
    }
  }
}
