{
  Element[] e=parent.getAllElements();
  MapDataBlock.Builder dataBlock=null;
  BinaryFileReference ref=bounds.get(parent.getNodeIndex());
  long baseId=0;
  for (int i=0; i < parent.getTotalElements(); i++) {
    if (e[i].getElementType() == rtree.Node.LEAF_NODE) {
      long id=((LeafElement)e[i]).getPtr();
      selectData.setLong(1,id);
      ResultSet rs=selectData.executeQuery();
      if (rs.next()) {
        long cid=convertGeneratedIdToObfWrite(id);
        if (dataBlock == null) {
          baseId=cid;
          dataBlock=writer.createWriteMapDataBlock(baseId);
          tempStringTable.clear();
        }
        tempNames.clear();
        decodeNames(rs.getString(6),tempNames);
        byte[] types=rs.getBytes(4);
        int[] typeUse=new int[types.length / 2];
        for (int j=0; j < types.length; j+=2) {
          int ids=Algoritms.parseSmallIntFromBytes(types,j);
          typeUse[j / 2]=renderingTypes.getTypeByInternalId(ids).getTargetId();
        }
        byte[] addTypes=rs.getBytes(5);
        int[] addtypeUse=null;
        if (addTypes != null) {
          addtypeUse=new int[addTypes.length / 2];
          for (int j=0; j < addTypes.length; j+=2) {
            int ids=Algoritms.parseSmallIntFromBytes(addTypes,j);
            addtypeUse[j / 2]=renderingTypes.getTypeByInternalId(ids).getTargetId();
          }
        }
        MapData mapData=writer.writeMapData(cid - baseId,parentBounds.getMinX(),parentBounds.getMinY(),rs.getBoolean(1),rs.getBytes(2),rs.getBytes(3),typeUse,addtypeUse,tempNames,tempStringTable,dataBlock,level.getMaxZoom() > 15);
        if (mapData != null) {
          dataBlock.addDataObjects(mapData);
        }
      }
 else {
        logMapDataWarn.error("Something goes wrong with id = " + id);
      }
    }
  }
  if (dataBlock != null) {
    writer.writeMapDataBlock(dataBlock,tempStringTable,ref);
  }
  for (int i=0; i < parent.getTotalElements(); i++) {
    if (e[i].getElementType() != rtree.Node.LEAF_NODE) {
      long ptr=((NonLeafElement)e[i]).getPtr();
      rtree.Node ns=r.getReadNode(ptr);
      writeBinaryMapBlock(ns,e[i].getRect(),r,writer,selectData,bounds,tempStringTable,tempNames,level);
    }
  }
}
