{
  TIntArrayList loffsets=new TIntArrayList();
  Collator instance=Collator.getInstance();
  instance.setStrength(Collator.PRIMARY);
  CollatorStringMatcher matcher=new CollatorStringMatcher(instance,req.nameQuery,StringMatcherMode.CHECK_STARTS_FROM_SPACE);
  long time=System.currentTimeMillis();
  int indexOffset=0;
  while (true) {
    if (req.isCancelled()) {
      return;
    }
    int t=codedIS.readTag();
    int tag=WireFormat.getTagFieldNumber(t);
switch (tag) {
case 0:
      return;
case OsmAndAddressNameIndexData.TABLE_FIELD_NUMBER:
    int length=readInt();
  indexOffset=codedIS.getTotalBytesRead();
int oldLimit=codedIS.pushLimit(length);
map.readIndexedStringTable(instance,req.nameQuery,"",loffsets,0);
codedIS.popLimit(oldLimit);
break;
case OsmAndAddressNameIndexData.ATOM_FIELD_NUMBER:
loffsets.sort();
TIntArrayList[] refs=new TIntArrayList[5];
for (int i=0; i < refs.length; i++) {
refs[i]=new TIntArrayList();
}
LOG.info("Searched address structure in " + (System.currentTimeMillis() - time) + "ms. Found "+ loffsets.size()+ " subtress");
for (int j=0; j < loffsets.size(); j++) {
int fp=indexOffset + loffsets.get(j);
codedIS.seek(fp);
int len=codedIS.readRawVarint32();
int oldLim=codedIS.pushLimit(len);
int stag=0;
do {
int st=codedIS.readTag();
stag=WireFormat.getTagFieldNumber(st);
if (stag == AddressNameIndexData.ATOM_FIELD_NUMBER) {
int slen=codedIS.readRawVarint32();
int soldLim=codedIS.pushLimit(slen);
readAddressNameData(req,refs,fp);
codedIS.popLimit(soldLim);
}
 else if (stag != 0) {
skipUnknownField(st);
}
}
 while (stag != 0);
codedIS.popLimit(oldLim);
if (req.isCancelled()) {
return;
}
}
if (typeFilter == null) {
typeFilter=new int[]{CITY_TOWN_TYPE,POSTCODES_TYPE,VILLAGES_TYPE,STREET_TYPE};
}
for (int i=0; i < typeFilter.length && !req.isCancelled(); i++) {
TIntArrayList list=refs[typeFilter[i]];
if (typeFilter[i] == STREET_TYPE) {
for (int j=0; j < list.size() && !req.isCancelled(); j+=2) {
City obj=null;
{
codedIS.seek(list.get(j + 1));
int len=codedIS.readRawVarint32();
int old=codedIS.pushLimit(len);
obj=readCityHeader(null,list.get(j + 1),false);
codedIS.popLimit(old);
}
if (obj != null) {
System.out.println("STREET " + list.get(j));
codedIS.seek(list.get(j));
int len=codedIS.readRawVarint32();
int old=codedIS.pushLimit(len);
LatLon l=obj.getLocation();
Street s=new Street(obj);
readStreet(s,null,false,MapUtils.get31TileNumberX(l.getLatitude()) >> 7,MapUtils.get31TileNumberY(l.getLongitude()) >> 7,obj.isPostcode() ? obj.getName() : null);
if (matcher.matches(s.getName())) {
req.publish(s);
}
codedIS.popLimit(old);
}
}
}
 else {
list.sort();
for (int j=0; j < list.size() && !req.isCancelled(); j++) {
codedIS.seek(list.get(j));
int len=codedIS.readRawVarint32();
int old=codedIS.pushLimit(len);
City obj=readCityHeader(matcher,list.get(j),false);
if (obj != null) {
req.publish(obj);
}
codedIS.popLimit(old);
}
}
}
LOG.info("Whole address search by name is done in " + (System.currentTimeMillis() - time) + "ms. Found "+ req.getSearchResults().size());
return;
default :
skipUnknownField(t);
break;
}
}
}
