{
  int x=tree.getNode().x;
  int y=tree.getNode().y;
  int zoom=tree.getNode().zoom;
  boolean end=zoom == ZOOM_TO_SAVE_END;
  long fp=writer.startWritePoiBox(zoom,x,y,end);
  if (zoom >= ZOOM_TO_WRITE_CATEGORIES_START && zoom <= ZOOM_TO_WRITE_CATEGORIES_END) {
    TIntArrayList types=new TIntArrayList();
    for (    Map.Entry<String,Map<String,Integer>> cats : tree.getNode().categories.entrySet()) {
      for (      String subcat : cats.getValue().keySet()) {
        String cat=cats.getKey();
        buildTypeIds(cat,subcat,categories,catIndexes,types);
      }
    }
    writer.writePOICategories(types);
  }
  if (zoom >= ZOOM_TO_WRITE_NAME_START && zoom <= ZOOM_TO_WRITE_NAME_END) {
    Set<String> names=tree.getNode().startsName;
    if (names.size() > 0) {
      if (zoom == ZOOM_TO_WRITE_NAME_START || parentNames.size() - names.size() > names.size()) {
        System.out.println("I" + names.size() + " "+ zoom);
        writer.writePoiIncludedStrings(names);
      }
 else {
        System.out.println("E" + (parentNames.size() - names.size()) + " "+ zoom);
        writer.writePoiExcludedStrings(parentNames,names);
      }
    }
  }
  if (!end) {
    for (    Tree<PoiBox> subTree : tree.getSubtrees()) {
      writePoiBoxes(writer,subTree,fpToWriteSeeks,categories,catIndexes,tree.getNode().startsName);
    }
  }
 else {
    fpToWriteSeeks.put(tree.getNode(),fp);
  }
  writer.endWritePoiBox();
}
