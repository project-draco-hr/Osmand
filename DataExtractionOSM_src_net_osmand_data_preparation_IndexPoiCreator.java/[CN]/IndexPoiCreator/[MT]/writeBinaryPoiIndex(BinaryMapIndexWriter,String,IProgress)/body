{
  if (poiPreparedStatement != null) {
    closePreparedStatements(poiPreparedStatement);
  }
  poiConnection.commit();
  Collator collator=Collator.getInstance();
  collator.setStrength(Collator.PRIMARY);
  ResultSet rs=poiConnection.createStatement().executeQuery("SELECT x,y,name,name_en,type,subtype from poi");
  int zoomToStart=ZOOM_TO_SAVE_START;
  Tree<PoiBox> rootZoomsTree=new Tree<PoiBox>();
  rootZoomsTree.setNode(new PoiBox());
  int minX=Integer.MAX_VALUE;
  int maxX=0;
  int minY=Integer.MAX_VALUE;
  int maxY=0;
  int count=0;
  while (rs.next()) {
    int x=rs.getInt(1);
    int y=rs.getInt(2);
    minX=Math.min(x,minX);
    maxX=Math.max(x,maxX);
    minY=Math.min(y,minY);
    maxY=Math.max(y,maxY);
    if (count++ > 10000) {
      count=0;
      log.info("proccess 10000 entities");
    }
    String name=rs.getString(3);
    String nameEn=rs.getString(4);
    String type=rs.getString(5);
    String subtype=rs.getString(6);
    Tree<PoiBox> prevTree=rootZoomsTree;
    rootZoomsTree.getNode().addCategory(type,subtype);
    rootZoomsTree.getNode().addNamePrefix(name,nameEn);
    for (int i=zoomToStart; i <= ZOOM_TO_SAVE_END; i++) {
      int xs=x >> (31 - i);
      int ys=y >> (31 - i);
      Tree<PoiBox> subtree=null;
      for (      Tree<PoiBox> sub : prevTree.getSubtrees()) {
        if (sub.getNode().x == xs && sub.getNode().y == ys && sub.getNode().zoom == i) {
          subtree=sub;
          break;
        }
      }
      if (subtree == null) {
        subtree=new Tree<PoiBox>();
        PoiBox poiBox=new PoiBox();
        subtree.setNode(poiBox);
        poiBox.x=xs;
        poiBox.y=ys;
        poiBox.zoom=i;
        prevTree.addSubTree(subtree);
      }
      subtree.getNode().addCategory(type,subtype);
      subtree.getNode().addNamePrefix(name,nameEn);
      prevTree=subtree;
    }
  }
  log.info("Poi processing finishied");
  int right31=maxX;
  int left31=minX;
  int bottom31=maxY;
  int top31=minY;
  long startFpPoiIndex=writer.startWritePOIIndex(regionName,left31,right31,bottom31,top31);
  Map<String,Map<String,Integer>> categories=rootZoomsTree.node.categories;
  Map<String,Integer> catIndexes=writer.writePOICategoriesTable(categories);
  log.info("Poi box processing finishied");
  int level=0;
  for (; level < (ZOOM_TO_SAVE_END - zoomToStart); level++) {
    int subtrees=rootZoomsTree.getSubTreesOnLevel(level);
    if (subtrees > 8) {
      level--;
      break;
    }
  }
  if (level > 0) {
    rootZoomsTree.extractChildrenFromLevel(level);
    zoomToStart=zoomToStart + level;
  }
  Map<PoiBox,Long> fpToWriteSeeks=new LinkedHashMap<PoiBox,Long>();
  for (  Tree<PoiBox> subs : rootZoomsTree.getSubtrees()) {
    writePoiBoxes(writer,subs,fpToWriteSeeks,categories,catIndexes);
  }
  PreparedStatement prepareStatement=poiConnection.prepareStatement("SELECT id, x, y, name_en, name, type, subtype, opening_hours, site, phone from poi " + "where x >= ? AND x < ? AND y >= ? AND y < ?");
  TIntArrayList types=new TIntArrayList();
  for (  Map.Entry<PoiBox,Long> entry : fpToWriteSeeks.entrySet()) {
    int z=entry.getKey().zoom;
    int x=entry.getKey().x;
    int y=entry.getKey().y;
    writer.startWritePoiData(z,x,y,startFpPoiIndex,entry.getValue());
    prepareStatement.setInt(1,x << (31 - z));
    prepareStatement.setInt(2,(x + 1) << (31 - z));
    prepareStatement.setInt(3,y << (31 - z));
    prepareStatement.setInt(4,(y + 1) << (31 - z));
    rs=prepareStatement.executeQuery();
    while (rs.next()) {
      long id=rs.getLong(1);
      int x31=rs.getInt(2);
      int y31=rs.getInt(3);
      int x24shift=(x31 >> 7) - (x << (24 - z));
      int y24shift=(y31 >> 7) - (y << (24 - z));
      String nameEn=rs.getString(4);
      String name=rs.getString(5);
      String type=rs.getString(6);
      String subtype=rs.getString(7);
      types.clear();
      buildTypeIds(type,subtype,categories,catIndexes,types);
      String openingHours=rs.getString(8);
      String site=rs.getString(9);
      String phone=rs.getString(10);
      writer.writePoiDataAtom(id,x24shift,y24shift,nameEn,name,types,openingHours,site,phone);
    }
    writer.endWritePoiData();
    rs.close();
  }
  prepareStatement.close();
  writer.endWritePOIIndex();
}
