{
  if (poiPreparedStatement != null) {
    closePreparedStatements(poiPreparedStatement);
  }
  poiConnection.commit();
  ResultSet rs=poiConnection.createStatement().executeQuery("SELECT DISTINCT type, subtype FROM poi");
  Map<String,Map<String,Integer>> categories=new LinkedHashMap<String,Map<String,Integer>>();
  while (rs.next()) {
    String category=rs.getString(1);
    String subcategory=rs.getString(2).trim();
    if (!categories.containsKey(category)) {
      categories.put(category,new LinkedHashMap<String,Integer>());
    }
    if (subcategory.contains(";") || subcategory.contains(",")) {
      String[] split=subcategory.split(",|;");
      for (      String sub : split) {
        categories.get(category).put(sub.trim(),0);
      }
    }
 else {
      categories.get(category).put(subcategory.trim(),0);
    }
  }
  Statement stat=rs.getStatement();
  rs.close();
  stat.close();
  long startFpPoiIndex=writer.startWritePOIIndex(regionName);
  Map<String,Integer> catIndexes=writer.writePOICategoriesTable(categories);
  String selectZm=(31 - ZOOM_TO_SAVE_END) + "";
  rs=poiConnection.createStatement().executeQuery("SELECT DISTINCT x>>" + selectZm + ", y>>"+ selectZm+ " from poi");
  Tree<Long> rootZoomsTree=new Tree<Long>();
  int zoomToStart=ZOOM_TO_SAVE_START;
  while (rs.next()) {
    int x=rs.getInt(1);
    int y=rs.getInt(2);
    Tree<Long> prevTree=rootZoomsTree;
    for (int i=zoomToStart; i <= ZOOM_TO_SAVE_END; i++) {
      int shift=ZOOM_TO_SAVE_END - i;
      long l=(((long)x >> shift) << 31) | ((long)y >> shift);
      Tree<Long> subtree=prevTree.getSubtreeByNode(l);
      if (subtree == null) {
        subtree=new Tree<Long>();
        subtree.setNode(l);
        prevTree.addSubTree(subtree);
      }
      prevTree=subtree;
    }
  }
  int level=0;
  for (; level < (ZOOM_TO_SAVE_END - zoomToStart); level++) {
    int subtrees=rootZoomsTree.getSubTreesOnLevel(level);
    if (subtrees > 8) {
      level--;
      break;
    }
  }
  if (level > 0) {
    rootZoomsTree.extractChildrenFromLevel(level);
    zoomToStart=zoomToStart + level;
  }
  Map<Long,Long> fpToWriteSeeks=new LinkedHashMap<Long,Long>();
  for (  Tree<Long> subs : rootZoomsTree.getSubtrees()) {
    writePoiBoxes(writer,subs,zoomToStart,fpToWriteSeeks);
  }
  stat=rs.getStatement();
  rs.close();
  stat.close();
  PreparedStatement prepareStatement=poiConnection.prepareStatement("SELECT id, x, y, name_en, name, type, subtype, opening_hours, site, phone from poi " + "where x >= ? AND x < ? AND y >= ? AND y < ?");
  TIntArrayList types=new TIntArrayList();
  for (  Map.Entry<Long,Long> entry : fpToWriteSeeks.entrySet()) {
    long l=entry.getKey();
    int z=ZOOM_TO_SAVE_END;
    int x=(int)(l >> 31);
    int y=(int)(l & ((1 << 31) - 1));
    writer.startWritePoiData(z,x,y,startFpPoiIndex,entry.getValue());
    prepareStatement.setInt(1,x << (31 - z));
    prepareStatement.setInt(2,(x + 1) << (31 - z));
    prepareStatement.setInt(3,y << (31 - z));
    prepareStatement.setInt(4,(y + 1) << (31 - z));
    rs=prepareStatement.executeQuery();
    while (rs.next()) {
      long id=rs.getLong(1);
      int x31=rs.getInt(2);
      int y31=rs.getInt(3);
      int x24shift=(x31 >> 7) - (x << (24 - z));
      int y24shift=(y31 >> 7) - (y << (24 - z));
      String nameEn=rs.getString(4);
      String name=rs.getString(5);
      String type=rs.getString(6);
      String subtype=rs.getString(7);
      buildTypeIds(type,subtype,categories,catIndexes,types);
      String openingHours=rs.getString(8);
      String site=rs.getString(9);
      String phone=rs.getString(10);
      writer.writePoiDataAtom(id,x24shift,y24shift,nameEn,name,types,openingHours,site,phone);
    }
    writer.endWritePoiData();
    rs.close();
  }
  prepareStatement.close();
  writer.endWritePOIIndex();
}
