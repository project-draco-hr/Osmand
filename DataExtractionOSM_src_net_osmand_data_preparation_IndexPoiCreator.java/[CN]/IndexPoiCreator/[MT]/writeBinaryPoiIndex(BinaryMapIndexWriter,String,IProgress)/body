{
  if (poiPreparedStatement != null) {
    closePreparedStatements(poiPreparedStatement);
  }
  poiConnection.commit();
  Collator collator=Collator.getInstance();
  collator.setStrength(Collator.PRIMARY);
  Map<String,Set<PoiTileBox>> namesIndex=new TreeMap<String,Set<PoiTileBox>>();
  ResultSet rs;
  if (useInMemoryCreator) {
    rs=poiConnection.createStatement().executeQuery("SELECT x,y,name,name_en,type,subtype, id, opening_hours, site, phone from poi");
  }
 else {
    rs=poiConnection.createStatement().executeQuery("SELECT x,y,name,name_en,type,subtype from poi");
  }
  int zoomToStart=ZOOM_TO_SAVE_START;
  Tree<PoiTileBox> rootZoomsTree=new Tree<PoiTileBox>();
  rootZoomsTree.setNode(new PoiTileBox());
  int minX=Integer.MAX_VALUE;
  int maxX=0;
  int minY=Integer.MAX_VALUE;
  int maxY=0;
  int count=0;
  while (rs.next()) {
    int x=rs.getInt(1);
    int y=rs.getInt(2);
    minX=Math.min(x,minX);
    maxX=Math.max(x,maxX);
    minY=Math.min(y,minY);
    maxY=Math.max(y,maxY);
    if (count++ > 10000) {
      count=0;
      log.info("proccess 10000 entities");
    }
    String name=rs.getString(3);
    String nameEn=rs.getString(4);
    String type=rs.getString(5);
    String subtype=rs.getString(6);
    Tree<PoiTileBox> prevTree=rootZoomsTree;
    rootZoomsTree.getNode().addCategory(type,subtype);
    for (int i=zoomToStart; i <= ZOOM_TO_SAVE_END; i++) {
      int xs=x >> (31 - i);
      int ys=y >> (31 - i);
      Tree<PoiTileBox> subtree=null;
      for (      Tree<PoiTileBox> sub : prevTree.getSubtrees()) {
        if (sub.getNode().x == xs && sub.getNode().y == ys && sub.getNode().zoom == i) {
          subtree=sub;
          break;
        }
      }
      if (subtree == null) {
        subtree=new Tree<PoiTileBox>();
        PoiTileBox poiBox=new PoiTileBox();
        subtree.setNode(poiBox);
        poiBox.x=xs;
        poiBox.y=ys;
        poiBox.zoom=i;
        prevTree.addSubTree(subtree);
      }
      subtree.getNode().addCategory(type,subtype);
      prevTree=subtree;
    }
    addNamePrefix(name,nameEn,prevTree.getNode(),namesIndex);
    if (useInMemoryCreator) {
      if (prevTree.getNode().poiData == null) {
        prevTree.getNode().poiData=new ArrayList<PoiData>();
      }
      PoiData poiData=new PoiData();
      poiData.x=x;
      poiData.y=y;
      poiData.name=name;
      poiData.nameEn=nameEn;
      poiData.type=type;
      poiData.subtype=subtype;
      poiData.id=rs.getLong(7);
      poiData.openingHours=rs.getString(8);
      poiData.site=rs.getString(9);
      poiData.phone=rs.getString(10);
      prevTree.getNode().poiData.add(poiData);
    }
  }
  log.info("Poi processing finishied");
  int right31=maxX;
  int left31=minX;
  int bottom31=maxY;
  int top31=minY;
  long startFpPoiIndex=writer.startWritePOIIndex(regionName,left31,right31,bottom31,top31);
  Map<String,Map<String,Integer>> categories=rootZoomsTree.node.categories;
  Map<String,Integer> catIndexes=writer.writePOICategoriesTable(categories);
  Map<PoiTileBox,TLongList> fpToWriteSeeks=writer.writePoiNameIndex(namesIndex);
  log.info("Poi box processing finishied");
  int level=0;
  for (; level < (ZOOM_TO_SAVE_END - zoomToStart); level++) {
    int subtrees=rootZoomsTree.getSubTreesOnLevel(level);
    if (subtrees > 8) {
      level--;
      break;
    }
  }
  if (level > 0) {
    rootZoomsTree.extractChildrenFromLevel(level);
    zoomToStart=zoomToStart + level;
  }
  for (  Tree<PoiTileBox> subs : rootZoomsTree.getSubtrees()) {
    writePoiBoxes(writer,subs,fpToWriteSeeks,categories,catIndexes);
  }
  PreparedStatement prepareStatement=poiConnection.prepareStatement("SELECT id, x, y, name_en, name, type, subtype, opening_hours, site, phone from poi " + "where x >= ? AND x < ? AND y >= ? AND y < ?");
  TIntArrayList types=new TIntArrayList();
  for (  Map.Entry<PoiTileBox,TLongList> entry : fpToWriteSeeks.entrySet()) {
    int z=entry.getKey().zoom;
    int x=entry.getKey().x;
    int y=entry.getKey().y;
    writer.startWritePoiData(z,x,y,startFpPoiIndex,entry.getValue());
    if (useInMemoryCreator) {
      List<PoiData> poiData=entry.getKey().poiData;
      for (      PoiData poi : poiData) {
        int x31=poi.x;
        int y31=poi.y;
        String type=poi.type;
        String subtype=poi.subtype;
        types.clear();
        buildTypeIds(type,subtype,categories,catIndexes,types);
        int x24shift=(x31 >> 7) - (x << (24 - z));
        int y24shift=(y31 >> 7) - (y << (24 - z));
        writer.writePoiDataAtom(poi.id,x24shift,y24shift,poi.nameEn,poi.name,types,poi.openingHours,poi.site,poi.phone);
      }
    }
 else {
      prepareStatement.setInt(1,x << (31 - z));
      prepareStatement.setInt(2,(x + 1) << (31 - z));
      prepareStatement.setInt(3,y << (31 - z));
      prepareStatement.setInt(4,(y + 1) << (31 - z));
      ResultSet rset=prepareStatement.executeQuery();
      while (rset.next()) {
        long id=rset.getLong(1);
        int x31=rset.getInt(2);
        int y31=rset.getInt(3);
        int x24shift=(x31 >> 7) - (x << (24 - z));
        int y24shift=(y31 >> 7) - (y << (24 - z));
        String nameEn=rset.getString(4);
        String name=rset.getString(5);
        String type=rset.getString(6);
        String subtype=rset.getString(7);
        types.clear();
        buildTypeIds(type,subtype,categories,catIndexes,types);
        String openingHours=rset.getString(8);
        String site=rset.getString(9);
        String phone=rset.getString(10);
        writer.writePoiDataAtom(id,x24shift,y24shift,nameEn,name,types,openingHours,site,phone);
      }
      rset.close();
    }
    writer.endWritePoiData();
  }
  prepareStatement.close();
  writer.endWritePOIIndex();
}
