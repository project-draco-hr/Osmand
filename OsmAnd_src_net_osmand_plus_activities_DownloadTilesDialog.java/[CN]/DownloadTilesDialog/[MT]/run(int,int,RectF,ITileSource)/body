{
  cancel=false;
  int numberTiles=0;
  for (int z=zoom; z <= progress + zoom; z++) {
    int x1=(int)MapUtils.getTileNumberX(z,latlonRect.left);
    int x2=(int)MapUtils.getTileNumberX(z,latlonRect.right);
    int y1=(int)MapUtils.getTileNumberY(z,latlonRect.top);
    int y2=(int)MapUtils.getTileNumberY(z,latlonRect.bottom);
    numberTiles+=(x2 - x1 + 1) * (y2 - y1 + 1);
  }
  final ProgressDialog progressDlg=new ProgressDialog(ctx);
  progressDlg.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
  progressDlg.setMessage(ctx.getString(R.string.downloading));
  progressDlg.setCancelable(true);
  progressDlg.setMax(numberTiles);
  progressDlg.setOnCancelListener(new DialogInterface.OnCancelListener(){
    @Override public void onCancel(    DialogInterface dialog){
      cancel=true;
    }
  }
);
  final MapTileDownloader instance=MapTileDownloader.getInstance(Version.getFullVersion(ctx));
  final ArrayList<IMapDownloaderCallback> previousCallbacks=new ArrayList<IMapDownloaderCallback>(instance.getDownloaderCallbacks());
  instance.getDownloaderCallbacks().clear();
  instance.addDownloaderCallback(new IMapDownloaderCallback(){
    @Override public void tileDownloaded(    DownloadRequest request){
      if (request != null) {
        progressDlg.setProgress(progressDlg.getProgress() + 1);
      }
    }
  }
);
  Runnable r=new Runnable(){
    @Override public void run(){
      int requests=0;
      int limitRequests=50;
      try {
        ResourceManager rm=app.getResourceManager();
        for (int z=zoom; z <= zoom + progress && !cancel; z++) {
          int x1=(int)MapUtils.getTileNumberX(z,latlonRect.left);
          int x2=(int)MapUtils.getTileNumberX(z,latlonRect.right);
          int y1=(int)MapUtils.getTileNumberY(z,latlonRect.top);
          int y2=(int)MapUtils.getTileNumberY(z,latlonRect.bottom);
          for (int x=x1; x <= x2 && !cancel; x++) {
            for (int y=y1; y <= y2 && !cancel; y++) {
              String tileId=rm.calculateTileId(map,x,y,z);
              if (rm.tileExistOnFileSystem(tileId,map,x,y,z)) {
                progressDlg.setProgress(progressDlg.getProgress() + 1);
              }
 else {
                rm.getTileImageForMapSync(tileId,map,x,y,z,true);
                requests++;
              }
              if (!cancel) {
                if (requests >= limitRequests) {
                  requests=0;
                  while (instance.isSomethingBeingDownloaded()) {
                    try {
                      Thread.sleep(500);
                    }
 catch (                    InterruptedException e) {
                      throw new IllegalArgumentException(e);
                    }
                  }
                }
              }
            }
          }
        }
        if (cancel) {
          instance.refuseAllPreviousRequests();
        }
 else {
          while (instance.isSomethingBeingDownloaded()) {
            try {
              Thread.sleep(500);
            }
 catch (            InterruptedException e) {
              throw new IllegalArgumentException(e);
            }
          }
        }
        mapView.refreshMap();
      }
 catch (      Exception e) {
        log.error("Exception while downloading tiles ",e);
        instance.refuseAllPreviousRequests();
      }
 finally {
        instance.getDownloaderCallbacks().clear();
        instance.getDownloaderCallbacks().addAll(previousCallbacks);
        app.getResourceManager().reloadTilesFromFS();
      }
      progressDlg.dismiss();
    }
  }
;
  new Thread(r,"Downloading tiles").start();
  progressDlg.show();
}
