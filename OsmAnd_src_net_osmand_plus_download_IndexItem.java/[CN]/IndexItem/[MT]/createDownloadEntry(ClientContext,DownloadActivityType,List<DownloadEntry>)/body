{
  String fileName=this.fileName;
  File parent=null;
  String toSavePostfix=null;
  String toCheckPostfix=null;
  boolean unzipDir=false;
  boolean preventMediaIndexing=false;
  if (fileName.endsWith(IndexConstants.BINARY_MAP_INDEX_EXT)) {
    parent=ctx.getAppPath(IndexConstants.MAPS_PATH);
    toSavePostfix=BINARY_MAP_INDEX_EXT;
    toCheckPostfix=BINARY_MAP_INDEX_EXT;
  }
 else   if (fileName.endsWith(IndexConstants.BINARY_MAP_INDEX_EXT_ZIP)) {
    parent=ctx.getAppPath(IndexConstants.MAPS_PATH);
    toSavePostfix=BINARY_MAP_INDEX_EXT_ZIP;
    toCheckPostfix=BINARY_MAP_INDEX_EXT;
  }
 else   if (fileName.endsWith(IndexConstants.EXTRA_ZIP_EXT)) {
    parent=ctx.getAppPath("");
    toSavePostfix=IndexConstants.EXTRA_ZIP_EXT;
    toCheckPostfix=IndexConstants.EXTRA_EXT;
  }
 else   if (fileName.endsWith(IndexConstants.SQLITE_EXT)) {
    parent=ctx.getAppPath(IndexConstants.TILES_INDEX_DIR);
    toSavePostfix=IndexConstants.SQLITE_EXT;
    toCheckPostfix=IndexConstants.SQLITE_EXT;
  }
 else   if (fileName.endsWith(IndexConstants.VOICE_INDEX_EXT_ZIP)) {
    parent=ctx.getAppPath(IndexConstants.VOICE_INDEX_DIR);
    toSavePostfix=VOICE_INDEX_EXT_ZIP;
    toCheckPostfix="";
    unzipDir=true;
    preventMediaIndexing=true;
  }
 else   if (fileName.endsWith(IndexConstants.TTSVOICE_INDEX_EXT_ZIP)) {
    parent=ctx.getAppPath(IndexConstants.VOICE_INDEX_DIR);
    toSavePostfix=TTSVOICE_INDEX_EXT_ZIP;
    toCheckPostfix="";
    unzipDir=true;
  }
  if (type == DownloadActivityType.ROADS_FILE) {
    toSavePostfix="-roads" + toSavePostfix;
    toCheckPostfix="-roads" + toCheckPostfix;
  }
  if (parent != null) {
    parent.mkdirs();
    if (preventMediaIndexing) {
      try {
        new File(parent,".nomedia").createNewFile();
      }
 catch (      IOException e) {
        log.error("IOException",e);
      }
    }
  }
  final DownloadEntry entry;
  if (parent == null || !parent.exists()) {
    ctx.showToastMessage(R.string.sd_dir_not_accessible);
  }
 else {
    entry=new DownloadEntry();
    entry.type=type;
    entry.baseName=getBasename();
    String url="http://" + IndexConstants.INDEX_DOWNLOAD_DOMAIN + "/download?event=2&";
    url+=Version.getVersionAsURLParam(ctx) + "&";
    if (type == DownloadActivityType.ROADS_FILE) {
      url+="road=yes&";
    }
    if (type == DownloadActivityType.HILLSHADE_FILE) {
      url+="hillshade=yes&";
    }
    entry.urlToDownload=url + "file=" + fileName;
    entry.fileToSave=new File(parent,entry.baseName + toSavePostfix);
    entry.unzip=unzipDir;
    try {
      Date d=Algorithms.getDateFormat().parse(date);
      entry.dateModified=d.getTime();
    }
 catch (    ParseException e1) {
      log.error("ParseException",e1);
    }
    try {
      entry.sizeMB=Double.parseDouble(size);
    }
 catch (    NumberFormatException e1) {
      log.error("ParseException",e1);
    }
    entry.parts=1;
    if (parts != null) {
      entry.parts=Integer.parseInt(parts);
    }
    entry.fileToUnzip=new File(parent,entry.baseName + toCheckPostfix);
    File backup=new File(ctx.getAppPath(IndexConstants.BACKUP_INDEX_DIR),entry.fileToUnzip.getName());
    if (backup.exists()) {
      entry.existingBackupFile=backup;
    }
    if (attachedItem != null) {
      ArrayList<DownloadEntry> sz=new ArrayList<DownloadEntry>();
      attachedItem.createDownloadEntry(ctx,type,sz);
      if (sz.size() > 0) {
        entry.attachedEntry=sz.get(0);
      }
    }
    downloadEntries.add(entry);
  }
  return downloadEntries;
}
