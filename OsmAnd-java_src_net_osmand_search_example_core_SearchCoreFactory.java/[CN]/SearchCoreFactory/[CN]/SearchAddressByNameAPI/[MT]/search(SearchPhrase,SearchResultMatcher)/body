{
  if (phrase.getLastWord().isEmpty()) {
    return false;
  }
  if (phrase.isNoSelectedType() || phrase.isLastWord(ObjectType.CITY,ObjectType.VILLAGE,ObjectType.POSTCODE) || phrase.isLastWord(ObjectType.REGION)|| phrase.getRadiusLevel() >= 2) {
    final boolean locSpecified=phrase.getLastTokenLocation() != null;
    LatLon loc=phrase.getLastTokenLocation();
    final QuadRect streetBbox=getBBoxToSearch(DEFAULT_BBOX_RADIUS,phrase.getRadiusLevel(),phrase.getLastTokenLocation());
    final QuadRect postcodeBbox=getBBoxToSearch(DEFAULT_BBOX_RADIUS * 5,phrase.getRadiusLevel(),phrase.getLastTokenLocation());
    final QuadRect villagesBbox=getBBoxToSearch(DEFAULT_BBOX_RADIUS * 5,phrase.getRadiusLevel(),phrase.getLastTokenLocation());
    final QuadRect cityBbox=getBBoxToSearch(DEFAULT_BBOX_RADIUS * 10,phrase.getRadiusLevel(),phrase.getLastTokenLocation());
    final int priority=isNoSelectedType(phrase) ? 1 : 3;
    final BinaryMapIndexReader[] currentFile=new BinaryMapIndexReader[1];
    ResultMatcher<MapObject> rm=new ResultMatcher<MapObject>(){
      int limit=0;
      @Override public boolean publish(      MapObject object){
        if (isCancelled()) {
          return false;
        }
        SearchResult sr=new SearchResult(phrase);
        sr.object=object;
        sr.file=currentFile[0];
        sr.localeName=object.getName(phrase.getSettings().getLang(),true);
        sr.otherNames=object.getAllNames(true);
        sr.localeOtherName=sr.file.getRegionName();
        sr.location=object.getLocation();
        sr.priorityDistance=1;
        sr.priority=priority;
        int y=MapUtils.get31TileNumberY(object.getLocation().getLatitude());
        int x=MapUtils.get31TileNumberX(object.getLocation().getLongitude());
        if (object instanceof Street) {
          if (locSpecified && !streetBbox.contains(x,y,x,y)) {
            return false;
          }
          sr.objectType=ObjectType.STREET;
          sr.localeOtherName=((Street)object).getCity().getName(phrase.getSettings().getLang(),true);
        }
 else         if (object instanceof City) {
          CityType type=((City)object).getType();
          if (type == CityType.CITY || type == CityType.TOWN) {
            if (locSpecified && !cityBbox.contains(x,y,x,y)) {
              return false;
            }
            sr.objectType=ObjectType.CITY;
            sr.priorityDistance=0.1;
          }
 else           if (((City)object).isPostcode()) {
            if (locSpecified && !postcodeBbox.contains(x,y,x,y)) {
              return false;
            }
            sr.objectType=ObjectType.POSTCODE;
          }
 else {
            if (locSpecified && !villagesBbox.contains(x,y,x,y)) {
              return false;
            }
            sr.objectType=ObjectType.VILLAGE;
          }
        }
 else {
          return false;
        }
        limit++;
        resultMatcher.publish(sr);
        return false;
      }
      @Override public boolean isCancelled(){
        return limit > LIMIT * phrase.getRadiusLevel() || resultMatcher.isCancelled();
      }
    }
;
    for (    BinaryMapIndexReader r : phrase.getOfflineIndexes()) {
      currentFile[0]=r;
      SearchRequest<MapObject> req=BinaryMapIndexReader.buildAddressByNameRequest(rm,phrase.getLastWord().toLowerCase(),StringMatcherMode.CHECK_STARTS_FROM_SPACE);
      if (locSpecified) {
        req.setBBoxRadius(loc.getLatitude(),loc.getLongitude(),DEFAULT_BBOX_RADIUS * 20);
      }
      r.searchAddressDataByName(req);
    }
  }
  return true;
}
