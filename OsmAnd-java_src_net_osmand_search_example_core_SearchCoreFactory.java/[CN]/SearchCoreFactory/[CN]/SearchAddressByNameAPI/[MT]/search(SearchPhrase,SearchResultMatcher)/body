{
  if (phrase.getLastWord().isEmpty()) {
    return false;
  }
  if (phrase.isNoSelectedType() || phrase.isLastWord(ObjectType.CITY,ObjectType.VILLAGE,ObjectType.POSTCODE) || phrase.isLastWord(ObjectType.REGION)|| phrase.getRadiusLevel() >= 2) {
    final boolean locSpecified=phrase.getLastTokenLocation() != null;
    LatLon loc=phrase.getLastTokenLocation();
    final QuadRect streetBbox=getBBoxToSearch(phrase,DEFAULT_ADDRESS_BBOX_RADIUS);
    final QuadRect postcodeBbox=getBBoxToSearch(phrase,DEFAULT_ADDRESS_BBOX_RADIUS * 5);
    final QuadRect villagesBbox=getBBoxToSearch(phrase,DEFAULT_ADDRESS_BBOX_RADIUS * 3);
    final QuadRect cityBbox=getBBoxToSearch(phrase,DEFAULT_ADDRESS_BBOX_RADIUS * 10);
    final int priority=isNoSelectedType(phrase) ? 1 : 3;
    Iterator<BinaryMapIndexReader> offlineIndexes=phrase.getOfflineIndexes(DEFAULT_ADDRESS_BBOX_RADIUS * 10 * phrase.getRadiusLevel(),SearchPhraseDataType.ADDRESS);
    while (offlineIndexes.hasNext()) {
      BinaryMapIndexReader r=offlineIndexes.next();
      if (!townCities.containsKey(r)) {
        BinaryMapIndexReader.buildAddressRequest(null);
        List<City> l=r.getCities(null,BinaryMapAddressReaderAdapter.CITY_TOWN_TYPE);
        townCities.put(r,l);
        for (        City c : l) {
          LatLon cl=c.getLocation();
          int y=MapUtils.get31TileNumberY(cl.getLatitude());
          int x=MapUtils.get31TileNumberX(cl.getLongitude());
          QuadRect qr=new QuadRect(x,y,x,y);
          townCitiesQR.insert(c,qr);
        }
      }
    }
    final BinaryMapIndexReader[] currentFile=new BinaryMapIndexReader[1];
    ResultMatcher<MapObject> rm=new ResultMatcher<MapObject>(){
      int limit=0;
      @Override public boolean publish(      MapObject object){
        if (isCancelled()) {
          return false;
        }
        SearchResult sr=new SearchResult(phrase);
        sr.object=object;
        sr.file=currentFile[0];
        sr.localeName=object.getName(phrase.getSettings().getLang(),true);
        sr.otherNames=object.getAllNames(true);
        sr.localeRelatedObjectName=sr.file.getRegionName();
        sr.location=object.getLocation();
        sr.priorityDistance=1;
        sr.priority=priority;
        int y=MapUtils.get31TileNumberY(object.getLocation().getLatitude());
        int x=MapUtils.get31TileNumberX(object.getLocation().getLongitude());
        List<City> closestCities=null;
        if (object instanceof Street) {
          if (locSpecified && !streetBbox.contains(x,y,x,y)) {
            return false;
          }
          sr.objectType=ObjectType.STREET;
          sr.localeRelatedObjectName=((Street)object).getCity().getName(phrase.getSettings().getLang(),true);
        }
 else         if (object instanceof City) {
          CityType type=((City)object).getType();
          if (type == CityType.CITY || type == CityType.TOWN) {
            if (locSpecified && !cityBbox.contains(x,y,x,y)) {
              return false;
            }
            sr.objectType=ObjectType.CITY;
            sr.priorityDistance=0.1;
          }
 else           if (((City)object).isPostcode()) {
            if (locSpecified && !postcodeBbox.contains(x,y,x,y)) {
              return false;
            }
            sr.objectType=ObjectType.POSTCODE;
          }
 else {
            if (locSpecified && !villagesBbox.contains(x,y,x,y)) {
              return false;
            }
            City c=null;
            if (closestCities == null) {
              closestCities=townCitiesQR.queryInBox(villagesBbox,new ArrayList<City>());
            }
            double minDist=-1;
            for (            City s : closestCities) {
              double ll=MapUtils.getDistance(s.getLocation(),object.getLocation());
              if (minDist == -1 || ll < minDist) {
                c=s;
                minDist=ll;
              }
            }
            if (c != null) {
              sr.localeRelatedObjectName=c.getName(phrase.getSettings().getLang(),true);
              sr.distRelatedObjectName=minDist;
            }
            sr.objectType=ObjectType.VILLAGE;
          }
        }
 else {
          return false;
        }
        limit++;
        resultMatcher.publish(sr);
        return false;
      }
      @Override public boolean isCancelled(){
        return limit > LIMIT * phrase.getRadiusLevel() || resultMatcher.isCancelled();
      }
    }
;
    if (phrase.getRadiusLevel() > 1 || phrase.getLastWord().length() > 2) {
      Iterator<BinaryMapIndexReader> offlineIterator=phrase.getOfflineIndexes(DEFAULT_ADDRESS_BBOX_RADIUS * 10 * phrase.getRadiusLevel(),SearchPhraseDataType.ADDRESS);
      while (offlineIterator.hasNext()) {
        BinaryMapIndexReader r=offlineIterator.next();
        currentFile[0]=r;
        SearchRequest<MapObject> req=BinaryMapIndexReader.buildAddressByNameRequest(rm,phrase.getLastWord().toLowerCase(),StringMatcherMode.CHECK_STARTS_FROM_SPACE);
        if (locSpecified) {
          req.setBBoxRadius(loc.getLatitude(),loc.getLongitude(),DEFAULT_ADDRESS_BBOX_RADIUS * 10 * phrase.getRadiusLevel());
        }
        r.searchAddressDataByName(req);
      }
    }
  }
  return true;
}
