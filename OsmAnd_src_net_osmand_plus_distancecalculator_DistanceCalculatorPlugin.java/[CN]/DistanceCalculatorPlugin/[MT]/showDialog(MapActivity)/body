{
  Builder bld=new AlertDialog.Builder(activity);
  final TIntArrayList list=new TIntArrayList();
  if (distanceMeasurementMode == 0) {
    list.add(R.string.distance_measurement_start_editing);
  }
 else {
    list.add(R.string.distance_measurement_finish_editing);
  }
  if (measurementPoints.size() > 0) {
    list.add(R.string.distance_measurement_finish_subtrack);
    list.add(R.string.distance_measurement_clear_route);
    list.add(R.string.distance_measurement_save_gpx);
  }
  list.add(R.string.distance_measurement_load_gpx);
  String[] items=new String[list.size()];
  for (int i=0; i < items.length; i++) {
    items[i]=activity.getString(list.get(i));
  }
  bld.setItems(items,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      int id=list.get(which);
      if (id == R.string.distance_measurement_start_editing) {
        distanceMeasurementMode=1;
        startEditingHelp(activity);
      }
 else       if (id == R.string.distance_measurement_finish_editing) {
        distanceMeasurementMode=0;
      }
 else       if (id == R.string.distance_measurement_finish_subtrack) {
        measurementPoints.add(new LinkedList<GPXUtilities.WptPt>());
      }
 else       if (id == R.string.distance_measurement_clear_route) {
        distanceMeasurementMode=0;
        measurementPoints.clear();
        calculateDistance();
      }
 else       if (id == R.string.distance_measurement_save_gpx) {
        saveGpx(activity);
      }
 else       if (id == R.string.distance_measurement_load_gpx) {
        loadGpx(activity);
      }
      activity.getMapView().refreshMap();
      updateText();
    }
  }
);
  bld.show();
}
