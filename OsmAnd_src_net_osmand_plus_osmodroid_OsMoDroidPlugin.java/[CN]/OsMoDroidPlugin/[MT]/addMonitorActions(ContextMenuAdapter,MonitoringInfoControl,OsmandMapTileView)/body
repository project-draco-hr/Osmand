{
  boolean o=true;
  try {
    o=mIRemoteService.isActive();
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  final boolean off=!o;
  qa.item(off ? R.string.osmodroid_mode_off : R.string.osmodroid_mode_on).icon(off ? R.drawable.monitoring_rec_inactive : R.drawable.monitoring_rec_big).listen(new OnContextMenuClick(){
    @Override public void onContextMenuClick(    int itemId,    int pos,    boolean isChecked,    DialogInterface dialog){
      try {
        if (off) {
          mIRemoteService.Activate();
        }
 else {
          mIRemoteService.Deactivate();
        }
      }
 catch (      Exception e) {
        log.error(e.getMessage(),e);
      }
    }
  }
).reg();
  qa.item(R.string.osmodroid_refresh).icons(R.drawable.ic_action_grefresh_dark,R.drawable.ic_action_grefresh_light).listen(new OnContextMenuClick(){
    @Override public void onContextMenuClick(    int itemId,    int pos,    boolean isChecked,    DialogInterface dialog){
      try {
        mIRemoteService.refreshChannels();
      }
 catch (      RemoteException e) {
        log.error(e.getMessage(),e);
      }
    }
  }
).reg();
  qa.item(R.string.osmodroid_unseek).icons(R.drawable.abs__ic_commit_search_api_holo_dark,R.drawable.abs__ic_commit_search_api_holo_light).listen(new OnContextMenuClick(){
    @Override public void onContextMenuClick(    int itemId,    int pos,    boolean isChecked,    DialogInterface dialog){
      for (      OsMoDroidLayer l : osmoDroidLayerList) {
        l.seekOsMoDroidPoint=null;
      }
    }
  }
).reg();
}
