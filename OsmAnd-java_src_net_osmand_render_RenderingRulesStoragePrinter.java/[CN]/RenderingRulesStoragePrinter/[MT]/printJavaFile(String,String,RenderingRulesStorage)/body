{
  PrintStream out=System.out;
  out=new PrintStream(new File(path,name + "RenderingRulesStorage.java"));
  out.println("\n\npackage net.osmand.render;\n\npublic class " + name + "RenderingRulesStorage {");
  String defindent="\t";
  String indent=defindent;
  out.println("" + indent + defindent+ "RenderingRulesStorage storage;");
  out.println("\tprivate java.util.Map<String, String> createMap(int... attrs) {\n" + "\t	java.util.Map<String, String> mp = new java.util.HashMap<String, String>();\n" + "\t		for(int i = 0; i< attrs.length; i+=2) {\n"+ "\t			mp.put(storage.getStringValue(attrs[i]), storage.getStringValue(attrs[i+1]));\n"+ "\t		}\n"+ "\t	return mp;\n"+ "\t}");
  out.println("\tprivate java.util.Map<String, String> createMap(String... attrs) {\n" + "\t	java.util.Map<String, String> mp = new java.util.HashMap<String, String>();\n" + "\t		for(int i = 0; i< attrs.length; i+=2) {\n"+ "\t			mp.put(attrs[i], attrs[i+1]);\n"+ "\t		}\n"+ "\t	return mp;\n"+ "\t}");
  out.println("\n" + indent + "public void createStyle(RenderingRulesStorage storage) {");
  out.println("" + indent + defindent+ "this.storage=storage;");
  out.println("" + indent + defindent+ "storage.renderingName="+ javaString(storage.renderingName)+ ";");
  out.println("" + indent + defindent+ "storage.internalRenderingName="+ javaString(storage.internalRenderingName)+ ";");
  out.println("" + indent + defindent+ "initDictionary();");
  out.println("" + indent + defindent+ "initProperties();");
  out.println("" + indent + defindent+ "initConstants();");
  out.println("" + indent + defindent+ "initAttributes();");
  out.println("" + indent + defindent+ "initRules();");
  out.println("" + indent + "}");
  printJavaInitConstants(storage,out,indent,defindent);
  printJavaInitProperties(storage,out,indent,defindent);
  printJavaInitRules(storage,out,indent,defindent);
  printJavaInitAttributes(storage,out,indent,defindent);
  printJavaInitDictionary(storage,out,indent,defindent);
  out.println("\n\n}");
}
