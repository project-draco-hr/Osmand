{
  Map<EntityId,Entity> entities=storage.getRegisteredEntities();
  Map<EntityId,EntityInfo> entityInfo=storage.getRegisteredEntityInfo();
  XMLOutputFactory xof=XMLOutputFactory.newInstance();
  XMLStreamWriter streamWriter=xof.createXMLStreamWriter(new OutputStreamWriter(output));
  List<Node> nodes=new ArrayList<Node>();
  List<Way> ways=new ArrayList<Way>();
  List<Relation> relations=new ArrayList<Relation>();
  if (interestedObjects == null) {
    interestedObjects=entities.keySet();
  }
  Stack<EntityId> toResolve=new Stack<EntityId>();
  toResolve.addAll(interestedObjects);
  while (!toResolve.isEmpty()) {
    EntityId l=toResolve.pop();
    if (entities.get(l) instanceof Node) {
      nodes.add((Node)entities.get(l));
    }
 else     if (entities.get(l) instanceof Way) {
      ways.add((Way)entities.get(l));
      if (includeLinks) {
        toResolve.addAll(((Way)entities.get(l)).getEntityIds());
      }
    }
 else     if (entities.get(l) instanceof Relation) {
      relations.add((Relation)entities.get(l));
      if (includeLinks) {
        toResolve.addAll(((Relation)entities.get(l)).getMemberIds());
      }
    }
  }
  streamWriter.writeStartDocument();
  writeStartElement(streamWriter,ELEM_OSM,"");
  streamWriter.writeAttribute(ATTR_VERSION,"0.6");
  for (  Node n : nodes) {
    writeStartElement(streamWriter,ELEM_NODE,INDENT);
    streamWriter.writeAttribute(ATTR_LAT,n.getLatitude() + "");
    streamWriter.writeAttribute(ATTR_LON,n.getLongitude() + "");
    streamWriter.writeAttribute(ATTR_ID,n.getId() + "");
    writeEntityAttributes(streamWriter,n,entityInfo.get(EntityId.valueOf(n)));
    writeTags(streamWriter,n);
    writeEndElement(streamWriter,INDENT);
  }
  for (  Way w : ways) {
    writeStartElement(streamWriter,ELEM_WAY,INDENT);
    streamWriter.writeAttribute(ATTR_ID,w.getId() + "");
    writeEntityAttributes(streamWriter,w,entityInfo.get(EntityId.valueOf(w)));
    TLongArrayList ids=w.getNodeIds();
    for (int i=0; i < ids.size(); i++) {
      writeStartElement(streamWriter,ELEM_ND,INDENT2);
      streamWriter.writeAttribute(ATTR_REF,ids.get(i) + "");
      writeEndElement(streamWriter,INDENT2);
    }
    writeTags(streamWriter,w);
    writeEndElement(streamWriter,INDENT);
  }
  for (  Relation r : relations) {
    writeStartElement(streamWriter,ELEM_RELATION,INDENT);
    streamWriter.writeAttribute(ATTR_ID,r.getId() + "");
    writeEntityAttributes(streamWriter,r,entityInfo.get(EntityId.valueOf(r)));
    for (    Entry<EntityId,String> e : r.getMembersMap().entrySet()) {
      writeStartElement(streamWriter,ELEM_MEMBER,INDENT2);
      streamWriter.writeAttribute(ATTR_REF,e.getKey().getId() + "");
      String s=e.getValue();
      if (s == null) {
        s="";
      }
      streamWriter.writeAttribute(ATTR_ROLE,s);
      streamWriter.writeAttribute(ATTR_TYPE,e.getKey().getType().toString().toLowerCase());
      writeEndElement(streamWriter,INDENT2);
    }
    writeTags(streamWriter,r);
    writeEndElement(streamWriter,INDENT);
  }
  writeEndElement(streamWriter,"");
  streamWriter.writeEndDocument();
  streamWriter.flush();
}
