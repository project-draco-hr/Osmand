{
  return new RenderingRuleProperty(name,STRING_TYPE,true){
    @Override public boolean accept(    int ruleValue,    int renderingProperty,    RenderingRuleSearchRequest req){
      BinaryMapDataObject obj=req.getObject();
      String val=req.getStorage().getStringValue(ruleValue);
      if (obj == null) {
        int vl=req.getIntPropertyValue(this);
        if (vl == -1) {
          return false;
        }
        String val2=req.getStorage().getStringValue(vl);
        return val != null && val.equals(val2);
      }
      int k=val.indexOf('=');
      if (k != -1) {
        String ts=val.substring(0,k);
        String vs=val.substring(k + 1);
        Integer ruleInd=req.getObject().getMapIndex().getRule(ts,vs);
        if (ruleInd != null) {
          if (req.getObject().containsAdditionalType(ruleInd)) {
            return true;
          }
        }
      }
 else {
        String ts=val;
        int[] additionalTypes=obj.getAdditionalTypes();
        for (int i=0; i < additionalTypes.length; i++) {
          TagValuePair vp=obj.getMapIndex().decodeType(additionalTypes[i]);
          if (vp != null && ts.equals(vp.tag)) {
            return true;
          }
        }
      }
      return false;
    }
  }
;
}
