{
  typeText.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showSubCategory(a);
    }
  }
);
  typeText.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      showSubCategory(a);
      return true;
    }
  }
);
  openHoursButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ctx.showDialog(DIALOG_OPENING_HOURS);
    }
  }
);
  typeText.addTextChangedListener(new TextWatcher(){
    @Override public void afterTextChanged(    Editable s){
      String str=s.toString();
      a.setSubType(str);
      AmenityType t=MapRenderingTypes.getDefault().getAmenityNameToType().get(str);
      if (t != null && a.getType() != t) {
        a.setType(t);
        typeButton.setText(OsmAndFormatter.toPublicString(t,ctx.getMyApplication()));
        updateSubTypesAdapter(t);
      }
    }
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
  }
);
  typeButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ctx.showDialog(DIALOG_POI_TYPES);
    }
  }
);
  final Button advancedModeButton=((Button)dlg.findViewById(R.id.advancedMode));
  advancedModeButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      final TableLayout layout=((TableLayout)dlg.findViewById(R.id.advancedModeTable));
      TableLayout.LayoutParams tlParams=new TableLayout.LayoutParams(TableLayout.LayoutParams.FILL_PARENT,TableLayout.LayoutParams.WRAP_CONTENT);
      layout.setLayoutParams(tlParams);
      layout.setColumnStretchable(1,true);
      layout.setVisibility((layout.getVisibility() == View.VISIBLE) ? View.GONE : View.VISIBLE);
      Button addTag=(Button)dlg.findViewById(R.id.addTag);
      addTag.setVisibility((layout.getVisibility() == View.VISIBLE) ? View.VISIBLE : View.GONE);
      if (layout.getVisibility() == View.VISIBLE) {
        addTag.setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View v){
            addTagValueRow(n,layout,null,null);
          }
        }
);
      }
      while (layout.getChildCount() > 0) {
        layout.removeViewAt(0);
      }
      layout.requestLayout();
      for (      String tg : n.getTagKeySet()) {
        if (!tg.equals(OSMTagKey.NAME.getValue()) && !tg.equals(OSMTagKey.OPENING_HOURS.getValue()) && !tg.equals(OSMTagKey.PHONE.getValue())&& !tg.equals(OSMTagKey.WEBSITE.getValue())) {
          if (a == null || a.getType() == null || !a.getType().getDefaultTag().equals(tg)) {
            addTagValueRow(n,layout,tg,n.getTag(tg));
          }
        }
      }
    }
  }
);
  ((Button)dlg.findViewById(R.id.Cancel)).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ctx.removeDialog(dialogID);
    }
  }
);
  ((Button)dlg.findViewById(R.id.Commit)).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Resources resources=v.getResources();
      final String msg=n.getId() == -1 ? resources.getString(R.string.poi_action_add) : resources.getString(R.string.poi_action_change);
      OsmPoint.Action action=n.getId() == -1 ? OsmPoint.Action.CREATE : OsmPoint.Action.MODIFY;
      StringBuilder tag=new StringBuilder();
      StringBuilder value=new StringBuilder();
      String subType=typeText.getText().toString();
      MapRenderingTypes.getDefault().getAmenityTagValue(a.getType(),subType,tag,value);
      n.putTag(tag.toString(),value.toString());
      String name=nameText.getText().toString();
      if (name.length() > 0) {
        n.putTag(OSMTagKey.NAME.getValue(),name);
      }
      if (openingHours.getText().toString().length() == 0) {
        n.removeTag(OSMTagKey.OPENING_HOURS.getValue());
      }
 else {
        n.putTag(OSMTagKey.OPENING_HOURS.getValue(),openingHours.getText().toString());
      }
      String website=websiteText.getText().toString();
      if (website.length() > 0) {
        n.putTag(OSMTagKey.WEBSITE.getValue(),website);
      }
      String phone=phoneText.getText().toString();
      if (phone.length() > 0) {
        n.putTag(OSMTagKey.PHONE.getValue(),phone);
      }
      String str=streetNameText.getText().toString();
      if (str.length() > 0) {
        n.putTag(OSMTagKey.ADDR_STREET.getValue(),str);
      }
      String hno=hnoText.getText().toString();
      if (hno.length() > 0) {
        n.putTag(OSMTagKey.ADDR_HOUSE_NUMBER.getValue(),hno);
      }
      commitNode(action,n,openstreetmapUtil.getEntityInfo(),commentText.getText().toString(),closeChange.isSelected(),new Runnable(){
        @Override public void run(){
          AccessibleToast.makeText(ctx,MessageFormat.format(ctx.getResources().getString(R.string.poi_action_succeded_template),msg),Toast.LENGTH_LONG).show();
          if (ctx.getMapView() != null) {
            ctx.getMapView().refreshMap(true);
          }
          ctx.removeDialog(dialogID);
        }
      }
);
    }
  }
);
}
