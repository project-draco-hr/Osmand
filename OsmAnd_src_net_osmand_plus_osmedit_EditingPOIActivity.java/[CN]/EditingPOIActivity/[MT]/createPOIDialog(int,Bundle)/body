{
  final Dialog dlg=new Dialog(ctx);
  dlg.setContentView(R.layout.editing_poi);
  nameText=((EditText)dlg.findViewById(R.id.Name));
  openingHours=((EditText)dlg.findViewById(R.id.OpeningHours));
  typeText=((AutoCompleteTextView)dlg.findViewById(R.id.Type));
  typeButton=((Button)dlg.findViewById(R.id.TypeButton));
  openHoursButton=((Button)dlg.findViewById(R.id.OpenHoursButton));
  typeText=((AutoCompleteTextView)dlg.findViewById(R.id.Type));
  typeText.setThreshold(1);
  commentText=((EditText)dlg.findViewById(R.id.Comment));
  phoneText=((EditText)dlg.findViewById(R.id.Phone));
  websiteText=((EditText)dlg.findViewById(R.id.Website));
  TextView linkToOsmDoc=(TextView)dlg.findViewById(R.id.LinkToOsmDoc);
  linkToOsmDoc.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ctx.startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse("http://wiki.openstreetmap.org/wiki/Map_Features")));
    }
  }
);
  linkToOsmDoc.setMovementMethod(LinkMovementMethod.getInstance());
  typeText.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showSubCategory(args);
    }
  }
);
  typeText.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      showSubCategory(args);
      return true;
    }
  }
);
  openHoursButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ctx.showDialog(DIALOG_OPENING_HOURS);
    }
  }
);
  typeText.addTextChangedListener(new TextWatcher(){
    @Override public void afterTextChanged(    Editable s){
      Amenity a=(Amenity)args.getSerializable(KEY_AMENITY);
      String str=s.toString();
      a.setSubType(str);
      AmenityType t=MapRenderingTypes.getDefault().getAmenityNameToType().get(str);
      if (t != null && a.getType() != t) {
        a.setType(t);
        typeButton.setText(OsmAndFormatter.toPublicString(t,ctx));
        updateSubTypesAdapter(t);
      }
    }
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
  }
);
  typeButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ctx.showDialog(DIALOG_POI_TYPES);
    }
  }
);
  final Button advancedModeButton=((Button)dlg.findViewById(R.id.advancedMode));
  final Map<String,String> additionalTags=new HashMap<String,String>();
  advancedModeButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      final TableLayout layout=((TableLayout)dlg.findViewById(R.id.advancedModeTable));
      TableLayout.LayoutParams tlParams=new TableLayout.LayoutParams(TableLayout.LayoutParams.FILL_PARENT,TableLayout.LayoutParams.WRAP_CONTENT);
      layout.setLayoutParams(tlParams);
      layout.setColumnStretchable(1,true);
      layout.setVisibility((layout.getVisibility() == View.VISIBLE) ? View.GONE : View.VISIBLE);
      if (layout.getVisibility() == View.VISIBLE) {
        Button addTag=(Button)dlg.findViewById(R.id.addTag);
        addTag.setVisibility((layout.getVisibility() == View.VISIBLE) ? View.GONE : View.VISIBLE);
        addTag.setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View v){
            final TableRow newTagRow=new TableRow(ctx);
            TableRow.LayoutParams tlp=new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT,TableRow.LayoutParams.WRAP_CONTENT);
            tlp.leftMargin=5;
            newTagRow.setLayoutParams(tlp);
            final Button tag=new Button(ctx);
            final EditText value=new EditText(ctx);
            final Button delete=new Button(ctx);
            tag.setLayoutParams(tlp);
            tag.setText("<Tag>");
            tag.setOnClickListener(new View.OnClickListener(){
              @Override public void onClick(              View v){
                final OSMTagKey[] allValues=OSMTagKey.values();
                final OSMTagKey[] values=new OSMTagKey[allValues.length - 4];
                int j=0;
                for (int i=0; i < allValues.length; i++) {
                  if ((allValues[i] != OSMTagKey.NAME) && (allValues[i] != OSMTagKey.OPENING_HOURS) && (allValues[i] != OSMTagKey.PHONE)&& (allValues[i] != OSMTagKey.WEBSITE)) {
                    values[j]=allValues[i];
                    j++;
                  }
                }
                final String[] vals=new String[values.length];
                for (int i=0; i < values.length; i++) {
                  vals[i]=values[i].getValue();
                }
                Builder builder=new AlertDialog.Builder(ctx);
                builder.setItems(vals,new Dialog.OnClickListener(){
                  @Override public void onClick(                  DialogInterface dialog,                  int which){
                    tag.setText(vals[which]);
                    tag.invalidate();
                  }
                }
);
                builder.create();
                builder.show();
              }
            }
);
            tlp=new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT,TableRow.LayoutParams.FILL_PARENT);
            tlp.leftMargin=5;
            tlp.rightMargin=5;
            tlp.width=80;
            value.setLayoutParams(tlp);
            value.setHint("Value");
            value.addTextChangedListener(new TextWatcher(){
              @Override public void afterTextChanged(              Editable s){
                if ((newTagRow != null) && (tag != null) && (value != null)&& (tag.getText() != null)&& (value.getText() != null)&& (!tag.getText().equals(""))&& (!value.getText().equals(""))) {
                  System.out.println(tag.getText());
                  additionalTags.put(tag.getText().toString(),value.getText().toString());
                }
              }
              @Override public void beforeTextChanged(              CharSequence s,              int start,              int count,              int after){
              }
              @Override public void onTextChanged(              CharSequence s,              int start,              int before,              int count){
              }
            }
);
            tlp=new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT,TableRow.LayoutParams.WRAP_CONTENT);
            tlp.gravity=Gravity.CENTER;
            tlp.rightMargin=5;
            delete.setLayoutParams(tlp);
            delete.setText("X");
            delete.setOnClickListener(new View.OnClickListener(){
              @Override public void onClick(              View v){
                layout.removeView(newTagRow);
                layout.invalidate();
                additionalTags.remove(tag.getText().toString());
              }
            }
);
            newTagRow.addView(tag);
            newTagRow.addView(value);
            newTagRow.addView(delete);
            layout.addView(newTagRow);
            layout.invalidate();
          }
        }
);
      }
      v.invalidate();
    }
  }
);
  ((Button)dlg.findViewById(R.id.Cancel)).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ctx.removeDialog(dialogID);
    }
  }
);
  ((Button)dlg.findViewById(R.id.Commit)).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      final Amenity a=(Amenity)args.getSerializable(KEY_AMENITY);
      final Node n=(Node)args.getSerializable(KEY_AMENITY_NODE);
      Resources resources=v.getResources();
      final String msg=n.getId() == -1 ? resources.getString(R.string.poi_action_add) : resources.getString(R.string.poi_action_change);
      OsmPoint.Action action=n.getId() == -1 ? OsmPoint.Action.CREATE : OsmPoint.Action.MODIFY;
      Map<AmenityType,Map<String,String>> typeNameToTagVal=MapRenderingTypes.getDefault().getAmenityTypeNameToTagVal();
      AmenityType type=a.getType();
      String tag=type.getDefaultTag();
      String subType=typeText.getText().toString();
      String val=subType;
      if (typeNameToTagVal.containsKey(type)) {
        Map<String,String> map=typeNameToTagVal.get(type);
        if (map.containsKey(subType)) {
          String res=map.get(subType);
          if (res != null) {
            int i=res.indexOf(' ');
            if (i != -1) {
              tag=res.substring(0,i);
              val=res.substring(i + 1);
            }
 else {
              tag=res;
            }
          }
        }
      }
      n.putTag(tag,val);
      String name=nameText.getText().toString();
      if (name.length() > 0) {
        n.putTag(OSMTagKey.NAME.getValue(),name);
      }
      if (openingHours.getText().toString().length() == 0) {
        n.removeTag(OSMTagKey.OPENING_HOURS.getValue());
      }
 else {
        n.putTag(OSMTagKey.OPENING_HOURS.getValue(),openingHours.getText().toString());
      }
      String website=websiteText.getText().toString();
      if (website.length() > 0) {
        n.putTag(OSMTagKey.WEBSITE.getValue(),website);
      }
      String phone=phoneText.getText().toString();
      if (phone.length() > 0) {
        n.putTag(OSMTagKey.PHONE.getValue(),phone);
      }
      if ((additionalTags != null) && (!additionalTags.isEmpty())) {
        for (        String tk : additionalTags.keySet()) {
          n.putTag(tk,additionalTags.get(tk));
        }
      }
      commitNode(action,n,openstreetmapUtil.getEntityInfo(),commentText.getText().toString(),new Runnable(){
        @Override public void run(){
          AccessibleToast.makeText(ctx,MessageFormat.format(ctx.getResources().getString(R.string.poi_action_succeded_template),msg),Toast.LENGTH_LONG).show();
          if (ctx.getMapView() != null) {
            ctx.getMapView().refreshMap(true);
          }
          ctx.removeDialog(dialogID);
        }
      }
);
    }
  }
);
  return dlg;
}
