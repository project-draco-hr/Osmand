{
  final TableRow newTagRow=new TableRow(ctx);
  TableRow.LayoutParams tlp=new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT,TableRow.LayoutParams.WRAP_CONTENT);
  tlp.leftMargin=5;
  newTagRow.setLayoutParams(tlp);
  final AutoCompleteTextView tag=new AutoCompleteTextView(ctx);
  final AutoCompleteTextView value=new AutoCompleteTextView(ctx);
  final Button delete=new Button(ctx);
  tag.setLayoutParams(tlp);
  if (tg != null) {
    tag.setText(tg);
  }
 else {
    tag.setHint("Tag");
  }
  final Set<String> tagKeys=new TreeSet<String>();
  for (  OSMTagKey t : OSMTagKey.values()) {
    if ((t != OSMTagKey.NAME) && (t != OSMTagKey.OPENING_HOURS) && (t != OSMTagKey.PHONE)&& (t != OSMTagKey.WEBSITE)) {
      tagKeys.add(t.getValue());
    }
  }
  ArrayAdapter<Object> adapter=new ArrayAdapter<Object>(ctx,R.layout.list_textview,tagKeys.toArray());
  tag.setAdapter(adapter);
  tag.setThreshold(1);
  tag.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Builder builder=new AlertDialog.Builder(ctx);
      final String[] tags=tagKeys.toArray(new String[tagKeys.size()]);
      builder.setItems(tags,new Dialog.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          tag.setText(tags[which]);
        }
      }
);
      builder.create();
      builder.show();
    }
  }
);
  tlp=new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT,TableRow.LayoutParams.FILL_PARENT);
  tlp.leftMargin=5;
  tlp.rightMargin=5;
  tlp.width=80;
  value.setLayoutParams(tlp);
  if (vl != null) {
    value.setText(vl);
  }
 else {
    value.setHint("Value");
  }
  Set<String> subCategories=MapRenderingTypes.getDefault().getAmenityNameToType().keySet();
  ArrayAdapter<Object> valueAdapter=new ArrayAdapter<Object>(ctx,R.layout.list_textview,subCategories.toArray());
  value.setThreshold(1);
  value.setAdapter(valueAdapter);
  value.addTextChangedListener(new TextWatcher(){
    @Override public void afterTextChanged(    Editable s){
      if ((newTagRow != null) && (tag != null) && (value != null)&& (tag.getText() != null)&& (value.getText() != null)&& (!tag.getText().equals(""))&& (!value.getText().equals(""))) {
        n.putTag(tag.getText().toString(),value.getText().toString());
      }
    }
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
  }
);
  tlp=new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT,TableRow.LayoutParams.WRAP_CONTENT);
  tlp.gravity=Gravity.CENTER;
  tlp.rightMargin=5;
  delete.setLayoutParams(tlp);
  delete.setText("X");
  delete.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      layout.removeView(newTagRow);
      layout.invalidate();
      n.removeTag(tag.getText().toString());
    }
  }
);
  newTagRow.addView(tag);
  newTagRow.addView(value);
  newTagRow.addView(delete);
  layout.addView(newTagRow);
  layout.invalidate();
}
