{
  SearchToken newToken=null;
  if (searchObjects.size() > 0) {
    Collections.sort(searchObjects,new Comparator<SearchObject>(){
      @Override public int compare(      SearchObject lhs,      SearchObject rhs){
        int res=Double.compare(lhs.getPriority(),rhs.getPriority());
        if (res == 0 && lhs.isSortByName() && rhs.isSortByName()) {
          return lhs.getName(lang).compareToIgnoreCase(rhs.getName(lang));
        }
 else {
          return res;
        }
      }
    }
);
    Iterator<SearchObject> it=searchObjects.iterator();
    while (it.hasNext()) {
      SearchObject searchObject=it.next();
      boolean accept;
switch (searchObject.getType()) {
case POI:
        accept=poiByNameCounter < resultLimitPoiByName;
      if (accept) {
        poiByNameCounter++;
      }
    break;
case CITY:
case VILLAGE:
case POSTCODE:
  accept=cityByNameCounter < resultLimitCityByName;
if (accept) {
  cityByNameCounter++;
}
break;
case STREET:
accept=streetByNameCounter < resultLimitStreetByName;
if (accept) {
streetByNameCounter++;
}
default :
accept=true;
break;
}
if (!accept) {
it.remove();
}
}
if (token.getType() == SearchToken.TokenType.NAME_FILTER && !token.hasEmptyQuery()) {
boolean suggeston=token == searchString.getLastToken();
newToken=new ObjectSearchToken(token,searchObjects.get(0),suggeston);
searchString.replaceToken(token,newToken);
}
}
return newToken;
}
