{
  View mainView=getView();
  List<AudioVideoNotesPlugin.Recording> notes=new ArrayList<AudioVideoNotesPlugin.Recording>(plugin.getAllRecordings());
  if (notes.size() == 0) {
    (mainView.findViewById(R.id.main_notes)).setVisibility(View.GONE);
    return;
  }
 else {
    (mainView.findViewById(R.id.main_notes)).setVisibility(View.VISIBLE);
  }
  LinearLayout notesLayout=(LinearLayout)mainView.findViewById(R.id.notes);
  notesLayout.removeAllViews();
  if (notes.size() > 3) {
    while (notes.size() != 3) {
      notes.remove(3);
    }
  }
  for (  final AudioVideoNotesPlugin.Recording recording : notes) {
    LayoutInflater inflater=getActivity().getLayoutInflater();
    View view=inflater.inflate(R.layout.dash_note_item,null,false);
    ((TextView)view.findViewById(R.id.name)).setText(recording.name);
    ((TextView)view.findViewById(R.id.descr)).setText(recording.getDescription(getActivity()));
    ImageView icon=(ImageView)view.findViewById(R.id.icon);
    if (recording.isAudio()) {
      icon.setImageResource(R.drawable.ic_type_audio);
    }
 else     if (recording.isVideo()) {
      icon.setImageResource(R.drawable.ic_type_video);
    }
 else {
      icon.setImageResource(R.drawable.ic_type_img);
    }
    view.findViewById(R.id.play).setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        plugin.playRecording(getActivity(),recording);
      }
    }
);
    int height=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,50,getResources().getDisplayMetrics());
    LinearLayout.LayoutParams lp=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,height);
    view.setLayoutParams(lp);
    notesLayout.addView(view);
  }
}
