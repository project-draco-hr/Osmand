{
  final Descriptor type=builder.getDescriptorForType();
  if (type.getOptions().getMessageSetWireFormat() && tag == WireFormat.MESSAGE_SET_ITEM_TAG) {
    mergeMessageSetExtensionFromCodedStream(input,unknownFields,extensionRegistry,builder);
    return true;
  }
  final int wireType=WireFormat.getTagWireType(tag);
  final int fieldNumber=WireFormat.getTagFieldNumber(tag);
  final FieldDescriptor field;
  Message defaultInstance=null;
  if (type.isExtensionNumber(fieldNumber)) {
    if (extensionRegistry instanceof ExtensionRegistry) {
      final ExtensionRegistry.ExtensionInfo extension=((ExtensionRegistry)extensionRegistry).findExtensionByNumber(type,fieldNumber);
      if (extension == null) {
        field=null;
      }
 else {
        field=extension.descriptor;
        defaultInstance=extension.defaultInstance;
        if (defaultInstance == null && field.getJavaType() == FieldDescriptor.JavaType.MESSAGE) {
          throw new IllegalStateException("Message-typed extension lacked default instance: " + field.getFullName());
        }
      }
    }
 else {
      field=null;
    }
  }
 else {
    field=type.findFieldByNumber(fieldNumber);
  }
  boolean unknown=false;
  boolean packed=false;
  if (field == null) {
    unknown=true;
  }
 else   if (wireType == FieldSet.getWireFormatForFieldType(field.getLiteType(),false)) {
    packed=false;
  }
 else   if (field.isPackable() && wireType == FieldSet.getWireFormatForFieldType(field.getLiteType(),true)) {
    packed=true;
  }
 else {
    unknown=true;
  }
  if (unknown) {
    return unknownFields.mergeFieldFrom(tag,input);
  }
  if (packed) {
    final int length=input.readRawVarint32();
    final int limit=input.pushLimit(length);
    if (field.getLiteType() == WireFormat.FieldType.ENUM) {
      while (input.getBytesUntilLimit() > 0) {
        final int rawValue=input.readEnum();
        final Object value=field.getEnumType().findValueByNumber(rawValue);
        if (value == null) {
          return true;
        }
        builder.addRepeatedField(field,value);
      }
    }
 else {
      while (input.getBytesUntilLimit() > 0) {
        final Object value=FieldSet.readPrimitiveField(input,field.getLiteType());
        builder.addRepeatedField(field,value);
      }
    }
    input.popLimit(limit);
  }
 else {
    final Object value;
switch (field.getType()) {
case GROUP:
{
        final Message.Builder subBuilder;
        if (defaultInstance != null) {
          subBuilder=defaultInstance.newBuilderForType();
        }
 else {
          subBuilder=builder.newBuilderForField(field);
        }
        if (!field.isRepeated()) {
          subBuilder.mergeFrom((Message)builder.getField(field));
        }
        input.readGroup(field.getNumber(),subBuilder,extensionRegistry);
        value=subBuilder.build();
        break;
      }
case MESSAGE:
{
      final Message.Builder subBuilder;
      if (defaultInstance != null) {
        subBuilder=defaultInstance.newBuilderForType();
      }
 else {
        subBuilder=builder.newBuilderForField(field);
      }
      if (!field.isRepeated()) {
        subBuilder.mergeFrom((Message)builder.getField(field));
      }
      input.readMessage(subBuilder,extensionRegistry);
      value=subBuilder.build();
      break;
    }
case ENUM:
  final int rawValue=input.readEnum();
value=field.getEnumType().findValueByNumber(rawValue);
if (value == null) {
unknownFields.mergeVarintField(fieldNumber,rawValue);
return true;
}
break;
default :
value=FieldSet.readPrimitiveField(input,field.getLiteType());
break;
}
if (field.isRepeated()) {
builder.addRepeatedField(field,value);
}
 else {
builder.setField(field,value);
}
}
return true;
}
