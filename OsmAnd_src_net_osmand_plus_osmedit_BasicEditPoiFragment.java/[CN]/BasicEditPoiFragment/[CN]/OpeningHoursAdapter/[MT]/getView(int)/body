{
  final View view=LayoutInflater.from(linearLayout.getContext()).inflate(R.layout.open_time_list_item,null,false);
  ImageView clockIconImageView=(ImageView)view.findViewById(R.id.clockIconImageView);
  clockIconImageView.setImageDrawable(clockDrawable);
  TextView daysTextView=(TextView)view.findViewById(R.id.daysTextView);
  LinearLayout timeListContainer=(LinearLayout)view.findViewById(R.id.timeListContainer);
  ImageButton deleteItemImageButton=(ImageButton)view.findViewById(R.id.deleteItemImageButton);
  Button addTimeSpanButton=(Button)view.findViewById(R.id.addTimeSpanButton);
  if (openingHours.getRules().get(position) instanceof BasicOpeningHourRule) {
    final OpeningHoursParser.BasicOpeningHourRule rule=(BasicOpeningHourRule)openingHours.getRules().get(position);
    StringBuilder stringBuilder=new StringBuilder();
    rule.appendDaysString(stringBuilder);
    daysTextView.setText(stringBuilder.toString());
    daysTextView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        OpeningHoursDaysDialogFragment fragment=OpeningHoursDaysDialogFragment.createInstance(rule,position);
        fragment.show(getChildFragmentManager(),"OpenTimeDialogFragment");
      }
    }
);
    final TIntArrayList startTimes=rule.getStartTimes();
    final TIntArrayList endTimes=rule.getEndTimes();
    for (int i=0; i < startTimes.size(); i++) {
      View timeFromToLayout=LayoutInflater.from(linearLayout.getContext()).inflate(R.layout.time_from_to_layout,timeListContainer,false);
      TextView openingTextView=(TextView)timeFromToLayout.findViewById(R.id.openingTextView);
      openingTextView.setText(Algorithms.formatMinutesDuration(startTimes.get(i)));
      TextView closingTextView=(TextView)timeFromToLayout.findViewById(R.id.closingTextView);
      closingTextView.setText(Algorithms.formatMinutesDuration(endTimes.get(i)));
      openingTextView.setTag(i);
      openingTextView.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          int index=(int)v.getTag();
          OpeningHoursHoursDialogFragment.createInstance(rule,position,true,index).show(getChildFragmentManager(),"OpeningHoursHoursDialogFragment");
        }
      }
);
      closingTextView.setTag(i);
      closingTextView.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          int index=(int)v.getTag();
          OpeningHoursHoursDialogFragment.createInstance(rule,position,false,index).show(getChildFragmentManager(),"OpeningHoursHoursDialogFragment");
        }
      }
);
      ImageButton deleteTimespanImageButton=(ImageButton)timeFromToLayout.findViewById(R.id.deleteTimespanImageButton);
      deleteTimespanImageButton.setImageDrawable(deleteDrawable);
      final int timespanPosition=i;
      deleteTimespanImageButton.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          if (startTimes.size() == 1) {
            openingHours.getRules().remove(position);
            updateViews();
          }
 else {
            rule.deleteTimeRange(timespanPosition);
            updateViews();
          }
        }
      }
);
      timeListContainer.addView(timeFromToLayout);
    }
    deleteItemImageButton.setVisibility(View.GONE);
    addTimeSpanButton.setVisibility(View.VISIBLE);
    addTimeSpanButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        OpeningHoursHoursDialogFragment.createInstance(rule,position,true,startTimes.size()).show(getChildFragmentManager(),"TimePickerDialogFragment");
      }
    }
);
  }
 else   if (openingHours.getRules().get(position) instanceof OpeningHoursParser.UnparseableRule) {
    daysTextView.setText(openingHours.getRules().get(position).toRuleString(false));
    timeListContainer.removeAllViews();
    deleteItemImageButton.setVisibility(View.VISIBLE);
    deleteItemImageButton.setImageDrawable(deleteDrawable);
    deleteItemImageButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        openingHours.getRules().remove(position);
        updateViews();
      }
    }
);
    addTimeSpanButton.setVisibility(View.GONE);
  }
  return view;
}
