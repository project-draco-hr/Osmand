{
  try {
    uploadCredentials.connect();
    File[] listFiles=directory.listFiles();
    for (    File f : listFiles) {
      try {
        if (!fileFilter.fileCanBeUploaded(f)) {
          continue;
        }
        long timestampCreated=f.lastModified();
        if (!uploadCredentials.checkIfUploadNeededByTimestamp(f.getName(),timestampCreated)) {
          log.info("File skipped because timestamp was not changed " + f.getName());
          continue;
        }
        log.info("Process file " + f.getName());
        File unzipped=unzip(f);
        boolean skip=false;
        File logFile=new File(f.getParentFile(),unzipped.getName() + IndexBatchCreator.GEN_LOG_EXT);
        try {
          String description=checkfileAndGetDescription(unzipped);
          if (description == null) {
            log.info("Skip file " + f.getName());
            skip=true;
          }
 else {
            List<File> files=new ArrayList<File>();
            files.add(unzipped);
            if (logFile.exists()) {
              files.add(logFile);
            }
            File zFile=new File(f.getParentFile(),unzipped.getName() + ".zip");
            zip(files,zFile,description,timestampCreated);
            uploadIndex(f,zFile,description,uploadCredentials);
          }
        }
  finally {
          if (!skip) {
            if (!f.getName().equals(unzipped.getName()) || (targetDirectory != null && !targetDirectory.equals(directory))) {
              unzipped.delete();
            }
            if (logFile.exists()) {
              logFile.delete();
            }
          }
        }
      }
 catch (      OneFileException e) {
        log.error(f.getName() + ": " + e.getMessage(),e);
      }
catch (      RuntimeException e) {
        log.error(f.getName() + ": " + e.getMessage(),e);
      }
    }
    if (deleteFileFilter != null) {
      if (uploadCredentials instanceof UploadToGoogleCodeCredentials) {
        log.info("About to delete files from googlecode");
        Map<String,String> files=DownloaderIndexFromGoogleCode.getIndexFiles(new LinkedHashMap<String,String>());
        for (        String f : files.keySet()) {
          if (deleteFileFilter.patternMatches(f)) {
            log.info("About to delete " + f);
            try {
              DownloaderIndexFromGoogleCode.deleteFileFromGoogleDownloads(f,((UploadToGoogleCodeCredentials)uploadCredentials).ggtokens);
            }
 catch (            IOException e) {
              throw new IndexUploadException("Delete " + f + " was failed",e);
            }
          }
        }
      }
 else {
        log.error("Delete file filter is not supported with this credentions (method) " + uploadCredentials);
      }
    }
  }
  finally {
    uploadCredentials.disconnect();
  }
}
