{
  log.info("Uploading file " + f.getName() + " "+ size+ " MB "+ date+ " of "+ description);
  JSch jSch=new JSch();
  boolean knownHosts=false;
  if (cred.knownHosts != null) {
    jSch.setKnownHosts(cred.knownHosts);
    knownHosts=true;
  }
  if (cred.privateKey != null) {
    jSch.addIdentity(cred.privateKey);
  }
  String serverName=cred.url;
  if (serverName.startsWith("ssh://")) {
    serverName=serverName.substring("ssh://".length());
  }
  Session session=jSch.getSession(cred.user,serverName);
  if (cred.password != null) {
    session.setPassword(cred.password);
  }
  if (!knownHosts) {
    java.util.Properties config=new java.util.Properties();
    config.put("StrictHostKeyChecking","no");
    session.setConfig(config);
  }
  String rfile=cred.path + "/" + f.getName();
  String lfile=f.getAbsolutePath();
  session.connect();
  String command="scp -p -t " + rfile;
  Channel channel=session.openChannel("exec");
  ((ChannelExec)channel).setCommand(command);
  OutputStream out=channel.getOutputStream();
  InputStream in=channel.getInputStream();
  channel.connect();
  if (checkAck(in) != 0) {
    channel.disconnect();
    session.disconnect();
    return;
  }
  long filesize=(new File(lfile)).length();
  command="C0644 " + filesize + " ";
  if (lfile.lastIndexOf('/') > 0) {
    command+=lfile.substring(lfile.lastIndexOf('/') + 1);
  }
 else {
    command+=lfile;
  }
  command+="\n";
  out.write(command.getBytes());
  out.flush();
  if (checkAck(in) != 0) {
    channel.disconnect();
    session.disconnect();
    return;
  }
  FileInputStream fis=new FileInputStream(lfile);
  byte[] buf=new byte[1024];
  try {
    int len;
    while ((len=fis.read(buf,0,buf.length)) > 0) {
      out.write(buf,0,len);
    }
  }
  finally {
    fis.close();
  }
  fis=null;
  buf[0]=0;
  out.write(buf,0,1);
  out.flush();
  if (checkAck(in) != 0) {
    channel.disconnect();
    session.disconnect();
    return;
  }
  out.close();
  channel.disconnect();
  session.disconnect();
  log.info("Finish uploading file index");
}
