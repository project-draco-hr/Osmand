{
  handler.removeMessages(1);
  long time=System.currentTimeMillis();
  boolean useInternet=getSettings().USE_INTERNET_TO_DOWNLOAD_TILES.get();
  if (useInternet) {
    MapTileDownloader.getInstance().refuseAllPreviousRequests();
  }
  SurfaceHolder holder=getHolder();
synchronized (holder) {
    int nzoom=getZoom();
    float tileX=(float)MapUtils.getTileNumberX(nzoom,longitude);
    float tileY=(float)MapUtils.getTileNumberY(nzoom,latitude);
    float w=getCenterPointX();
    float h=getCenterPointY();
    Canvas canvas=holder.lockCanvas();
    if (canvas != null) {
      boolean nightMode=false;
      log.info("Canvas " + (System.currentTimeMillis() - time));
      if (application != null) {
        Boolean dayNightRenderer=application.getDaynightHelper().getDayNightRenderer();
        if (dayNightRenderer != null) {
          nightMode=!dayNightRenderer.booleanValue();
        }
      }
      try {
        boundsRect.set(0,0,getWidth(),getHeight());
        calculateTileRectangle(boundsRect,w,h,tileX,tileY,tilesRect);
        int left=(int)FloatMath.floor(tilesRect.left);
        int top=(int)FloatMath.floor(tilesRect.top);
        latlonRect.top=(float)MapUtils.getLatitudeFromTile(nzoom,tilesRect.top);
        latlonRect.left=(float)MapUtils.getLongitudeFromTile(nzoom,tilesRect.left);
        latlonRect.bottom=(float)MapUtils.getLatitudeFromTile(nzoom,tilesRect.bottom);
        latlonRect.right=(float)MapUtils.getLongitudeFromTile(nzoom,tilesRect.right);
        log.info("Calc" + (System.currentTimeMillis() - time));
        if (nightMode) {
          canvas.drawARGB(255,220,220,220);
        }
 else {
          canvas.drawARGB(255,240,240,240);
        }
        log.info("Draw before layers" + (System.currentTimeMillis() - time));
        drawOverMap(canvas,latlonRect,tilesRect,nightMode);
        log.info("Draw with layers " + (System.currentTimeMillis() - time));
      }
  finally {
        holder.unlockCanvasAndPost(canvas);
      }
    }
  }
}
