{
  if (handler.hasMessages(1)) {
    return;
  }
  boolean useInternet=getSettings().USE_INTERNET_TO_DOWNLOAD_TILES.get();
  if (useInternet) {
    MapTileDownloader.getInstance().refuseAllPreviousRequests();
  }
  float ftileSize=getTileSize();
  SurfaceHolder holder=getHolder();
synchronized (holder) {
    int nzoom=getZoom();
    float tileX=(float)MapUtils.getTileNumberX(nzoom,longitude);
    float tileY=(float)MapUtils.getTileNumberY(nzoom,latitude);
    float w=getCenterPointX();
    float h=getCenterPointY();
    Canvas canvas=holder.lockCanvas();
    if (canvas != null) {
      canvas.save();
      boolean nightMode=false;
      if (application != null) {
        Boolean dayNightRenderer=application.getDaynightHelper().getDayNightRenderer();
        if (dayNightRenderer != null) {
          nightMode=!dayNightRenderer.booleanValue();
        }
      }
      try {
        boundsRect.set(0,0,getWidth(),getHeight());
        calculateTileRectangle(boundsRect,w,h,tileX,tileY,tilesRect);
        int left=(int)FloatMath.floor(tilesRect.left);
        int top=(int)FloatMath.floor(tilesRect.top);
        int width=(int)FloatMath.ceil(tilesRect.right - left);
        int height=(int)FloatMath.ceil(tilesRect.bottom - top);
        latlonRect.top=(float)MapUtils.getLatitudeFromTile(nzoom,tilesRect.top);
        latlonRect.left=(float)MapUtils.getLongitudeFromTile(nzoom,tilesRect.left);
        latlonRect.bottom=(float)MapUtils.getLatitudeFromTile(nzoom,tilesRect.bottom);
        latlonRect.right=(float)MapUtils.getLongitudeFromTile(nzoom,tilesRect.right);
        for (int i=0; i < width; i++) {
          for (int j=0; j < height; j++) {
            float x1=(i + left - tileX) * ftileSize + w;
            float y1=(j + top - tileY) * ftileSize + h;
            drawEmptyTile(canvas,x1,y1,ftileSize,nightMode);
          }
        }
        drawOverMap(canvas,latlonRect,tilesRect,nightMode);
      }
  finally {
        holder.unlockCanvasAndPost(canvas);
      }
    }
  }
}
