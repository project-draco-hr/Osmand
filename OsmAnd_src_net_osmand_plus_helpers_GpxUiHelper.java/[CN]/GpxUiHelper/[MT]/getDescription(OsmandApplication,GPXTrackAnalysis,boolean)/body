{
  StringBuilder description=new StringBuilder();
  String nl=html ? "<br/>" : "\n";
  String timeSpanClr=Algorithms.colorToString(app.getResources().getColor(R.color.gpx_time_span_color));
  String distanceClr=Algorithms.colorToString(app.getResources().getColor(R.color.gpx_distance_color));
  String speedClr=Algorithms.colorToString(app.getResources().getColor(R.color.gpx_speed));
  String ascClr=Algorithms.colorToString(app.getResources().getColor(R.color.gpx_altitude_asc));
  String descClr=Algorithms.colorToString(app.getResources().getColor(R.color.gpx_altitude_desc));
  description.append(app.getString(R.string.gpx_info_distance,getColorValue(distanceClr,OsmAndFormatter.getFormattedDistance(analysis.totalDistance,app),html),getColorValue(distanceClr,analysis.points + "",html)));
  if (analysis.totalTracks > 1) {
    description.append(nl).append(app.getString(R.string.gpx_info_subtracks,getColorValue(speedClr,analysis.totalTracks + "",html)));
  }
  if (analysis.wptPoints > 0) {
    description.append(nl).append(app.getString(R.string.gpx_info_waypoints,getColorValue(speedClr,analysis.wptPoints + "",html)));
  }
  if (analysis.isTimeSpecified()) {
    description.append(nl).append(app.getString(R.string.gpx_info_start_time,analysis.startTime));
    description.append(nl).append(app.getString(R.string.gpx_info_end_time,analysis.endTime));
  }
  if (analysis.timeSpan > 0 && analysis.timeSpan / 1000 != analysis.timeMoving / 1000) {
    final String formatDuration=Algorithms.formatDuration((int)(analysis.timeSpan / 1000));
    description.append(nl).append(app.getString(R.string.gpx_timespan,getColorValue(timeSpanClr,formatDuration,html)));
  }
  if (analysis.isTimeMoving()) {
    final String formatDuration=Algorithms.formatDuration((int)(analysis.timeMoving / 1000));
    description.append(nl).append(app.getString(R.string.gpx_timemoving,getColorValue(timeSpanClr,formatDuration,html)));
  }
  if (analysis.isElevationSpecified()) {
    description.append("<br/>");
    description.append(app.getString(R.string.gpx_info_avg_altitude,getColorValue(speedClr,OsmAndFormatter.getFormattedAlt(analysis.avgElevation,app),html)));
    description.append("<br/>");
    String min=getColorValue(descClr,OsmAndFormatter.getFormattedAlt(analysis.minElevation,app),html);
    String max=getColorValue(ascClr,OsmAndFormatter.getFormattedAlt(analysis.maxElevation,app),html);
    String asc=getColorValue(ascClr,OsmAndFormatter.getFormattedAlt(analysis.diffElevationUp,app),html);
    String desc=getColorValue(descClr,OsmAndFormatter.getFormattedAlt(analysis.diffElevationDown,app),html);
    description.append(app.getString(R.string.gpx_info_diff_altitude,min + " - " + max));
    description.append("<br/>");
    description.append(app.getString(R.string.gpx_info_asc_altitude,"\u2193 " + desc + "   \u2191 "+ asc+ ""));
  }
  if (analysis.isSpeedSpecified()) {
    String avg=getColorValue(speedClr,OsmAndFormatter.getFormattedSpeed(analysis.avgSpeed,app),html);
    String max=getColorValue(ascClr,OsmAndFormatter.getFormattedSpeed(analysis.maxSpeed,app),html);
    description.append("<br/>").append(app.getString(R.string.gpx_info_average_speed,avg));
    description.append("<br/>").append(app.getString(R.string.gpx_info_maximum_speed,max));
  }
  return description.toString();
}
