{
  final OsmandApplication app=(OsmandApplication)activity.getApplication();
  final File dir=app.getAppPath(IndexConstants.GPX_INDEX_DIR);
  AlertDialog.Builder builder=new AlertDialog.Builder(activity);
  final boolean light=app.getSettings().isLightContent();
  final int layout=R.layout.list_menu_item_native;
  final ArrayAdapter<String> listAdapter=new ArrayAdapter<String>(activity,layout,R.id.title,adapter.getItemNames()){
    @Override public View getView(    final int position,    View convertView,    ViewGroup parent){
      View v=convertView;
      if (v == null) {
        v=activity.getLayoutInflater().inflate(layout,null);
      }
      ImageView icon=(ImageView)v.findViewById(R.id.icon);
      icon.setImageDrawable(adapter.getImage(app,position,light));
      final ArrayAdapter<String> arrayAdapter=this;
      icon.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          if (showCurrentGpx && position == 0) {
            return;
          }
          int nline=adapter.getItemName(position).indexOf('\n');
          if (nline == -1) {
            setDescripionInDialog(arrayAdapter,adapter,activity,dir,list.get(position),position);
          }
 else {
            adapter.setItemName(position,adapter.getItemName(position).substring(0,nline));
            arrayAdapter.notifyDataSetInvalidated();
          }
        }
      }
);
      if (showCurrentGpx && position == 0) {
        icon.setVisibility(View.INVISIBLE);
      }
 else {
        icon.setVisibility(View.VISIBLE);
      }
      TextView tv=(TextView)v.findViewById(R.id.title);
      tv.setText(adapter.getItemName(position));
      tv.setTextSize(TypedValue.COMPLEX_UNIT_SP,16);
      final CheckBox ch=((CheckBox)v.findViewById(R.id.check_item));
      if (adapter.getSelection(position) == -1) {
        ch.setVisibility(View.INVISIBLE);
      }
 else {
        ch.setOnCheckedChangeListener(null);
        ch.setChecked(adapter.getSelection(position) > 0);
        ch.setOnCheckedChangeListener(new OnCheckedChangeListener(){
          @Override public void onCheckedChanged(          CompoundButton buttonView,          boolean isChecked){
            adapter.setSelection(position,isChecked ? 1 : 0);
          }
        }
);
      }
      return v;
    }
  }
;
  OnClickListener onClickListener=new OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int position){
    }
  }
;
  builder.setAdapter(listAdapter,onClickListener);
  if (multipleChoice) {
    builder.setTitle(R.string.show_gpx).setPositiveButton(R.string.shared_string_ok,new OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        GPXFile currentGPX=null;
        OsmandApplication app=(OsmandApplication)activity.getApplication();
        if (app != null && app.getSelectedGpxHelper() != null) {
          app.getSelectedGpxHelper().clearAllGpxFileToShow();
        }
        if (showCurrentGpx && adapter.getSelection(0) > 0) {
          currentGPX=app.getSavingTrackHelper().getCurrentGpx();
        }
        List<String> s=new ArrayList<>();
        for (int i=(showCurrentGpx ? 1 : 0); i < adapter.length(); i++) {
          if (adapter.getSelection(i) > 0) {
            s.add(list.get(i));
          }
        }
        dialog.dismiss();
        loadGPXFileInDifferentThread(activity,callbackWithObject,dir,currentGPX,s.toArray(new String[s.size()]));
      }
    }
).setNegativeButton(R.string.shared_string_cancel,null);
  }
  final AlertDialog dlg=builder.create();
  dlg.setCanceledOnTouchOutside(true);
  dlg.getListView().setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      if (multipleChoice) {
        adapter.setSelection(position,adapter.getSelection(position) > 0 ? 0 : 1);
        listAdapter.notifyDataSetInvalidated();
      }
 else {
        dlg.dismiss();
        if (showCurrentGpx && position == 0) {
          callbackWithObject.processResult(null);
        }
 else {
          String fileName=list.get(position);
          SelectedGpxFile selectedGpxFile=app.getSelectedGpxHelper().getSelectedFileByName(fileName);
          if (selectedGpxFile != null) {
            callbackWithObject.processResult(new GPXFile[]{selectedGpxFile.getGpxFile()});
          }
 else {
            loadGPXFileInDifferentThread(activity,callbackWithObject,dir,null,fileName);
          }
        }
      }
    }
  }
);
  dlg.show();
  try {
    dlg.getListView().setFastScrollEnabled(true);
  }
 catch (  Exception e) {
  }
  return dlg;
}
