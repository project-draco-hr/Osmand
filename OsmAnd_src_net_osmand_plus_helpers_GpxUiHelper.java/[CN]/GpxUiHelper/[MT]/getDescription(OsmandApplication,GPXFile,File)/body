{
  StringBuilder description=new StringBuilder();
  float totalDistance=0;
  int totalTracks=0;
  long startTime=Long.MAX_VALUE;
  long endTime=Long.MIN_VALUE;
  long timeSpan=0;
  long timeMoving=0;
  float totalDistanceMoving=0;
  double diffElevationUp=0;
  double diffElevationDown=0;
  double totalElevation=0;
  double minElevation=99999;
  double maxElevation=0;
  float maxSpeed=0;
  int speedCount=0;
  double totalSpeedSum=0;
  float[] calculations=new float[1];
  int points=0;
  for (int i=0; i < result.tracks.size(); i++) {
    Track subtrack=result.tracks.get(i);
    for (    TrkSegment segment : subtrack.segments) {
      totalTracks++;
      points+=segment.points.size();
      for (int j=0; j < segment.points.size(); j++) {
        WptPt point=segment.points.get(j);
        long time=point.time;
        if (time != 0) {
          startTime=Math.min(startTime,time);
          endTime=Math.max(startTime,time);
        }
        double elevation=point.ele;
        if (!Double.isNaN(elevation)) {
          totalElevation+=elevation;
          minElevation=Math.min(elevation,minElevation);
          maxElevation=Math.max(elevation,maxElevation);
        }
        float speed=(float)point.speed;
        if (speed > 0) {
          totalSpeedSum+=speed;
          maxSpeed=Math.max(speed,maxSpeed);
          speedCount++;
        }
        if (j > 0) {
          WptPt prev=segment.points.get(j - 1);
          if (!Double.isNaN(point.ele) && !Double.isNaN(prev.ele)) {
            double diff=point.ele - prev.ele;
            if (diff > 0) {
              diffElevationUp+=diff;
            }
 else {
              diffElevationDown-=diff;
            }
          }
          net.osmand.Location.distanceBetween(prev.lat,prev.lon,point.lat,point.lon,calculations);
          totalDistance+=calculations[0];
          if (speed > 0 && point.time != 0 && prev.time != 0) {
            timeMoving=timeMoving + (point.time - prev.time);
            totalDistanceMoving+=calculations[0];
          }
        }
      }
    }
  }
  if (startTime == Long.MAX_VALUE) {
    startTime=f.lastModified();
  }
  if (endTime == Long.MIN_VALUE) {
    endTime=f.lastModified();
  }
  description.append(app.getString(R.string.local_index_gpx_info,totalTracks,points,result.points.size(),OsmAndFormatter.getFormattedDistance(totalDistance,app),startTime,endTime));
  timeSpan=endTime - startTime;
  description.append(app.getString(R.string.local_index_gpx_timespan,(int)((timeSpan / 1000) / 3600),(int)(((timeSpan / 1000) / 60) % 60),(int)((timeSpan / 1000) % 60)));
  if (timeMoving > 0) {
    description.append(app.getString(R.string.local_index_gpx_timemoving,(int)((timeMoving / 1000) / 3600),(int)(((timeMoving / 1000) / 60) % 60),(int)((timeMoving / 1000) % 60)));
  }
  if (totalElevation != 0 || diffElevationUp != 0 || diffElevationDown != 0) {
    description.append(app.getString(R.string.local_index_gpx_info_elevation,OsmAndFormatter.getFormattedAlt(totalElevation / points,app),OsmAndFormatter.getFormattedAlt(minElevation,app),OsmAndFormatter.getFormattedAlt(maxElevation,app),OsmAndFormatter.getFormattedAlt(diffElevationUp,app),OsmAndFormatter.getFormattedAlt(diffElevationDown,app)));
  }
  if (speedCount > 0) {
    if (timeMoving > 0) {
      description.append(app.getString(R.string.local_index_gpx_info_speed,OsmAndFormatter.getFormattedSpeed((float)(totalDistanceMoving / timeMoving * 1000),app),OsmAndFormatter.getFormattedSpeed(maxSpeed,app)));
    }
 else {
      description.append(app.getString(R.string.local_index_gpx_info_speed,OsmAndFormatter.getFormattedSpeed((float)(totalSpeedSum / speedCount),app),OsmAndFormatter.getFormattedSpeed(maxSpeed,app)));
    }
  }
  return description.toString();
}
