{
  if (other == com.google.protobuf.DescriptorProtos.FileOptions.getDefaultInstance())   return this;
  if (other.hasJavaPackage()) {
    bitField0_|=0x00000001;
    javaPackage_=other.javaPackage_;
    onChanged();
  }
  if (other.hasJavaOuterClassname()) {
    bitField0_|=0x00000002;
    javaOuterClassname_=other.javaOuterClassname_;
    onChanged();
  }
  if (other.hasJavaMultipleFiles()) {
    setJavaMultipleFiles(other.getJavaMultipleFiles());
  }
  if (other.hasJavaGenerateEqualsAndHash()) {
    setJavaGenerateEqualsAndHash(other.getJavaGenerateEqualsAndHash());
  }
  if (other.hasOptimizeFor()) {
    setOptimizeFor(other.getOptimizeFor());
  }
  if (other.hasGoPackage()) {
    bitField0_|=0x00000020;
    goPackage_=other.goPackage_;
    onChanged();
  }
  if (other.hasCcGenericServices()) {
    setCcGenericServices(other.getCcGenericServices());
  }
  if (other.hasJavaGenericServices()) {
    setJavaGenericServices(other.getJavaGenericServices());
  }
  if (other.hasPyGenericServices()) {
    setPyGenericServices(other.getPyGenericServices());
  }
  if (uninterpretedOptionBuilder_ == null) {
    if (!other.uninterpretedOption_.isEmpty()) {
      if (uninterpretedOption_.isEmpty()) {
        uninterpretedOption_=other.uninterpretedOption_;
        bitField0_=(bitField0_ & ~0x00000200);
      }
 else {
        ensureUninterpretedOptionIsMutable();
        uninterpretedOption_.addAll(other.uninterpretedOption_);
      }
      onChanged();
    }
  }
 else {
    if (!other.uninterpretedOption_.isEmpty()) {
      if (uninterpretedOptionBuilder_.isEmpty()) {
        uninterpretedOptionBuilder_.dispose();
        uninterpretedOptionBuilder_=null;
        uninterpretedOption_=other.uninterpretedOption_;
        bitField0_=(bitField0_ & ~0x00000200);
        uninterpretedOptionBuilder_=com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ? getUninterpretedOptionFieldBuilder() : null;
      }
 else {
        uninterpretedOptionBuilder_.addAllMessages(other.uninterpretedOption_);
      }
    }
  }
  this.mergeExtensionFields(other);
  this.mergeUnknownFields(other.getUnknownFields());
  return this;
}
