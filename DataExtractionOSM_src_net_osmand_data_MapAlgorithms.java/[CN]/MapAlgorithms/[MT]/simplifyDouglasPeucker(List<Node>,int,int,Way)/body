{
  ArrayList<Integer> l=new ArrayList<Integer>();
  int first=0;
  while (first < n.size()) {
    if (n.get(first) != null) {
      break;
    }
    first++;
  }
  int last=n.size() - 1;
  while (last >= 0) {
    if (n.get(last) != null) {
      break;
    }
    last--;
  }
  if (last - first < 1) {
    return;
  }
  boolean cycle=n.get(first).getId() == n.get(last).getId();
  simplifyDouglasPeucker(n,zoom,epsilon,l,first,cycle ? last - 1 : last);
  w.addNode(n.get(first));
  for (int i=0; i < l.size(); i++) {
    w.addNode(n.get(l.get(i)));
  }
  if (cycle) {
    w.addNode(n.get(first));
  }
}
