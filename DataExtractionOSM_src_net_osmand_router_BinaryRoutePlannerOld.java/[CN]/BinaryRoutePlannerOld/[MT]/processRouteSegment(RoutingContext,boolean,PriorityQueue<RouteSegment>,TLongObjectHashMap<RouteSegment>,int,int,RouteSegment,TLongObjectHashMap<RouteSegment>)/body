{
  final RouteDataObject road=segment.road;
  final int middle=segment.getSegmentStart();
  float obstaclePlusTime=0;
  float obstacleMinusTime=0;
  long nt=(road.getId() << ROUTE_POINTS) + middle;
  visitedSegments.put(nt,null);
  int oneway=ctx.getRouter().isOneWay(road);
  boolean minusAllowed;
  boolean plusAllowed;
  if (ctx.firstRoadId == nt) {
    if (ctx.firstRoadDirection < 0) {
      obstaclePlusTime+=500;
    }
 else     if (ctx.firstRoadDirection > 0) {
      obstacleMinusTime+=500;
    }
  }
  if (!reverseWaySearch) {
    minusAllowed=oneway <= 0;
    plusAllowed=oneway >= 0;
  }
 else {
    minusAllowed=oneway >= 0;
    plusAllowed=oneway <= 0;
  }
  int d=plusAllowed ? 1 : -1;
  if (segment.parentRoute != null) {
    if (plusAllowed && middle < segment.getRoad().getPointsLength() - 1) {
      obstaclePlusTime=(float)ctx.getRouter().calculateTurnTime(segment,segment.getRoad().getPointsLength() - 1,segment.parentRoute,segment.parentSegmentEnd);
    }
    if (minusAllowed && middle > 0) {
      obstacleMinusTime=(float)ctx.getRouter().calculateTurnTime(segment,0,segment.parentRoute,segment.parentSegmentEnd);
    }
  }
  float posSegmentDist=0;
  float negSegmentDist=0;
  while (minusAllowed || plusAllowed) {
    int segmentEnd=middle + d;
    boolean positive=d > 0;
    if (!minusAllowed && d > 0) {
      d++;
    }
 else     if (!plusAllowed && d < 0) {
      d--;
    }
 else {
      if (d <= 0) {
        d=-d + 1;
      }
 else {
        d=-d;
      }
    }
    if (segmentEnd < 0) {
      minusAllowed=false;
      continue;
    }
    if (segmentEnd >= road.getPointsLength()) {
      plusAllowed=false;
      continue;
    }
    long nts=(road.getId() << ROUTE_POINTS) + segmentEnd;
    visitedSegments.put(nts,segment);
    int x=road.getPoint31XTile(segmentEnd);
    int y=road.getPoint31YTile(segmentEnd);
    if (positive) {
      posSegmentDist+=squareRootDist(x,y,road.getPoint31XTile(segmentEnd - 1),road.getPoint31YTile(segmentEnd - 1));
    }
 else {
      negSegmentDist+=squareRootDist(x,y,road.getPoint31XTile(segmentEnd + 1),road.getPoint31YTile(segmentEnd + 1));
    }
    if (positive) {
      double obstacle=ctx.getRouter().defineRoutingObstacle(road,segmentEnd);
      if (obstacle < 0) {
        plusAllowed=false;
        continue;
      }
      obstaclePlusTime+=obstacle;
    }
 else {
      double obstacle=ctx.getRouter().defineRoutingObstacle(road,segmentEnd);
      if (obstacle < 0) {
        minusAllowed=false;
        continue;
      }
      obstacleMinusTime+=obstacle;
    }
    int overhead=(ctx.visitedSegments - ctx.relaxedSegments) * STANDARD_ROAD_IN_QUEUE_OVERHEAD;
    if (overhead > ctx.config.memoryLimitation * 0.95) {
      throw new OutOfMemoryError("There is no enough memory " + ctx.config.memoryLimitation / (1 << 20) + " Mb");
    }
    RouteSegment next=ctx.loadRouteSegment(x,y,ctx.config.memoryLimitation - overhead);
    if (next != null) {
      if ((next == segment || next.road.id == road.id) && next.next == null) {
        continue;
      }
      float priority=ctx.getRouter().defineSpeedPriority(road);
      float speed=ctx.getRouter().defineSpeed(road) * priority;
      if (speed == 0) {
        speed=ctx.getRouter().getMinDefaultSpeed() * priority;
      }
      float distOnRoadToPass=positive ? posSegmentDist : negSegmentDist;
      float distStartObstacles=segment.distanceFromStart + (positive ? obstaclePlusTime : obstacleMinusTime) + distOnRoadToPass / speed;
      float distToFinalPoint=(float)squareRootDist(x,y,targetEndX,targetEndY);
      boolean routeFound=processIntersections(ctx,graphSegments,visitedSegments,oppositeSegments,distStartObstacles,distToFinalPoint,segment,segmentEnd,next,reverseWaySearch);
      if (routeFound) {
        return routeFound;
      }
    }
  }
  return false;
}
