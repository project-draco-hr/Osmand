{
  final boolean newRoute=!prevRoute.isCalculated();
  if (isFollowingMode) {
    if (lastFixedLocation != null) {
      start=lastFixedLocation;
    }
    boolean wrongMovementDirection=false;
    List<Location> routeNodes=res.getImmutableAllLocations();
    if (routeNodes != null && !routeNodes.isEmpty()) {
      int newCurrentRoute=lookAheadFindMinOrthogonalDistance(start,routeNodes,res.currentRoute,15);
      if (newCurrentRoute + 1 < routeNodes.size()) {
        wrongMovementDirection=checkWrongMovementDirection(start,routeNodes.get(newCurrentRoute + 1));
        if (wrongMovementDirection) {
          evalWaitInterval=3000;
        }
 else {
          evalWaitInterval=Math.max(3000,evalWaitInterval * 3 / 2);
          evalWaitInterval=Math.min(evalWaitInterval,120000);
        }
      }
    }
    if (!wrongMovementDirection || newRoute) {
      voiceRouter.newRouteIsCalculated(newRoute);
    }
  }
  app.getWaypointHelper().setNewRoute(res);
  app.runInUIThread(new Runnable(){
    @Override public void run(){
      ValueHolder<Boolean> showToast=new ValueHolder<Boolean>();
      showToast.value=true;
      Iterator<WeakReference<IRouteInformationListener>> it=listeners.iterator();
      while (it.hasNext()) {
        WeakReference<IRouteInformationListener> ref=it.next();
        IRouteInformationListener l=ref.get();
        if (l == null) {
          it.remove();
        }
 else {
          l.newRouteIsCalculated(newRoute,showToast);
        }
      }
      if (showToast.value) {
        String msg=app.getString(R.string.new_route_calculated_dist) + ": " + OsmAndFormatter.getFormattedDistance(res.getWholeDistance(),app);
        if (OsmandPlugin.isDevelopment() && res.getRoutingTime() != 0f) {
          msg+=" (" + Algorithms.formatDuration((int)res.getRoutingTime()) + ")";
        }
        app.showToastMessage(msg);
      }
    }
  }
);
}
