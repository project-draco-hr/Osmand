{
  final OsmandApplication app=(OsmandApplication)activity.getApplication();
  final OsmandSettings settings=app.getSettings();
  final Map<String,String> entriesMap=settings.getTileSourceEntries(false);
  TileSourceTemplate ts=new TileSourceTemplate("NewMapnik","http://mapnik.osmand.net/{0}/{1}/{2}.png","png",17,5,256,16,32000);
  final TileSourceTemplate[] result=new TileSourceTemplate[]{ts};
  AlertDialog.Builder bld=new AlertDialog.Builder(activity);
  View view=activity.getLayoutInflater().inflate(R.layout.editing_tile_source,null);
  final EditText name=(EditText)view.findViewById(R.id.Name);
  final Spinner existing=(Spinner)view.findViewById(R.id.TileSourceSpinner);
  final EditText urlToLoad=(EditText)view.findViewById(R.id.URLToLoad);
  final EditText minZoom=(EditText)view.findViewById(R.id.MinZoom);
  final EditText maxZoom=(EditText)view.findViewById(R.id.MaxZoom);
  final EditText expire=(EditText)view.findViewById(R.id.ExpirationTime);
  final CheckBox elliptic=(CheckBox)view.findViewById(R.id.EllipticMercator);
  updateTileSourceEditView(ts,name,urlToLoad,minZoom,maxZoom,expire,elliptic);
  final ArrayList<String> templates=new ArrayList<>(entriesMap.keySet());
  templates.add(0,"");
  ArrayAdapter<String> adapter=new ArrayAdapter<>(view.getContext(),android.R.layout.simple_spinner_item,templates);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  existing.setAdapter(adapter);
  existing.setSelection(0);
  existing.setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      if (position > 0) {
        File f=((OsmandApplication)activity.getApplication()).getAppPath(IndexConstants.TILES_INDEX_DIR + templates.get(position));
        TileSourceTemplate template=TileSourceManager.createTileSourceTemplate(f);
        if (template != null) {
          result[0]=template.copy();
          updateTileSourceEditView(result[0],name,urlToLoad,minZoom,maxZoom,expire,elliptic);
        }
      }
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  bld.setView(view);
  bld.setPositiveButton(R.string.shared_string_save,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      TileSourceTemplate r=result[0];
      try {
        r.setName(name.getText().toString());
        r.setExpirationTimeMinutes(expire.getText().length() == 0 ? -1 : Integer.parseInt(expire.getText().toString()));
        r.setMinZoom(Integer.parseInt(minZoom.getText().toString()));
        r.setMaxZoom(Integer.parseInt(maxZoom.getText().toString()));
        r.setEllipticYTile(elliptic.isChecked());
        r.setUrlToLoad(urlToLoad.getText().toString().equals("") ? null : urlToLoad.getText().toString().replace("{$x}","{1}").replace("{$y}","{2}").replace("{$z}","{0}"));
        if (r.getName().length() > 0) {
          if (settings.installTileSource(r)) {
            Toast.makeText(activity,activity.getString(R.string.edit_tilesource_successfully,r.getName()),Toast.LENGTH_SHORT).show();
            resultMatcher.publish(r);
          }
        }
      }
 catch (      RuntimeException e) {
        Toast.makeText(activity,e.getMessage(),Toast.LENGTH_SHORT).show();
      }
    }
  }
);
  bld.setNegativeButton(R.string.shared_string_cancel,null);
  bld.show();
}
