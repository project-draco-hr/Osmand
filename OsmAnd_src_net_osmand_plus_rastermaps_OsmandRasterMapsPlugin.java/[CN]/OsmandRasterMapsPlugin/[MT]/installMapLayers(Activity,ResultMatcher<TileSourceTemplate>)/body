{
  final OsmandApplication app=(OsmandApplication)activity.getApplication();
  final OsmandSettings settings=app.getSettings();
  final Map<String,String> entriesMap=settings.getTileSourceEntries();
  if (!settings.isInternetConnectionAvailable(true)) {
    Toast.makeText(activity,R.string.internet_not_available,Toast.LENGTH_LONG).show();
    return;
  }
  AsyncTask<Void,Void,List<TileSourceTemplate>> t=new AsyncTask<Void,Void,List<TileSourceTemplate>>(){
    @Override protected List<TileSourceTemplate> doInBackground(    Void... params){
      return TileSourceManager.downloadTileSourceTemplates(Version.getVersionAsURLParam(app));
    }
    protected void onPostExecute(    final java.util.List<TileSourceTemplate> downloaded){
      if (downloaded == null || downloaded.isEmpty()) {
        Toast.makeText(activity,R.string.shared_string_io_error,Toast.LENGTH_SHORT).show();
        return;
      }
      AlertDialog.Builder builder=new AlertDialog.Builder(activity);
      String[] names=new String[downloaded.size()];
      for (int i=0; i < names.length; i++) {
        names[i]=downloaded.get(i).getName();
      }
      final boolean[] selected=new boolean[downloaded.size()];
      builder.setMultiChoiceItems(names,selected,new DialogInterface.OnMultiChoiceClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which,        boolean isChecked){
          selected[which]=isChecked;
          if (entriesMap.containsKey(downloaded.get(which).getName()) && isChecked) {
            Toast.makeText(activity,R.string.tile_source_already_installed,Toast.LENGTH_SHORT).show();
          }
        }
      }
);
      builder.setNegativeButton(R.string.shared_string_cancel,null);
      builder.setTitle(R.string.select_tile_source_to_install);
      builder.setPositiveButton(R.string.shared_string_apply,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          List<TileSourceTemplate> toInstall=new ArrayList<>();
          for (int i=0; i < selected.length; i++) {
            if (selected[i]) {
              toInstall.add(downloaded.get(i));
            }
          }
          for (          TileSourceTemplate ts : toInstall) {
            if (settings.installTileSource(ts)) {
              if (result != null) {
                result.publish(ts);
              }
            }
          }
          if (!toInstall.isEmpty() && result != null) {
            result.publish(null);
          }
        }
      }
);
      builder.show();
    }
  }
;
  t.execute();
}
