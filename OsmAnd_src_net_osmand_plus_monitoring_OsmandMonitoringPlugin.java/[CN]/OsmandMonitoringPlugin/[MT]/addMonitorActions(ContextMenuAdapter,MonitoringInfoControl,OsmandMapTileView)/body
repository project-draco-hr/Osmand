{
  final boolean off=!view.getSettings().SAVE_TRACK_TO_GPX.get();
  qa.registerItem(off ? R.string.monitoring_mode_off : R.string.monitoring_mode_on,off ? R.drawable.monitoring_rec_inactive : R.drawable.monitoring_rec_big,new OnContextMenuClick(){
    @Override public void onContextMenuClick(    int itemId,    int pos,    boolean isChecked,    DialogInterface dialog){
      if (off) {
        final ValueHolder<Integer> vs=new ValueHolder<Integer>();
        vs.value=view.getSettings().SAVE_TRACK_INTERVAL.get();
        li.showIntervalChooseDialog(view,view.getContext().getString(R.string.save_track_interval) + " : %s",view.getContext().getString(R.string.save_track_to_gpx),SECONDS,MINUTES,vs,new OnClickListener(){
          @Override public void onClick(          DialogInterface dialog,          int which){
            view.getSettings().SAVE_TRACK_INTERVAL.set(vs.value);
            view.getSettings().SAVE_TRACK_TO_GPX.set(true);
          }
        }
);
      }
 else {
        view.getSettings().SAVE_TRACK_TO_GPX.set(false);
      }
    }
  }
,-1);
  qa.registerItem(R.string.save_current_track_widget,R.drawable.monitoring_rec_inactive,new OnContextMenuClick(){
    @Override public void onContextMenuClick(    int itemId,    int pos,    boolean isChecked,    DialogInterface dialog){
      app.getTaskManager().runInBackground(new OsmAndTaskRunnable<Void,Void,Void>(){
        @Override protected Void doInBackground(        Void... params){
          SavingTrackHelper helper=app.getSavingTrackHelper();
          helper.saveDataToGpx();
          helper.close();
          return null;
        }
      }
,null);
    }
  }
,-1);
  final boolean liveoff=!view.getSettings().LIVE_MONITORING.get();
  qa.registerItem(liveoff ? R.string.live_monitoring_mode_off : R.string.live_monitoring_mode_on,liveoff ? R.drawable.monitoring_rec_inactive : R.drawable.monitoring_rec_big,new OnContextMenuClick(){
    @Override public void onContextMenuClick(    int itemId,    int pos,    boolean isChecked,    DialogInterface dialog){
      if (liveoff) {
        final ValueHolder<Integer> vs=new ValueHolder<Integer>();
        vs.value=view.getSettings().LIVE_MONITORING_INTERVAL.get();
        li.showIntervalChooseDialog(view,view.getContext().getString(R.string.live_monitoring_interval) + " : %s",view.getContext().getString(R.string.live_monitoring),SECONDS,MINUTES,vs,new OnClickListener(){
          @Override public void onClick(          DialogInterface dialog,          int which){
            view.getSettings().LIVE_MONITORING_INTERVAL.set(vs.value);
            view.getSettings().LIVE_MONITORING.set(true);
          }
        }
);
      }
 else {
        view.getSettings().LIVE_MONITORING.set(false);
      }
    }
  }
,-1);
}
