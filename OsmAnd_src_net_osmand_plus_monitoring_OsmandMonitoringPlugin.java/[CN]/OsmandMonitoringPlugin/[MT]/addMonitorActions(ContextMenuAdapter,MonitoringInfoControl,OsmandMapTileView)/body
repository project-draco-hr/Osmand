{
  final Intent serviceIntent=new Intent(view.getContext(),NavigationService.class);
  final boolean off=!view.getSettings().SAVE_TRACK_TO_GPX.get();
  qa.item(off ? R.string.monitoring_mode_off : R.string.monitoring_mode_on).icon(off ? R.drawable.monitoring_rec_inactive : R.drawable.monitoring_rec_big).listen(new OnContextMenuClick(){
    @Override public void onContextMenuClick(    int itemId,    int pos,    boolean isChecked,    DialogInterface dialog){
      if (off) {
        final ValueHolder<Integer> vs=new ValueHolder<Integer>();
        vs.value=view.getSettings().SAVE_TRACK_INTERVAL.get();
        li.showIntervalChooseDialog(view,view.getContext().getString(R.string.save_track_interval) + " : %s",view.getContext().getString(R.string.save_track_to_gpx),SECONDS,MINUTES,vs,new OnClickListener(){
          @Override public void onClick(          DialogInterface dialog,          int which){
            view.getSettings().SAVE_TRACK_INTERVAL.set(vs.value);
            view.getSettings().SAVE_TRACK_TO_GPX.set(true);
            if (view.getApplication().getNavigationService() == null) {
              view.getSettings().SERVICE_OFF_INTERVAL.set(0);
              view.getContext().startService(serviceIntent);
            }
          }
        }
);
      }
 else {
        view.getSettings().SAVE_TRACK_TO_GPX.set(false);
        if (view.getApplication().getNavigationService() != null && !view.getApplication().getNavigationService().startedForNavigation()) {
          view.getContext().stopService(serviceIntent);
        }
      }
    }
  }
).reg();
  final boolean bgoff=view.getApplication().getNavigationService() == null;
  int msgId=!bgoff ? R.string.bg_service_sleep_mode_on : R.string.bg_service_sleep_mode_off;
  int draw=!bgoff ? R.drawable.monitoring_rec_big : R.drawable.monitoring_rec_inactive;
  qa.item(msgId).icon(draw).listen(new OnContextMenuClick(){
    @Override public void onContextMenuClick(    int itemId,    int pos,    boolean isChecked,    DialogInterface dialog){
      if (view.getApplication().getNavigationService() == null) {
        final ValueHolder<Integer> vs=new ValueHolder<Integer>();
        vs.value=view.getSettings().SERVICE_OFF_INTERVAL.get();
        li.showIntervalChooseDialog(view,view.getContext().getString(R.string.gps_wakeup_interval),view.getContext().getString(R.string.background_router_service),SettingsMonitoringActivity.BG_SECONDS,SettingsMonitoringActivity.BG_MINUTES,vs,new OnClickListener(){
          @Override public void onClick(          DialogInterface dialog,          int which){
            view.getSettings().SERVICE_OFF_INTERVAL.set(vs.value);
            view.getContext().startService(serviceIntent);
          }
        }
);
      }
 else {
        view.getContext().stopService(serviceIntent);
      }
    }
  }
).position(0).reg();
  qa.item(R.string.save_current_track_widget).icon(R.drawable.monitoring_rec_inactive).listen(new OnContextMenuClick(){
    @Override public void onContextMenuClick(    int itemId,    int pos,    boolean isChecked,    DialogInterface dialog){
      app.getTaskManager().runInBackground(new OsmAndTaskRunnable<Void,Void,Void>(){
        @Override protected Void doInBackground(        Void... params){
          SavingTrackHelper helper=app.getSavingTrackHelper();
          helper.saveDataToGpx();
          helper.close();
          return null;
        }
      }
,(Void)null);
    }
  }
).position(-1).reg();
  final boolean liveoff=!view.getSettings().LIVE_MONITORING.get();
  qa.item(liveoff ? R.string.live_monitoring_mode_off : R.string.live_monitoring_mode_on).icon(liveoff ? R.drawable.monitoring_rec_inactive : R.drawable.monitoring_rec_big).listen(new OnContextMenuClick(){
    @Override public void onContextMenuClick(    int itemId,    int pos,    boolean isChecked,    DialogInterface dialog){
      if (liveoff) {
        final ValueHolder<Integer> vs=new ValueHolder<Integer>();
        vs.value=view.getSettings().LIVE_MONITORING_INTERVAL.get();
        li.showIntervalChooseDialog(view,view.getContext().getString(R.string.live_monitoring_interval) + " : %s",view.getContext().getString(R.string.live_monitoring),SECONDS,MINUTES,vs,new OnClickListener(){
          @Override public void onClick(          DialogInterface dialog,          int which){
            view.getSettings().LIVE_MONITORING_INTERVAL.set(vs.value);
            view.getSettings().LIVE_MONITORING.set(true);
          }
        }
);
      }
 else {
        view.getSettings().LIVE_MONITORING.set(false);
      }
    }
  }
).reg();
}
