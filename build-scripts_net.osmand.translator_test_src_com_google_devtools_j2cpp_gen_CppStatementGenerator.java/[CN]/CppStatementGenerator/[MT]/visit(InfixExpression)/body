{
  InfixExpression.Operator op=node.getOperator();
  ITypeBinding type=Types.getTypeBinding(node);
  if (Types.isJavaStringType(type) && op.equals(InfixExpression.Operator.PLUS)) {
    printStringConcatenation(node.getLeftOperand(),node.getRightOperand(),node.extendedOperands(),false);
  }
 else   if (op.equals(InfixExpression.Operator.RIGHT_SHIFT_UNSIGNED)) {
    printUnsignedRightShift(node.getLeftOperand(),node.getRightOperand());
  }
 else   if (op.equals(InfixExpression.Operator.REMAINDER) && isFloatingPoint(node)) {
    buffer.append(type.isEqualTo(node.getAST().resolveWellKnownType("float")) ? "fmodf" : "fmod");
    buffer.append('(');
    node.getLeftOperand().accept(this);
    buffer.append(", ");
    node.getRightOperand().accept(this);
    buffer.append(')');
  }
 else {
    node.getLeftOperand().accept(this);
    buffer.append(' ');
    buffer.append(node.getOperator().toString());
    buffer.append(' ');
    node.getRightOperand().accept(this);
    final List<Expression> extendedOperands=node.extendedOperands();
    if (extendedOperands.size() != 0) {
      buffer.append(' ');
      for (Iterator<Expression> it=extendedOperands.iterator(); it.hasNext(); ) {
        buffer.append(node.getOperator().toString()).append(' ');
        it.next().accept(this);
      }
    }
  }
  return false;
}
