{
  ctx.timeToLoad=0;
  ctx.visitedSegments=0;
  boolean reverseWaySearch=false;
  long startNanoTime=System.nanoTime();
  Comparator<RouteSegment> segmentsComparator=new Comparator<RouteSegment>(){
    @Override public int compare(    RouteSegment o1,    RouteSegment o2){
      return ctx.roadPriorityComparator(o1.distanceFromStart,o1.distanceToEnd,o2.distanceFromStart,o2.distanceToEnd);
    }
  }
;
  PriorityQueue<RouteSegment> graphDirectSegments=new PriorityQueue<RouteSegment>(50,segmentsComparator);
  PriorityQueue<RouteSegment> graphReverseSegments=new PriorityQueue<RouteSegment>(50,segmentsComparator);
  TLongHashSet visitedDirectSegments=new TLongHashSet();
  TLongHashSet visitedOppositeSegments=new TLongHashSet();
  int targetEndX=end.road.getPoint31XTile(end.segmentStart);
  int targetEndY=end.road.getPoint31YTile(end.segmentStart);
  int startX=start.road.getPoint31XTile(start.segmentStart);
  int startY=start.road.getPoint31YTile(start.segmentStart);
  start.distanceToEnd=squareRootDist(startX,startY,targetEndX,targetEndY) / ctx.router.getMaxDefaultSpeed();
  end.distanceToEnd=start.distanceToEnd;
  visitAllStartSegments(ctx,start,graphDirectSegments,visitedDirectSegments,startX,startY);
  visitAllStartSegments(ctx,end,graphReverseSegments,visitedOppositeSegments,targetEndX,targetEndY);
  RouteSegment finalRoute=null;
  while (!graphDirectSegments.isEmpty() && finalRoute == null) {
    RouteSegment segment=graphDirectSegments.poll();
    ctx.visitedSegments++;
    if (ctx.visitor != null) {
      ctx.visitor.visitSegment(segment);
    }
    finalRoute=processRouteSegment(ctx,end,reverseWaySearch,graphDirectSegments,visitedDirectSegments,targetEndX,targetEndY,segment,visitedOppositeSegments);
  }
  return prepareResult(ctx,start,end,startNanoTime,finalRoute,!reverseWaySearch);
}
