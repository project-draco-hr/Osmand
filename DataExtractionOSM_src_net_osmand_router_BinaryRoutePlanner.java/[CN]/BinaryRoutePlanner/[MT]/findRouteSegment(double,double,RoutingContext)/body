{
  double tileX=MapUtils.getTileNumberX(ctx.getZoomToLoadTileWithRoads(),lon);
  double tileY=MapUtils.getTileNumberY(ctx.getZoomToLoadTileWithRoads(),lat);
  loadRoutes(ctx,(int)tileX,(int)tileY);
  RouteSegment road=null;
  double dist=0;
  int px=MapUtils.get31TileNumberX(lon);
  int py=MapUtils.get31TileNumberY(lat);
  for (  BinaryMapDataObject r : ctx.values()) {
    if (r.getPointsLength() > 1) {
      double priority=ctx.getRouter().getRoadPriorityToCalculateRoute(r);
      for (int j=1; j < r.getPointsLength(); j++) {
        double mDist=squareRootDist(r.getPoint31XTile(j),r.getPoint31YTile(j),r.getPoint31XTile(j - 1),r.getPoint31YTile(j - 1));
        double projection=calculateProjection(r.getPoint31XTile(j - 1),r.getPoint31YTile(j - 1),r.getPoint31XTile(j),r.getPoint31YTile(j),px,py,mDist);
        double currentDist;
        if (projection < 0) {
          currentDist=squareRootDist(r.getPoint31XTile(j - 1),r.getPoint31YTile(j - 1),px,py) / priority;
        }
 else         if (projection > mDist) {
          currentDist=squareRootDist(r.getPoint31XTile(j),r.getPoint31YTile(j),px,py) / priority;
        }
 else {
          currentDist=Math.abs(calculateDistance(r.getPoint31XTile(j - 1),r.getPoint31YTile(j - 1),r.getPoint31XTile(j),r.getPoint31YTile(j),px,py,mDist)) / priority;
        }
        if (road == null || currentDist < dist) {
          road=new RouteSegment();
          road.road=r;
          road.segmentStart=j - 1;
          road.segmentEnd=j;
          dist=currentDist;
        }
      }
    }
  }
  return road;
}
