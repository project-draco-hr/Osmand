{
  final RouteDataObject road=segment.road;
  final int middle=segment.segmentStart;
  double obstaclePlusTime=0;
  double obstacleMinusTime=0;
  int oneway=ctx.getRouter().isOneWay(road);
  boolean minusAllowed;
  boolean plusAllowed;
  if (ctx.firstRoadId == calculateRoutePointId(road,middle,true)) {
    minusAllowed=ctx.firstRoadDirection <= 0;
    plusAllowed=ctx.firstRoadDirection >= 0;
  }
 else   if (!reverseWaySearch) {
    minusAllowed=oneway <= 0;
    plusAllowed=oneway >= 0;
  }
 else {
    minusAllowed=oneway >= 0;
    plusAllowed=oneway <= 0;
  }
  if (middle == road.getPointsLength() - 1 || visitedSegments.containsKey(calculateRoutePointId(road,middle,true))) {
    plusAllowed=false;
  }
  if (middle == 0 || visitedSegments.containsKey(calculateRoutePointId(road,middle - 1,false))) {
    minusAllowed=false;
  }
  int d=plusAllowed ? 1 : -1;
  if (segment.parentRoute != null) {
    if (plusAllowed && middle < segment.getRoad().getPointsLength() - 1) {
      obstaclePlusTime=ctx.getRouter().calculateTurnTime(segment,segment.getRoad().getPointsLength() - 1,segment.parentRoute,segment.parentSegmentEnd);
    }
    if (minusAllowed && middle > 0) {
      obstacleMinusTime=ctx.getRouter().calculateTurnTime(segment,0,segment.parentRoute,segment.parentSegmentEnd);
    }
  }
  double posSegmentDist=0;
  double negSegmentDist=0;
  while (minusAllowed || plusAllowed) {
    int segmentEnd=middle + d;
    boolean positive=d > 0;
    if (!minusAllowed && d > 0) {
      d++;
    }
 else     if (!plusAllowed && d < 0) {
      d--;
    }
 else {
      if (d <= 0) {
        d=-d + 1;
      }
 else {
        d=-d;
      }
    }
    if (segmentEnd < 0) {
      minusAllowed=false;
      continue;
    }
    if (segmentEnd >= road.getPointsLength()) {
      plusAllowed=false;
      continue;
    }
    int intervalId=positive ? segmentEnd - 1 : segmentEnd;
    long nds=calculateRoutePointId(road,intervalId,positive);
    visitedSegments.put(nds,segment);
    RouteSegment opposite=null;
    long opp=calculateRoutePointId(road,intervalId,!positive);
    if (oppositeSegments.containsKey(opp)) {
      opposite=oppositeSegments.get(opp);
      if (opposite.segmentStart != segmentEnd) {
        opposite=null;
      }
    }
    int x=road.getPoint31XTile(segmentEnd);
    int y=road.getPoint31YTile(segmentEnd);
    if (positive) {
      posSegmentDist+=squareRootDist(x,y,road.getPoint31XTile(segmentEnd - 1),road.getPoint31YTile(segmentEnd - 1));
    }
 else {
      negSegmentDist+=squareRootDist(x,y,road.getPoint31XTile(segmentEnd + 1),road.getPoint31YTile(segmentEnd + 1));
    }
    if (positive) {
      double obstacle=ctx.getRouter().defineRoutingObstacle(road,segmentEnd);
      if (obstacle < 0) {
        plusAllowed=false;
        continue;
      }
      obstaclePlusTime+=obstacle;
    }
 else {
      double obstacle=ctx.getRouter().defineRoutingObstacle(road,segmentEnd);
      if (obstacle < 0) {
        minusAllowed=false;
        continue;
      }
      obstacleMinusTime+=obstacle;
    }
    RouteSegment next=ctx.loadRouteSegment(x,y,ctx.config.memoryLimitation - memOverhead);
    if (next != null || opposite != null) {
      double priority=ctx.getRouter().defineSpeedPriority(road);
      double speed=ctx.getRouter().defineSpeed(road) * priority;
      if (speed == 0) {
        speed=ctx.getRouter().getMinDefaultSpeed() * priority;
      }
      double distOnRoadToPass=positive ? posSegmentDist : negSegmentDist;
      double distStartObstacles=segment.distanceFromStart + (positive ? obstaclePlusTime : obstacleMinusTime) + distOnRoadToPass / speed;
      if (opposite != null) {
        FinalRouteSegment frs=new FinalRouteSegment(road,segment.segmentStart);
        frs.parentRoute=segment.parentRoute;
        frs.parentSegmentEnd=segment.parentSegmentEnd;
        frs.reverseWaySearch=reverseWaySearch;
        frs.finalSegmentEnd=segmentEnd;
        frs.distanceFromStart=opposite.distanceFromStart + distStartObstacles;
        frs.distanceToEnd=0;
        frs.opposite=opposite;
        graphSegments.add(frs);
        if (positive) {
          plusAllowed=false;
        }
 else {
          minusAllowed=false;
        }
        continue;
      }
      if (next == null) {
        continue;
      }
      if ((next == segment || next.road.id == road.id) && next.next == null) {
        continue;
      }
      double distToFinalPoint=squareRootDist(x,y,targetEndX,targetEndY);
      processIntersections(ctx,graphSegments,visitedSegments,distStartObstacles,distToFinalPoint,segment,segmentEnd,next,reverseWaySearch);
    }
  }
}
