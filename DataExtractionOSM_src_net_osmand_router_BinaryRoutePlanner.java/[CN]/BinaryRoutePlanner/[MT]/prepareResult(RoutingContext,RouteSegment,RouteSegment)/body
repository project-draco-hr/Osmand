{
  List<RouteSegmentResult> result=new ArrayList<RouteSegmentResult>();
  RouteSegment segment=ctx.finalReverseRoute;
  int parentSegmentStart=ctx.finalReverseEndSegment;
  while (segment != null) {
    RouteSegmentResult res=new RouteSegmentResult(segment.road,parentSegmentStart,segment.segmentStart);
    parentSegmentStart=segment.parentSegmentEnd;
    segment=segment.parentRoute;
    result.add(res);
  }
  Collections.reverse(result);
  segment=ctx.finalDirectRoute;
  int parentSegmentEnd=ctx.finalDirectEndSegment;
  while (segment != null) {
    RouteSegmentResult res=new RouteSegmentResult(segment.road,segment.segmentStart,parentSegmentEnd);
    parentSegmentEnd=segment.parentSegmentEnd;
    segment=segment.parentRoute;
    result.add(res);
  }
  Collections.reverse(result);
  float completeTime=0;
  float completeDistance=0;
  for (int i=0; i < result.size(); i++) {
    RouteSegmentResult rr=result.get(i);
    RouteDataObject road=rr.getObject();
    double distOnRoadToPass=0;
    double speed=ctx.getRouter().defineSpeed(road);
    if (speed == 0) {
      speed=ctx.getRouter().getMinDefaultSpeed();
    }
    boolean plus=rr.getStartPointIndex() < rr.getEndPointIndex();
    int next;
    double distance=0;
    for (int j=rr.getStartPointIndex(); j != rr.getEndPointIndex(); j=next) {
      next=plus ? j + 1 : j - 1;
      double d=measuredDist(road.getPoint31XTile(j),road.getPoint31YTile(j),road.getPoint31XTile(next),road.getPoint31YTile(next));
      distance+=d;
      distOnRoadToPass+=d / speed + ctx.getRouter().defineObstacle(road,j);
      attachRoadSegments(ctx,result,i,j);
    }
    rr.setSegmentTime((float)distOnRoadToPass);
    rr.setSegmentSpeed((float)speed);
    rr.setDistance((float)distance);
    completeTime+=distOnRoadToPass;
    completeDistance+=distance;
  }
  for (int i=0; i < result.size(); i++) {
    result.get(i).setDescription(getDescription(result,i));
  }
  int toUpdate=0;
  for (int i=1; i < result.size(); i++) {
    if (result.get(i).getDescription().length() != 0) {
      float dist=0;
      for (int j=toUpdate; j < i; j++) {
        dist+=result.get(j).getDistance();
      }
      result.get(toUpdate).setDescription(result.get(toUpdate).getDescription() + String.format(" %.2f meters",dist));
      toUpdate=i;
    }
  }
  if (PRINT_TO_CONSOLE_ROUTE_INFORMATION_TO_TEST) {
    println("ROUTE : ");
    double startLat=MapUtils.get31LatitudeY(start.road.getPoint31YTile(start.segmentStart));
    double startLon=MapUtils.get31LongitudeX(start.road.getPoint31XTile(start.segmentStart));
    double endLat=MapUtils.get31LatitudeY(end.road.getPoint31YTile(end.segmentStart));
    double endLon=MapUtils.get31LongitudeX(end.road.getPoint31XTile(end.segmentStart));
    println(MessageFormat.format("<test regions=\"\" description=\"\" best_percent=\"\" vehicle=\"{5}\" \n" + "    start_lat=\"{0}\" start_lon=\"{1}\" target_lat=\"{2}\" target_lon=\"{3}\" complete_time=\"{4}\" complete_distance=\"{6}\">",startLat + "",startLon + "",endLat + "",endLon + "",completeTime + "",ctx.config.routerName,completeDistance + ""));
    for (    RouteSegmentResult res : result) {
      String name="Unknown";
      String ref="";
      if (ref != null) {
        name+=" " + ref;
      }
      println(MessageFormat.format("\t<segment id=\"{0}\" start=\"{1}\" end=\"{2}\" time=\"{4}\" name=\"{3}\" distance=\"{5}\" start_bearing=\"{6}\" end_bearing=\"{7}\" description=\"{8}\"/>",(res.getObject().getId()) + "",res.getStartPointIndex() + "",res.getEndPointIndex() + "",name,res.getSegmentTime(),res.getDistance(),res.getBearingBegin() + "",res.getBearingEnd() + "",res.getDescription() + ""));
    }
    println("</test>");
  }
  return result;
}
