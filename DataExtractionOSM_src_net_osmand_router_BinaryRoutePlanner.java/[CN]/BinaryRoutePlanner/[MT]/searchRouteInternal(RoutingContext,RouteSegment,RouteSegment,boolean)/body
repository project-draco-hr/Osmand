{
  ctx.timeToLoad=0;
  ctx.visitedSegments=0;
  ctx.memoryOverhead=1000;
  ctx.timeToCalculate=System.nanoTime();
  if (ctx.config.initialDirection != null) {
    ctx.firstRoadId=calculateRoutePointId(start.getRoad(),start.getSegmentStart(),true);
    double plusDir=start.getRoad().directionRoute(start.getSegmentStart(),true);
    double diff=plusDir - ctx.config.initialDirection;
    if (Math.abs(MapUtils.alignAngleDifference(diff)) <= Math.PI / 3) {
      ctx.firstRoadDirection=1;
    }
 else     if (Math.abs(MapUtils.alignAngleDifference(diff - Math.PI)) <= Math.PI / 3) {
      ctx.firstRoadDirection=-1;
    }
  }
  Comparator<RouteSegment> segmentsComparator=new Comparator<RouteSegment>(){
    @Override public int compare(    RouteSegment o1,    RouteSegment o2){
      return ctx.roadPriorityComparator(o1.distanceFromStart,o1.distanceToEnd,o2.distanceFromStart,o2.distanceToEnd);
    }
  }
;
  Comparator<RouteSegment> nonHeuristicSegmentsComparator=new Comparator<RouteSegment>(){
    @Override public int compare(    RouteSegment o1,    RouteSegment o2){
      return roadPriorityComparator(o1.distanceFromStart,o1.distanceToEnd,o2.distanceFromStart,o2.distanceToEnd,0.5);
    }
  }
;
  PriorityQueue<RouteSegment> graphDirectSegments=new PriorityQueue<RouteSegment>(50,segmentsComparator);
  PriorityQueue<RouteSegment> graphReverseSegments=new PriorityQueue<RouteSegment>(50,segmentsComparator);
  TLongObjectHashMap<RouteSegment> visitedDirectSegments=new TLongObjectHashMap<RouteSegment>();
  TLongObjectHashMap<RouteSegment> visitedOppositeSegments=new TLongObjectHashMap<RouteSegment>();
  boolean runRecalculation=ctx.previouslyCalculatedRoute != null && ctx.previouslyCalculatedRoute.size() > 0;
  if (runRecalculation) {
    RouteSegment previous=null;
    List<RouteSegmentResult> rlist=new ArrayList<RouteSegmentResult>();
    int distanceThreshold=7000;
    float threshold=0;
    for (    RouteSegmentResult rr : ctx.previouslyCalculatedRoute) {
      threshold+=rr.getDistance();
      if (threshold > distanceThreshold) {
        rlist.add(rr);
      }
    }
    runRecalculation=rlist.size() > 0;
    if (rlist.size() > 0) {
      for (      RouteSegmentResult rr : rlist) {
        RouteSegment segment=new RouteSegment(rr.getObject(),rr.getEndPointIndex());
        if (previous != null) {
          previous.setParentRoute(segment);
          previous.setParentSegmentEnd(rr.getStartPointIndex());
          boolean positive=rr.getStartPointIndex() < rr.getEndPointIndex();
          long t=calculateRoutePointId(rr.getObject(),positive ? rr.getEndPointIndex() - 1 : rr.getEndPointIndex(),positive);
          visitedOppositeSegments.put(t,segment);
        }
        previous=segment;
      }
      end=previous;
    }
  }
  int targetEndX=end.road.getPoint31XTile(end.getSegmentStart());
  int targetEndY=end.road.getPoint31YTile(end.getSegmentStart());
  int startX=start.road.getPoint31XTile(start.getSegmentStart());
  int startY=start.road.getPoint31YTile(start.getSegmentStart());
  float estimatedDistance=(float)h(ctx,targetEndX,targetEndY,startX,startY);
  end.distanceToEnd=start.distanceToEnd=estimatedDistance;
  graphDirectSegments.add(start);
  graphReverseSegments.add(end);
  boolean inverse=false;
  boolean init=false;
  PriorityQueue<RouteSegment> graphSegments;
  if (inverse) {
    graphSegments=graphReverseSegments;
  }
 else {
    graphSegments=graphDirectSegments;
  }
  FinalRouteSegment finalSegment=null;
  while (!graphSegments.isEmpty()) {
    RouteSegment segment=graphSegments.poll();
    ctx.memoryOverhead=(visitedDirectSegments.size() + visitedOppositeSegments.size()) * STANDARD_ROAD_VISITED_OVERHEAD + (graphDirectSegments.size() + graphReverseSegments.size()) * STANDARD_ROAD_IN_QUEUE_OVERHEAD;
    if (TRACE_ROUTING) {
      printRoad(">",segment);
    }
    if (segment instanceof FinalRouteSegment) {
      if (RoutingContext.SHOW_GC_SIZE) {
        log.warn("Estimated overhead " + (ctx.memoryOverhead / (1 << 20)) + " mb");
        printMemoryConsumption("Memory occupied after calculation : ");
      }
      finalSegment=(FinalRouteSegment)segment;
      break;
    }
    if (ctx.memoryOverhead > ctx.config.memoryLimitation * 0.95 && RoutingContext.SHOW_GC_SIZE) {
      printMemoryConsumption("Memory occupied before exception : ");
    }
    if (ctx.memoryOverhead > ctx.config.memoryLimitation * 0.95) {
      throw new IllegalStateException("There is no enough memory " + ctx.config.memoryLimitation / (1 << 20) + " Mb");
    }
    ctx.visitedSegments++;
    if (!inverse) {
      processRouteSegment(ctx,false,graphDirectSegments,visitedDirectSegments,targetEndX,targetEndY,segment,visitedOppositeSegments,true);
      processRouteSegment(ctx,false,graphDirectSegments,visitedDirectSegments,targetEndX,targetEndY,segment,visitedOppositeSegments,false);
    }
 else {
      processRouteSegment(ctx,true,graphReverseSegments,visitedOppositeSegments,startX,startY,segment,visitedDirectSegments,true);
      processRouteSegment(ctx,true,graphReverseSegments,visitedOppositeSegments,startX,startY,segment,visitedDirectSegments,false);
    }
    if (graphReverseSegments.isEmpty()) {
      throw new IllegalArgumentException("Route is not found to selected target point.");
    }
    if (graphDirectSegments.isEmpty()) {
      throw new IllegalArgumentException("Route is not found from selected start point.");
    }
    if (runRecalculation) {
      inverse=false;
    }
 else     if (!init) {
      inverse=!inverse;
      init=true;
    }
 else     if (ctx.planRouteIn2Directions()) {
      inverse=nonHeuristicSegmentsComparator.compare(graphDirectSegments.peek(),graphReverseSegments.peek()) > 0;
      if (graphDirectSegments.size() * 1.3 > graphReverseSegments.size()) {
        inverse=true;
      }
 else       if (graphDirectSegments.size() < 1.3 * graphReverseSegments.size()) {
        inverse=false;
      }
    }
 else {
      inverse=ctx.getPlanRoadDirection() < 0;
    }
    if (inverse) {
      graphSegments=graphReverseSegments;
    }
 else {
      graphSegments=graphDirectSegments;
    }
    if (ctx.runRelaxingStrategy()) {
      relaxNotNeededSegments(ctx,graphDirectSegments,true);
      relaxNotNeededSegments(ctx,graphReverseSegments,false);
    }
    if (ctx.interruptable != null && ctx.interruptable.isCancelled()) {
      throw new InterruptedException("Route calculation interrupted");
    }
  }
  printDebugMemoryInformation(ctx,graphDirectSegments,graphReverseSegments,visitedDirectSegments,visitedOppositeSegments);
  return finalSegment;
}
