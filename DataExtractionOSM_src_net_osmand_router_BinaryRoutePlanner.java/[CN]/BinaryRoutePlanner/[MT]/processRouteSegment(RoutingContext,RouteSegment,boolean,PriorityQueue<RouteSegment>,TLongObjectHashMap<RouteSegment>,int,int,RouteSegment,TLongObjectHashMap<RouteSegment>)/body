{
  final RouteDataObject road=segment.road;
  final int middle=segment.segmentStart;
  int middlex=road.getPoint31XTile(middle);
  int middley=road.getPoint31YTile(middle);
  double obstaclePlusTime=0;
  double obstacleMinusTime=0;
  long nt=(road.getId() << 8l) + middle;
  visitedSegments.put(nt,null);
  if (oppositeSegments.contains(nt) && oppositeSegments.get(nt) != null) {
    segment.segmentEnd=middle;
    RouteSegment opposite=oppositeSegments.get(nt);
    opposite.segmentEnd=middle;
    return true;
  }
  int oneway=ctx.getRouter().isOneWay(road);
  boolean minusAllowed;
  boolean plusAllowed;
  if (!reverseWaySearch) {
    minusAllowed=oneway <= 0;
    plusAllowed=oneway >= 0;
  }
 else {
    minusAllowed=oneway >= 0;
    plusAllowed=oneway <= 0;
  }
  int d=plusAllowed ? 1 : -1;
  while (minusAllowed || plusAllowed) {
    int segmentEnd=middle + d;
    if (!minusAllowed && d > 0) {
      d++;
    }
 else     if (!plusAllowed && d < 0) {
      d--;
    }
 else {
      if (d <= 0) {
        d=-d + 1;
      }
 else {
        d=-d;
      }
    }
    if (segmentEnd < 0) {
      minusAllowed=false;
      continue;
    }
    if (segmentEnd >= road.getPointsLength()) {
      plusAllowed=false;
      continue;
    }
    long nts=(road.getId() << 8l) + segmentEnd;
    if (oppositeSegments.contains(nts) && oppositeSegments.get(nt) != null) {
      segment.segmentEnd=segmentEnd;
      RouteSegment opposite=oppositeSegments.get(nts);
      opposite.segmentEnd=segmentEnd;
      ctx.finalDirectRoute=segment;
      ctx.finalReverseRoute=opposite;
    }
    visitedSegments.put(nts,segment);
    int x=road.getPoint31XTile(segmentEnd);
    int y=road.getPoint31YTile(segmentEnd);
    loadRoutes(ctx,x,y,null);
    if (d > 0) {
      obstaclePlusTime+=ctx.getRouter().defineObstacle(road,segmentEnd);
    }
 else     if (d < 0) {
      obstacleMinusTime+=ctx.getRouter().defineObstacle(road,segmentEnd);
    }
    long l=(((long)x) << 31) + (long)y;
    RouteSegment next=ctx.routes.get(l);
    if (next != null) {
      if (next == segment && next.next == null) {
        continue;
      }
      double distOnRoadToPass=squareRootDist(x,y,middlex,middley);
      double speed=ctx.getRouter().defineSpeed(road);
      if (speed == 0) {
        speed=ctx.getRouter().getMinDefaultSpeed();
      }
      double distanceFromStart=segment.distanceFromStart + distOnRoadToPass / speed;
      distanceFromStart+=d > 0 ? obstaclePlusTime : obstacleMinusTime;
      double distToFinalPoint=squareRootDist(x,y,targetEndX,targetEndY);
      boolean routeFound=processIntersections(ctx,graphSegments,visitedSegments,oppositeSegments,distanceFromStart,distToFinalPoint,segment,segmentEnd,next,reverseWaySearch);
      if (routeFound) {
        return routeFound;
      }
    }
  }
  return false;
}
