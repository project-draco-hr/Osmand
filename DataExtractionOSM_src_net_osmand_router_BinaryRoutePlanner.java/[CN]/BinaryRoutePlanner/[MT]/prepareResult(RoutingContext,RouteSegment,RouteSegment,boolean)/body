{
  List<RouteSegmentResult> result=new ArrayList<RouteSegmentResult>();
  RouteSegment segment=ctx.finalReverseRoute;
  int parentSegmentStart=ctx.finalReverseEndSegment;
  while (segment != null) {
    RouteSegmentResult res=new RouteSegmentResult(segment.road,parentSegmentStart,segment.segmentStart);
    parentSegmentStart=segment.parentSegmentEnd;
    segment=segment.parentRoute;
    if (res.getStartPointIndex() != res.getEndPointIndex()) {
      result.add(res);
    }
  }
  Collections.reverse(result);
  segment=ctx.finalDirectRoute;
  int parentSegmentEnd=ctx.finalDirectEndSegment;
  while (segment != null) {
    RouteSegmentResult res=new RouteSegmentResult(segment.road,segment.segmentStart,parentSegmentEnd);
    parentSegmentEnd=segment.parentSegmentEnd;
    segment=segment.parentRoute;
    if (res.getStartPointIndex() != res.getEndPointIndex()) {
      result.add(res);
    }
  }
  Collections.reverse(result);
  for (int i=0; i < result.size(); i++) {
    if (ctx.runTilesGC()) {
      unloadUnusedTiles(ctx,ctx.config.NUMBER_OF_DESIRABLE_TILES_IN_MEMORY);
    }
    RouteSegmentResult rr=result.get(i);
    RouteDataObject road=rr.getObject();
    double distOnRoadToPass=0;
    double speed=ctx.getRouter().defineSpeed(road);
    if (speed == 0) {
      speed=ctx.getRouter().getMinDefaultSpeed();
    }
    boolean plus=rr.getStartPointIndex() < rr.getEndPointIndex();
    int next;
    double distance=0;
    for (int j=rr.getStartPointIndex(); j != rr.getEndPointIndex(); j=next) {
      next=plus ? j + 1 : j - 1;
      if (j == rr.getStartPointIndex()) {
        attachRoadSegments(ctx,result,i,j,plus);
      }
      if (next != rr.getEndPointIndex()) {
        attachRoadSegments(ctx,result,i,next,plus);
      }
      double d=measuredDist(road.getPoint31XTile(j),road.getPoint31YTile(j),road.getPoint31XTile(next),road.getPoint31YTile(next));
      distance+=d;
      double obstacle=ctx.getRouter().defineObstacle(road,j);
      if (obstacle >= 0) {
        distOnRoadToPass+=d / speed + obstacle;
      }
 else {
        System.err.println("Something completely wrong if we pass obstacle < 0 " + Arrays.toString(road.getPointTypes(j)));
      }
      List<RouteSegmentResult> attachedRoutes=rr.getAttachedRoutes(next);
      if (next != rr.getEndPointIndex() && !rr.getObject().roundabout() && attachedRoutes != null) {
        float before=rr.getBearing(next,!plus);
        float after=rr.getBearing(next,plus);
        boolean straight=Math.abs(MapUtils.degreesDiff(before + 180,after)) < TURN_DEGREE_MIN;
        boolean split=false;
        for (        RouteSegmentResult rs : attachedRoutes) {
          double diff=MapUtils.degreesDiff(before + 180,rs.getBearingBegin());
          if (Math.abs(diff) <= TURN_DEGREE_MIN) {
            split=true;
          }
 else           if (!straight && Math.abs(diff) < 100) {
            split=true;
          }
        }
        if (split) {
          int endPointIndex=rr.getEndPointIndex();
          RouteSegmentResult splitted=new RouteSegmentResult(rr.getObject(),next,endPointIndex);
          rr.setSegmentTime((float)distOnRoadToPass);
          rr.setSegmentSpeed((float)speed);
          rr.setDistance((float)distance);
          rr.setEndPointIndex(next);
          result.add(i + 1,splitted);
          rr=splitted;
          distOnRoadToPass=0;
          distance=0;
        }
      }
    }
    rr.setSegmentTime((float)distOnRoadToPass);
    rr.setSegmentSpeed((float)speed);
    rr.setDistance((float)distance);
  }
  addTurnInfo(leftside,result);
  float completeTime=0;
  float completeDistance=0;
  for (  RouteSegmentResult r : result) {
    completeTime+=r.getSegmentTime();
    completeDistance+=r.getDistance();
  }
  println("ROUTE : ");
  double startLat=MapUtils.get31LatitudeY(start.road.getPoint31YTile(start.segmentStart));
  double startLon=MapUtils.get31LongitudeX(start.road.getPoint31XTile(start.segmentStart));
  double endLat=MapUtils.get31LatitudeY(end.road.getPoint31YTile(end.segmentStart));
  double endLon=MapUtils.get31LongitudeX(end.road.getPoint31XTile(end.segmentStart));
  StringBuilder add=new StringBuilder();
  add.append("loadedTiles = \"").append(ctx.loadedTiles).append("\" ");
  add.append("visitedSegments = \"").append(ctx.visitedSegments).append("\" ");
  add.append("complete_distance = \"").append(completeDistance).append("\" ");
  println(MessageFormat.format("<test regions=\"\" description=\"\" best_percent=\"\" vehicle=\"{5}\" \n" + "    start_lat=\"{0}\" start_lon=\"{1}\" target_lat=\"{2}\" target_lon=\"{3}\" complete_time=\"{4}\" {6} >",startLat + "",startLon + "",endLat + "",endLon + "",completeTime + "",ctx.config.routerName,add.toString()));
  if (PRINT_TO_CONSOLE_ROUTE_INFORMATION_TO_TEST) {
    for (    RouteSegmentResult res : result) {
      String name=res.getObject().getName();
      String ref=res.getObject().getRef();
      if (name == null) {
        name="";
      }
      if (ref != null) {
        name+=" (" + ref + ") ";
      }
      StringBuilder additional=new StringBuilder();
      additional.append("time = \"").append(res.getSegmentTime()).append("\" ");
      additional.append("name = \"").append(name).append("\" ");
      additional.append("distance = \"").append(res.getDistance()).append("\" ");
      if (res.getTurnType() != null) {
        additional.append("turn = \"").append(res.getTurnType()).append("\" ");
        additional.append("turn_angle = \"").append(res.getTurnType().getTurnAngle()).append("\" ");
        if (res.getTurnType().getLanes() != null) {
          additional.append("lanes = \"").append(Arrays.toString(res.getTurnType().getLanes())).append("\" ");
        }
      }
      additional.append("start_bearing = \"").append(res.getBearingBegin()).append("\" ");
      additional.append("end_bearing = \"").append(res.getBearingEnd()).append("\" ");
      additional.append("description = \"").append(res.getDescription()).append("\" ");
      println(MessageFormat.format("\t<segment id=\"{0}\" start=\"{1}\" end=\"{2}\" {3}/>",(res.getObject().getId()) + "",res.getStartPointIndex() + "",res.getEndPointIndex() + "",additional.toString()));
    }
  }
  println("</test>");
  return result;
}
