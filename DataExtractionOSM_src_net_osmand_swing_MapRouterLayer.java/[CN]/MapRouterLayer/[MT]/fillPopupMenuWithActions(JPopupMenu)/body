{
  Action start=new AbstractAction("Mark start point"){
    private static final long serialVersionUID=507156107455281238L;
    @Override public void actionPerformed(    ActionEvent e){
      Point popupMenuPoint=map.getPopupMenuPoint();
      double fy=(popupMenuPoint.y - map.getCenterPointY()) / map.getTileSize();
      double fx=(popupMenuPoint.x - map.getCenterPointX()) / map.getTileSize();
      double latitude=MapUtils.getLatitudeFromTile(map.getZoom(),map.getYTile() + fy);
      double longitude=MapUtils.getLongitudeFromTile(map.getZoom(),map.getXTile() + fx);
      startRoute=new LatLon(latitude,longitude);
      DataExtractionSettings.getSettings().saveStartLocation(latitude,longitude);
      map.repaint();
    }
  }
;
  menu.add(start);
  Action end=new AbstractAction("Mark end point"){
    private static final long serialVersionUID=4446789424902471319L;
    @Override public void actionPerformed(    ActionEvent e){
      Point popupMenuPoint=map.getPopupMenuPoint();
      double fy=(popupMenuPoint.y - map.getCenterPointY()) / map.getTileSize();
      double fx=(popupMenuPoint.x - map.getCenterPointX()) / map.getTileSize();
      double latitude=MapUtils.getLatitudeFromTile(map.getZoom(),map.getYTile() + fy);
      double longitude=MapUtils.getLongitudeFromTile(map.getZoom(),map.getXTile() + fx);
      endRoute=new LatLon(latitude,longitude);
      DataExtractionSettings.getSettings().saveEndLocation(latitude,longitude);
      map.repaint();
    }
  }
;
  menu.add(end);
  Action selfRoute=new AbstractAction("Calculate OsmAnd route"){
    private static final long serialVersionUID=507156107455281238L;
    @Override public void actionPerformed(    ActionEvent e){
      new Thread(){
        @Override public void run(){
          List<Way> ways=selfRoute(startRoute,endRoute,null);
          if (ways != null) {
            DataTileManager<Way> points=new DataTileManager<Way>();
            points.setZoom(11);
            for (            Way w : ways) {
              LatLon n=w.getLatLon();
              points.registerObject(n.getLatitude(),n.getLongitude(),w);
            }
            map.setPoints(points);
          }
        }
      }
.start();
    }
  }
;
  Action recalculate=new AbstractAction("Recalculate OsmAnd route"){
    private static final long serialVersionUID=507156107455281238L;
    @Override public boolean isEnabled(){
      return true;
    }
    @Override public void actionPerformed(    ActionEvent e){
      new Thread(){
        @Override public void run(){
          List<Way> ways=selfRoute(startRoute,endRoute,previousRoute);
          if (ways != null) {
            DataTileManager<Way> points=new DataTileManager<Way>();
            points.setZoom(11);
            for (            Way w : ways) {
              LatLon n=w.getLatLon();
              points.registerObject(n.getLatitude(),n.getLongitude(),w);
            }
            map.setPoints(points);
          }
        }
      }
.start();
    }
  }
;
  menu.add(selfRoute);
  menu.add(recalculate);
  Action route_YOURS=new AbstractAction("Calculate YOURS route"){
    private static final long serialVersionUID=507156107455281238L;
    @Override public void actionPerformed(    ActionEvent e){
      new Thread(){
        @Override public void run(){
          List<Way> ways=route_YOURS(startRoute,endRoute);
          DataTileManager<Way> points=new DataTileManager<Way>();
          points.setZoom(11);
          for (          Way w : ways) {
            LatLon n=w.getLatLon();
            points.registerObject(n.getLatitude(),n.getLongitude(),w);
          }
          map.setPoints(points);
        }
      }
.start();
    }
  }
;
  menu.add(route_YOURS);
  Action route_CloudMate=new AbstractAction("Calculate CloudMade route"){
    private static final long serialVersionUID=507156107455281238L;
    @Override public void actionPerformed(    ActionEvent e){
      new Thread(){
        @Override public void run(){
          List<Way> ways=route_CloudMate(startRoute,endRoute);
          DataTileManager<Way> points=new DataTileManager<Way>();
          points.setZoom(11);
          for (          Way w : ways) {
            LatLon n=w.getLatLon();
            points.registerObject(n.getLatitude(),n.getLongitude(),w);
          }
          map.setPoints(points);
        }
      }
.start();
    }
  }
;
  menu.add(route_CloudMate);
}
