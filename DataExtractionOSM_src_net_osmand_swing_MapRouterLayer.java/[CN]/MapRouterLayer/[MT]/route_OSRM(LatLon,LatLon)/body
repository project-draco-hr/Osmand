{
  List<Way> res=new ArrayList<Way>();
  long time=System.currentTimeMillis();
  System.out.println("Route from " + start + " to "+ end);
  if (start != null && end != null) {
    try {
      StringBuilder uri=new StringBuilder();
      uri.append(DataExtractionSettings.getSettings().getOsrmServerAddress());
      uri.append("/viaroute?");
      uri.append("&loc=").append(start.getLatitude()).append(",").append(start.getLongitude());
      uri.append("&loc=").append(end.getLatitude()).append(",").append(end.getLongitude());
      uri.append("&output=json");
      uri.append("&instructions=false");
      uri.append("&geomformat=cmp");
      URL url=new URL(uri.toString());
      URLConnection connection=url.openConnection();
      StringBuilder content=new StringBuilder();
      BufferedReader reader=new BufferedReader(new InputStreamReader(connection.getInputStream()));
{
        String s=null;
        boolean fist=true;
        while ((s=reader.readLine()) != null) {
          if (fist) {
            fist=false;
          }
          content.append(s).append("\n");
        }
        System.out.println(content);
      }
      final JSONObject jsonContent=(JSONObject)new JSONTokener(content.toString()).nextValue();
      final String routeGeometry=jsonContent.getString("route_geometry");
      final Double[] route=decodeGooglePolylinesFlow(routeGeometry);
      double latitude=0.0;
      double longitude=0.0;
      Way w=new Way(-1);
      for (int routePointIdx=0; routePointIdx < route.length / 2; routePointIdx++) {
        latitude+=route[routePointIdx * 2 + 0];
        longitude+=route[routePointIdx * 2 + 1];
        w.addNode(new net.osmand.osm.Node(latitude,longitude,-1));
      }
      if (!w.getNodes().isEmpty()) {
        res.add(w);
      }
    }
 catch (    IOException e) {
      ExceptionHandler.handle(e);
    }
catch (    JSONException e) {
      ExceptionHandler.handle(e);
    }
    System.out.println("Finding routes " + res.size() + " "+ (System.currentTimeMillis() - time)+ " ms");
  }
  return res;
}
