{
  List<Way> res=new ArrayList<Way>();
  long time=System.currentTimeMillis();
  File[] files=DataExtractionSettings.getSettings().getDefaultRoutingFile();
  if (files == null) {
    JOptionPane.showMessageDialog(OsmExtractionUI.MAIN_APP.getFrame(),"Please specify obf file in settings","Obf file not found",JOptionPane.ERROR_MESSAGE);
    return null;
  }
  System.out.println("Self made route from " + start + " to "+ end);
  if (start != null && end != null) {
    try {
      BinaryMapIndexReader[] rs=new BinaryMapIndexReader[files.length];
      for (int i=0; i < files.length; i++) {
        RandomAccessFile raf=new RandomAccessFile(files[i],"r");
        rs[i]=new BinaryMapIndexReader(raf);
      }
      BinaryRouteDataReader router=new BinaryRouteDataReader(rs);
      RoutingContext ctx=new RoutingContext();
      RouteSegment st=router.findRouteSegment(start.getLatitude(),start.getLongitude(),ctx);
      if (st != null) {
        BinaryMapDataObject road=st.getRoad();
        TagValuePair pair=road.getTagValue(0);
        System.out.println("ROAD TO START " + pair.tag + " "+ pair.value+ " "+ road.getName()+ " "+ (road.getId() >> 3));
      }
      RouteSegment e=router.findRouteSegment(end.getLatitude(),end.getLongitude(),ctx);
      if (e != null) {
        BinaryMapDataObject road=e.getRoad();
        TagValuePair pair=road.getTagValue(0);
        System.out.println("ROAD TO END " + pair.tag + " "+ pair.value+ " "+ road.getName()+ " "+ +(road.getId() >> 3));
      }
      final DataTileManager<Way> points=new DataTileManager<Way>();
      points.setZoom(11);
      map.setPoints(points);
      ctx.visitor=new RouteSegmentVisitor(){
        private final static int F_SIZE=10;
        private List<RouteSegment> cache=new ArrayList<RouteSegment>();
        @Override public void visitSegment(        RouteSegment s){
          cache.add(s);
          if (cache.size() < F_SIZE) {
            return;
          }
          for (          RouteSegment segment : cache) {
            Way way=new Way(-1);
            for (int i=0; i < segment.getRoad().getPointsLength(); i++) {
              net.osmand.osm.Node n=new net.osmand.osm.Node(MapUtils.get31LatitudeY(segment.getRoad().getPoint31YTile(i)),MapUtils.get31LongitudeX(segment.getRoad().getPoint31XTile(i)),-1);
              way.addNode(n);
            }
            LatLon n=way.getLatLon();
            points.registerObject(n.getLatitude(),n.getLongitude(),way);
          }
          cache.clear();
          try {
            SwingUtilities.invokeAndWait(new Runnable(){
              @Override public void run(){
                map.prepareImage();
              }
            }
);
          }
 catch (          InterruptedException e1) {
          }
catch (          InvocationTargetException e) {
            e.printStackTrace();
          }
        }
      }
;
      List<RouteSegmentResult> searchRoute=router.searchRoute(ctx,st,e);
      try {
        Thread.sleep(4000);
      }
 catch (      InterruptedException e1) {
      }
      for (      RouteSegmentResult s : searchRoute) {
        Way way=new Way(-1);
        boolean plus=s.startPointIndex < s.endPointIndex;
        int i=s.startPointIndex;
        while (true) {
          net.osmand.osm.Node n=new net.osmand.osm.Node(MapUtils.get31LatitudeY(s.object.getPoint31YTile(i)),MapUtils.get31LongitudeX(s.object.getPoint31XTile(i)),-1);
          way.addNode(n);
          if (i == s.endPointIndex) {
            break;
          }
          if (plus) {
            i++;
          }
 else {
            i--;
          }
        }
        res.add(way);
      }
    }
 catch (    IOException e) {
      ExceptionHandler.handle(e);
    }
    System.out.println("Finding self routes " + res.size() + " "+ (System.currentTimeMillis() - time)+ " ms");
  }
  return res;
}
