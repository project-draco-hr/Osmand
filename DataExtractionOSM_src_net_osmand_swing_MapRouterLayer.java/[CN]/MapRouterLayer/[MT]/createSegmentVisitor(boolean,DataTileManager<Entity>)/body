{
  return new RouteSegmentVisitor(){
    private List<RouteSegment> cache=new ArrayList<RouteSegment>();
    private List<RouteSegment> pollCache=new ArrayList<RouteSegment>();
    private List<Integer> cacheInt=new ArrayList<Integer>();
    @Override public void visitSegment(    RouteSegment s,    int endSegment,    boolean poll){
      if (stop) {
        throw new RuntimeException("Interrupted");
      }
      if (!animateRoutingCalculation) {
        return;
      }
      if (!poll && pause) {
        pollCache.add(s);
        return;
      }
      cache.add(s);
      cacheInt.add(endSegment);
      if (cache.size() < steps) {
        return;
      }
      if (pause) {
        registerObjects(points,poll,pollCache,null);
        pollCache.clear();
      }
      registerObjects(points,!poll,cache,cacheInt);
      cache.clear();
      cacheInt.clear();
      redraw();
      if (pause) {
        waitNextPress();
      }
    }
    private void registerObjects(    final DataTileManager<Entity> points,    boolean white,    List<RouteSegment> registerCache,    List<Integer> cacheInt){
      for (int l=0; l < registerCache.size(); l++) {
        RouteSegment segment=registerCache.get(l);
        Way way=new Way(-1);
        way.putTag(OSMTagKey.NAME.getValue(),segment.getTestName());
        if (white) {
          way.putTag("color","white");
        }
        int from=cacheInt != null ? segment.getSegmentStart() : segment.getSegmentStart() - 2;
        int to=cacheInt != null ? cacheInt.get(l) : segment.getSegmentStart() + 2;
        if (from > to) {
          int x=from;
          from=to;
          to=x;
        }
        for (int i=from; i <= to; i++) {
          if (i >= 0 && i < segment.getRoad().getPointsLength()) {
            net.osmand.osm.Node n=createNode(segment,i);
            way.addNode(n);
          }
        }
        LatLon n=way.getLatLon();
        points.registerObject(n.getLatitude(),n.getLongitude(),way);
      }
    }
  }
;
}
