{
  ctx.timeToLoad=0;
  ctx.visitedSegments=0;
  ctx.memoryOverhead=1000;
  ctx.timeToCalculate=System.nanoTime();
  Comparator<RouteSegment> nonHeuristicSegmentsComparator=new NonHeuristicSegmentsComparator();
  PriorityQueue<RouteSegment> graphDirectSegments=new PriorityQueue<RouteSegment>(50,new SegmentsComparator(ctx));
  PriorityQueue<RouteSegment> graphReverseSegments=new PriorityQueue<RouteSegment>(50,new SegmentsComparator(ctx));
  TLongObjectHashMap<RouteSegment> visitedDirectSegments=new TLongObjectHashMap<RouteSegment>();
  TLongObjectHashMap<RouteSegment> visitedOppositeSegments=new TLongObjectHashMap<RouteSegment>();
  initQueuesWithStartEnd(ctx,start,end,graphDirectSegments,graphReverseSegments);
  boolean forwardSearch=true;
  PriorityQueue<RouteSegment> graphSegments=graphDirectSegments;
  FinalRouteSegment finalSegment=null;
  boolean onlyBackward=ctx.getPlanRoadDirection() < 0;
  boolean onlyForward=ctx.getPlanRoadDirection() > 0;
  while (!graphSegments.isEmpty()) {
    RouteSegment segment=graphSegments.poll();
    ctx.memoryOverhead=(visitedDirectSegments.size() + visitedOppositeSegments.size()) * STANDARD_ROAD_VISITED_OVERHEAD + (graphDirectSegments.size() + graphReverseSegments.size()) * STANDARD_ROAD_IN_QUEUE_OVERHEAD;
    if (TRACE_ROUTING) {
      printRoad(">",segment,!forwardSearch);
    }
    if (segment instanceof FinalRouteSegment) {
      if (RoutingContext.SHOW_GC_SIZE) {
        log.warn("Estimated overhead " + (ctx.memoryOverhead / (1 << 20)) + " mb");
        printMemoryConsumption("Memory occupied after calculation : ");
      }
      finalSegment=(FinalRouteSegment)segment;
      if (TRACE_ROUTING) {
        println("Final segment found");
      }
      break;
    }
    if (ctx.memoryOverhead > ctx.config.memoryLimitation * 0.95 && RoutingContext.SHOW_GC_SIZE) {
      printMemoryConsumption("Memory occupied before exception : ");
    }
    if (ctx.memoryOverhead > ctx.config.memoryLimitation * 0.95) {
      throw new IllegalStateException("There is no enough memory " + ctx.config.memoryLimitation / (1 << 20) + " Mb");
    }
    ctx.visitedSegments++;
    if (forwardSearch) {
      boolean doNotAddIntersections=onlyBackward;
      processRouteSegment(ctx,false,graphDirectSegments,visitedDirectSegments,segment,visitedOppositeSegments,doNotAddIntersections);
    }
 else {
      boolean doNotAddIntersections=onlyForward;
      processRouteSegment(ctx,true,graphReverseSegments,visitedOppositeSegments,segment,visitedDirectSegments,doNotAddIntersections);
    }
    updateCalculationProgress(ctx,graphDirectSegments,graphReverseSegments);
    checkIfGraphIsEmpty(ctx,ctx.getPlanRoadDirection() <= 0,graphReverseSegments,end,visitedOppositeSegments,"Route is not found to selected target point.");
    checkIfGraphIsEmpty(ctx,ctx.getPlanRoadDirection() >= 0,graphDirectSegments,start,visitedDirectSegments,"Route is not found from selected start point.");
    if (ctx.planRouteIn2Directions()) {
      forwardSearch=(nonHeuristicSegmentsComparator.compare(graphDirectSegments.peek(),graphReverseSegments.peek()) < 0);
    }
 else {
      forwardSearch=onlyForward;
      if (onlyBackward && !graphDirectSegments.isEmpty()) {
        forwardSearch=true;
      }
      if (onlyForward && !graphReverseSegments.isEmpty()) {
        forwardSearch=false;
      }
    }
    if (forwardSearch) {
      graphSegments=graphDirectSegments;
    }
 else {
      graphSegments=graphReverseSegments;
    }
    if (ctx.calculationProgress != null && ctx.calculationProgress.isCancelled) {
      throw new InterruptedException("Route calculation interrupted");
    }
  }
  printDebugMemoryInformation(ctx,graphDirectSegments,graphReverseSegments,visitedDirectSegments,visitedOppositeSegments);
  return finalSegment;
}
