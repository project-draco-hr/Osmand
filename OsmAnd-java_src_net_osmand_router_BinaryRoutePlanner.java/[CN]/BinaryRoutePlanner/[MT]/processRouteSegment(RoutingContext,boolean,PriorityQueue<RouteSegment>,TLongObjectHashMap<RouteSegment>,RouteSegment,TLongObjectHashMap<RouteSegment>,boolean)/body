{
  final RouteDataObject road=segment.road;
  boolean initDirectionAllowed=checkIfInitialMovementAllowedOnSegment(ctx,reverseWaySearch,visitedSegments,segment,road);
  if (TEST_SPECIFIC && road.getId() >> 6 == TEST_ID) {
    printRoad(" ! " + +segment.distanceFromStart + " ",segment,reverseWaySearch);
  }
  boolean directionAllowed=initDirectionAllowed;
  if (!directionAllowed) {
    if (TRACE_ROUTING) {
      println("  >> Already visited");
    }
    return;
  }
  float obstaclesTime=0;
  float segmentDist=0;
  short segmentPoint=segment.getSegmentStart();
  boolean[] processFurther=new boolean[1];
  RouteSegment previous=segment;
  boolean dir=segment.isPositive();
  while (directionAllowed) {
    short prevInd=segmentPoint;
    if (dir) {
      segmentPoint++;
    }
 else {
      segmentPoint--;
    }
    if (segmentPoint < 0 || segmentPoint >= road.getPointsLength()) {
      directionAllowed=false;
      continue;
    }
    visitedSegments.put(calculateRoutePointId(segment.getRoad(),segment.isPositive() ? segmentPoint - 1 : segmentPoint,segment.isPositive()),previous != null ? previous : segment);
    final int x=road.getPoint31XTile(segmentPoint);
    final int y=road.getPoint31YTile(segmentPoint);
    final int prevx=road.getPoint31XTile(prevInd);
    final int prevy=road.getPoint31YTile(prevInd);
    if (x == prevx && y == prevy) {
      continue;
    }
    segmentDist+=squareRootDist(x,y,prevx,prevy);
    double obstacle=ctx.getRouter().defineRoutingObstacle(road,segmentPoint);
    if (obstacle < 0) {
      directionAllowed=false;
      continue;
    }
    obstaclesTime+=obstacle;
    boolean alreadyVisited=checkIfOppositeSegmentWasVisited(ctx,reverseWaySearch,graphSegments,segment,oppositeSegments,segmentPoint,segmentDist,obstaclesTime);
    if (alreadyVisited) {
      directionAllowed=false;
      continue;
    }
    if (ctx.precalculatedRouteDirection != null) {
    }
    final RouteSegment roadNext=ctx.loadRouteSegment(x,y,ctx.config.memoryLimitation - ctx.memoryOverhead);
    float distStartObstacles=segment.distanceFromStart + calculateTimeWithObstacles(ctx,road,segmentDist,obstaclesTime);
    if (ctx.precalculatedRouteDirection != null && ctx.precalculatedRouteDirection.isFollowNext()) {
      distStartObstacles=ctx.precalculatedRouteDirection.getDeviationDistance(x,y) / ctx.getRouter().getMaxDefaultSpeed();
    }
    previous=processIntersections(ctx,graphSegments,visitedSegments,distStartObstacles,segment,segmentPoint,roadNext,reverseWaySearch,doNotAddIntersections,processFurther);
    if (!processFurther[0]) {
      directionAllowed=false;
      continue;
    }
  }
  if (initDirectionAllowed && ctx.visitor != null) {
    ctx.visitor.visitSegment(segment,segmentPoint,true);
  }
}
