{
  String deviceKey=app.getSettings().OSMO_DEVICE_KEY.get();
  if (deviceKey.length() == 0) {
    deviceKey=registerOsmoDeviceKey();
  }
  HttpClient httpclient=new DefaultHttpClient();
  KeyPair getMsgPair=null;
  if (plugin.useHttps() && USE_RSA_ENCRYPTION) {
    try {
      KeyPairGenerator rsaGen=KeyPairGenerator.getInstance("RSA");
      getMsgPair=rsaGen.generateKeyPair();
    }
 catch (    Exception e1) {
      if (thread != null) {
        thread.exc("Private key can't be generated",e1);
      }
 else {
        e1.printStackTrace();
      }
    }
  }
  HttpPost httppost=new HttpPost(plugin.useHttps() ? HTTPS_API_PREPARE : HTTP_API_PREPARE);
  try {
    List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(2);
    nameValuePairs.add(new BasicNameValuePair("app",Version.getFullVersion(app)));
    nameValuePairs.add(new BasicNameValuePair("key",deviceKey));
    if (getMsgPair != null && getMsgPair.getPublic() instanceof RSAPublicKey) {
      nameValuePairs.add(new BasicNameValuePair("encAlgorithm","RSA"));
      BigInteger modulus=((RSAPublicKey)getMsgPair.getPublic()).getModulus();
      BigInteger pe=((RSAPublicKey)getMsgPair.getPublic()).getPublicExponent();
      nameValuePairs.add(new BasicNameValuePair("encClientPublicKey1",modulus.toString()));
      nameValuePairs.add(new BasicNameValuePair("encClientPublicKey2",pe.toString()));
    }
    if (app.getSettings().OSMO_USER_PWD.get() != null) {
      nameValuePairs.add(new BasicNameValuePair("auth",app.getSettings().OSMO_USER_PWD.get()));
    }
    nameValuePairs.add(new BasicNameValuePair("protocol","1"));
    httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
    HttpResponse response=httpclient.execute(httppost);
    InputStream cm=response.getEntity().getContent();
    BufferedReader reader=new BufferedReader(new InputStreamReader(cm));
    String r=reader.readLine();
    reader.close();
    log.info("Authorization key : " + r);
    final JSONObject obj=new JSONObject(r);
    if (obj.has("error")) {
      lastRegistrationError=obj.getString("error");
      runNotification(lastRegistrationError);
      return null;
    }
    if (!obj.has("address")) {
      lastRegistrationError="Host name not specified";
      throw new RuntimeException("Host name not specified");
    }
    if (!obj.has("token")) {
      lastRegistrationError="Token not specified by server";
      throw new RuntimeException("Token not specified by server");
    }
    SessionInfo si=new SessionInfo();
    String a=obj.getString("address");
    if (obj.has("name")) {
      si.username=obj.getString("name");
    }
    if (obj.has("uid")) {
      si.uid=obj.getString("uid");
    }
    int i=a.indexOf(':');
    si.hostName=a.substring(0,i);
    si.port=a.substring(i + 1);
    si.token=obj.getString("token");
    try {
      if (getMsgPair != null && obj.has("encServerPublicKey1")) {
        si.clientEncCypher=Cipher.getInstance("RSA");
        PublicKey pk=KeyFactory.getInstance("RSA").generatePublic(new RSAPublicKeySpec(new BigInteger(obj.getString("encServerPublicKey1")),new BigInteger(obj.getString("encServerPublicKey2"))));
        si.clientEncCypher.init(Cipher.ENCRYPT_MODE,pk);
        si.clientDecCypher=Cipher.getInstance("RSA");
        si.clientDecCypher.init(Cipher.DECRYPT_MODE,getMsgPair.getPrivate());
      }
    }
 catch (    Exception e) {
      if (thread != null) {
        thread.exc("Error exchanging private keys",e);
      }
 else {
        e.printStackTrace();
      }
    }
    return si;
  }
 catch (  ClientProtocolException e) {
    throw new IOException(e);
  }
catch (  IOException e) {
    throw e;
  }
catch (  JSONException e) {
    throw new IOException(e);
  }
}
