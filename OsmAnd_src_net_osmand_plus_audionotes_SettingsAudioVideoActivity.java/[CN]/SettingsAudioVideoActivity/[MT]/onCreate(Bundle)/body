{
  ((OsmandApplication)getApplication()).applyTheme(this);
  super.onCreate(savedInstanceState);
  getToolbar().setTitle(R.string.av_settings);
  PreferenceScreen grp=getPreferenceScreen();
  AudioVideoNotesPlugin p=OsmandPlugin.getEnabledPlugin(AudioVideoNotesPlugin.class);
  if (p != null) {
    String[] entries;
    Integer[] intValues;
    entries=new String[]{getString(R.string.av_def_action_choose),getString(R.string.av_def_action_audio),getString(R.string.av_def_action_video),getString(R.string.av_def_action_picture)};
    intValues=new Integer[]{AV_DEFAULT_ACTION_CHOOSE,AV_DEFAULT_ACTION_AUDIO,AV_DEFAULT_ACTION_VIDEO,AV_DEFAULT_ACTION_TAKEPICTURE};
    ListPreference defAct=createListPreference(p.AV_DEFAULT_ACTION,entries,intValues,R.string.av_widget_action,R.string.av_widget_action_descr);
    grp.addPreference(defAct);
    PreferenceCategory photo=new PreferenceCategory(this);
    photo.setTitle(R.string.shared_string_photo);
    grp.addPreference(photo);
    final Camera cam=openCamera();
    if (cam != null) {
      photo.addPreference(createCheckBoxPreference(p.AV_EXTERNAL_PHOTO_CAM,R.string.av_use_external_camera,R.string.av_use_external_camera_descr));
      Parameters parameters=cam.getParameters();
      List<Camera.Size> psps=parameters.getSupportedPictureSizes();
      List<Integer> mpix=new ArrayList<Integer>();
      List<Integer> picSizesValues=new ArrayList<Integer>();
      for (int index=0; index < psps.size(); index++) {
        mpix.add((psps.get(index)).width * (psps.get(index)).height);
        picSizesValues.add(index);
      }
      for (int i=0; i < mpix.size(); i++) {
        for (int j=0; j < mpix.size() - i - 1; j++) {
          if (mpix.get(j) < mpix.get(j + 1)) {
            int tmp=mpix.get(j + 1);
            mpix.set(j + 1,mpix.get(j));
            mpix.set(j,tmp);
            tmp=picSizesValues.get(j + 1);
            picSizesValues.set(j + 1,picSizesValues.get(j));
            picSizesValues.set(j,tmp);
          }
        }
      }
      cameraPictureSizeDefault=picSizesValues.get(0);
      log.debug("onCreate() set cameraPictureSizeDefault=" + cameraPictureSizeDefault);
      List<String> itemsPicSizes=new ArrayList<String>();
      String prefix;
      for (int index=0; index < psps.size(); index++) {
        float px=(float)((psps.get(picSizesValues.get(index))).width * (psps.get(picSizesValues.get(index))).height);
        if (px > 102400) {
          px=px / 1048576;
          prefix="Mpx";
        }
 else {
          px=px / 1024;
          prefix="Kpx";
        }
        itemsPicSizes.add((psps.get(picSizesValues.get(index))).width + "x" + (psps.get(picSizesValues.get(index))).height+ " ( "+ String.format("%.2f",px)+ " "+ prefix+ " )");
      }
      log.debug("onCreate() set default size: width=" + psps.get(cameraPictureSizeDefault).width + " height="+ psps.get(cameraPictureSizeDefault).height+ " index in ps="+ cameraPictureSizeDefault);
      entries=itemsPicSizes.toArray(new String[itemsPicSizes.size()]);
      intValues=picSizesValues.toArray(new Integer[picSizesValues.size()]);
      if (entries.length > 0) {
        ListPreference camSizes=createListPreference(p.AV_CAMERA_PICTURE_SIZE,entries,intValues,R.string.av_camera_pic_size,R.string.av_camera_pic_size_descr);
        photo.addPreference(camSizes);
      }
      List<String> sfm=parameters.getSupportedFocusModes();
      List<String> items=new ArrayList<String>();
      List<Integer> itemsValues=new ArrayList<Integer>();
      for (int index=0; index < sfm.size(); index++) {
        if (sfm.get(index).equals("auto")) {
          items.add(getString(R.string.av_camera_focus_auto));
          itemsValues.add(AV_CAMERA_FOCUS_AUTO);
        }
 else         if (sfm.get(index).equals("fixed")) {
          items.add(getString(R.string.av_camera_focus_hiperfocal));
          itemsValues.add(AV_CAMERA_FOCUS_HIPERFOCAL);
        }
 else         if (sfm.get(index).equals("edof")) {
          items.add(getString(R.string.av_camera_focus_edof));
          itemsValues.add(AV_CAMERA_FOCUS_EDOF);
        }
 else         if (sfm.get(index).equals("infinity")) {
          items.add(getString(R.string.av_camera_focus_infinity));
          itemsValues.add(AV_CAMERA_FOCUS_INFINITY);
        }
 else         if (sfm.get(index).equals("macro")) {
          items.add(getString(R.string.av_camera_focus_macro));
          itemsValues.add(AV_CAMERA_FOCUS_MACRO);
        }
 else         if (sfm.get(index).equals("continuous-picture")) {
          items.add(getString(R.string.av_camera_focus_continuous));
          itemsValues.add(AV_CAMERA_FOCUS_CONTINUOUS);
        }
      }
      entries=items.toArray(new String[items.size()]);
      intValues=itemsValues.toArray(new Integer[itemsValues.size()]);
      if (entries.length > 0) {
        ListPreference camFocus=createListPreference(p.AV_CAMERA_FOCUS_TYPE,entries,intValues,R.string.av_camera_focus,R.string.av_camera_focus_descr);
        photo.addPreference(camFocus);
      }
      photo.addPreference(createCheckBoxPreference(p.AV_PHOTO_PLAY_SOUND,R.string.av_photo_play_sound,R.string.av_photo_play_sound_descr));
      cam.release();
    }
    PreferenceCategory video=new PreferenceCategory(this);
    video.setTitle(R.string.shared_string_video);
    grp.addPreference(video);
    video.addPreference(createCheckBoxPreference(p.AV_EXTERNAL_RECORDER,R.string.av_use_external_recorder,R.string.av_use_external_recorder_descr));
    List<String> qNames=new ArrayList<>();
    List<Integer> qValues=new ArrayList<>();
    if (CamcorderProfile.hasProfile(CamcorderProfile.QUALITY_LOW)) {
      qNames.add(getString(R.string.av_video_quality_low));
      qValues.add(CamcorderProfile.QUALITY_LOW);
    }
    if (CamcorderProfile.hasProfile(CamcorderProfile.QUALITY_HIGH)) {
      qNames.add(getString(R.string.av_video_quality_high));
      qValues.add(CamcorderProfile.QUALITY_HIGH);
    }
    if (CamcorderProfile.hasProfile(CamcorderProfile.QUALITY_480P)) {
      qNames.add("720 x 480 (480p)");
      qValues.add(CamcorderProfile.QUALITY_480P);
    }
    if (CamcorderProfile.hasProfile(CamcorderProfile.QUALITY_720P)) {
      qNames.add("1280 x 720 (720p)");
      qValues.add(CamcorderProfile.QUALITY_720P);
    }
    if (CamcorderProfile.hasProfile(CamcorderProfile.QUALITY_1080P)) {
      qNames.add("1920 x 1080 (1080p)");
      qValues.add(CamcorderProfile.QUALITY_1080P);
    }
    if (Build.VERSION.SDK_INT >= 21 && CamcorderProfile.hasProfile(CamcorderProfile.QUALITY_2160P)) {
      qNames.add("3840x2160 (2160p)");
      qValues.add(CamcorderProfile.QUALITY_2160P);
    }
    ListPreference lp=createListPreference(p.AV_VIDEO_QUALITY,qNames.toArray(new String[qNames.size()]),qValues.toArray(new Integer[qValues.size()]),R.string.av_video_quality,R.string.av_video_quality_descr);
    video.addPreference(lp);
    PreferenceCategory audio=new PreferenceCategory(this);
    audio.setTitle(R.string.shared_string_audio);
    grp.addPreference(audio);
    entries=new String[]{"Default","AAC"};
    intValues=new Integer[]{MediaRecorder.AudioEncoder.DEFAULT,MediaRecorder.AudioEncoder.AAC};
    lp=createListPreference(p.AV_AUDIO_FORMAT,entries,intValues,R.string.av_audio_format,R.string.av_audio_format_descr);
    audio.addPreference(lp);
    entries=new String[]{"Default","16 kbps","32 kbps","48 kbps","64 kbps","96 kbps","128 kbps"};
    intValues=new Integer[]{AUDIO_BITRATE_DEFAULT,16 * 1024,32 * 1024,48 * 1024,64 * 1024,96 * 1024,128 * 1024};
    lp=createListPreference(p.AV_AUDIO_BITRATE,entries,intValues,R.string.av_audio_bitrate,R.string.av_audio_bitrate_descr);
    audio.addPreference(lp);
  }
}
