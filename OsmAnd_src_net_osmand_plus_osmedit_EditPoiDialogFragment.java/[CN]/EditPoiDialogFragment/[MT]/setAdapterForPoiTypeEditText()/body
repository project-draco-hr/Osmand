{
  final Map<String,PoiType> subCategories=new LinkedHashMap<>();
  for (  Map.Entry<String,PoiType> s : editPoiData.getAllTranslatedSubTypes().entrySet()) {
    if (!subCategories.containsKey(s.getKey()) && !s.getValue().isNotEditableOsm()) {
      subCategories.put(Algorithms.capitalizeFirstLetterAndLowercase(s.getKey()),s.getValue());
    }
  }
  final ArrayAdapter<Object> adapter;
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    adapter=new ArrayAdapter<>(getActivity(),R.layout.list_textview,subCategories.keySet().toArray());
  }
 else {
    TypedValue typedValue=new TypedValue();
    Resources.Theme theme=getActivity().getTheme();
    theme.resolveAttribute(android.R.attr.textColorSecondary,typedValue,true);
    final int textColor=typedValue.data;
    adapter=new ArrayAdapter<Object>(getActivity(),R.layout.list_textview,subCategories.keySet().toArray()){
      @Override public View getView(      int position,      View convertView,      ViewGroup parent){
        final View view=super.getView(position,convertView,parent);
        ((TextView)view.findViewById(R.id.textView)).setTextColor(textColor);
        return view;
      }
    }
;
  }
  adapter.sort(new Comparator<Object>(){
    @Override public int compare(    Object lhs,    Object rhs){
      return lhs.toString().compareTo(rhs.toString());
    }
  }
);
  poiTypeEditText.setAdapter(adapter);
  poiTypeEditText.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      Object item=parent.getAdapter().getItem(position);
      if (subCategories.containsKey(item.toString().toLowerCase())) {
        PoiType pt=subCategories.get(item);
        String keyName=pt.getKeyName();
        poiTypeTextInputLayout.setHint(pt.getCategory().getTranslation());
        poiTypeEditText.setText(keyName);
      }
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
}
