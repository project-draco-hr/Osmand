{
  view=inflater.inflate(R.layout.fragment_edit_poi,container,false);
  boolean isLightTheme=getSettings().OSMAND_THEME.get() == OsmandSettings.OSMAND_LIGHT_THEME;
  if (savedInstanceState != null) {
    @SuppressWarnings("unchecked") Map<String,String> mp=(Map<String,String>)savedInstanceState.getSerializable(TAGS_LIST);
    editPoiData.updateTags(mp);
  }
  boolean isAddingPoi=getArguments().getBoolean(IS_ADDING_POI);
  Toolbar toolbar=(Toolbar)view.findViewById(R.id.toolbar);
  toolbar.setTitle(isAddingPoi ? R.string.poi_create_title : R.string.poi_edit_title);
  toolbar.setNavigationIcon(R.drawable.abc_ic_ab_back_mtrl_am_alpha);
  toolbar.setNavigationContentDescription(R.string.access_shared_string_navigate_up);
  toolbar.setNavigationOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      dismissCheckForChanges();
    }
  }
);
  viewPager=(ViewPager)view.findViewById(R.id.viewpager);
  String basicTitle=getResources().getString(R.string.tab_title_basic);
  String extendedTitle=getResources().getString(R.string.tab_title_advanced);
  final MyAdapter pagerAdapter=new MyAdapter(getChildFragmentManager(),basicTitle,extendedTitle);
  viewPager.setAdapter(pagerAdapter);
  viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    @Override public void onPageScrolled(    int i,    float v,    int i1){
    }
    @Override public void onPageSelected(    int i){
      ((OnFragmentActivatedListener)pagerAdapter.getItem(i)).onFragmentActivated();
    }
    @Override public void onPageScrollStateChanged(    int i){
    }
  }
);
  final TabLayout tabLayout=(TabLayout)view.findViewById(R.id.tab_layout);
  tabLayout.setTabMode(TabLayout.MODE_SCROLLABLE);
  if (Build.VERSION.SDK_INT >= 11) {
    if (ViewCompat.isLaidOut(tabLayout)) {
      tabLayout.setupWithViewPager(viewPager);
    }
 else {
      tabLayout.addOnLayoutChangeListener(new View.OnLayoutChangeListener(){
        @Override public void onLayoutChange(        View v,        int left,        int top,        int right,        int bottom,        int oldLeft,        int oldTop,        int oldRight,        int oldBottom){
          tabLayout.setupWithViewPager(viewPager);
          tabLayout.removeOnLayoutChangeListener(this);
        }
      }
);
    }
  }
 else {
    ViewTreeObserver vto=view.getViewTreeObserver();
    vto.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
      @Override public void onGlobalLayout(){
        ViewTreeObserver obs=view.getViewTreeObserver();
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
          obs.removeOnGlobalLayoutListener(this);
        }
 else {
          obs.removeGlobalOnLayoutListener(this);
        }
        if (getActivity() != null) {
          tabLayout.setupWithViewPager(viewPager);
        }
      }
    }
);
  }
  ImageButton onlineDocumentationButton=(ImageButton)view.findViewById(R.id.onlineDocumentationButton);
  onlineDocumentationButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      getActivity().startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse("https://wiki.openstreetmap.org/wiki/Map_Features")));
    }
  }
);
  final int colorId=isLightTheme ? R.color.inactive_item_orange : R.color.dash_search_icon_dark;
  final int color=getResources().getColor(colorId);
  onlineDocumentationButton.setImageDrawable(getPaintedContentIcon(R.drawable.ic_action_help,color));
  final ImageButton poiTypeButton=(ImageButton)view.findViewById(R.id.poiTypeButton);
  poiTypeButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      DialogFragment fragment=PoiTypeDialogFragment.createInstance();
      fragment.show(getChildFragmentManager(),"PoiTypeDialogFragment");
    }
  }
);
  EditText poiNameEditText=(EditText)view.findViewById(R.id.poiNameEditText);
  poiNameEditText.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      if (!getEditPoiData().isInEdit()) {
        if (!TextUtils.isEmpty(s)) {
          getEditPoiData().putTag(OSMSettings.OSMTagKey.NAME.getValue(),s.toString());
        }
 else {
          getEditPoiData().removeTag(OSMSettings.OSMTagKey.NAME.getValue());
        }
      }
    }
  }
);
  poiNameEditText.setText(editPoiData.getTag(OSMSettings.OSMTagKey.NAME.getValue()));
  poiTypeTextInputLayout=(TextInputLayout)view.findViewById(R.id.poiTypeTextInputLayout);
  poiTypeEditText=(AutoCompleteTextView)view.findViewById(R.id.poiTypeEditText);
  poiTypeEditText.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      if (!getEditPoiData().isInEdit()) {
        getEditPoiData().updateTypeTag(s.toString());
        poiTypeTextInputLayout.setHint(editPoiData.getPoiCategory().getTranslation());
      }
    }
  }
);
  poiNameEditText.setOnEditorActionListener(mOnEditorActionListener);
  poiTypeEditText.setOnEditorActionListener(mOnEditorActionListener);
  poiTypeEditText.setText(editPoiData.getPoiTypeString());
  poiTypeEditText.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    final View v,    MotionEvent event){
      final EditText editText=(EditText)v;
      final int DRAWABLE_RIGHT=2;
      if (event.getAction() == MotionEvent.ACTION_UP) {
        if (event.getX() >= (editText.getRight() - editText.getCompoundDrawables()[DRAWABLE_RIGHT].getBounds().width() - editText.getPaddingRight())) {
          if (editPoiData.getPoiCategory() != null) {
            DialogFragment dialogFragment=PoiSubTypeDialogFragment.createInstance(editPoiData.getPoiCategory());
            dialogFragment.show(getChildFragmentManager(),"PoiSubTypeDialogFragment");
          }
          return true;
        }
      }
      return false;
    }
  }
);
  Button saveButton=(Button)view.findViewById(R.id.saveButton);
  saveButton.setText(mOpenstreetmapUtil instanceof OpenstreetmapRemoteUtil ? R.string.shared_string_upload : R.string.shared_string_save);
  saveButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      trySave();
    }
  }
);
  Button cancelButton=(Button)view.findViewById(R.id.cancelButton);
  cancelButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      dismissCheckForChanges();
    }
  }
);
  setAdapterForPoiTypeEditText();
  setCancelable(false);
  return view;
}
