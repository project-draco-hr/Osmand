{
  View row=convertView;
  if (row == null) {
    LayoutInflater inflater=getLayoutInflater();
    row=inflater.inflate(R.layout.searchpoi_list,parent,false);
  }
  float[] mes=null;
  TextView label=(TextView)row.findViewById(R.id.poi_label);
  TextView distanceText=(TextView)row.findViewById(R.id.distance);
  TextView timeText=(TextView)row.findViewById(R.id.time);
  ImageView direction=(ImageView)row.findViewById(R.id.poi_direction);
  ImageView timeIcon=(ImageView)row.findViewById(R.id.time_icon);
  ImageView icon=(ImageView)row.findViewById(R.id.poi_icon);
  Amenity amenity=getItem(position);
  if (amenity.getOpeningHours() != null) {
    OpeningHours rs=OpeningHoursParser.parseOpenedHours(amenity.getOpeningHours());
    if (rs != null) {
      Calendar inst=Calendar.getInstance();
      inst.setTimeInMillis(System.currentTimeMillis());
      boolean worksNow=rs.isOpenedForTime(inst);
      inst.setTimeInMillis(System.currentTimeMillis() + 30 * 60 * 1000);
      boolean worksLater=rs.isOpenedForTime(inst);
      int colorId=worksNow ? worksLater ? color.color_ok : color.color_intermediate : color.color_warning;
      timeIcon.setVisibility(View.VISIBLE);
      timeText.setVisibility(View.VISIBLE);
      timeIcon.setImageDrawable(app.getIconsCache().getIcon(R.drawable.ic_small_time,colorId));
      timeText.setTextColor(app.getResources().getColor(colorId));
      String rt=rs.getCurrentRuleTime(inst);
      timeText.setText(rt == null ? "" : rt);
    }
 else {
      timeIcon.setVisibility(View.GONE);
      timeText.setVisibility(View.GONE);
    }
  }
 else {
    timeIcon.setVisibility(View.GONE);
    timeText.setVisibility(View.GONE);
  }
  Drawable dd=direction.getDrawable();
  DirectionDrawable draw;
  if (dd instanceof DirectionDrawable) {
    draw=(DirectionDrawable)dd;
  }
 else {
    draw=new DirectionDrawable(SearchPOIActivity.this,24,24,R.drawable.ic_destination_arrow_white,R.color.color_distance);
    direction.setImageDrawable(draw);
  }
  net.osmand.Location loc=location;
  if (loc != null) {
    mes=new float[2];
    LatLon l=amenity.getLocation();
    net.osmand.Location.distanceBetween(l.getLatitude(),l.getLongitude(),loc.getLatitude(),loc.getLongitude(),mes);
  }
  if (loc != null) {
    float a=heading != null ? heading : 0;
    draw.setAngle(mes[1] - a + 180 + screenOrientation);
  }
 else {
    draw.setAngle(0);
  }
  draw.setColorId(searchNearBy ? color.color_myloc_distance : color.color_distance);
  direction.setImageDrawable(draw);
  PoiType st=amenity.getType().getPoiTypeByKeyName(amenity.getSubType());
  if (st != null) {
    if (RenderingIcons.containsBigIcon(st.getIconKeyName())) {
      icon.setImageResource(RenderingIcons.getBigIconResourceId(st.getIconKeyName()));
    }
 else     if (RenderingIcons.containsBigIcon(st.getOsmTag() + "_" + st.getOsmValue())) {
      icon.setImageResource(RenderingIcons.getBigIconResourceId(st.getOsmTag() + "_" + st.getOsmValue()));
    }
 else {
      icon.setImageDrawable(null);
    }
  }
 else {
    icon.setImageDrawable(null);
  }
  String distance="  ";
  if (mes != null) {
    distance=" " + OsmAndFormatter.getFormattedDistance((int)mes[0],getMyApplication()) + "  ";
  }
  String poiType=OsmAndFormatter.getPoiStringWithoutType(amenity,app.getSettings().MAP_PREFERRED_LOCALE.get());
  label.setText(poiType);
  distanceText.setText(distance);
  ViewCompat.setAccessibilityDelegate(row,accessibilityAssistant);
  return (row);
}
