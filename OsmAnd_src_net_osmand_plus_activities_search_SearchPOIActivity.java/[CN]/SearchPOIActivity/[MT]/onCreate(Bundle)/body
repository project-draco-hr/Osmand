{
  super.onCreate(icicle);
  setContentView(R.layout.searchpoi);
  getSupportActionBar().setTitle(R.string.searchpoi_activity);
  setSupportProgressBarIndeterminateVisibility(false);
  app=(OsmandApplication)getApplication();
  searchFilter=(EditText)findViewById(R.id.edit);
  searchFilterLayout=findViewById(R.id.SearchFilterLayout);
  settings=((OsmandApplication)getApplication()).getSettings();
  searchFilter.addTextChangedListener(new TextWatcher(){
    @Override public void afterTextChanged(    Editable s){
      if (!isNameFinderFilter() && !isSearchByNameFilter()) {
        amenityAdapter.getFilter().filter(s);
      }
 else {
        if (searchPOILevel != null) {
          searchPOILevel.setEnabled(true);
          searchPOILevel.setTitle(R.string.search_button);
        }
      }
    }
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
  }
);
  searchFilter.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (hasFocus) {
        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
      }
    }
  }
);
  amenityAdapter=new AmenityAdapter(new ArrayList<Amenity>());
  setListAdapter(amenityAdapter);
  boolean light=getMyApplication().getSettings().isLightContent();
  Drawable arrowImage=getResources().getDrawable(R.drawable.ic_destination_arrow_white);
  if (light) {
    arrowImage.setColorFilter(getResources().getColor(R.color.color_distance),PorterDuff.Mode.MULTIPLY);
  }
 else {
    arrowImage.setColorFilter(getResources().getColor(R.color.color_distance),PorterDuff.Mode.MULTIPLY);
  }
}
