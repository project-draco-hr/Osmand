{
  landscape=!ScreenOrientationHelper.isOrientationPortrait(mapActivity);
  dashboardView=(FrameLayout)mapActivity.findViewById(R.id.dashboard);
  View.OnClickListener listener=new View.OnClickListener(){
    @Override public void onClick(    View v){
      setDashboardVisibility(false);
    }
  }
;
  dashboardView.findViewById(R.id.animateContent).setOnClickListener(listener);
  dashboardView.setOnClickListener(listener);
  switchButton=(ImageView)dashboardView.findViewById(R.id.map_layers_button);
  switchButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      setDashboardVisibility(false);
      mapActivity.getMyApplication().getSettings().USE_DASHBOARD_INSTEAD_OF_DRAWER.set(false);
      mapActivity.getMapActions().toggleDrawer();
    }
  }
);
  actionButton=new ActionButton(mapActivity);
  FrameLayout.LayoutParams params=new FrameLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT);
  int marginRight=convertPixelsToDp(16,mapActivity);
  params.setMargins(0,landscape ? 0 : convertPixelsToDp(164,mapActivity),marginRight,landscape ? marginRight : 0);
  params.gravity=landscape ? Gravity.BOTTOM | Gravity.RIGHT : Gravity.TOP | Gravity.RIGHT;
  actionButton.setLayoutParams(params);
  actionButton.setImageDrawable(mapActivity.getResources().getDrawable(R.drawable.ic_action_map));
  actionButton.setButtonColor(mapActivity.getResources().getColor(R.color.color_myloc_distance));
  actionButton.hide();
  actionButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (getMyApplication().accessibilityEnabled()) {
        mapActivity.getMapActions().whereAmIDialog();
      }
 else {
        mapActivity.getMapViewTrackingUtilities().backToLocationImpl();
      }
      setDashboardVisibility(false);
    }
  }
);
  dashboardView.addView(actionButton);
  if (ScreenOrientationHelper.isOrientationPortrait(mapActivity)) {
    ((NotifyingScrollView)dashboardView.findViewById(R.id.main_scroll)).setOnScrollChangedListener(onScrollChangedListener);
  }
}
