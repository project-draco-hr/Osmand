{
  List<IndexItem> resourcesInRepository;
  if (resources != null) {
    resourcesInRepository=resources;
  }
 else {
    resourcesInRepository=DownloadActivity.downloadListIndexThread.getCachedIndexFiles();
  }
  if (resourcesInRepository == null) {
    return false;
  }
  resourcesByRegions.clear();
  voiceRecItems.clear();
  voiceTTSItems.clear();
  List<WorldRegion> mergedRegions=app.getWorldRegion().getFlattenedSubregions();
  mergedRegions.add(app.getWorldRegion());
  boolean voiceFilesProcessed=false;
  for (  WorldRegion region : mergedRegions) {
    String downloadsIdPrefix=region.getDownloadsIdPrefix();
    Map<String,IndexItem> regionResources=new HashMap<>();
    Set<DownloadActivityType> typesSet=new TreeSet<>(new Comparator<DownloadActivityType>(){
      @Override public int compare(      DownloadActivityType dat1,      DownloadActivityType dat2){
        return dat1.getTag().compareTo(dat2.getTag());
      }
    }
);
    for (    IndexItem resource : resourcesInRepository) {
      if (!voiceFilesProcessed) {
        if (resource.getSimplifiedFileName().endsWith(".voice.zip")) {
          voiceRecItems.add(resource);
          continue;
        }
 else         if (resource.getSimplifiedFileName().contains(".ttsvoice.zip")) {
          voiceTTSItems.add(resource);
          continue;
        }
      }
      if (!resource.getSimplifiedFileName().startsWith(downloadsIdPrefix)) {
        continue;
      }
      typesSet.add(resource.getType());
      regionResources.put(resource.getSimplifiedFileName(),resource);
    }
    voiceFilesProcessed=true;
    if (region.getSuperregion() != null && region.getSuperregion().getSuperregion() != app.getWorldRegion()) {
      if (region.getSuperregion().getResourceTypes() == null) {
        region.getSuperregion().setResourceTypes(typesSet);
      }
 else {
        region.getSuperregion().getResourceTypes().addAll(typesSet);
      }
    }
    region.setResourceTypes(typesSet);
    resourcesByRegions.put(region,regionResources);
  }
  final Collator collator=OsmAndCollator.primaryCollator();
  final OsmandRegions osmandRegions=app.getRegions();
  Collections.sort(voiceRecItems,new Comparator<IndexItem>(){
    @Override public int compare(    IndexItem lhs,    IndexItem rhs){
      return collator.compare(lhs.getVisibleName(app.getApplicationContext(),osmandRegions),rhs.getVisibleName(app.getApplicationContext(),osmandRegions));
    }
  }
);
  Collections.sort(voiceTTSItems,new Comparator<IndexItem>(){
    @Override public int compare(    IndexItem lhs,    IndexItem rhs){
      return collator.compare(lhs.getVisibleName(app.getApplicationContext(),osmandRegions),rhs.getVisibleName(app.getApplicationContext(),osmandRegions));
    }
  }
);
  return true;
}
