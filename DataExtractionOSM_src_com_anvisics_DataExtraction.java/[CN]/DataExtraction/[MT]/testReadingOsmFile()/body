{
  InputStream stream;
  if (parseMinsk) {
    stream=new FileInputStream(Constants.pathToTestDataDir + "minsk_old.osm");
  }
 else {
    stream=new FileInputStream(Constants.pathToTestDataDir + "minsk_2010_04_26.osm.bz2");
    if (stream.read() != 66 || stream.read() != 90)     throw new RuntimeException("The source stream must start with the characters BZ if it is to be read as a BZip2 stream.");
 else     stream=new CBZip2InputStream(stream);
  }
  System.out.println("USED Memory " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / 1e6);
  long st=System.currentTimeMillis();
  final List<Node> places=new ArrayList<Node>();
  final Map<Long,LatLon> nodes=new HashMap<Long,LatLon>();
  final List<Entity> buildings=new ArrayList<Entity>();
  final List<Node> amenities=new ArrayList<Node>();
  final Map<String,Integer> mapWays=new LinkedHashMap<String,Integer>();
  if (parseOSM) {
    SAXParser parser=SAXParserFactory.newInstance().newSAXParser();
    parser.parse(stream,new OsmHandler(new Sink(){
      @Override public void process(      EntityContainer entityContainer){
        if (entityContainer instanceof NodeContainer) {
          NodeContainer rc=(NodeContainer)entityContainer;
          if (NodeUtil.getTag(rc.getEntity(),"place") != null) {
            places.add(rc.getEntity());
            if (places.size() % 500 == 0) {
              System.out.println();
            }
            System.out.print("-");
          }
          nodes.put(rc.getEntity().getId(),new LatLon(rc.getEntity().getLatitude(),rc.getEntity().getLongitude()));
          if (NodeUtil.getTag(entityContainer.getEntity(),"amenity") != null) {
            amenities.add((Node)entityContainer.getEntity());
          }
 else           if (NodeUtil.getTag(entityContainer.getEntity(),"shop") != null) {
            Entity n=entityContainer.getEntity();
            n.getTags().add(new Tag("amenity","shop"));
            amenities.add((Node)n);
          }
        }
 else {
          if (NodeUtil.tag(entityContainer.getEntity(),"building","yes")) {
            Entity e=entityContainer.getEntity();
            if (NodeUtil.getTag(e,Constants.ADDR_HOUSE_NUMBER) != null && NodeUtil.getTag(e,Constants.ADDR_STREET) != null) {
              buildings.add(e);
            }
          }
          if (NodeUtil.getTag(entityContainer.getEntity(),"highway") != null) {
            String h=NodeUtil.getTag(entityContainer.getEntity(),"highway");
            if (!mapWays.containsKey(h)) {
              mapWays.put(h,0);
            }
            mapWays.put(h,mapWays.get(h) + 1);
          }
        }
      }
      @Override public void complete(){
      }
      @Override public void release(){
      }
    }
,false));
  }
  System.out.println("\n" + mapWays);
  System.out.println(System.currentTimeMillis() - st);
  Region country=new Region(null);
  for (  Node s : places) {
    String place=NodeUtil.getTag(s,"place");
    if (place == null) {
      continue;
    }
    if ("country".equals(place)) {
      country.setEntity(s);
    }
 else {
      City registerCity=country.registerCity(s);
      if (registerCity == null) {
        System.out.println(place + " - " + NodeUtil.getTag(s,"name"));
      }
    }
  }
  for (  Entity b : buildings) {
    LatLon center;
    if (b instanceof Node) {
      center=NodeUtil.getLatLon((Node)b);
    }
 else {
      center=NodeUtil.getWeightCenter((Way)b,nodes);
    }
    City city=country.getClosestCity(center);
    if (city != null) {
      city.registerBuilding(center,b);
    }
  }
  for (  Node node : amenities) {
    country.registerAmenity(node);
  }
  runUI(country);
  System.out.println();
  System.out.println("USED Memory " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / 1e6);
  System.out.println("TIME : " + (System.currentTimeMillis() - st));
}
