{
  final Amenity a=new Amenity(n,type,subtype);
  dlg.setContentView(R.layout.editing_poi);
  nameText=((EditText)dlg.findViewById(R.id.Name));
  nameText.setText(a.getName());
  typeText=((AutoCompleteTextView)dlg.findViewById(R.id.Type));
  typeButton=((Button)dlg.findViewById(R.id.TypeButton));
  openHoursButton=((Button)dlg.findViewById(R.id.OpenHoursButton));
  openingHours=((EditText)dlg.findViewById(R.id.OpeningHours));
  openingHours.setText(a.getOpeningHours());
  typeText=((AutoCompleteTextView)dlg.findViewById(R.id.Type));
  typeText.setThreshold(1);
  commentText=((EditText)dlg.findViewById(R.id.Comment));
  updateType(a);
  openHoursButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      editOpenHoursDlg();
    }
  }
);
  typeText.addTextChangedListener(new TextWatcher(){
    @Override public void afterTextChanged(    Editable s){
      String str=s.toString();
      AmenityType t=MapRenderingTypes.getDefault().getAmenityNameToType().get(str);
      if (t != null && a.getType() != t) {
        a.setType(t);
        typeButton.setText(OsmAndFormatter.toPublicString(t,ctx));
        updateSubTypesAdapter(t);
      }
    }
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
  }
);
  typeButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Builder builder=new AlertDialog.Builder(ctx);
      String[] vals=new String[AmenityType.values().length];
      for (int i=0; i < vals.length; i++) {
        vals[i]=OsmAndFormatter.toPublicString(AmenityType.values()[i],ctx);
      }
      builder.setItems(vals,new Dialog.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          AmenityType aType=AmenityType.values()[which];
          if (aType != a.getType()) {
            a.setType(aType);
            a.setSubType("");
            updateType(a);
          }
        }
      }
);
      builder.show();
    }
  }
);
  ((Button)dlg.findViewById(R.id.Cancel)).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      dlg.dismiss();
    }
  }
);
  ((Button)dlg.findViewById(R.id.Commit)).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Resources resources=v.getResources();
      final String msg=n.getId() == -1 ? resources.getString(R.string.poi_action_add) : resources.getString(R.string.poi_action_change);
      String action=n.getId() == -1 ? CREATE_ACTION : MODIFY_ACTION;
      Map<AmenityType,Map<String,String>> typeNameToTagVal=MapRenderingTypes.getDefault().getAmenityTypeNameToTagVal();
      AmenityType type=a.getType();
      String tag=type.getDefaultTag();
      String subType=typeText.getText().toString();
      String val=subType;
      if (typeNameToTagVal.containsKey(type)) {
        Map<String,String> map=typeNameToTagVal.get(type);
        if (map.containsKey(subType)) {
          String res=map.get(subType);
          if (res != null) {
            int i=res.indexOf(' ');
            if (i != -1) {
              tag=res.substring(0,i);
              val=res.substring(i + 1);
            }
 else {
              tag=res;
            }
          }
        }
      }
      n.putTag(tag,val);
      n.putTag(OSMTagKey.NAME.getValue(),nameText.getText().toString());
      if (openingHours.getText().toString().length() == 0) {
        n.removeTag(OSMTagKey.OPENING_HOURS.getValue());
      }
 else {
        n.putTag(OSMTagKey.OPENING_HOURS.getValue(),openingHours.getText().toString());
      }
      commitNode(action,n,entityInfo,commentText.getText().toString(),new Runnable(){
        @Override public void run(){
          Toast.makeText(ctx,MessageFormat.format(ctx.getResources().getString(R.string.poi_action_succeded_template),msg),Toast.LENGTH_LONG).show();
          if (view != null) {
            view.refreshMap();
          }
          dlg.dismiss();
        }
      }
);
    }
  }
);
  dlg.show();
}
