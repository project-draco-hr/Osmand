{
  List<GpxDisplayItem> list=group.getModifiableList();
  String timeSpanClr=Algorithms.colorToString(app.getResources().getColor(R.color.gpx_time_span_color));
  String speedClr=Algorithms.colorToString(app.getResources().getColor(R.color.gpx_speed));
  String ascClr=Algorithms.colorToString(app.getResources().getColor(R.color.gpx_altitude_asc));
  String descClr=Algorithms.colorToString(app.getResources().getColor(R.color.gpx_altitude_desc));
  String distanceClr=Algorithms.colorToString(app.getResources().getColor(R.color.gpx_distance_color));
  final float eleThreshold=3;
  for (  TrkSegment r : group.track.segments) {
    if (r.points.size() == 0) {
      continue;
    }
    GPXTrackAnalysis[] as;
    boolean split=true;
    if (group.splitDistance > 0) {
      as=r.splitByDistance(group.splitDistance).toArray(new GPXTrackAnalysis[0]);
    }
 else     if (group.splitTime > 0) {
      as=r.splitByTime(group.splitTime).toArray(new GPXTrackAnalysis[0]);
    }
 else {
      split=false;
      as=new GPXTrackAnalysis[]{GPXTrackAnalysis.segment(0,r)};
    }
    for (    GPXTrackAnalysis analysis : as) {
      GpxDisplayItem item=new GpxDisplayItem();
      item.group=group;
      if (split) {
        item.splitMetric=analysis.metricEnd;
        item.secondarySplitMetric=analysis.secondaryMetricEnd;
        item.splitName=formatSplitName(analysis.metricEnd,group,app);
        item.splitName+=" (" + formatSecondarySplitName(analysis.secondaryMetricEnd,group,app) + ") ";
      }
      item.description=GpxUiHelper.getDescription(app,analysis,true);
      item.analysis=analysis;
      item.name=group.getName();
      item.locationStart=analysis.locationStart;
      item.locationEnd=analysis.locationEnd;
      list.add(item);
    }
  }
}
