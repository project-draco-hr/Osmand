{
  lowLevelWays++;
  List<Node> nodes=new ArrayList<Node>();
  MapAlgorithms.simplifyDouglasPeucker(in,zoom + 8 + zoomWaySmothness,3,nodes);
  boolean first=true;
  long firstId=-1;
  long lastId=-1;
  ByteArrayOutputStream bNodes=new ByteArrayOutputStream();
  ByteArrayOutputStream bTypes=new ByteArrayOutputStream();
  ByteArrayOutputStream bAddtTypes=new ByteArrayOutputStream();
  try {
    for (    Node n : nodes) {
      if (n != null) {
        if (first) {
          firstId=n.getId();
          first=false;
        }
        lastId=n.getId();
        Algoritms.writeInt(bNodes,Float.floatToRawIntBits((float)n.getLatitude()));
        Algoritms.writeInt(bNodes,Float.floatToRawIntBits((float)n.getLongitude()));
      }
    }
  }
 catch (  IOException e) {
    throw new IllegalStateException(e);
  }
  if (firstId == -1) {
    return;
  }
  for (int j=0; j < types.size(); j++) {
    try {
      Algoritms.writeSmallInt(bTypes,types.get(j));
    }
 catch (    IOException e) {
    }
  }
  for (int j=0; j < addTypes.size(); j++) {
    try {
      Algoritms.writeSmallInt(bAddtTypes,addTypes.get(j));
    }
 catch (    IOException e) {
    }
  }
  mapLowLevelBinaryStat.setLong(1,id);
  mapLowLevelBinaryStat.setLong(2,firstId);
  mapLowLevelBinaryStat.setLong(3,lastId);
  mapLowLevelBinaryStat.setString(4,name);
  mapLowLevelBinaryStat.setBytes(5,bNodes.toByteArray());
  mapLowLevelBinaryStat.setBytes(6,bTypes.toByteArray());
  mapLowLevelBinaryStat.setBytes(7,bAddtTypes.toByteArray());
  mapLowLevelBinaryStat.setShort(8,(short)level);
  addBatch(mapLowLevelBinaryStat);
}
