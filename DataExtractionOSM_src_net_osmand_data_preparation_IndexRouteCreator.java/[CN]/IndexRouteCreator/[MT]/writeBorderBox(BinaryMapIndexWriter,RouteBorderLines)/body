{
  writer.startWriteRouteBorderBox(routeBorders.leftX,routeBorders.rightX,routeBorders.topY,routeBorders.bottomY,routeBorders.zoomToSplit,routeBorders.basemap);
  Map<BinaryFileReference,List<RouteBorderPointCreator>> refs=new LinkedHashMap<BinaryFileReference,List<RouteBorderPointCreator>>();
  int[] keys=routeBorders.bx.keys();
  int pntsCount=0;
  Arrays.sort(keys);
  for (int j=0; j < keys.length; j++) {
    int key=keys[j];
    List<RouteBorderPointCreator> pnts=routeBorders.bx.get(key);
    sortBorderPoints(pnts,true);
    BinaryFileReference ref=writer.writeRouteBorderLine(key,pnts.get(0).y,-1,pnts.get(pnts.size() - 1).y);
    pntsCount+=pnts.size();
    refs.put(ref,pnts);
  }
  keys=routeBorders.by.keys();
  Arrays.sort(keys);
  for (int j=0; j < keys.length; j++) {
    int key=keys[j];
    List<RouteBorderPointCreator> pnts=routeBorders.by.get(key);
    sortBorderPoints(pnts,false);
    BinaryFileReference ref=writer.writeRouteBorderLine(pnts.get(0).x,key,pnts.get(pnts.size() - 1).x,-1);
    refs.put(ref,pnts);
    pntsCount+=pnts.size();
  }
  if (logMapDataWarn != null) {
    logMapDataWarn.info("Total border lines " + (routeBorders.by.size() + routeBorders.bx.size()) + " total points "+ pntsCount);
  }
  writeRoutePointBlocks(writer,refs);
  writer.endWriteRouteBorderBox();
}
