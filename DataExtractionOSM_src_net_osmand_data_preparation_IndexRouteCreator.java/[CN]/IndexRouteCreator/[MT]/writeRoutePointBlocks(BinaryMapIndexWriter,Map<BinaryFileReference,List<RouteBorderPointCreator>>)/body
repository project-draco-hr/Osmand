{
  Iterator<Entry<BinaryFileReference,List<RouteBorderPointCreator>>> it=refs.entrySet().iterator();
  while (it.hasNext()) {
    Entry<BinaryFileReference,List<RouteBorderPointCreator>> entry=it.next();
    BinaryFileReference ref=entry.getKey();
    List<RouteBorderPointCreator> list=entry.getValue();
    long baseId=list.get(0).id;
    int x=list.get(0).x;
    int y=list.get(0).y;
    List<RouteBorderPoint> points=new ArrayList<RouteBorderPoint>();
    int px=x;
    int py=y;
    long pid=baseId;
    for (    RouteBorderPointCreator pnt : list) {
      RouteBorderPoint.Builder bld=RouteBorderPoint.newBuilder();
      bld.setDx(pnt.x - px);
      bld.setDy(pnt.y - py);
      bld.setDirection(pnt.direction ? 1 : 0);
      bld.setRoadId(pnt.id - pid);
      TByteArrayList bs=new TByteArrayList();
      for (int k=0; k < pnt.types.length; k++) {
        writer.writeRawVarint32(bs,routeTypes.getTypeByInternalId(pnt.types[k]).getTargetId());
      }
      bld.setTypes(ByteString.copyFrom(bs.toArray()));
      points.add(bld.build());
      px=pnt.x;
      py=pnt.y;
      pid=pnt.id;
    }
    writer.writeRouteBorderPointBlock(x,y,list.get(0).id,points,ref);
  }
}
