{
  pathForTurn.reset();
  int c=48;
  int w=16;
  pathForTurn.moveTo(c,94);
  float sarrowL=30;
  float harrowL=(float)Math.sqrt(2) * sarrowL;
  float spartArrowL=(float)((sarrowL - w / Math.sqrt(2)) / 2);
  float hpartArrowL=(float)(harrowL - w) / 2;
  if (turnType == TurnType.C) {
    int h=65;
    pathForTurn.rMoveTo(w / 2,0);
    pathForTurn.rLineTo(0,-h);
    pathForTurn.rLineTo(hpartArrowL,0);
    pathForTurn.rLineTo(-harrowL / 2,-harrowL / 2);
    pathForTurn.rLineTo(-harrowL / 2,harrowL / 2);
    pathForTurn.rLineTo(hpartArrowL,0);
    pathForTurn.rLineTo(0,h);
  }
 else   if (turnType == TurnType.TR || turnType == TurnType.TL) {
    int b=turnType == TurnType.TR ? 1 : -1;
    int h=36;
    float quadShiftX=22;
    float quadShiftY=22;
    pathForTurn.rMoveTo(-b * 8,0);
    pathForTurn.rLineTo(0,-h);
    pathForTurn.rQuadTo(0,-quadShiftY,b * quadShiftX,-quadShiftY);
    pathForTurn.rLineTo(0,hpartArrowL);
    pathForTurn.rLineTo(b * harrowL / 2,-harrowL / 2);
    pathForTurn.rLineTo(-b * harrowL / 2,-harrowL / 2);
    pathForTurn.rLineTo(0,hpartArrowL);
    pathForTurn.rQuadTo(-b * (quadShiftX + w),0,-b * (quadShiftX + w),quadShiftY + w);
    pathForTurn.rLineTo(0,h);
  }
 else   if (turnType == TurnType.TSLR || turnType == TurnType.TSLL) {
    int b=turnType == TurnType.TSLR ? 1 : -1;
    int h=40;
    int quadShiftY=22;
    float quadShiftX=(float)(quadShiftY / (1 + Math.sqrt(2)));
    float nQuadShiftX=(sarrowL - 2 * spartArrowL) - quadShiftX - w;
    float nQuadShifty=quadShiftY + (sarrowL - 2 * spartArrowL);
    pathForTurn.rMoveTo(-b * 4,0);
    pathForTurn.rLineTo(0,-h);
    pathForTurn.rQuadTo(0,-quadShiftY + quadShiftX,b * quadShiftX,-quadShiftY);
    pathForTurn.rLineTo(b * spartArrowL,spartArrowL);
    pathForTurn.rLineTo(0,-sarrowL);
    pathForTurn.rLineTo(-b * sarrowL,0);
    pathForTurn.rLineTo(b * spartArrowL,spartArrowL);
    pathForTurn.rQuadTo(b * nQuadShiftX,-nQuadShiftX,b * nQuadShiftX,nQuadShifty);
    pathForTurn.rLineTo(0,h);
  }
 else   if (turnType == TurnType.TSHR || turnType == TurnType.TSHL) {
    int b=turnType == TurnType.TSHR ? 1 : -1;
    int h=45;
    float quadShiftX=22;
    float quadShiftY=-(float)(quadShiftX / (1 + Math.sqrt(2)));
    float nQuadShiftX=-(sarrowL - 2 * spartArrowL) - quadShiftX - w;
    float nQuadShiftY=-quadShiftY + (sarrowL - 2 * spartArrowL);
    pathForTurn.rMoveTo(-b * 8,0);
    pathForTurn.rLineTo(0,-h);
    pathForTurn.rQuadTo(0,-(quadShiftX - quadShiftY),b * quadShiftX,quadShiftY);
    pathForTurn.rLineTo(-b * spartArrowL,spartArrowL);
    pathForTurn.rLineTo(b * sarrowL,0);
    pathForTurn.rLineTo(0,-sarrowL);
    pathForTurn.rLineTo(-b * spartArrowL,spartArrowL);
    pathForTurn.rCubicTo(b * nQuadShiftX / 2,nQuadShiftX / 2,b * nQuadShiftX,nQuadShiftX / 2,b * nQuadShiftX,nQuadShiftY);
    pathForTurn.rLineTo(0,h);
  }
 else   if (turnType == TurnType.TU) {
    int h=54;
    float quadShiftX=13;
    float quadShiftY=13;
    pathForTurn.rMoveTo(28,0);
    pathForTurn.rLineTo(0,-h);
    pathForTurn.rQuadTo(0,-(quadShiftY + w),-(quadShiftX + w),-(quadShiftY + w));
    pathForTurn.rQuadTo(-(quadShiftX + w),0,-(quadShiftX + w),(quadShiftY + w));
    pathForTurn.rLineTo(-hpartArrowL,0);
    pathForTurn.rLineTo(harrowL / 2,harrowL / 2);
    pathForTurn.rLineTo(harrowL / 2,-harrowL / 2);
    pathForTurn.rLineTo(-hpartArrowL,0);
    pathForTurn.rQuadTo(0,-quadShiftX,quadShiftX,-quadShiftY);
    pathForTurn.rQuadTo(quadShiftX,0,quadShiftX,quadShiftY);
    pathForTurn.rLineTo(0,h);
  }
 else   if (turnType != null && turnType.isExit()) {
  }
  pathForTurn.close();
  pathForTurn.transform(transform);
}
