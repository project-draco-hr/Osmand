{
  TargetPointsHelper targets=app.getTargetPointsHelper();
  final List<TargetPoint> intermediates=targets.getIntermediatePointsWithTarget();
  final TIntArrayList originalPositions=new TIntArrayList(intermediates.size());
  for (int j=1; j <= intermediates.size(); j++) {
    originalPositions.add(j);
  }
  final boolean[] checkedIntermediates=new boolean[intermediates.size()];
  Arrays.fill(checkedIntermediates,true);
  final ArrayAdapter<TargetPoint> listadapter=getListAdapter(app,activity,changeOrder,intermediates,originalPositions,checkedIntermediates);
  ListView lv=new ListView(activity);
  View contentView=lv;
  final ProgressBar pb=new ProgressBar(activity);
  pb.setVisibility(View.GONE);
  final TextView textInfo=new TextView(activity);
  textInfo.setText(R.string.intermediate_items_sort_return);
  textInfo.setVisibility(View.GONE);
  if (changeOrder) {
    LinearLayout ll=new LinearLayout(activity);
    ll.setOrientation(LinearLayout.VERTICAL);
    ll.addView(lv);
    ll.addView(pb);
    ll.addView(textInfo);
    contentView=ll;
  }
  lv.setAdapter(listadapter);
  lv.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      if (activity instanceof MapActivity) {
        TargetPoint pointToNavigate=intermediates.get(position);
        int fZoom=((MapActivity)activity).getMapView().getZoom() < 15 ? 15 : ((MapActivity)activity).getMapView().getZoom();
        ((MapActivity)activity).getMapView().setIntZoom(fZoom);
        ((MapActivity)activity).getMapView().setLatLon(pointToNavigate.getLatitude(),pointToNavigate.getLongitude());
        listadapter.notifyDataSetInvalidated();
      }
    }
  }
);
  AlertDialog.Builder builder=new AccessibleAlertBuilder(activity);
  builder.setView(contentView);
  builder.setInverseBackgroundForced(true);
  lv.setBackgroundColor(Color.WHITE);
  builder.setPositiveButton(R.string.shared_string_ok,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      if (changeOrder) {
        commitChangePointsOrder(app,intermediates);
      }
 else {
        commitPointsRemoval(app,checkedIntermediates);
      }
    }
  }
);
  if (!changeOrder && intermediates.size() > 1) {
    builder.setNeutralButton(R.string.intermediate_points_change_order,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        openIntermediatePointsDialog(activity,app,true);
      }
    }
);
  }
 else   if (intermediates.size() > 1) {
    builder.setNeutralButton(R.string.intermediate_items_sort_by_distance,new Dialog.OnClickListener(){
      @Override public void onClick(      DialogInterface d,      int which){
      }
    }
);
  }
  AlertDialog dlg=builder.create();
  if (changeOrder) {
    applySortTargets(dlg,activity,intermediates,originalPositions,listadapter,pb,textInfo);
  }
  dlg.show();
}
