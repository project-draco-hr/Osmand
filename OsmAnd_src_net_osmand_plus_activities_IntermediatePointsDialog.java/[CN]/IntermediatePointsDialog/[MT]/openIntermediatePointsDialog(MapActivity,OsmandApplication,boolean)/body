{
  TargetPointsHelper targets=app.getTargetPointsHelper();
  final List<LatLon> intermediates=targets.getIntermediatePointsWithTarget();
  final List<String> names=targets.getIntermediatePointNamesWithTarget();
  final boolean[] checkedIntermediates=new boolean[intermediates.size()];
  final ArrayAdapter<LatLon> listadapter=getListAdapter(app,activity,changeOrder,intermediates,names,checkedIntermediates);
  ListView lv=new ListView(activity);
  final ProgressBar pb=new ProgressBar(activity);
  pb.setVisibility(View.GONE);
  final TextView textInfo=new TextView(activity);
  textInfo.setText(R.string.intermediate_items_sort_return);
  textInfo.setVisibility(View.GONE);
  if (changeOrder) {
    Button btn=new Button(activity);
    btn.setText(R.string.intermediate_items_sort_by_distance);
    btn.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        new AsyncTask<Void,Void,int[]>(){
          protected void onPreExecute(){
            pb.setVisibility(View.VISIBLE);
            textInfo.setVisibility(View.VISIBLE);
          }
          protected int[] doInBackground(          Void[] params){
            ArrayList<LatLon> lt=new ArrayList<LatLon>(intermediates);
            LatLon start=new LatLon(activity.getMapView().getLatitude(),activity.getMapView().getLongitude());
            LatLon end=lt.remove(lt.size() - 1);
            return new TspAnt().readGraph(lt,start,end).solve();
          }
          protected void onPostExecute(          int[] result){
            pb.setVisibility(View.GONE);
            List<LatLon> alocs=new ArrayList<LatLon>();
            List<String> anames=new ArrayList<String>();
            for (int i=0; i < result.length; i++) {
              if (result[i] > 0) {
                alocs.add(intermediates.get(result[i] - 1));
                anames.add(names.get(result[i] - 1));
              }
            }
            intermediates.clear();
            intermediates.addAll(alocs);
            names.clear();
            names.addAll(anames);
            listadapter.notifyDataSetChanged();
          }
        }
.execute(new Void[0]);
      }
    }
);
    lv.addFooterView(pb);
    lv.addFooterView(textInfo);
    lv.addFooterView(btn);
  }
  lv.setAdapter(listadapter);
  lv.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      if (activity instanceof MapActivity) {
        LatLon pointToNavigate=intermediates.get(position);
        float fZoom=((MapActivity)activity).getMapView().getFloatZoom() < 15 ? 15 : ((MapActivity)activity).getMapView().getFloatZoom();
        ((MapActivity)activity).getMapView().setZoom(fZoom);
        ((MapActivity)activity).getMapView().setLatLon(pointToNavigate.getLatitude(),pointToNavigate.getLongitude());
        listadapter.notifyDataSetInvalidated();
      }
    }
  }
);
  Builder builder=new AccessibleAlertBuilder(activity);
  builder.setView(lv);
  builder.setInverseBackgroundForced(true);
  lv.setBackgroundColor(Color.WHITE);
  builder.setPositiveButton(R.string.default_buttons_ok,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      if (changeOrder) {
        commitChangePointsOrder(app,intermediates,names);
      }
 else {
        commitPointsRemoval(app,checkedIntermediates);
      }
    }
  }
);
  if (!changeOrder) {
    builder.setNeutralButton(R.string.intermediate_points_change_order,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        openIntermediatePointsDialog(activity,app,true);
      }
    }
);
  }
  builder.show();
}
