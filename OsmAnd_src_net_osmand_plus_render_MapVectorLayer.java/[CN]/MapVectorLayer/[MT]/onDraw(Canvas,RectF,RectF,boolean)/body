{
  if (!visible) {
    return;
  }
  if (!isVectorDataVisible() && tileLayer != null) {
    tileLayer.drawTileMap(canvas,tilesRect);
  }
 else {
    if (!view.isZooming()) {
      pixRect.set(0,0,view.getWidth(),view.getHeight());
      updateRotatedTileBox();
      if (resourceManager.updateRenderedMapNeeded(rotatedTileBox)) {
        pixRect.set(-view.getWidth() / 3,-view.getHeight() / 4,4 * view.getWidth() / 3,5 * view.getHeight() / 4);
        updateRotatedTileBox();
        resourceManager.updateRendererMap(rotatedTileBox);
      }
    }
    MapRenderRepositories renderer=resourceManager.getRenderer();
    Bitmap bmp=renderer.getBitmap();
    RotatedTileBox bmpLoc=renderer.getBitmapLocation();
    if (bmp != null && bmpLoc != null) {
      float rot=bmpLoc.getRotate();
      float mult=(float)MapUtils.getPowZoom(view.getZoom() - bmpLoc.getZoom());
      float tx=view.getXTile();
      float ty=view.getYTile();
      float dleftX1=(bmpLoc.getLeftTileX() * mult - tx);
      float dtopY1=(bmpLoc.getTopTileY() * mult - ty);
      float cos=bmpLoc.getRotateCos();
      float sin=bmpLoc.getRotateSin();
      float x1=MapUtils.calcDiffPixelX(sin,cos,dleftX1,dtopY1,view.getTileSize()) + view.getCenterPointX();
      float y1=MapUtils.calcDiffPixelY(sin,cos,dleftX1,dtopY1,view.getTileSize()) + view.getCenterPointY();
      canvas.rotate(-rot,view.getCenterPointX(),view.getCenterPointY());
      destImage.set(x1,y1,x1 + bmpLoc.getTileWidth() * mult * view.getTileSize(),y1 + bmpLoc.getTileHeight() * mult * view.getTileSize());
      if (!bmp.isRecycled()) {
        canvas.drawBitmap(bmp,null,destImage,paintImg);
      }
    }
  }
}
