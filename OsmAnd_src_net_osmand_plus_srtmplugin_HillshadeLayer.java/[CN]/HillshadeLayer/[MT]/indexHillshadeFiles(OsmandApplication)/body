{
  AsyncTask<Void,Void,Void> task=new AsyncTask<Void,Void,Void>(){
    private SQLiteDatabase sqliteDb;
    @Override protected Void doInBackground(    Void... params){
      File tilesDir=app.getAppPath(IndexConstants.TILES_INDEX_DIR);
      sqliteDb=SQLiteDatabase.openOrCreateDatabase(new File(tilesDir,HILLSHADE_CACHE),null);
      if (sqliteDb.getVersion() == 0) {
        sqliteDb.setVersion(1);
        sqliteDb.execSQL("CREATE TABLE TILE_SOURCES(filename varchar2(256), date_modified int, left int, right int, top int, bottom int)");
      }
      Map<String,Long> fileModified=new HashMap<String,Long>();
      Map<String,SQLiteTileSource> rs=readFiles(app,tilesDir,fileModified);
      indexCachedResources(fileModified,rs);
      indexNonCachedResources(fileModified,rs);
      sqliteDb.close();
      resources=rs;
      return null;
    }
    @Override protected void onPostExecute(    Void result){
      app.getResourceManager().reloadTilesFromFS();
    }
    private void indexNonCachedResources(    Map<String,Long> fileModified,    Map<String,SQLiteTileSource> rs){
      for (      String filename : fileModified.keySet()) {
        try {
          log.info("Indexing hillshade file " + filename);
          ContentValues cv=new ContentValues();
          cv.put("filename",filename);
          cv.put("date_modified",fileModified.get(filename));
          SQLiteTileSource ts=rs.get(filename);
          QuadRect rt=ts.getRectBoundary(ZOOM_BOUNDARY,1);
          if (rt != null) {
            indexedResources.insert(filename,rt);
            cv.put("left",(int)rt.left);
            cv.put("right",(int)rt.right);
            cv.put("top",(int)rt.top);
            cv.put("bottom",(int)rt.bottom);
            sqliteDb.insert("TILE_SOURCES",null,cv);
          }
        }
 catch (        RuntimeException e) {
          log.error(e.getMessage(),e);
        }
      }
    }
    private void indexCachedResources(    Map<String,Long> fileModified,    Map<String,SQLiteTileSource> rs){
      Cursor cursor=sqliteDb.rawQuery("SELECT filename, date_modified, left, right, top, bottom FROM TILE_SOURCES",new String[0]);
      if (cursor.moveToFirst()) {
        do {
          String filename=cursor.getString(0);
          long lastModified=cursor.getLong(1);
          Long read=fileModified.get(filename);
          if (rs.containsKey(filename) && read != null && lastModified == read) {
            int left=cursor.getInt(2);
            int right=cursor.getInt(3);
            int top=cursor.getInt(4);
            float bottom=cursor.getInt(5);
            indexedResources.insert(filename,new QuadRect(left,top,right,bottom));
            fileModified.remove(filename);
          }
        }
 while (cursor.moveToNext());
      }
      cursor.close();
    }
    private Map<String,SQLiteTileSource> readFiles(    final OsmandApplication app,    File tilesDir,    Map<String,Long> fileModified){
      Map<String,SQLiteTileSource> rs=new LinkedHashMap<String,SQLiteTileSource>();
      File[] files=tilesDir.listFiles();
      if (files != null) {
        for (        File f : files) {
          if (f != null && f.getName().endsWith(IndexConstants.SQLITE_EXT) && f.getName().toLowerCase().startsWith("hillshade")) {
            SQLiteTileSource ts=new SQLiteTileSource(app,f,new ArrayList<TileSourceTemplate>());
            rs.put(f.getName(),ts);
            fileModified.put(f.getName(),f.lastModified());
          }
        }
      }
      return rs;
    }
  }
;
  executeTaskInBackground(task);
}
