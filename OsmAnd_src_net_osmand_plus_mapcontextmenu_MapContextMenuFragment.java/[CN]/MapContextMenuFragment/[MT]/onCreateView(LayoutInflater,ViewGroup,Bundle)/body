{
  if (savedInstanceState != null)   getCtxMenu().restoreMenuState(savedInstanceState);
  view=inflater.inflate(R.layout.map_context_menu_fragment,container,false);
  mainView=view.findViewById(R.id.context_menu_main);
  menuController=getCtxMenu().getMenuController(getActivity());
  if (menuController != null && menuController.isLandscapeLayout()) {
    mainView.setLayoutParams(new FrameLayout.LayoutParams(dpToPx(menuController.getLandscapeWidthDp()),ViewGroup.LayoutParams.MATCH_PARENT));
  }
  ViewTreeObserver vto=view.getViewTreeObserver();
  vto.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      menuTopHeight=view.findViewById(R.id.context_menu_top_view).getHeight();
      menuTopShadowHeight=view.findViewById(R.id.context_menu_top_shadow).getHeight();
      menuTopShadowAllHeight=view.findViewById(R.id.context_menu_top_shadow_all).getHeight();
      menuButtonsHeight=view.findViewById(R.id.context_menu_buttons).getHeight();
      menuFullHeight=view.findViewById(R.id.context_menu_main).getHeight();
      menuTitleHeight=menuTopShadowHeight + menuTopShadowAllHeight;
      menuFullHeightMax=menuTitleHeight + (menuBottomViewHeight > 0 ? menuBottomViewHeight + dpToPx(2f) : -dpToPx(SHADOW_HEIGHT_BOTTOM_DP));
      ViewTreeObserver obs=view.getViewTreeObserver();
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
        obs.removeOnGlobalLayoutListener(this);
      }
 else {
        obs.removeGlobalOnLayoutListener(this);
      }
      doLayoutMenu();
    }
  }
);
  final GestureDetector singleTapDetector=new GestureDetector(view.getContext(),new SingleTapConfirm());
  final View.OnTouchListener slideTouchListener=new View.OnTouchListener(){
    private float dy;
    private float dyMain;
    private VelocityTracker velocity;
    private boolean slidingUp;
    private boolean slidingDown;
    private float velocityY;
    private float maxVelocityY;
    private boolean hasMoved;
    @Override public boolean onTouch(    View v,    MotionEvent event){
      if (singleTapDetector.onTouchEvent(event)) {
        showOnMap(getCtxMenu().getPointDescription().getLat(),getCtxMenu().getPointDescription().getLon());
        if (hasMoved) {
          applyPosY(getViewY());
        }
        return true;
      }
      if (menuController != null && menuController.isLandscapeLayout()) {
        return true;
      }
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
        hasMoved=false;
      dy=event.getY();
    dyMain=getViewY();
  velocity=VelocityTracker.obtain();
velocityY=0;
maxVelocityY=0;
velocity.addMovement(event);
break;
case MotionEvent.ACTION_MOVE:
hasMoved=true;
float y=event.getY();
float newY=getViewY() + (y - dy);
setViewY((int)newY);
menuFullHeight=view.getHeight() - (int)newY + 10;
if (!oldAndroid()) {
ViewGroup.LayoutParams lp=mainView.getLayoutParams();
lp.height=Math.max(menuFullHeight,menuTitleHeight);
mainView.setLayoutParams(lp);
mainView.requestLayout();
}
velocity.addMovement(event);
velocity.computeCurrentVelocity(1000);
velocityY=Math.abs(velocity.getYVelocity());
if (velocityY > maxVelocityY) maxVelocityY=velocityY;
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
int currentY=getViewY();
slidingUp=Math.abs(maxVelocityY) > 500 && (currentY - dyMain) < -50;
slidingDown=Math.abs(maxVelocityY) > 500 && (currentY - dyMain) > 50;
velocity.recycle();
if (menuController != null) {
if (menuBottomViewHeight > 0 && slidingUp) {
menuController.slideUp();
}
 else if (slidingDown) {
menuController.slideDown();
}
}
applyPosY(currentY);
break;
}
return true;
}
private void applyPosY(int currentY){
final int posY=getPosY();
if (currentY != posY) {
if (posY < currentY) {
updateMainViewLayout(posY);
}
if (!oldAndroid()) {
mainView.animate().y(posY).setDuration(200).setInterpolator(new DecelerateInterpolator()).setListener(new AnimatorListenerAdapter(){
@Override public void onAnimationCancel(Animator animation){
updateMainViewLayout(posY);
}
@Override public void onAnimationEnd(Animator animation){
updateMainViewLayout(posY);
}
}
).start();
}
 else {
setViewY(posY);
updateMainViewLayout(posY);
}
}
}
}
;
View topView=view.findViewById(R.id.context_menu_top_view);
topView.setOnTouchListener(slideTouchListener);
View topShadowView=view.findViewById(R.id.context_menu_top_shadow);
topShadowView.setOnTouchListener(slideTouchListener);
View topShadowAllView=view.findViewById(R.id.context_menu_top_shadow_all);
topShadowAllView.setOnTouchListener(new View.OnTouchListener(){
@Override public boolean onTouch(View v,MotionEvent event){
if (event.getY() <= dpToPx(SHADOW_HEIGHT_TOP_DP) || event.getAction() != MotionEvent.ACTION_DOWN) return slideTouchListener.onTouch(v,event);
 else return false;
}
}
);
IconsCache iconsCache=getMyApplication().getIconsCache();
boolean light=getMyApplication().getSettings().isLightContent();
int iconId=getCtxMenu().getLeftIconId();
final View iconLayout=view.findViewById(R.id.context_menu_icon_layout);
final ImageView iconView=(ImageView)view.findViewById(R.id.context_menu_icon_view);
if (iconId == 0) {
iconLayout.setVisibility(View.GONE);
}
 else {
iconView.setImageDrawable(iconsCache.getIcon(iconId,light ? R.color.osmand_orange : R.color.osmand_orange_dark,0.75f));
}
setAddressLocation();
final ImageView closeButtonView=(ImageView)view.findViewById(R.id.context_menu_close_btn_view);
closeButtonView.setImageDrawable(iconsCache.getIcon(R.drawable.ic_action_remove_dark,light ? R.color.icon_color_light : R.color.dash_search_icon_dark));
closeButtonView.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
((MapActivity)getActivity()).getMapLayers().getContextMenuLayer().hideMapContextMenuMarker();
dismissMenu();
}
}
);
final ImageButton buttonNavigate=(ImageButton)view.findViewById(R.id.context_menu_route_button);
buttonNavigate.setImageDrawable(iconsCache.getIcon(R.drawable.map_directions,light ? R.color.icon_color : R.color.dashboard_subheader_text_dark));
buttonNavigate.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
getCtxMenu().buttonNavigatePressed();
}
}
);
final ImageButton buttonFavorite=(ImageButton)view.findViewById(R.id.context_menu_fav_button);
buttonFavorite.setImageDrawable(iconsCache.getIcon(R.drawable.ic_action_fav_dark,light ? R.color.icon_color : R.color.dashboard_subheader_text_dark));
buttonFavorite.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
getCtxMenu().buttonFavoritePressed();
}
}
);
final ImageButton buttonShare=(ImageButton)view.findViewById(R.id.context_menu_share_button);
buttonShare.setImageDrawable(iconsCache.getIcon(R.drawable.abc_ic_menu_share_mtrl_alpha,light ? R.color.icon_color : R.color.dashboard_subheader_text_dark));
buttonShare.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
getCtxMenu().buttonSharePressed();
}
}
);
final ImageButton buttonMore=(ImageButton)view.findViewById(R.id.context_menu_more_button);
buttonMore.setImageDrawable(iconsCache.getIcon(R.drawable.ic_overflow_menu_white,light ? R.color.icon_color : R.color.dashboard_subheader_text_dark));
buttonMore.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
getCtxMenu().buttonMorePressed();
}
}
);
View bottomView=view.findViewById(R.id.context_menu_bottom_view);
if (menuController != null) {
bottomView.setOnTouchListener(new View.OnTouchListener(){
@Override public boolean onTouch(View v,MotionEvent event){
return true;
}
}
);
menuController.build(bottomView);
}
bottomView.measure(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);
menuBottomViewHeight=bottomView.getMeasuredHeight();
getMapActivity().getMapLayers().getMapControlsLayer().setControlsClickable(false);
return view;
}
