{
  screenHeight=getScreenHeight();
  skipHalfScreenStateLimit=screenHeight * SKIP_HALF_SCREEN_STATE_KOEF;
  viewHeight=screenHeight - getStatusBarHeight();
  fabPaddingTopPx=dpToPx(FAB_PADDING_TOP_DP);
  markerPaddingPx=dpToPx(MARKER_PADDING_DP);
  markerPaddingXPx=dpToPx(MARKER_PADDING_X_DP);
  menu=getMapActivity().getContextMenu();
  view=inflater.inflate(R.layout.map_context_menu_fragment,container,false);
  if (!menu.isActive()) {
    return view;
  }
  mainView=view.findViewById(R.id.context_menu_main);
  leftTitleButtonController=menu.getLeftTitleButtonController();
  rightTitleButtonController=menu.getRightTitleButtonController();
  topRightTitleButtonController=menu.getTopRightTitleButtonController();
  titleProgressController=menu.getTitleProgressController();
  map=getMapActivity().getMapView();
  RotatedTileBox box=map.getCurrentRotatedTileBox().copy();
  customMapCenter=menu.getMapCenter() != null;
  if (!customMapCenter) {
    mapCenter=box.getCenterLatLon();
    menu.setMapCenter(mapCenter);
    double markerLat=menu.getLatLon().getLatitude();
    double markerLon=menu.getLatLon().getLongitude();
    origMarkerX=(int)box.getPixXFromLatLon(markerLat,markerLon);
    origMarkerY=(int)box.getPixYFromLatLon(markerLat,markerLon);
  }
 else {
    mapCenter=menu.getMapCenter();
    origMarkerX=box.getCenterPixelX();
    origMarkerY=box.getCenterPixelY();
  }
  IconsCache iconsCache=getMyApplication().getIconsCache();
  boolean light=getMyApplication().getSettings().isLightContent();
  final Button leftTitleButton=(Button)view.findViewById(R.id.title_button);
  if (leftTitleButtonController != null) {
    leftTitleButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        leftTitleButtonController.buttonPressed();
      }
    }
);
  }
  final Button rightTitleButton=(Button)view.findViewById(R.id.title_button_right);
  if (rightTitleButtonController != null) {
    rightTitleButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        rightTitleButtonController.buttonPressed();
      }
    }
);
  }
  final Button topRightTitleButton=(Button)view.findViewById(R.id.title_button_top_right);
  if (topRightTitleButtonController != null) {
    topRightTitleButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        topRightTitleButtonController.buttonPressed();
      }
    }
);
  }
  if (titleProgressController != null) {
    final ImageView progressButton=(ImageView)view.findViewById(R.id.progressButton);
    progressButton.setImageDrawable(iconsCache.getIcon(R.drawable.ic_action_remove_dark,light ? R.color.icon_color : R.color.dashboard_subheader_text_dark));
    progressButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        titleProgressController.buttonPressed();
      }
    }
);
  }
  menu.updateData();
  updateButtonsAndProgress();
  if (menu.isLandscapeLayout()) {
    final TypedValue typedValueAttr=new TypedValue();
    getMapActivity().getTheme().resolveAttribute(R.attr.left_menu_view_bg,typedValueAttr,true);
    mainView.setBackgroundResource(typedValueAttr.resourceId);
    mainView.setLayoutParams(new FrameLayout.LayoutParams(dpToPx(menu.getLandscapeWidthDp()),ViewGroup.LayoutParams.MATCH_PARENT));
    View fabContainer=view.findViewById(R.id.context_menu_fab_container);
    fabContainer.setLayoutParams(new FrameLayout.LayoutParams(dpToPx(menu.getLandscapeWidthDp()),ViewGroup.LayoutParams.MATCH_PARENT));
  }
  runLayoutListener();
  final GestureDetector singleTapDetector=new GestureDetector(view.getContext(),new SingleTapConfirm());
  final View.OnTouchListener slideTouchListener=new View.OnTouchListener(){
    private float dy;
    private float dyMain;
    private VelocityTracker velocity;
    private boolean slidingUp;
    private boolean slidingDown;
    private float velocityY;
    private float maxVelocityY;
    private boolean hasMoved;
    private boolean centered;
    @Override public boolean onTouch(    View v,    MotionEvent event){
      if (singleTapDetector.onTouchEvent(event)) {
        moving=false;
        int posY=getViewY();
        if (!centered) {
          showOnMap(menu.getLatLon(),true,false,map.getCurrentRotatedTileBox().getPixHeight() / 2 < posY - markerPaddingPx);
          centered=true;
        }
        if (hasMoved) {
          applyPosY(posY,false,false,0,0);
        }
        openMenuHalfScreen();
        return true;
      }
      if (menu.isLandscapeLayout()) {
        return true;
      }
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
        hasMoved=false;
      dy=event.getY();
    dyMain=getViewY();
  velocity=VelocityTracker.obtain();
velocityY=0;
maxVelocityY=0;
velocity.addMovement(event);
moving=true;
break;
case MotionEvent.ACTION_MOVE:
hasMoved=true;
float y=event.getY();
float newY=getViewY() + (y - dy);
setViewY((int)newY,false,false);
menuFullHeight=view.getHeight() - (int)newY + 10;
if (!oldAndroid()) {
ViewGroup.LayoutParams lp=mainView.getLayoutParams();
lp.height=Math.max(menuFullHeight,menuTitleHeight);
mainView.setLayoutParams(lp);
mainView.requestLayout();
}
velocity.addMovement(event);
velocity.computeCurrentVelocity(1000);
velocityY=Math.abs(velocity.getYVelocity());
if (velocityY > maxVelocityY) maxVelocityY=velocityY;
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
moving=false;
int currentY=getViewY();
slidingUp=Math.abs(maxVelocityY) > 500 && (currentY - dyMain) < -50;
slidingDown=Math.abs(maxVelocityY) > 500 && (currentY - dyMain) > 50;
velocity.recycle();
boolean skipHalfScreenState=Math.abs(currentY - dyMain) > skipHalfScreenStateLimit;
changeMenuState(currentY,skipHalfScreenState,slidingUp,slidingDown);
break;
}
return true;
}
}
;
View topView=view.findViewById(R.id.context_menu_top_view);
topView.setOnTouchListener(slideTouchListener);
View topShadowView=view.findViewById(R.id.context_menu_top_shadow);
topShadowView.setOnTouchListener(slideTouchListener);
View topShadowAllView=view.findViewById(R.id.context_menu_top_shadow_all);
topShadowAllView.setOnTouchListener(new View.OnTouchListener(){
@Override public boolean onTouch(View v,MotionEvent event){
if (event.getY() <= dpToPx(SHADOW_HEIGHT_TOP_DP) || event.getAction() != MotionEvent.ACTION_DOWN) return slideTouchListener.onTouch(v,event);
 else return false;
}
}
);
buildHeader();
fabView=(ImageView)view.findViewById(R.id.context_menu_fab_view);
if (menu.fabVisible()) {
if (menu.isLandscapeLayout()) {
FrameLayout.LayoutParams params=(FrameLayout.LayoutParams)fabView.getLayoutParams();
params.setMargins(0,0,dpToPx(28f),0);
fabView.setLayoutParams(params);
}
fabView.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
menu.fabPressed();
}
}
);
}
 else {
fabView.setVisibility(View.GONE);
}
if (!menu.buttonsVisible()) {
View buttonsTopBorder=view.findViewById(R.id.buttons_top_border);
View buttons=view.findViewById(R.id.context_menu_buttons);
buttonsTopBorder.setVisibility(View.GONE);
buttons.setVisibility(View.GONE);
}
final ImageButton buttonFavorite=(ImageButton)view.findViewById(R.id.context_menu_fav_button);
buttonFavorite.setImageDrawable(iconsCache.getIcon(menu.getFavActionIconId(),light ? R.color.icon_color : R.color.dashboard_subheader_text_dark));
buttonFavorite.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
menu.buttonFavoritePressed();
}
}
);
final ImageButton buttonWaypoint=(ImageButton)view.findViewById(R.id.context_menu_route_button);
buttonWaypoint.setImageDrawable(iconsCache.getIcon(R.drawable.map_action_flag_dark,light ? R.color.icon_color : R.color.dashboard_subheader_text_dark));
buttonWaypoint.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
menu.buttonWaypointPressed();
}
}
);
final ImageButton buttonShare=(ImageButton)view.findViewById(R.id.context_menu_share_button);
buttonShare.setImageDrawable(iconsCache.getIcon(R.drawable.map_action_gshare_dark,light ? R.color.icon_color : R.color.dashboard_subheader_text_dark));
buttonShare.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
menu.buttonSharePressed();
}
}
);
final ImageButton buttonMore=(ImageButton)view.findViewById(R.id.context_menu_more_button);
buttonMore.setImageDrawable(iconsCache.getIcon(R.drawable.map_overflow_menu_white,light ? R.color.icon_color : R.color.dashboard_subheader_text_dark));
buttonMore.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
menu.buttonMorePressed();
}
}
);
buildBottomView();
getMapActivity().getMapLayers().getMapControlsLayer().setControlsClickable(false);
return view;
}
