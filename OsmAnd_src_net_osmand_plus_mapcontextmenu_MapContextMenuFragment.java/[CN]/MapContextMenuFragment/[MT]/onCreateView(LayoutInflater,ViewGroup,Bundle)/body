{
  fabPaddingTopPx=dpToPx(FAB_PADDING_TOP_DP);
  markerPaddingPx=dpToPx(MARKER_PADDING_DP);
  markerPaddingXPx=dpToPx(MARKER_PADDING_X_DP);
  menu=getMapActivity().getContextMenu();
  map=getMapActivity().getMapView();
  RotatedTileBox box=map.getCurrentRotatedTileBox().copy();
  customMapCenter=menu.getMapCenter() != null;
  if (!customMapCenter) {
    mapCenter=box.getCenterLatLon();
    menu.setMapCenter(mapCenter);
    double markerLat=menu.getLatLon().getLatitude();
    double markerLon=menu.getLatLon().getLongitude();
    origMarkerX=(int)box.getPixXFromLatLon(markerLat,markerLon);
    origMarkerY=(int)box.getPixYFromLatLon(markerLat,markerLon);
  }
 else {
    mapCenter=menu.getMapCenter();
    origMarkerX=box.getCenterPixelX();
    origMarkerY=box.getCenterPixelY();
  }
  view=inflater.inflate(R.layout.map_context_menu_fragment,container,false);
  mainView=view.findViewById(R.id.context_menu_main);
  Button titleButton=(Button)view.findViewById(R.id.title_button);
  titleButton.setVisibility(menu.hasTitleButton() ? View.VISIBLE : View.GONE);
  if (menu.hasTitleButton()) {
    titleButton.setText(menu.getTitleButtonCaption());
    titleButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        menu.titleButtonPressed();
      }
    }
);
  }
  if (menu.isLandscapeLayout()) {
    mainView.setLayoutParams(new FrameLayout.LayoutParams(dpToPx(menu.getLandscapeWidthDp()),ViewGroup.LayoutParams.MATCH_PARENT));
    View fabContainer=view.findViewById(R.id.context_menu_fab_container);
    fabContainer.setLayoutParams(new FrameLayout.LayoutParams(dpToPx(menu.getLandscapeWidthDp()),ViewGroup.LayoutParams.MATCH_PARENT));
  }
  runLayoutListener();
  final GestureDetector singleTapDetector=new GestureDetector(view.getContext(),new SingleTapConfirm());
  final View.OnTouchListener slideTouchListener=new View.OnTouchListener(){
    private float dy;
    private float dyMain;
    private VelocityTracker velocity;
    private boolean slidingUp;
    private boolean slidingDown;
    private float velocityY;
    private float maxVelocityY;
    private boolean hasMoved;
    @Override public boolean onTouch(    View v,    MotionEvent event){
      if (singleTapDetector.onTouchEvent(event)) {
        showOnMap(menu.getLatLon(),true,false);
        if (hasMoved) {
          applyPosY(getViewY(),false,false);
        }
        return true;
      }
      if (menu.isLandscapeLayout()) {
        return true;
      }
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
        hasMoved=false;
      dy=event.getY();
    dyMain=getViewY();
  velocity=VelocityTracker.obtain();
velocityY=0;
maxVelocityY=0;
velocity.addMovement(event);
break;
case MotionEvent.ACTION_MOVE:
hasMoved=true;
float y=event.getY();
float newY=getViewY() + (y - dy);
setViewY((int)newY,false,false);
menuFullHeight=view.getHeight() - (int)newY + 10;
if (!oldAndroid()) {
ViewGroup.LayoutParams lp=mainView.getLayoutParams();
lp.height=Math.max(menuFullHeight,menuTitleHeight);
mainView.setLayoutParams(lp);
mainView.requestLayout();
}
velocity.addMovement(event);
velocity.computeCurrentVelocity(1000);
velocityY=Math.abs(velocity.getYVelocity());
if (velocityY > maxVelocityY) maxVelocityY=velocityY;
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
int currentY=getViewY();
slidingUp=Math.abs(maxVelocityY) > 500 && (currentY - dyMain) < -50;
slidingDown=Math.abs(maxVelocityY) > 500 && (currentY - dyMain) > 50;
velocity.recycle();
boolean needCloseMenu=false;
int oldMenuState=menu.getCurrentMenuState();
if (menuBottomViewHeight > 0 && slidingUp) {
menu.slideUp();
}
 else if (slidingDown) {
needCloseMenu=!menu.slideDown();
}
int newMenuState=menu.getCurrentMenuState();
boolean needMapAdjust=oldMenuState != newMenuState && newMenuState != MenuController.MenuState.FULL_SCREEN;
applyPosY(currentY,needCloseMenu,needMapAdjust);
break;
}
return true;
}
private void applyPosY(final int currentY,final boolean needCloseMenu,boolean needMapAdjust){
final int posY=getPosY(needCloseMenu);
if (currentY != posY) {
if (posY < currentY) {
updateMainViewLayout(posY);
}
if (!oldAndroid()) {
mainView.animate().y(posY).setDuration(200).setInterpolator(new DecelerateInterpolator()).setListener(new AnimatorListenerAdapter(){
@Override public void onAnimationCancel(Animator animation){
if (needCloseMenu) {
menu.close();
}
 else {
updateMainViewLayout(posY);
}
}
@Override public void onAnimationEnd(Animator animation){
if (needCloseMenu) {
menu.close();
}
 else {
updateMainViewLayout(posY);
}
}
}
).start();
fabView.animate().y(getFabY(posY)).setDuration(200).setInterpolator(new DecelerateInterpolator()).start();
if (needMapAdjust) {
adjustMapPosition(posY,true);
}
}
 else {
setViewY(posY,false,needMapAdjust);
updateMainViewLayout(posY);
}
}
}
}
;
View topView=view.findViewById(R.id.context_menu_top_view);
topView.setOnTouchListener(slideTouchListener);
View topShadowView=view.findViewById(R.id.context_menu_top_shadow);
topShadowView.setOnTouchListener(slideTouchListener);
View topShadowAllView=view.findViewById(R.id.context_menu_top_shadow_all);
topShadowAllView.setOnTouchListener(new View.OnTouchListener(){
@Override public boolean onTouch(View v,MotionEvent event){
if (event.getY() <= dpToPx(SHADOW_HEIGHT_TOP_DP) || event.getAction() != MotionEvent.ACTION_DOWN) return slideTouchListener.onTouch(v,event);
 else return false;
}
}
);
buildHeader();
IconsCache iconsCache=getMyApplication().getIconsCache();
boolean light=getMyApplication().getSettings().isLightContent();
fabView=(ImageView)view.findViewById(R.id.context_menu_fab_view);
fabView.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
menu.fabPressed();
}
}
);
final ImageButton buttonFavorite=(ImageButton)view.findViewById(R.id.context_menu_fav_button);
buttonFavorite.setImageDrawable(iconsCache.getIcon(menu.getFavActionIconId(),light ? R.color.icon_color : R.color.dashboard_subheader_text_dark));
buttonFavorite.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
menu.buttonFavoritePressed();
}
}
);
final ImageButton buttonWaypoint=(ImageButton)view.findViewById(R.id.context_menu_route_button);
buttonWaypoint.setImageDrawable(iconsCache.getIcon(R.drawable.map_action_waypoints,light ? R.color.icon_color : R.color.dashboard_subheader_text_dark));
buttonWaypoint.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
menu.buttonWaypointPressed();
}
}
);
final ImageButton buttonShare=(ImageButton)view.findViewById(R.id.context_menu_share_button);
buttonShare.setImageDrawable(iconsCache.getIcon(R.drawable.abc_ic_menu_share_mtrl_alpha,light ? R.color.icon_color : R.color.dashboard_subheader_text_dark));
buttonShare.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
menu.buttonSharePressed();
}
}
);
final ImageButton buttonMore=(ImageButton)view.findViewById(R.id.context_menu_more_button);
buttonMore.setImageDrawable(iconsCache.getIcon(R.drawable.ic_overflow_menu_white,light ? R.color.icon_color : R.color.dashboard_subheader_text_dark));
buttonMore.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
menu.buttonMorePressed();
}
}
);
buildBottomView();
getMapActivity().getMapLayers().getMapControlsLayer().setControlsClickable(false);
return view;
}
