{
  if (savedInstanceState != null)   getCtxMenu().restoreMenuState(savedInstanceState);
  view=inflater.inflate(R.layout.map_context_menu_fragment,container,false);
  ViewTreeObserver vto=view.getViewTreeObserver();
  vto.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      menuTopHeight=view.findViewById(R.id.context_menu_top_view).getHeight();
      menuTopShadowHeight=view.findViewById(R.id.context_menu_top_shadow).getHeight();
      menuButtonsHeight=view.findViewById(R.id.context_menu_buttons).getHeight();
      menuBottomViewHeight=view.findViewById(R.id.context_menu_bottom_view).getHeight();
      menuFullHeight=view.findViewById(R.id.context_menu_main).getHeight();
      ViewTreeObserver obs=view.getViewTreeObserver();
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
        obs.removeOnGlobalLayoutListener(this);
      }
 else {
        obs.removeGlobalOnLayoutListener(this);
      }
      doLayoutMenu();
    }
  }
);
  bottomBorder=view.findViewById(R.id.context_menu_bottom_border);
  bottomBorder.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      return true;
    }
  }
);
  shadowView=view.findViewById(R.id.context_menu_shadow_view);
  shadowView.setOnTouchListener(new View.OnTouchListener(){
    public boolean onTouch(    View view,    MotionEvent event){
      dismissMenu();
      return true;
    }
  }
);
  mainView=view.findViewById(R.id.context_menu_main);
  View.OnTouchListener slideTouchListener=new View.OnTouchListener(){
    private float dy;
    private float dyMain;
    private int destinationState;
    private VelocityTracker velocity;
    private boolean slidingUp;
    private boolean slidingDown;
    private float velocityY;
    private float startX;
    private float startY;
    private long lastTouchDown;
    private final int CLICK_ACTION_THRESHHOLD=200;
    private boolean isClick(    float endX,    float endY){
      float differenceX=Math.abs(startX - endX);
      float differenceY=Math.abs(startY - endY);
      if (differenceX > 3 || differenceY > 3 || System.currentTimeMillis() - lastTouchDown > CLICK_ACTION_THRESHHOLD) {
        return false;
      }
      return true;
    }
    @Override public boolean onTouch(    View v,    MotionEvent event){
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
        startX=event.getX();
      startY=event.getY();
    lastTouchDown=System.currentTimeMillis();
  dy=event.getY();
dyMain=mainView.getY();
velocity=VelocityTracker.obtain();
velocityY=0;
velocity.addMovement(event);
break;
case MotionEvent.ACTION_MOVE:
float y=event.getY();
float newY=mainView.getY() + (y - dy);
mainView.setY(newY);
ViewGroup.LayoutParams lp=bottomBorder.getLayoutParams();
lp.height=(int)(view.getHeight() - newY - menuFullHeight) + 10;
bottomBorder.setLayoutParams(lp);
bottomBorder.setY(newY + menuFullHeight);
bottomBorder.requestLayout();
velocity.addMovement(event);
velocity.computeCurrentVelocity(1000);
float vel=Math.abs(velocity.getYVelocity());
if (vel > velocityY) velocityY=vel;
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
float endX=event.getX();
float endY=event.getY();
slidingUp=Math.abs(velocityY) > 500 && (mainView.getY() - dyMain) < -50;
slidingDown=Math.abs(velocityY) > 500 && (mainView.getY() - dyMain) > 50;
velocity.recycle();
if (menuController != null) {
if (slidingUp) {
menuController.slideUp();
}
 else if (slidingDown) {
menuController.slideDown();
}
destinationState=menuController.getCurrentMenuState();
}
 else {
destinationState=MenuController.MenuState.HEADER_ONLY;
}
float posY=0;
switch (destinationState) {
case MenuController.MenuState.HEADER_ONLY:
posY=view.getHeight() - (menuFullHeight - menuBottomViewHeight);
break;
case MenuController.MenuState.HALF_SCREEN:
posY=view.getHeight() - menuFullHeight;
break;
case MenuController.MenuState.FULL_SCREEN:
posY=-menuTopShadowHeight;
break;
default :
break;
}
float minY=Math.min(posY,mainView.getY());
lp=bottomBorder.getLayoutParams();
lp.height=(int)(view.getHeight() - minY - menuFullHeight) + 10;
if (lp.height < 0) lp.height=0;
bottomBorder.setLayoutParams(lp);
bottomBorder.requestLayout();
if (mainView.getY() != posY) {
mainView.animate().y(posY).setDuration(200).setInterpolator(new DecelerateInterpolator()).start();
bottomBorder.animate().y(posY + menuFullHeight).setDuration(200).setInterpolator(new DecelerateInterpolator()).start();
}
if (isClick(endX,endY)) {
OsmandMapTileView mapView=getMapActivity().getMapView();
mapView.getAnimatedDraggingThread().startMoving(getCtxMenu().getPointDescription().getLat(),getCtxMenu().getPointDescription().getLon(),mapView.getZoom(),true);
}
break;
}
return true;
}
}
;
View topView=view.findViewById(R.id.context_menu_top_view);
topView.setOnTouchListener(slideTouchListener);
View topShadowView=view.findViewById(R.id.context_menu_top_shadow);
topShadowView.setOnTouchListener(slideTouchListener);
IconsCache iconsCache=getMyApplication().getIconsCache();
boolean light=getMyApplication().getSettings().isLightContent();
int iconId=getCtxMenu().getLeftIconId();
final View iconLayout=view.findViewById(R.id.context_menu_icon_layout);
final ImageView iconView=(ImageView)view.findViewById(R.id.context_menu_icon_view);
if (iconId == 0) {
iconLayout.setVisibility(View.GONE);
}
 else {
iconView.setImageDrawable(iconsCache.getIcon(iconId,light ? R.color.osmand_orange : R.color.osmand_orange_dark));
}
TextView line1=(TextView)view.findViewById(R.id.context_menu_line1);
line1.setText(getCtxMenu().getAddressStr());
TextView line2=(TextView)view.findViewById(R.id.context_menu_line2);
line2.setText(getCtxMenu().getLocationStr(getMapActivity()));
final ImageView closeButtonView=(ImageView)view.findViewById(R.id.context_menu_close_btn_view);
closeButtonView.setImageDrawable(iconsCache.getIcon(R.drawable.ic_action_remove_dark,light ? R.color.icon_color_light : R.color.dash_search_icon_dark));
closeButtonView.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
((MapActivity)getActivity()).getMapLayers().getContextMenuLayer().hideMapContextMenuMarker();
dismissMenu();
}
}
);
final ImageButton buttonNavigate=(ImageButton)view.findViewById(R.id.context_menu_route_button);
buttonNavigate.setImageDrawable(iconsCache.getIcon(R.drawable.map_directions,light ? R.color.icon_color : R.color.dash_search_icon_dark));
buttonNavigate.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
getCtxMenu().buttonNavigatePressed(getMapActivity());
}
}
);
final ImageButton buttonFavorite=(ImageButton)view.findViewById(R.id.context_menu_fav_button);
buttonFavorite.setImageDrawable(iconsCache.getIcon(R.drawable.ic_action_fav_dark,light ? R.color.icon_color : R.color.dash_search_icon_dark));
buttonFavorite.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
getCtxMenu().buttonFavoritePressed(getMapActivity());
}
}
);
final ImageButton buttonShare=(ImageButton)view.findViewById(R.id.context_menu_share_button);
buttonShare.setImageDrawable(iconsCache.getIcon(R.drawable.abc_ic_menu_share_mtrl_alpha,light ? R.color.icon_color : R.color.dash_search_icon_dark));
buttonShare.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
getCtxMenu().buttonSharePressed(getMapActivity());
}
}
);
final ImageButton buttonMore=(ImageButton)view.findViewById(R.id.context_menu_more_button);
buttonMore.setImageDrawable(iconsCache.getIcon(R.drawable.ic_overflow_menu_white,light ? R.color.icon_color : R.color.dash_search_icon_dark));
buttonMore.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
getCtxMenu().buttonMorePressed(getMapActivity());
}
}
);
menuController=getCtxMenu().getMenuController();
bottomView=view.findViewById(R.id.context_menu_bottom_view);
if (menuController != null) {
bottomView.setOnTouchListener(new View.OnTouchListener(){
@Override public boolean onTouch(View v,MotionEvent event){
return true;
}
}
);
menuController.build(bottomView);
}
return view;
}
