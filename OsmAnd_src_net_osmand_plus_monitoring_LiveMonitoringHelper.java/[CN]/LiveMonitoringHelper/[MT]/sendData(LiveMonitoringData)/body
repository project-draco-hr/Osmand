{
  String st=settings.LIVE_MONITORING_URL.get();
  List<String> prm=new ArrayList<String>();
  int maxLen=0;
  for (int i=0; i < 7; i++) {
    boolean b=st.contains("{" + i + "}");
    if (b) {
      maxLen=i;
    }
  }
  for (int i=0; i < maxLen + 1; i++) {
switch (i) {
case 0:
      prm.add(data.lat + "");
    break;
case 1:
  prm.add(data.lon + "");
break;
case 2:
prm.add(data.time + "");
break;
case 3:
prm.add(data.hdop + "");
break;
case 4:
prm.add(data.alt + "");
break;
case 5:
prm.add(data.speed + "");
break;
case 6:
prm.add(data.bearing + "");
break;
default :
break;
}
}
String urlStr=MessageFormat.format(st,prm.toArray());
try {
URL url=new URL(urlStr);
HttpURLConnection urlConnection=(HttpURLConnection)url.openConnection();
URI uri=new URI(url.getProtocol(),url.getUserInfo(),url.getHost(),url.getPort(),url.getPath(),url.getQuery(),url.getRef());
urlConnection.setConnectTimeout(15000);
urlConnection.setReadTimeout(15000);
if (url.getProtocol() == "https") {
((HttpsURLConnection)urlConnection).setHostnameVerifier(new HostnameVerifier(){
public boolean verify(String host,SSLSession session){
return (true);
}
}
);
}
log.info("Monitor " + uri);
if (urlConnection.getResponseCode() != 200) {
String msg=urlConnection.getResponseCode() + " : " + urlConnection.getResponseMessage();
log.error("Error sending monitor request: " + msg);
}
 else {
InputStream is=urlConnection.getInputStream();
StringBuilder responseBody=new StringBuilder();
if (is != null) {
BufferedReader in=new BufferedReader(new InputStreamReader(is,"UTF-8"));
String s;
while ((s=in.readLine()) != null) {
responseBody.append(s);
responseBody.append("\n");
}
is.close();
}
log.info("Monitor response (" + urlConnection.getHeaderField("Content-Type") + "): "+ responseBody.toString());
}
urlConnection.disconnect();
}
 catch (Exception e) {
log.error("Failed connect to " + urlStr + ": "+ e.getMessage(),e);
}
}
