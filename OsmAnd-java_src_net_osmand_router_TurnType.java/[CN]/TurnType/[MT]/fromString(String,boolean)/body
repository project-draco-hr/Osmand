{
  TurnType t=null;
  if ("C".equals(s)) {
    t=TurnType.valueOf(C,leftSide);
  }
 else   if ("TL".equals(s)) {
    t=TurnType.valueOf(TL,leftSide);
  }
 else   if ("TSLL".equals(s)) {
    t=TurnType.valueOf(TSLL,leftSide);
  }
 else   if ("TSHL".equals(s)) {
    t=TurnType.valueOf(TSHL,leftSide);
  }
 else   if ("TR".equals(s)) {
    t=TurnType.valueOf(TR,leftSide);
  }
 else   if ("TSLR".equals(s)) {
    t=TurnType.valueOf(TSLR,leftSide);
  }
 else   if ("TSHR".equals(s)) {
    t=TurnType.valueOf(TSHR,leftSide);
  }
 else   if ("KL".equals(s)) {
    t=TurnType.valueOf(KL,leftSide);
  }
 else   if ("KR".equals(s)) {
    t=TurnType.valueOf(KR,leftSide);
  }
 else   if ("TU".equals(s)) {
    t=TurnType.valueOf(TU,leftSide);
  }
 else   if ("TRU".equals(s)) {
    t=TurnType.valueOf(TRU,leftSide);
  }
 else   if ("OFFR".equals(s)) {
    t=TurnType.valueOf(OFFR,leftSide);
  }
 else   if (s != null && (s.startsWith("EXIT") || s.startsWith("RNDB") || s.startsWith("RNLB"))) {
    try {
      t=TurnType.getExitTurn(Integer.parseInt(s.substring(4)),0,leftSide);
    }
 catch (    NumberFormatException e) {
      e.printStackTrace();
    }
  }
  if (t == null) {
    t=TurnType.straight();
  }
  return t;
}
