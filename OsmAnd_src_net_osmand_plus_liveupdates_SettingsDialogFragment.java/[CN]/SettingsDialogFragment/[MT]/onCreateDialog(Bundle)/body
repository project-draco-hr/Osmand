{
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  final LocalIndexInfo localIndexInfo=getArguments().getParcelable(LOCAL_INDEX);
  View view=LayoutInflater.from(getActivity()).inflate(R.layout.dialog_live_updates_item_settings,null);
  final SwitchCompat liveUpdatesSwitch=(SwitchCompat)view.findViewById(R.id.liveUpdatesSwitch);
  final Spinner updateFrequencySpinner=(Spinner)view.findViewById(R.id.updateFrequencySpinner);
  final Spinner updateTimesOfDaySpinner=(Spinner)view.findViewById(R.id.updateTimesOfDaySpinner);
  final OsmandSettings.CommonPreference<Boolean> liveUpdatePreference=preferenceForLocalIndex(localIndexInfo);
  final OsmandSettings.CommonPreference<Integer> updateFrequencies=preferenceUpdateTimes(localIndexInfo);
  liveUpdatesSwitch.setChecked(liveUpdatePreference.get());
  builder.setView(view).setPositiveButton(R.string.shared_string_save,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      final int updateFrequencyInt=updateFrequencySpinner.getSelectedItemPosition();
      updateFrequencies.set(updateFrequencyInt);
      AlarmManager alarmMgr=(AlarmManager)getActivity().getSystemService(Context.ALARM_SERVICE);
      Intent intent=new Intent(getActivity(),LiveUpdatesAlarmReceiver.class);
      PendingIntent alarmIntent=PendingIntent.getBroadcast(getActivity(),0,intent,0);
      UpdateFrequencies updateFrequency=UpdateFrequencies.values()[updateFrequencyInt];
switch (updateFrequency) {
case HOURLY:
        alarmMgr.setInexactRepeating(AlarmManager.ELAPSED_REALTIME,1000,60 * 60 * 1000,alarmIntent);
      break;
case DAILY:
case WEEKLY:
    updateTimesOfDaySpinner.setVisibility(View.VISIBLE);
  break;
}
liveUpdatePreference.set(liveUpdatesSwitch.isChecked());
getLiveUpdatesFragment().notifyLiveUpdatesChanged();
}
}
).setNegativeButton(R.string.shared_string_cancel,null).setNeutralButton(R.string.update_now,new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
getLiveUpdatesFragment().runLiveUpdate(localIndexInfo);
}
}
);
updateFrequencySpinner.setSelection(updateFrequencies.get());
updateFrequencySpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
UpdateFrequencies updateFrequency=UpdateFrequencies.values()[position];
switch (updateFrequency) {
case HOURLY:
updateTimesOfDaySpinner.setVisibility(View.GONE);
break;
case DAILY:
case WEEKLY:
updateTimesOfDaySpinner.setVisibility(View.VISIBLE);
break;
}
}
@Override public void onNothingSelected(AdapterView<?> parent){
}
}
);
return builder.create();
}
