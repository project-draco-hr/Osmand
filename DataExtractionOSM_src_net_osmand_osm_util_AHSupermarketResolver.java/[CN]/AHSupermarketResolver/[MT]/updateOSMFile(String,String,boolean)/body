{
  OsmBaseStorage storage=new OsmBaseStorage();
  final Map<String,EntityId> winkelNumbers=new LinkedHashMap<String,EntityId>();
  storage.getFilters().add(new IOsmStorageFilter(){
    @Override public boolean acceptEntityToLoad(    OsmBaseStorage storage,    EntityId entityId,    Entity entity){
      if (entity.getTag("winkelnummer") != null && entity.getTag("name").contains("eijn")) {
        winkelNumbers.put(entity.getTag("winkelnummer"),entityId);
        return true;
      }
      return true;
    }
  }
);
  storage.parseOSM(new FileInputStream(pathToOsmFile),new ConsoleProgressImplementation(2),null,true);
  Map<String,Map<String,Object>> supermarkets=getSupermarkets();
  DataTileManager<Entity> deleted=new DataTileManager<Entity>();
  for (  String s : winkelNumbers.keySet()) {
    if (!supermarkets.containsKey(s)) {
      System.err.println("Shop " + s + " id="+ winkelNumbers.get(s)+ " doesn't present on the site.");
      EntityId e=winkelNumbers.get(s);
      Entity en=storage.getRegisteredEntities().get(e);
      deleted.registerObject(en.getLatLon().getLatitude(),en.getLatLon().getLongitude(),en);
    }
  }
  DataTileManager<Entity> notCorrelated=new DataTileManager<Entity>();
  DataTileManager<Entity> notShown=new DataTileManager<Entity>();
  for (  String s : supermarkets.keySet()) {
    Map<String,Object> props=supermarkets.get(s);
    if (winkelNumbers.get(s) != null) {
      EntityId id=winkelNumbers.get(s);
      Entity e=storage.getRegisteredEntities().get(id);
      EntityInfo info=storage.getRegisteredEntityInfo().get(id);
      Map<String,String> newTags=new LinkedHashMap<String,String>();
      String p=props.get("format") + "";
      String name="Albert Heijn";
      if (!p.equals("AH")) {
        name+=" " + p;
      }
      newTags.put("name",name);
      newTags.put("phone",props.get("phone") + "");
      newTags.put("addr:city",props.get("city") + "");
      newTags.put("addr:street",props.get("street") + "");
      newTags.put("addr:housenumber",props.get("housenr") + "");
      newTags.put("addr:postcode",props.get("zip") + "");
      JSONArray o=(JSONArray)props.get("hours");
      List<OpeningHoursParser.OpeningHoursRule> rules=new ArrayList<OpeningHoursRule>();
      BasicDayOpeningHourRule prev=null;
      for (int i=0; i < 7; i++) {
        JSONObject obj=o.getJSONObject(i);
        if (!obj.isNull("C") && obj.getBoolean("C")) {
        }
 else {
          String opened=obj.get("F") + "";
          String closed=obj.get("U") + "";
          int start=Integer.parseInt(opened.substring(0,2)) * 60 + Integer.parseInt(opened.substring(2));
          int end=Integer.parseInt(closed.substring(0,2)) * 60 + Integer.parseInt(closed.substring(2));
          if (prev != null && prev.getStartTime() == start && prev.getEndTime() == end) {
            prev.getDays()[i]=true;
          }
 else {
            BasicDayOpeningHourRule rule=new OpeningHoursParser.BasicDayOpeningHourRule();
            rule.getDays()[i]=true;
            rule.setStartTime(start);
            rule.setEndTime(end);
            prev=rule;
            rules.add(rule);
          }
        }
      }
      newTags.put("opening_hours",OpeningHoursParser.toStringOpenedHours(rules));
      LatLon real=new LatLon((Double)props.get("lat"),(Double)props.get("lng"));
      double dist=MapUtils.getDistance(e.getLatLon(),real);
      if (dist > 150) {
        System.err.println("Winkel number = " + s + " is too far from site info - "+ dist+ " m !!! "+ real);
        if (dist > 300) {
          notCorrelated.registerObject(real.getLatitude(),real.getLongitude(),e);
        }
      }
      boolean changed=false;
      for (      String k : newTags.keySet()) {
        String val=newTags.get(k);
        if (!Algoritms.objectEquals(val,e.getTag(k))) {
          e.putTag(k,val);
          changed=true;
        }
      }
      if (changed) {
        info.setAction("modify");
      }
    }
 else {
      LatLon real=new LatLon((Double)props.get("lat"),(Double)props.get("lng"));
      System.err.println("Winkel number = " + s + " is not found in database !!! "+ real);
      Node n=new Node(real.getLatitude(),real.getLongitude(),-1);
      n.putTag("winkelnummer","REG : " + s);
      notShown.registerObject(real.getLatitude(),real.getLongitude(),n);
    }
  }
  OsmStorageWriter writer=new OsmStorageWriter();
  writer.saveStorage(new FileOutputStream(pathToModifiedFile),storage,null,true);
  if (show) {
    try {
      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    final MapPanel panel=new MapPanel(DataExtractionSettings.getSettings().getTilesDirectory());
    panel.setFocusable(true);
    MapPointsLayer toAdd=panel.getLayer(MapPointsLayer.class);
    toAdd.setPoints(notShown);
    toAdd.setPointSize(5);
    toAdd.setTagToShow("winkelnummer");
    MapPointsLayer red=new MapPointsLayer();
    red.setPoints(deleted);
    red.setColor(Color.red);
    red.setPointSize(5);
    panel.addLayer(red);
    MapPointsLayer blue=new MapPointsLayer();
    blue.setPoints(notCorrelated);
    blue.setColor(Color.blue);
    blue.setPointSize(4);
    panel.addLayer(blue);
    JFrame frame=new JFrame("Map view");
    frame.addWindowListener(new WindowAdapter(){
      @Override public void windowClosing(      WindowEvent e){
        DataExtractionSettings settings=DataExtractionSettings.getSettings();
        settings.saveDefaultLocation(panel.getLatitude(),panel.getLongitude());
        settings.saveDefaultZoom(panel.getZoom());
        System.exit(0);
      }
    }
);
    Container content=frame.getContentPane();
    content.add(panel,BorderLayout.CENTER);
    JMenuBar bar=new JMenuBar();
    bar.add(MapPanel.getMenuToChooseSource(panel));
    frame.setJMenuBar(bar);
    frame.setSize(512,512);
    frame.setVisible(true);
  }
}
