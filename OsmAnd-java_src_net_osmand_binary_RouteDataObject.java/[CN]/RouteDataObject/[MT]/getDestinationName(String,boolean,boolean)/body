{
  if (names != null) {
    int[] kt=names.keys();
    String destinationTag=(direction == true) ? "destination:forward" : "destination:backward";
    String destinationTagLang="destination:lang:";
    if (!Algorithms.isEmpty(lang)) {
      destinationTagLang="destination:lang:" + lang;
    }
    String destinationTagDefault="destination";
    String destinationDefault=null;
    for (int i=0; i < kt.length; i++) {
      int k=kt[i];
      if (region.routeEncodingRules.size() > k) {
        if (destinationTag.equals(region.routeEncodingRules.get(k).getTag())) {
          return (transliterate) ? Junidecode.unidecode(names.get(k)) : names.get(k);
        }
        if (!Algorithms.isEmpty(lang) && destinationTagLang.equals(region.routeEncodingRules.get(k).getTag())) {
          return (transliterate) ? Junidecode.unidecode(names.get(k)) : names.get(k);
        }
        if (destinationTagDefault.equals(region.routeEncodingRules.get(k).getTag())) {
          destinationDefault=names.get(k);
        }
      }
    }
    if (transliterate && destinationDefault != null) {
      return Junidecode.unidecode(destinationDefault);
    }
    return destinationDefault;
  }
  return null;
}
