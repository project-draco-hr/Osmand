{
  if (indexMap || indexAddress || indexTransport) {
    mapFile=new File(workingDir,getMapFileName());
    mapFile.getParentFile().mkdirs();
    File tempDBMapFile=new File(workingDir,getTempMapDBFileName());
    removeDatabase(tempDBMapFile);
    mapConnection=getDatabaseConnection(tempDBMapFile.getAbsolutePath());
    mapConnection.setAutoCommit(false);
  }
  if (indexMap) {
    DataIndexWriter.createMapIndexStructure(mapConnection);
    mapBinaryStat=DataIndexWriter.createStatementMapBinaryInsert(mapConnection);
    try {
      mapTree=new RTree[MAP_ZOOMS.length - 1];
      for (int i=0; i < MAP_ZOOMS.length - 1; i++) {
        File file=new File(getRTreeMapIndexNonPackFileName() + i);
        if (file.exists()) {
          file.delete();
        }
        mapTree[i]=new RTree(getRTreeMapIndexNonPackFileName() + i);
      }
    }
 catch (    RTreeException e) {
      throw new IOException(e);
    }
    pStatements.put(mapBinaryStat,0);
  }
  if (indexAddress) {
    DataIndexWriter.createAddressIndexStructure(mapConnection);
    addressCityStat=DataIndexWriter.getCityInsertPreparedStatement(mapConnection);
    addressStreetStat=DataIndexWriter.getStreetInsertPreparedStatement(mapConnection);
    addressBuildingStat=DataIndexWriter.getBuildingInsertPreparedStatement(mapConnection);
    addressStreetNodeStat=DataIndexWriter.getStreetNodeInsertPreparedStatement(mapConnection);
    addressSearchStreetStat=DataIndexWriter.getSearchStreetPreparedStatement(mapConnection);
    addressSearchBuildingStat=DataIndexWriter.getSearchBuildingPreparedStatement(mapConnection);
    addressSearchStreetNodeStat=DataIndexWriter.getStreeNodeSearchPreparedStatement(mapConnection);
    pStatements.put(addressCityStat,0);
    pStatements.put(addressStreetStat,0);
    pStatements.put(addressStreetNodeStat,0);
    pStatements.put(addressBuildingStat,0);
    pStatements.put(addressSearchBuildingStat,0);
    pStatements.put(addressSearchStreetNodeStat,0);
    pStatements.put(addressSearchStreetStat,0);
  }
  if (indexPOI) {
    poiIndexFile=new File(workingDir,getPoiFileName());
    if (poiIndexFile.exists()) {
      Algoritms.removeAllFiles(poiIndexFile);
    }
    poiIndexFile.getParentFile().mkdirs();
    poiConnection=getDatabaseConnection(poiIndexFile.getAbsolutePath(),true);
    DataIndexWriter.createPoiIndexStructure(poiConnection);
    poiPreparedStatement=DataIndexWriter.createStatementAmenityInsert(poiConnection);
    pStatements.put(poiPreparedStatement,0);
    poiConnection.setAutoCommit(false);
  }
  if (indexTransport) {
    DataIndexWriter.createTransportIndexStructure(mapConnection);
    try {
      File file=new File(getRTreeTransportStopsFileName());
      if (file.exists()) {
        file.delete();
      }
      transportStopsTree=new RTree(file.getAbsolutePath());
    }
 catch (    RTreeException e) {
      throw new IOException(e);
    }
    transRouteStat=DataIndexWriter.createStatementTransportRouteInsert(mapConnection);
    transRouteStopsStat=DataIndexWriter.createStatementTransportRouteStopInsert(mapConnection);
    transStopsStat=DataIndexWriter.createStatementTransportStopInsert(mapConnection);
    pStatements.put(transRouteStat,0);
    pStatements.put(transRouteStopsStat,0);
    pStatements.put(transStopsStat,0);
    mapConnection.setAutoCommit(false);
  }
}
