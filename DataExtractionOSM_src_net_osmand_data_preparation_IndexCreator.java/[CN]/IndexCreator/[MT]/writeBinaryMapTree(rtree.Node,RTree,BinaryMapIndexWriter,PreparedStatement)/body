{
  Element[] e=parent.getAllElements();
  for (int i=0; i < parent.getTotalElements(); i++) {
    Rect re=e[i].getRect();
    if (e[i].getElementType() == rtree.Node.LEAF_NODE) {
      long id=((LeafElement)e[i]).getPtr();
      selectData.setLong(1,id);
      ResultSet rs=selectData.executeQuery();
      if (rs.next()) {
        writer.writeMapData(id,rs.getBytes(IndexBinaryMapRenderObject.NODES.ordinal() + 1),rs.getBytes(IndexBinaryMapRenderObject.TYPES.ordinal() + 1),rs.getString(IndexBinaryMapRenderObject.NAME.ordinal() + 1),rs.getInt(IndexBinaryMapRenderObject.HIGHWAY.ordinal() + 1),rs.getBytes(IndexBinaryMapRenderObject.RESTRICTIONS.ordinal() + 1));
      }
 else {
        log.error("Something goes wrong with id = " + id);
      }
    }
 else {
      long ptr=((NonLeafElement)e[i]).getPtr();
      rtree.Node ns=r.getReadNode(ptr);
      writer.startMapTreeElement(re.getMinX(),re.getMaxX(),re.getMinY(),re.getMaxY());
      writeBinaryMapTree(ns,r,writer,selectData);
      writer.endWriteMapTreeElement();
    }
  }
}
