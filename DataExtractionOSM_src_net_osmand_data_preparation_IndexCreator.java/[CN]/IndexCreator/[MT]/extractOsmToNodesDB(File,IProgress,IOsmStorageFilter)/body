{
  boolean pbfFile=false;
  InputStream stream=new BufferedInputStream(new FileInputStream(readFile),8192 * 4);
  InputStream streamFile=stream;
  long st=System.currentTimeMillis();
  if (readFile.getName().endsWith(".bz2")) {
    if (stream.read() != 'B' || stream.read() != 'Z') {
      throw new RuntimeException("The source stream must start with the characters BZ if it is to be read as a BZip2 stream.");
    }
 else {
      stream=new CBZip2InputStream(stream);
    }
  }
 else   if (readFile.getName().endsWith(".pbf")) {
    pbfFile=true;
  }
  OsmBaseStorage storage=new OsmBaseStorage();
  storage.setSupressWarnings(DataExtractionSettings.getSettings().isSupressWarningsForDuplicatedId());
  if (addFilter != null) {
    storage.getFilters().add(addFilter);
  }
  storage.getFilters().add(new IOsmStorageFilter(){
    @Override public boolean acceptEntityToLoad(    OsmBaseStorage storage,    EntityId entityId,    Entity entity){
      if (indexAddressCreator != null) {
        indexAddressCreator.registerCityIfNeeded(entity);
      }
      return true;
    }
  }
);
  OsmDbCreator dbCreator=new OsmDbCreator(this);
  try {
    progress.setGeneralProgress("[15 / 100]");
    progress.startTask(Messages.getString("IndexCreator.LOADING_FILE") + readFile.getAbsolutePath(),-1);
    dbCreator.initDatabase(dialect,dbConn);
    storage.getFilters().add(dbCreator);
    if (pbfFile) {
      storage.parseOSMPbf(stream,progress,false);
    }
 else {
      storage.parseOSM(stream,progress,streamFile,false);
    }
    dbCreator.finishLoading();
    dialect.commitDatabase(dbConn);
    if (log.isInfoEnabled()) {
      log.info("File parsed : " + (System.currentTimeMillis() - st));
    }
    progress.finishTask();
    return dbCreator;
  }
  finally {
    if (log.isInfoEnabled()) {
      log.info("File indexed : " + (System.currentTimeMillis() - st));
    }
  }
}
