{
  if (renderingTypes != null) {
    this.renderingTypes=renderingTypes;
  }
  if (mapZooms != null) {
    this.mapZooms=mapZooms;
  }
 else {
    mapZooms=this.mapZooms;
  }
  multiPolygonsWays=new Map[mapZooms.size()];
  for (int i=0; i < multiPolygonsWays.length; i++) {
    multiPolygonsWays[i]=new LinkedHashMap<Long,Set<Integer>>();
  }
  if (readFile != null && regionName == null) {
    int i=readFile.getName().indexOf('.');
    if (i > -1) {
      regionName=Algoritms.capitalizeFirstLetterAndLowercase(readFile.getName().substring(0,i));
    }
  }
  cities.clear();
  cityManager.clear();
  lowLevelWays=-1;
  postalCodeRelations.clear();
  if (normalizeStreets) {
    normalizeDefaultSuffixes=DataExtractionSettings.getSettings().getDefaultSuffixesToNormalizeStreets();
    normalizeSuffixes=DataExtractionSettings.getSettings().getSuffixesToNormalizeStreets();
  }
  try {
    boolean loadFromPath=dbFile == null || !dialect.databaseFileExists(dbFile);
    if (dbFile == null) {
      dbFile=new File(workingDir,TEMP_NODES_DB);
      if (dialect.databaseFileExists(dbFile)) {
        dialect.removeDatabase(dbFile);
      }
    }
    dbConn=getDatabaseConnection(dbFile.getAbsolutePath());
    int allRelations=100000;
    int allWays=1000000;
    int allNodes=10000000;
    if (loadFromPath) {
      progress.setGeneralProgress("[35 / 100]");
      progress.startTask(Messages.getString("IndexCreator.LOADING_FILE") + readFile.getAbsolutePath(),-1);
      OsmDbCreator filter=extractOsmToNodesDB(readFile,progress,addFilter);
      if (filter != null) {
        allNodes=filter.getAllNodes();
        allWays=filter.getAllWays();
        allRelations=filter.getAllRelations();
      }
    }
    accessor.initDatabase(dbConn);
    if (recreateOnlyBinaryFile) {
      mapFile=new File(workingDir,getMapFileName());
      File tempDBMapFile=new File(workingDir,getTempMapDBFileName());
      mapConnection=getDatabaseConnection(tempDBMapFile.getAbsolutePath());
      mapConnection.setAutoCommit(false);
      try {
        if (indexMap) {
          mapTree=new RTree[mapZooms.size()];
          for (int i=0; i < mapZooms.size(); i++) {
            mapTree[i]=new RTree(getRTreeMapIndexPackFileName() + i);
          }
        }
        if (indexTransport) {
          indexTransportCreator.createRTreeFile(getRTreeTransportStopsPackFileName());
        }
      }
 catch (      RTreeException e) {
        log.error("Error flushing",e);
        throw new IOException(e);
      }
    }
 else {
      createDatabaseIndexesStructure();
      if (indexAddress) {
        progress.setGeneralProgress("[40 / 100]");
        progress.startTask(Messages.getString("IndexCreator.INDEX_CITIES"),allNodes);
        if (!loadFromPath) {
          allNodes=accessor.iterateOverEntities(progress,EntityType.NODE,allNodes,new OsmDbVisitor(){
            @Override public void iterateEntity(            Entity e,            OsmDbAccessorContext ctx){
              registerCityIfNeeded(e);
            }
          }
);
        }
        for (        City c : cities.values()) {
          DataIndexWriter.writeCity(addressCityStat,pStatements,c,BATCH_SIZE);
        }
        if (pStatements.get(addressCityStat) > 0) {
          addressCityStat.executeBatch();
          pStatements.put(addressCityStat,0);
          mapConnection.commit();
        }
      }
      if (indexAddress || indexMap) {
        progress.setGeneralProgress("[30 / 100]");
        progress.startTask(Messages.getString("IndexCreator.PREINDEX_ADRESS_MAP"),allRelations);
        allRelations=accessor.iterateOverEntities(progress,EntityType.RELATION,allRelations,new OsmDbVisitor(){
          @Override public void iterateEntity(          Entity e,          OsmDbAccessorContext ctx) throws SQLException {
            indexAddressRelationsAndMultiPolygons(e,ctx);
          }
        }
);
        if (indexAddress) {
          progress.setGeneralProgress("[40 / 100]");
          progress.startTask(Messages.getString("IndexCreator.PREINDEX_ADRESS_MAP"),allWays);
          allWays=accessor.iterateOverEntities(progress,EntityType.WAY,allWays,new OsmDbVisitor(){
            @Override public void iterateEntity(            Entity e,            OsmDbAccessorContext ctx) throws SQLException {
              if (e instanceof Way && "administrative".equals(e.getTag(OSMTagKey.BOUNDARY))) {
                indexBoundariesRelation(e,ctx);
              }
            }
          }
);
        }
        if (indexAddress) {
          if (pStatements.get(addressBuildingStat) > 0) {
            addressBuildingStat.executeBatch();
            pStatements.put(addressBuildingStat,0);
          }
          if (pStatements.get(addressStreetNodeStat) > 0) {
            addressStreetNodeStat.executeBatch();
            pStatements.put(addressStreetNodeStat,0);
          }
          mapConnection.commit();
        }
      }
      if (indexPOI || indexAddress || indexMap) {
        progress.setGeneralProgress("[50 / 100]");
        progress.startTask(Messages.getString("IndexCreator.PROCESS_OSM_NODES"),allNodes);
        accessor.iterateOverEntities(progress,EntityType.NODE,allNodes,new OsmDbVisitor(){
          @Override public void iterateEntity(          Entity e,          OsmDbAccessorContext ctx) throws SQLException {
            iterateMainEntity(e,ctx);
          }
        }
);
        progress.setGeneralProgress("[70 / 100]");
        progress.startTask(Messages.getString("IndexCreator.PROCESS_OSM_WAYS"),allWays);
        accessor.iterateOverEntities(progress,EntityType.WAY,allWays,new OsmDbVisitor(){
          @Override public void iterateEntity(          Entity e,          OsmDbAccessorContext ctx) throws SQLException {
            iterateMainEntity(e,ctx);
          }
        }
);
      }
      progress.setGeneralProgress("[85 / 100]");
      progress.startTask(Messages.getString("IndexCreator.PROCESS_OSM_REL"),allRelations);
      accessor.iterateOverEntities(progress,EntityType.RELATION,allRelations,new OsmDbVisitor(){
        @Override public void iterateEntity(        Entity e,        OsmDbAccessorContext ctx) throws SQLException {
          iterateMainEntity(e,ctx);
        }
      }
);
      if (indexMap) {
        progress.setGeneralProgress("[90 / 100]");
        progress.startTask(Messages.getString("IndexCreator.INDEX_LO_LEVEL_WAYS"),lowLevelWays);
        processingLowLevelWays(progress);
      }
      if (indexAddress && !postalCodeRelations.isEmpty()) {
        progress.setGeneralProgress("[90 / 100]");
        progress.startTask(Messages.getString("IndexCreator.REGISTER_PCODES"),-1);
        if (pStatements.get(addressBuildingStat) > 0) {
          addressBuildingStat.executeBatch();
          pStatements.put(addressBuildingStat,0);
          mapConnection.commit();
        }
        processingPostcodes();
      }
      if (indexMap) {
        progress.setGeneralProgress("[90 / 100]");
        progress.startTask(Messages.getString("IndexCreator.PACK_RTREE_MAP"),-1);
        for (int i=0; i < mapZooms.size(); i++) {
          mapTree[i]=packRtreeFile(mapTree[i],getRTreeMapIndexNonPackFileName() + i,getRTreeMapIndexPackFileName() + i);
        }
      }
      if (indexTransport) {
        progress.setGeneralProgress("[90 / 100]");
        progress.startTask(Messages.getString("IndexCreator.PACK_RTREE_TRANSP"),-1);
        indexTransportCreator.transportStopsTree=packRtreeFile(indexTransportCreator.transportStopsTree,getRTreeTransportStopsFileName(),getRTreeTransportStopsPackFileName());
      }
    }
    if (indexMap || indexAddress || indexTransport) {
      if (mapFile.exists()) {
        mapFile.delete();
      }
      mapRAFile=new RandomAccessFile(mapFile,"rw");
      BinaryMapIndexWriter writer=new BinaryMapIndexWriter(mapRAFile);
      if (indexMap) {
        progress.setGeneralProgress("[95 of 100]");
        progress.startTask("Writing map index to binary file...",-1);
        closePreparedStatements(mapBinaryStat,mapLowLevelBinaryStat);
        mapConnection.commit();
        writeBinaryMapIndex(writer);
      }
      if (indexAddress) {
        progress.setGeneralProgress("[95 of 100]");
        progress.startTask("Writing address index to binary file...",-1);
        closePreparedStatements(addressCityStat,addressStreetStat,addressStreetNodeStat,addressBuildingStat);
        mapConnection.commit();
        writeBinaryAddressIndex(writer,progress);
      }
      if (indexTransport) {
        progress.setGeneralProgress("[95 of 100]");
        progress.startTask("Writing transport index to binary file...",-1);
        indexTransportCreator.writeBinaryTransportIndex(writer,regionName,mapConnection);
      }
      progress.finishTask();
      writer.close();
      mapRAFile.close();
      log.info("Finish writing binary file");
    }
  }
 catch (  RuntimeException e) {
    log.error("Log exception",e);
    throw e;
  }
catch (  SQLException e) {
    log.error("Log exception",e);
    throw e;
  }
catch (  IOException e) {
    log.error("Log exception",e);
    throw e;
  }
catch (  SAXException e) {
    log.error("Log exception",e);
    throw e;
  }
 finally {
    try {
      accessor.closeReadingConnection();
      for (      PreparedStatement p : pStatements.keySet()) {
        if (pStatements.get(p) > 0) {
          p.executeBatch();
        }
        p.close();
      }
      indexPoiCreator.commitAndClosePoiFile(lastModifiedDate);
      if (mapConnection != null) {
        mapConnection.commit();
        mapConnection.close();
        mapConnection=null;
        File tempDBFile=new File(workingDir,getTempMapDBFileName());
        if (dialect.databaseFileExists(tempDBFile) && deleteDatabaseIndexes) {
          dialect.removeDatabase(tempDBFile);
        }
      }
      if (mapTree != null) {
        for (int i=0; i < mapTree.length; i++) {
          if (mapTree[i] != null) {
            RandomAccessFile file=mapTree[i].getFileHdr().getFile();
            file.close();
          }
        }
        for (int i=0; i < mapTree.length; i++) {
          File f=new File(getRTreeMapIndexNonPackFileName() + i);
          if (f.exists() && deleteDatabaseIndexes) {
            f.delete();
          }
          f=new File(getRTreeMapIndexPackFileName() + i);
          if (f.exists() && deleteDatabaseIndexes) {
            f.delete();
          }
        }
      }
      if (dbConn != null) {
        if (DBDialect.H2 == dialect) {
          dbConn.createStatement().execute("SHUTDOWN COMPACT");
        }
        dbConn.close();
      }
      if (deleteOsmDB) {
        if (DBDialect.DERBY == dialect) {
          try {
            DriverManager.getConnection("jdbc:derby:;shutdown=true");
          }
 catch (          SQLException e) {
          }
        }
        dialect.removeDatabase(dbFile);
      }
    }
 catch (    SQLException e) {
      e.printStackTrace();
    }
  }
}
