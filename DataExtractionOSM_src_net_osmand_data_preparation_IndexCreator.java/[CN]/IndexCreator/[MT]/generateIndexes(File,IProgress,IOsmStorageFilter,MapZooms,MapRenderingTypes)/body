{
  if (renderingTypes == null) {
    renderingTypes=MapRenderingTypes.getDefault();
  }
  if (mapZooms == null) {
    mapZooms=MapZooms.getDefault();
  }
  if (readFile != null && regionName == null) {
    int i=readFile.getName().indexOf('.');
    if (i > -1) {
      regionName=Algoritms.capitalizeFirstLetterAndLowercase(readFile.getName().substring(0,i));
    }
  }
  this.indexTransportCreator=new IndexTransportCreator();
  this.indexPoiCreator=new IndexPoiCreator();
  this.indexAddressCreator=new IndexAddressCreator();
  this.indexMapCreator=new IndexVectorMapCreator();
  this.accessor=new OsmDbAccessor();
  indexMapCreator.initSettings(mapZooms,renderingTypes,zoomWaySmothness);
  String[] normalizeDefaultSuffixes=null;
  String[] normalizeSuffixes=null;
  if (normalizeStreets) {
    normalizeDefaultSuffixes=DataExtractionSettings.getSettings().getDefaultSuffixesToNormalizeStreets();
    normalizeSuffixes=DataExtractionSettings.getSettings().getSuffixesToNormalizeStreets();
  }
  indexAddressCreator.initSettings(normalizeStreets,normalizeDefaultSuffixes,normalizeSuffixes,saveAddressWays,cityAdminLevel);
  try {
    boolean loadFromExistingFile=createPlainOsmDb(progress,readFile,addFilter);
    if (recreateOnlyBinaryFile) {
      mapFile=new File(workingDir,getMapFileName());
      File tempDBMapFile=new File(workingDir,getTempMapDBFileName());
      mapConnection=(Connection)getDatabaseConnection(tempDBMapFile.getAbsolutePath(),mapDBDialect);
      mapConnection.setAutoCommit(false);
      try {
        if (indexMap) {
          indexMapCreator.createRTreeFiles(getRTreeMapIndexPackFileName());
        }
        if (indexTransport) {
          indexTransportCreator.createRTreeFile(getRTreeTransportStopsPackFileName());
        }
      }
 catch (      RTreeException e) {
        log.error("Error flushing",e);
        throw new IOException(e);
      }
    }
 else {
      createDatabaseIndexesStructure();
      if (indexAddress) {
        progress.setGeneralProgress("[20 / 100]");
        progress.startTask(Messages.getString("IndexCreator.INDEX_CITIES"),accessor.getAllNodes());
        if (loadFromExistingFile) {
          accessor.iterateOverEntities(progress,EntityType.NODE,new OsmDbVisitor(){
            @Override public void iterateEntity(            Entity e,            OsmDbAccessorContext ctx){
              indexAddressCreator.registerCityIfNeeded(e);
            }
          }
);
        }
        indexAddressCreator.writeCitiesIntoDb();
      }
      if (indexAddress || indexMap) {
        progress.setGeneralProgress("[30 / 100]");
        progress.startTask(Messages.getString("IndexCreator.PREINDEX_BOUNDARIES_RELATIONS"),accessor.getAllRelations());
        accessor.iterateOverEntities(progress,EntityType.RELATION,new OsmDbVisitor(){
          @Override public void iterateEntity(          Entity e,          OsmDbAccessorContext ctx) throws SQLException {
            if (indexAddress) {
              indexAddressCreator.indexBoundariesRelation((Relation)e,ctx);
            }
            if (indexMap) {
              indexMapCreator.indexMapRelationsAndMultiPolygons(e,ctx);
            }
          }
        }
);
        if (indexAddress) {
          progress.setGeneralProgress("[40 / 100]");
          progress.startTask(Messages.getString("IndexCreator.PREINDEX_BOUNDARIES_WAYS"),accessor.getAllWays());
          accessor.iterateOverEntities(progress,EntityType.WAY_BOUNDARY,new OsmDbVisitor(){
            @Override public void iterateEntity(            Entity e,            OsmDbAccessorContext ctx) throws SQLException {
              indexAddressCreator.indexBoundariesRelation(e,ctx);
            }
          }
);
          progress.setGeneralProgress("[42 / 100]");
          progress.startTask(Messages.getString("IndexCreator.BIND_CITIES_AND_BOUNDARIES"),100);
          indexAddressCreator.bindCitiesWithBoundaries(progress);
          progress.setGeneralProgress("[45 / 100]");
          progress.startTask(Messages.getString("IndexCreator.PREINDEX_ADRESS_MAP"),accessor.getAllRelations());
          accessor.iterateOverEntities(progress,EntityType.RELATION,new OsmDbVisitor(){
            @Override public void iterateEntity(            Entity e,            OsmDbAccessorContext ctx) throws SQLException {
              indexAddressCreator.indexAddressRelation((Relation)e,ctx);
            }
          }
);
          indexAddressCreator.commitToPutAllCities();
        }
      }
      if (indexPOI || indexAddress || indexMap) {
        progress.setGeneralProgress("[50 / 100]");
        progress.startTask(Messages.getString("IndexCreator.PROCESS_OSM_NODES"),accessor.getAllNodes());
        accessor.iterateOverEntities(progress,EntityType.NODE,new OsmDbVisitor(){
          @Override public void iterateEntity(          Entity e,          OsmDbAccessorContext ctx) throws SQLException {
            iterateMainEntity(e,ctx);
          }
        }
);
        progress.setGeneralProgress("[70 / 100]");
        progress.startTask(Messages.getString("IndexCreator.PROCESS_OSM_WAYS"),accessor.getAllWays());
        accessor.iterateOverEntities(progress,EntityType.WAY,new OsmDbVisitor(){
          @Override public void iterateEntity(          Entity e,          OsmDbAccessorContext ctx) throws SQLException {
            iterateMainEntity(e,ctx);
          }
        }
);
      }
      progress.setGeneralProgress("[85 / 100]");
      progress.startTask(Messages.getString("IndexCreator.PROCESS_OSM_REL"),accessor.getAllRelations());
      accessor.iterateOverEntities(progress,EntityType.RELATION,new OsmDbVisitor(){
        @Override public void iterateEntity(        Entity e,        OsmDbAccessorContext ctx) throws SQLException {
          iterateMainEntity(e,ctx);
        }
      }
);
      if (indexMap) {
        progress.setGeneralProgress("[90 / 100]");
        progress.startTask(Messages.getString("IndexCreator.INDEX_LO_LEVEL_WAYS"),indexMapCreator.getLowLevelWays());
        indexMapCreator.processingLowLevelWays(progress);
      }
      if (indexAddress) {
        progress.setGeneralProgress("[90 / 100]");
        progress.startTask(Messages.getString("IndexCreator.REGISTER_PCODES"),-1);
        indexAddressCreator.processingPostcodes();
      }
      if (indexMap) {
        progress.setGeneralProgress("[90 / 100]");
        progress.startTask(Messages.getString("IndexCreator.PACK_RTREE_MAP"),-1);
        indexMapCreator.packRtreeFiles(getRTreeMapIndexNonPackFileName(),getRTreeMapIndexPackFileName());
      }
      if (indexTransport) {
        progress.setGeneralProgress("[90 / 100]");
        progress.startTask(Messages.getString("IndexCreator.PACK_RTREE_TRANSP"),-1);
        indexTransportCreator.packRTree(getRTreeTransportStopsFileName(),getRTreeTransportStopsPackFileName());
      }
    }
    if (indexMap || indexAddress || indexTransport|| indexPOI) {
      if (mapFile.exists()) {
        mapFile.delete();
      }
      mapRAFile=new RandomAccessFile(mapFile,"rw");
      BinaryMapIndexWriter writer=new BinaryMapIndexWriter(mapRAFile);
      if (indexMap) {
        progress.setGeneralProgress("[95 of 100]");
        progress.startTask("Writing map index to binary file...",-1);
        indexMapCreator.writeBinaryMapIndex(writer,regionName);
      }
      if (indexAddress) {
        progress.setGeneralProgress("[95 of 100]");
        progress.startTask("Writing address index to binary file...",-1);
        indexAddressCreator.writeBinaryAddressIndex(writer,regionName,progress);
      }
      if (indexPOI) {
        progress.setGeneralProgress("[95 of 100]");
        progress.startTask("Writing poi index to binary file...",-1);
        indexPoiCreator.writeBinaryPoiIndex(writer,regionName,progress);
      }
      if (indexTransport) {
        progress.setGeneralProgress("[95 of 100]");
        progress.startTask("Writing transport index to binary file...",-1);
        indexTransportCreator.writeBinaryTransportIndex(writer,regionName,mapConnection);
      }
      progress.finishTask();
      writer.close();
      mapRAFile.close();
      log.info("Finish writing binary file");
    }
  }
 catch (  RuntimeException e) {
    log.error("Log exception",e);
    throw e;
  }
catch (  SQLException e) {
    log.error("Log exception",e);
    throw e;
  }
catch (  IOException e) {
    log.error("Log exception",e);
    throw e;
  }
catch (  SAXException e) {
    log.error("Log exception",e);
    throw e;
  }
 finally {
    try {
      accessor.closeReadingConnection();
      indexPoiCreator.commitAndClosePoiFile(lastModifiedDate);
      if (REMOVE_POI_DB) {
        indexPoiCreator.removePoiFile();
      }
      indexAddressCreator.closeAllPreparedStatements();
      indexTransportCreator.commitAndCloseFiles(getRTreeTransportStopsFileName(),getRTreeTransportStopsPackFileName(),deleteDatabaseIndexes);
      indexMapCreator.commitAndCloseFiles(getRTreeMapIndexNonPackFileName(),getRTreeMapIndexPackFileName(),deleteDatabaseIndexes);
      if (mapConnection != null) {
        mapConnection.commit();
        mapConnection.close();
        mapConnection=null;
        File tempDBFile=new File(workingDir,getTempMapDBFileName());
        if (mapDBDialect.databaseFileExists(tempDBFile) && deleteDatabaseIndexes) {
          mapDBDialect.removeDatabase(tempDBFile);
        }
      }
      if (dbConn != null) {
        dialect.commitDatabase(dbConn);
      }
      if (deleteOsmDB) {
        if (DBDialect.DERBY == dialect) {
          try {
            DriverManager.getConnection("jdbc:derby:;shutdown=true");
          }
 catch (          SQLException e) {
          }
        }
        dialect.removeDatabase(dbFile);
      }
    }
 catch (    SQLException e) {
      e.printStackTrace();
    }
catch (    RuntimeException e) {
      e.printStackTrace();
    }
  }
}
