{
  int type=MapRenderingTypes.encodeEntityWithType(e,level);
  if (type == 0) {
    return;
  }
  boolean writeIntoDB=true;
  boolean ring=true;
  if ((type & MapRenderingTypes.TYPE_MASK) == MapRenderingTypes.POLYLINE_TYPE && e instanceof Way && level > 0) {
    List<Node> nodes=((Way)e).getNodes();
    Node n=nodes.get(0);
    Node l=nodes.get(nodes.size() - 1);
    ring=l.getId() == n.getId();
    if (!ring) {
      writeIntoDB=false;
      Way start=null;
      if (lowLevelWaysEnd.containsKey(n.getId())) {
        for (        Way w : lowLevelWaysEnd.get(n.getId())) {
          int t=MapRenderingTypes.encodeEntityWithType(w,level);
          if (t == type && Algoritms.objectEquals(MapRenderingTypes.getEntityName(w,t),MapRenderingTypes.getEntityName(e,t))) {
            start=w;
            break;
          }
        }
      }
      if (start != null) {
        ring=start.getNodeIds().get(0) == l.getId();
        if (ring) {
          removeValueMap(lowLevelWaysEnd,n.getId(),start);
          removeValueMap(lowLevelWaysSt,l.getId(),start);
        }
 else {
          for (int i=1; i < nodes.size(); i++) {
            start.addNode(nodes.get(i));
          }
          removeValueMap(lowLevelWaysEnd,n.getId(),start);
          putIntoMap(lowLevelWaysEnd,l.getId(),start);
        }
      }
 else {
        long tempId=(e.getId() << 2) | level;
        start=new Way(tempId);
        for (        String t : e.getTagKeySet()) {
          start.putTag(t,e.getTag(t));
        }
        for (int i=0; i < nodes.size(); i++) {
          start.addNode(nodes.get(i));
        }
        putIntoMap(lowLevelWaysSt,n.getId(),start);
        putIntoMap(lowLevelWaysEnd,l.getId(),start);
      }
      if (!ring) {
        Way end=null;
        if (lowLevelWaysSt.containsKey(l.getId())) {
          for (          Way w : lowLevelWaysSt.get(l.getId())) {
            int t=MapRenderingTypes.encodeEntityWithType(w,level);
            if (t == type && Algoritms.objectEquals(MapRenderingTypes.getEntityName(w,t),MapRenderingTypes.getEntityName(e,t))) {
              end=w;
              break;
            }
          }
        }
        if (end != null) {
          Long ll=end.getNodeIds().get(end.getNodeIds().size() - 1);
          removeValueMap(lowLevelWaysSt,l.getId(),end);
          removeValueMap(lowLevelWaysEnd,ll,end);
          ring=ll == n.getId();
          if (!ring) {
            for (int i=1; i < end.getNodes().size(); i++) {
              start.addNode(end.getNodes().get(i));
            }
            removeValueMap(lowLevelWaysEnd,l.getId(),start);
            putIntoMap(lowLevelWaysEnd,ll,start);
          }
        }
      }
    }
  }
  if (writeIntoDB || ring) {
    writeEntityToMapDatabase(e,e.getId(),false,level);
  }
}
