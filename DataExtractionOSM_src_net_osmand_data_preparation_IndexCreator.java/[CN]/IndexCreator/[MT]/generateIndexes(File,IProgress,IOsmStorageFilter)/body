{
  if (readFile != null && regionName == null) {
    int i=readFile.getName().indexOf('.');
    if (i > -1) {
      regionName=Algoritms.capitalizeFirstLetterAndLowercase(readFile.getName().substring(0,i));
    }
  }
  try {
    Class.forName("org.sqlite.JDBC");
  }
 catch (  ClassNotFoundException e) {
    log.error("Illegal configuration",e);
    throw new IllegalStateException(e);
  }
  boolean loadFromPath=dbFile == null || !dbFile.exists();
  if (dbFile == null) {
    dbFile=new File(workingDir,TEMP_NODES_DB);
    if (dbFile.exists()) {
      dbFile.delete();
    }
  }
  dbConn=DriverManager.getConnection("jdbc:sqlite:" + dbFile.getAbsolutePath());
  cities.clear();
  cityManager.clear();
  postalCodeRelations.clear();
  int allRelations=100000;
  int allWays=1000000;
  int allNodes=10000000;
  if (loadFromPath) {
    InputStream stream=new FileInputStream(readFile);
    InputStream streamFile=stream;
    long st=System.currentTimeMillis();
    if (readFile.getName().endsWith(".bz2")) {
      if (stream.read() != 'B' || stream.read() != 'Z') {
        throw new RuntimeException("The source stream must start with the characters BZ if it is to be read as a BZip2 stream.");
      }
 else {
        stream=new CBZip2InputStream(stream);
      }
    }
    if (progress != null) {
      progress.startTask("Loading file " + readFile.getAbsolutePath(),-1);
    }
    OsmBaseStorage storage=new OsmBaseStorage();
    storage.setSupressWarnings(DataExtractionSettings.getSettings().isSupressWarningsForDuplicatedId());
    if (addFilter != null) {
      storage.getFilters().add(addFilter);
    }
    NewDataExtractionOsmFilter filter=new NewDataExtractionOsmFilter();
    try {
      progress.setGeneralProgress("[50 of 100]");
      filter.initDatabase();
      storage.getFilters().add(filter);
      storage.parseOSM(stream,progress,streamFile,false);
      filter.finishLoading();
      allNodes=filter.getAllNodes();
      allWays=filter.getAllWays();
      allRelations=filter.getAllRelations();
      if (log.isInfoEnabled()) {
        log.info("File parsed : " + (System.currentTimeMillis() - st));
      }
      progress.finishTask();
    }
  finally {
      if (log.isInfoEnabled()) {
        log.info("File indexed : " + (System.currentTimeMillis() - st));
      }
    }
  }
  progress.setGeneralProgress("[90 of 100]");
  pselectNode=dbConn.prepareStatement("select * from node where id = ?");
  pselectWay=dbConn.prepareStatement("select * from ways where id = ? order by ord");
  pselectRelation=dbConn.prepareStatement("select * from relations where id = ? order by ord");
  pselectTags=dbConn.prepareStatement("select key, value from tags where id = ? and type = ?");
  if (indexMap) {
    mapFile=new File(workingDir,getMapFileName());
    if (mapFile.exists()) {
      mapFile.delete();
    }
    mapFile.getParentFile().mkdirs();
    mapConnection=DriverManager.getConnection("jdbc:sqlite:" + mapFile.getAbsolutePath());
    DataIndexWriter.createMapIndexStructure(mapConnection);
    mapWaysStat=DataIndexWriter.createStatementMapWaysInsert(mapConnection);
    mapWayLocsStat=DataIndexWriter.createStatementMapWaysLocationsInsert(mapConnection);
    mapWayLocsStatLevel2=DataIndexWriter.createStatementMapWaysLocationsInsertLevel2(mapConnection);
    mapWayLocsStatLevel3=DataIndexWriter.createStatementMapWaysLocationsInsertLevel3(mapConnection);
    pStatements.put(mapWaysStat,0);
    pStatements.put(mapWayLocsStat,0);
    pStatements.put(mapWayLocsStatLevel2,0);
    pStatements.put(mapWayLocsStatLevel3,0);
    mapConnection.setAutoCommit(false);
  }
  if (indexPOI) {
    poiIndexFile=new File(workingDir,getPoiFileName());
    if (poiIndexFile.exists()) {
      poiIndexFile.delete();
    }
    poiIndexFile.getParentFile().mkdirs();
    poiConnection=DriverManager.getConnection("jdbc:sqlite:" + poiIndexFile.getAbsolutePath());
    DataIndexWriter.createPoiIndexStructure(poiConnection);
    poiPreparedStatement=DataIndexWriter.createStatementAmenityInsert(poiConnection);
    pStatements.put(poiPreparedStatement,0);
    poiConnection.setAutoCommit(false);
  }
  if (indexTransport) {
    transportIndexFile=new File(workingDir,getTransportFileName());
    if (transportIndexFile.exists()) {
      transportIndexFile.delete();
    }
    transportIndexFile.getParentFile().mkdirs();
    transportConnection=DriverManager.getConnection("jdbc:sqlite:" + transportIndexFile.getAbsolutePath());
    DataIndexWriter.createTransportIndexStructure(transportConnection);
    transRouteStat=transportConnection.prepareStatement(IndexConstants.generatePrepareStatementToInsert(IndexTransportRoute.getTable(),IndexTransportRoute.values().length));
    transRouteStopsStat=transportConnection.prepareStatement(IndexConstants.generatePrepareStatementToInsert(IndexTransportRouteStop.getTable(),IndexTransportRouteStop.values().length));
    transStopsStat=transportConnection.prepareStatement(IndexConstants.generatePrepareStatementToInsert(IndexTransportStop.getTable(),IndexTransportStop.values().length));
    pStatements.put(transRouteStat,0);
    pStatements.put(transRouteStopsStat,0);
    pStatements.put(transStopsStat,0);
    transportConnection.setAutoCommit(false);
  }
  if (indexAddress) {
    addressIndexFile=new File(workingDir,getAddressFileName());
    if (addressIndexFile.exists()) {
      addressIndexFile.delete();
    }
    addressIndexFile.getParentFile().mkdirs();
    addressConnection=DriverManager.getConnection("jdbc:sqlite:" + addressIndexFile.getAbsolutePath());
    DataIndexWriter.createAddressIndexStructure(addressConnection);
    addressCityStat=addressConnection.prepareStatement(IndexConstants.generatePrepareStatementToInsert(IndexCityTable.getTable(),IndexCityTable.values().length));
    addressStreetStat=addressConnection.prepareStatement(IndexConstants.generatePrepareStatementToInsert(IndexStreetTable.getTable(),IndexStreetTable.values().length));
    addressSearchStreetStat=addressConnection.prepareStatement("SELECT " + IndexStreetTable.ID.name() + " FROM "+ IndexStreetTable.getTable()+ " WHERE ? = "+ IndexStreetTable.CITY.name()+ " AND ? ="+ IndexStreetTable.NAME.name());
    addressSearchBuildingStat=addressConnection.prepareStatement("SELECT " + IndexBuildingTable.ID.name() + " FROM "+ IndexBuildingTable.getTable()+ " WHERE ? = "+ IndexBuildingTable.ID.name());
    addressSearchStreetNodeStat=addressConnection.prepareStatement("SELECT " + IndexStreetNodeTable.WAY.name() + " FROM "+ IndexStreetNodeTable.getTable()+ " WHERE ? = "+ IndexStreetNodeTable.WAY.name());
    addressBuildingStat=addressConnection.prepareStatement(IndexConstants.generatePrepareStatementToInsert(IndexBuildingTable.getTable(),IndexBuildingTable.values().length));
    addressStreetNodeStat=addressConnection.prepareStatement(IndexConstants.generatePrepareStatementToInsert(IndexStreetNodeTable.getTable(),IndexStreetNodeTable.values().length));
    pStatements.put(addressCityStat,0);
    pStatements.put(addressStreetStat,0);
    pStatements.put(addressStreetNodeStat,0);
    pStatements.put(addressBuildingStat,0);
    pStatements.put(addressSearchBuildingStat,0);
    pStatements.put(addressSearchStreetNodeStat,0);
    pStatements.put(addressSearchStreetStat,0);
    addressConnection.setAutoCommit(false);
  }
  if (normalizeStreets) {
    normalizeDefaultSuffixes=DataExtractionSettings.getSettings().getDefaultSuffixesToNormalizeStreets();
    normalizeSuffixes=DataExtractionSettings.getSettings().getSuffixesToNormalizeStreets();
  }
  if (indexAddress) {
    if (!loadFromPath) {
      allNodes=iterateOverEntities(progress,EntityType.NODE,allNodes,STEP_CITY_NODES);
    }
    for (    City c : cities.values()) {
      DataIndexWriter.writeCity(addressCityStat,pStatements,c,BATCH_SIZE);
    }
    if (pStatements.get(addressCityStat) > 0) {
      addressCityStat.executeBatch();
      pStatements.put(addressCityStat,0);
      addressConnection.commit();
    }
  }
  if (indexAddress) {
    allRelations=iterateOverEntities(progress,EntityType.RELATION,allRelations,STEP_ADDRESS_RELATIONS);
    if (pStatements.get(addressBuildingStat) > 0) {
      addressBuildingStat.executeBatch();
      pStatements.put(addressBuildingStat,0);
    }
    if (pStatements.get(addressStreetNodeStat) > 0) {
      addressStreetNodeStat.executeBatch();
      pStatements.put(addressStreetNodeStat,0);
    }
    addressConnection.commit();
  }
  iterateOverAllEntities(progress,allNodes,allWays,allRelations,STEP_MAIN);
  if (indexAddress && !postalCodeRelations.isEmpty()) {
    if (pStatements.get(addressBuildingStat) > 0) {
      addressBuildingStat.executeBatch();
      pStatements.put(addressBuildingStat,0);
      addressConnection.commit();
    }
    progress.startTask("Registering postcodes...",-1);
    PreparedStatement pstat=addressConnection.prepareStatement("UPDATE " + IndexBuildingTable.getTable() + " SET "+ IndexBuildingTable.POSTCODE.name()+ " = ? WHERE "+ IndexBuildingTable.ID.name()+ " = ?");
    pStatements.put(pstat,0);
    for (    Relation r : postalCodeRelations) {
      String tag=r.getTag(OSMTagKey.POSTAL_CODE);
      for (      EntityId l : r.getMemberIds()) {
        pstat.setString(1,tag);
        pstat.setLong(2,l.getId());
        DataIndexWriter.addBatch(pStatements,pstat,BATCH_SIZE);
      }
    }
  }
  try {
    if (pselectNode != null) {
      pselectNode.close();
    }
    if (pselectWay != null) {
      pselectWay.close();
    }
    if (pselectRelation != null) {
      pselectRelation.close();
    }
    if (pselectTags != null) {
      pselectTags.close();
    }
    for (    PreparedStatement p : pStatements.keySet()) {
      if (pStatements.get(p) > 0) {
        p.executeBatch();
      }
      p.close();
    }
    if (poiConnection != null) {
      poiConnection.commit();
      poiConnection.close();
      if (lastModifiedDate != null) {
        poiIndexFile.setLastModified(lastModifiedDate);
      }
    }
    if (transportConnection != null) {
      transportConnection.commit();
      transportConnection.close();
      if (lastModifiedDate != null) {
        transportIndexFile.setLastModified(lastModifiedDate);
      }
    }
    if (mapConnection != null) {
      mapConnection.commit();
      mapConnection.close();
      if (lastModifiedDate != null) {
        mapFile.setLastModified(lastModifiedDate);
      }
    }
    if (addressConnection != null) {
      addressConnection.commit();
      addressConnection.close();
      if (lastModifiedDate != null) {
        addressIndexFile.setLastModified(lastModifiedDate);
      }
    }
    dbConn.close();
  }
 catch (  SQLException e) {
  }
}
