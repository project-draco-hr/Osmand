{
  if (!mHelper.subscriptionsSupported()) {
    complain("Subscriptions not supported on your device yet. Sorry!");
    if (callbacks != null) {
      callbacks.onError("Subscriptions not supported on your device yet. Sorry!");
    }
    if (stopAfterResult) {
      stop();
    }
    return;
  }
  if (callbacks != null) {
    callbacks.showHideProgress(true);
  }
  new AsyncTask<Void,Void,String>(){
    private String userId;
    @Override protected String doInBackground(    Void... params){
      userId=ctx.getSettings().BILLING_USER_ID.get();
      if (Algorithms.isEmpty(userId)) {
        try {
          return sendRequest("http://download.osmand.net/subscription/register?email=" + URLEncoder.encode(email,"UTF-8") + "&visibleName="+ URLEncoder.encode(userName,"UTF-8")+ "&preferredCountry="+ URLEncoder.encode(country,"UTF-8")+ (Algorithms.isEmpty(userId) ? "&status=new" : ""),"POST","Requesting userId...");
        }
 catch (        Exception e) {
          Log.e(TAG,e.getMessage());
          return null;
        }
      }
 else {
        return null;
      }
    }
    @Override protected void onPostExecute(    String response){
      if (Algorithms.isEmpty(userId)) {
        Log.d(TAG,"Response=" + response);
        if (response == null) {
          if (callbacks != null) {
            callbacks.showHideProgress(false);
            callbacks.onError("Cannot retrieve userId from server.");
          }
          if (stopAfterResult) {
            stop();
          }
          return;
        }
 else {
          try {
            JSONObject obj=new JSONObject(response);
            userId=obj.getString("userid");
            ctx.getSettings().BILLING_USER_ID.set(userId);
            Log.d(TAG,"UserId=" + userId);
          }
 catch (          JSONException e) {
            if (callbacks != null) {
              callbacks.showHideProgress(false);
              callbacks.onError("JSON parsing error: " + e.getMessage());
            }
            if (stopAfterResult) {
              stop();
            }
          }
        }
      }
      if (!Algorithms.isEmpty(userId)) {
        Log.d(TAG,"Launching purchase flow for live updates subscription for userId=" + userId);
        String payload=userId;
        mHelper.launchPurchaseFlow(activity,SKU_LIVE_UPDATES,IabHelper.ITEM_TYPE_SUBS,RC_REQUEST,mPurchaseFinishedListener,payload);
      }
 else {
        if (callbacks != null) {
          callbacks.showHideProgress(false);
          callbacks.onError("Empty userId");
        }
        if (stopAfterResult) {
          stop();
        }
      }
    }
  }
.execute((Void)null);
}
